/**
 * This is the Authentication Module
 *
 * Applied Styles: [Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Factory and Constants
 */

(function() {

    angular
        .module('cid.core.authentication', [
            'ngCookies',
            'cid.app.constants',
            'cid.service.logger',
            'Base64EncoderService'
        ])
        .constant('AUTH_EVENTS', {
            loginSuccess: 'login-success',
            loginFailed: 'login-failed',
            logoutSuccess: 'logout-success',
            sessionTimeout: 'session-timeout',
            notAuthenticated: 'not-authenticated',
            notAuthorized: 'not-authorized'
        })
        .factory('Auth', AuthenticationService);

    AuthenticationService.$inject = ['Logger', '$http', '$rootScope', '$state', '$cookies', 'Base64', 'GLOBAL', 'AUTH_EVENTS'];

    function AuthenticationService(Logger, $http, $rootScope, $state, $cookies, Base64, GLOBAL, AUTH_EVENTS) {
        // Public Interface
        var currentUser;
        var DEBUG = GLOBAL.DEBUG;
        var STORAGE_KEY = 'auth';
        var COOKIE_NAME = 'cid.current-user';

        var factory = {
            login: login,
            logout: logout,
            storeCredentials: storeCredentials,
            isAuthenticated: isAuthenticated,
            isAuthorised: isAuthorised,
            getUser: getUser,
            refreshUser: refreshCredentials
        };

        return factory;


        // Private Interface

        /**
         * The authenticate method is used to submit a HTTP request to the API server to retrieve check the user credentials
         *
         * @param  {String}   basicAuth A basic authentication token to be used for the authentication request
         * @param  {Function} callback  A callback function that is called after the authentication request
         */
        function authenticate(basicAuth, callback) {
            var req = {
                method: 'GET',
                url: GLOBAL.USER,
                headers: {
                    'Authorization': "Basic " + basicAuth
                }
            };

            $http(req).then(loginSuccessful, loginFailure);

            function loginSuccessful(response) {
                storeCredentials(basicAuth, response.data);
                $rootScope.$emit(AUTH_EVENTS.loginSuccess, response.data);
                if (callback !== undefined && typeof callback === 'function') {
                    callback(response);
                }
            }

            function loginFailure(response) {
                $rootScope.$emit(AUTH_EVENTS.loginFailed, null);
                callback(response);
                if (callback !== undefined && typeof callback === 'function') {
                    callback(response);
                }
            }
        }

        /**
         * The login method is used to create a basic auth token from a credentials object then pass this to the authenticate
         * method
         *
         * @param  {Object}   credentials A credentials object should contain a username and password.
         * @param  {Function} callback    A callback function to be called after the authentication has been attempted.
         */
        function login(credentials, callback) {
            var basicAuth = credentials ? Base64.encode(credentials.username + ":" + credentials.password) : "";
            authenticate(basicAuth, callback);
        }

        /**
         * This method is used to log the current user out of the system. This is achieved by clearing any stored
         * credentials from memory and clearing any authentication cookies.
         *
         * @return {void}
         */
        function logout() {
            clearCredentials();
        }

        /**
         * This methods is used to retrieve the current user and return it to be used.
         *
         * @return {Object} the current user data
         */
        function getUser() {
            loadCredentials();
            return currentUser;
        }

        /**
         * This method is used to set the authentication headers for basic authentication using the http service.
         *
         * @param {string} authdata The authentication token to use for setting the authentication header. If undefined
         *                          or null the authentication header is removed.
         */
        function setAuthHeader(authdata) {
            if (authdata !== undefined || authdata !== null) {
                $http.defaults.headers.common.Authorization = 'Basic ' + authdata;
            } else {
                delete $http.defaults.headers.common.Authorization;
            }

        }

        /**
         * This method is used to store the credentials and current user data into the local cookie. After storing these details
         * the authentication header is set.
         *
         * @param  {Object|string}  credentials If an object is supplied with a username and password these are used to create the authdata,
         *                                      otherwise an authdata string is expected.
         * @param  {Object} user        A user object containing the data for the current user to store
         */
        function storeCredentials(credentials, user) {
            var authdata;
            if (credentials.username !== undefined && credentials.password !== undefined) {
                authdata = Base64.encode(credentials.username + ':' + credentials.password);
            } else {
                authdata = credentials;
            }
            currentUser = user;
            currentUser.authdata = authdata;
            Logger.debug(currentUser);
            setAuthHeader(authdata);
            var expiryDate = new Date();
            expiryDate.setDate(expiryDate.getDate() + 7);
            var options = {
                expires: expiryDate
            };
            $cookies.putObject(COOKIE_NAME, currentUser, options);
        }

        /**
         * This method is used to retrieve the crednetials and user data from the local cookie. After retireving these details
         * the authentication header is set.
         *
         */
        function loadCredentials() {
            Logger.debug('II Loading credentials from cookie');
            var cookie = $cookies.getObject(COOKIE_NAME);
            if (cookie !== undefined && cookie.authdata !== undefined) {
                currentUser = cookie;
                setAuthHeader(cookie.authdata);
            } else {
                Logger.debug('WW No Cookie Found or Cookie Data in wrong format');
            }
        }

        /**
         * This method is used to refresh the user details from the API.
         */
        function refreshCredentials() {
            Logger.debug('II Refreshing User Credentials');
            // TODO: The refreshCredentials function needs to refresh the user roles and any other details
            $http.get(GLOBAL.USER).then(function(response) {
                storeCredentials(currentUser.authdata, response.data);
            });
        }

        /**
         * This method is used to clear any stored credentials from the local cookie and from memory.
         */
        function clearCredentials() {
            Logger.debug('Clearing User Credentials');
            $cookies.remove(COOKIE_NAME);
            delete $http.defaults.headers.common.Authorization;
            currentUser = undefined;
        }

        /**
         * This method is used to check the user is currently authenticated.
         *
         * @return {Boolean} True if authenticated, false if not.
         */
        function isAuthenticated() {
            if (!currentUser) {
                loadCredentials();
            }
            if (currentUser && currentUser !== undefined) {
                if (DEBUG) {
                    Logger.log('II User Authenticated');
                }
                return true;
            } else {
                Logger.debug('II User Unauthenticated');
                $rootScope.$emit(AUTH_EVENTS.notAuthenticated, null);
                return false;
            }
        }

        /**
         * This method is used to check if the current user has the specified role(s)
         *
         * @param  {Array|String}  roles an array of strings or a single string that represent the roles to check
         *                               if the user has.
         * @return {Boolean}       True if the user has any of the supplied roles
         */
        function isAuthorised(roles) {
            if (roles && currentUser !== undefined) {
                Logger.debug('II Checking if user is authorised');
                if (typeof roles === "string") {
                    // var userHasRole = ($.inArray(roles, currentUser.roles) > -1);
                    var userHasRole = hasRole(roles);
                    return userHasRole;
                }
                if (roles instanceof Array) {
                    return hasAnyRole(roles);
                }
                $rootScope.$emit(AUTH_EVENTS.notAuthorized, null);
                return false;
            } else {
                if (!roles) {
                    Logger.debug('II No roles specified');
                    return true;
                }
                Logger.debug('WW Not Authorised: No Roles defined or No Current User loaded');
                $rootScope.$emit(AUTH_EVENTS.notAuthorized, null);
                return false;
            }
        }

        /**
         * This method is used to check if the currentUser variable has the specified role.
         *
         * @param  {String}  role A string containing the role to search
         * @return {Boolean}      True if the role was found. False if not found or roles array is not defined.
         */
        function hasRole(role) {
            var _user = currentUser;
            return _user.roles && _user.roles.indexOf(role) !== -1;
        }

        /**
         * This method is used to check if the currentUser variable has any of the roles specified
         * in the roles array passed.
         *
         * @param  {Array}  roles  An array of strings with the role names.
         * @return {Boolean}       True if any of the roles were found. False if not found or roles array is
         *                              not defined.
         */
        function hasAnyRole(roles) {
            if (roles.length === 0) {
                return true;
            }
            for (var i = 0; i < roles.length; i++) {
                if (hasRole(roles[i])) {
                    return true;
                }
            }
            return false;
        }

    }

})();
;/**
 * This is the Authentication Module
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y070]
 *
 * @type Directive
 */

(function() {
    angular
        .module('cid.core.authentication')
        .directive('permission', PermissionDirective);

    PermissionDirective.$inject = ['Auth', 'Logger'];

    function PermissionDirective(Auth, Logger) {
        return {
            restrict: 'A',
            bindToController: {
                permission: '=',
                permissionNot: '=?'
            },
            controller: function($scope, $element, Auth) {
                var vm = this;
                $element.hide();
                $scope.$watch(Auth.isAuthenticated, function() {
                    Logger.debug('### PERMISSION CHECK ###');
                    Logger.debug($scope);
                    Logger.debug($element);
                    if (Auth.isAuthorised(vm.permission)) {
                        $element.show();
                    }
                    if (vm.permissionNot !== undefined && vm.permissionNot !== null && Auth.isAuthorised(vm.permissionNot)) {
                        $element.hide();
                    }
                });
            }
        };
    }

})();
;(function() {

    angular
        .module('cid.app.config', [])
        .factory('$cidConfig', CIDConfigFactory);

    function CIDConfigFactory() {
        return {
            datepickerOptions: {
                datepickerMode: 'day',
                formatDay: 'dd',
                formatMonth: 'MM',
                formatYear: 'yyyy',
                startingDay: 1
            }
        };
    }
})();
;(function() {

    angular
        .module('cid.app.constants', ['cid.app.environment'])
        .factory('GLOBAL', GlobalVariablesFactory);

    GlobalVariablesFactory.$inject = ['EnvConfig'];

    function GlobalVariablesFactory(EnvConfig) {
        return {
            DEBUG: (EnvConfig.debug === "true"),
            API: (EnvConfig.apiUrl !== undefined ? EnvConfig.apiUrl : '') + "/api",
            LOGIN: (EnvConfig.apiUrl !== undefined ? EnvConfig.apiUrl : '') + "/login",
            USER: (EnvConfig.apiUrl !== undefined ? EnvConfig.apiUrl : '') + "/user",
            REPORT_URL: EnvConfig.reportUrl,
            STUDENT_IMAGES_URL: EnvConfig.studentImagesUrl,
            PROFILE: EnvConfig.profile,
            DEFAULTS: {
                REPORT_FORMAT: 'PDF',
                REPORT_TOOLBAR: true
            },
            ENV: EnvConfig,
        };
    }
})();
;/**
 * This module is used to set up the applications environment. This will load a configuration file to initiate the
 * applications default settings.
 *
 * Applied Style: [Y001, Y002, Y010, Y020, Y024]
 *
 * @author Michael Horgan
 */

(function() {
    angular
        .module('cid.app.environment', [])
        .provider("EnvConfig", environmentConfigurationProvider);

    function environmentConfigurationProvider() {
        var envConfig = {};

        this.$get = loadConfiguration;

        function loadConfiguration() {
            var q = jQuery.ajax({
                type: 'GET',
                url: '/config.json',
                cache: false,
                async: false,
                contentType: 'application/json',
                dataType: 'json'
            });
            if (q.status === 200) {
                angular.extend(envConfig, angular.fromJson(q.responseText));
            }
            return envConfig;
        }
    }
})();
;(function() {
    angular
        .module('cid.user-settings', [
            'ngCookies',
            'cid.service.logger',
            'cid.app.constants',
        ])
        .factory('USER', UserSettingsFactory);

    UserSettingsFactory.$inject = ['$cookies', 'Logger', 'GLOBAL'];

    function UserSettingsFactory($cookies, Logger, GLOBAL) {
        var DEBUG = GLOBAL.DEBUG;
        var COOKIE_NAME = 'cid.user-settings';
        var expiryDate = new Date();
        expiryDate.setDate(expiryDate.getDate() + 7);
        var settings = {
            debugInfoEnabled: false,
            displaySideBar: true
        };
        var options = {
            expires: expiryDate
        };

        // Public Interface

        var service = {
            load: load,
            save: save,
            clear: clear,
            refresh: refresh,
            setSetting: setSetting,
            getSetting: getSetting,
        };

        return service;

        // Private Interface

        function load() {
            Logger.debug('II Loading User Settings');
            var loadedSettings = $cookies.getObject(COOKIE_NAME);
            if (loadedSettings !== undefined) {
                settings = $cookies.getObject(COOKIE_NAME);
            }
            return settings;
        }

        function save() {
            Logger.debug('II Saving User Settings');
            $cookies.putObject(COOKIE_NAME, settings, options);
        }

        function refresh() {
            load();
            save();
        }

        function clear() {
            Logger.debug('II Clearing User Settings');
            settings = {};
            $cookies.remove(COOKIE_NAME);
        }

        function setSetting(key, value) {
            Logger.debug("II Setting '" + key + "' has being set to: " + value);
            if (!settings) settings = {};
            settings[key] = value;
            save();
        }

        function getSetting(key) {
            Logger.debug("II Setting '" + key + "' being retrieved with value: '" + settings[key] + "'");
            return settings[key];
        }

    }

})();
;(function() {

    angular
        .module('cid.app.variables', [])
        .factory('APP', variablesFactory);

    variablesFactory.$inject = ['$rootScope'];

    function variablesFactory($rootScope) {
        var _currentYear = {};

        var _currentState;
        var _currentStateParams;

        var _previousState;
        var _previousStateParams;


        return {
            setYear: function(data) {
                $rootScope.$emit('year-changed', data);
                _currentYear = data;
            },
            getYear: function() {
                return _currentYear;
            },
            setCurrentState: function(data) {
                _currentState = data;
            },
            getCurrentState: function() {
                return _currentState;
            },
            setCurrentStateParams: function(data) {
                _currentStateParams = data;
            },
            getCurrentStateParams: function() {
                return _currentStateParams;
            },
            setPreviousState: function(data) {
                _previousState = data;
            },
            getPreviousState: function() {
                return _previousState;
            },
            setPreviousStateParams: function(data) {
                _previousStateParams = data;
            },
            getPreviousStateParams: function() {
                return _previousStateParams;
            },
        };
    }
})();
;/**
 * This is the factory definition for the AcademicYear Data Service. This defines how to handle data about AcademicYear objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */
(function() {

    angular
        .module('AcademicYearService', ['ui-notification'])
        .factory('AcademicYear', academicYearFactory);

    academicYearFactory.$inject = ['$http', 'GLOBAL', 'Notification'];

    function academicYearFactory($http, GLOBAL, Notification) {
        // Variable and Constants
        var url = GLOBAL.API + '/academic-years/';

        // Public Interface
        var factory = {
            query: getAll,
            get: getById,
            getCurrent: getCurrent,
            create: create,
            save: save

        };

        return factory;

        // Private Interface

        /**
         * This method is used to retrieve all the AcademicYears from the API collection.
         *
         * @return {AcademicYear} An array of AcademicYear objects.
         */
        function getAll() {
            return $http.get(url);
        }
        /**
         * This method returns an individual AcademicYear object from the API based on the ID supplied.
         *
         * @param  {int} id The ID for the AcademicYear object to retrieve.
         * @return {AcademicYear} An AcademicYear object representation for year idefieid by the ID supplied.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method returns the "Current" AcademicYear.
         *
         * @return {AcademicYear} An AcademicYear object that represents the current academic year.
         */
        function getCurrent() {
            return $http.get(url + 'current');
        }

        /**
         * This method is used to create a new instance of an AcademicYear object in the database by POSTing the
         * required data to the API.
         *
         * @param  {AcademicYear} academicYear An AcademicYear object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depnding on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no AcademicYear data is provided then the method returns null.
         */
        function create(academicYear, callback) {
            if (academicYear) {
                return $http.post(url, academicYear).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    Notification.error("Error:" + response.data.message);
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing AcademicYear object.
         *
         * @param  {AcademicYear} academicYear An AcademicYear object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depnding on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no AcademicYear data is provided then the method returns null.
         */
        function save(academicYear, callback) {
            if (academicYear && academicYear.id) {
                return $http.put(url + academicYear.id, academicYear).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the Address Data Service. This defines how to handle data about Address objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */
(function() {

    angular
        .module('AddressService', [])
        .factory('Address', addressFactory);

    addressFactory.$inject = ['$http', 'GLOBAL'];

    function addressFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/addresses/';

        // Public Interface
        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save

        };

        return factory;

        //Private Interface
        /**
         * This method is used to retrieve all the Address from the API collection.
         *
         * @return {Address} An array of Address objects.
         */
        function getAll() {
            return $http.get(url);
        }


        /**
         * This method is used to retrieve an instance of a Address from the API collection.
         * @param  {int} addressId that is to be retrieved.
         * @return {Address} An Address object as identified by the addressId.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an Address object in the database by POSTing the
         * required data to the API.
         *
         * @param  {Address} address An Address object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Address data is provided then the method returns null.
         */
        function create(address, callback) {
            if (address) {
                return $http.post(url, address).then(function(response) {
                    if (callback) {
                        callback(response.data);
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }


        /**
         * This method is used to save changes to an existing Address object.
         *
         * @param  {Address} address An Address object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Address data is provided then the method returns null.
         */
        function save(address, callback) {
            if (address && address.id) {
                return $http.put(url + address.id, address).then(
                    function(response) {
                        if (callback) {
                            callback(response.data);
                        }
                        return response.data;
                    },
                    function(response) {
                        return {
                            status: response.status,
                            error: response.data
                        };
                    });
            } else {
                return null;
            }

        }
    }

})();
;(function() {

    angular.module('AdmissionsServices', [
        'StudentCollegeFundPaidService',
        'cid.service.data.admission.application-form'
    ]);

})();
;//

(function() {

    angular
        .module('cid.service.data.admission.application-form', [])
        .factory('ApplicationForm', ApplicationForm);

    ApplicationForm.$inject = ['$http', 'GLOBAL'];

    function ApplicationForm($http, GLOBAL) {
        var url = GLOBAL.API + '/applications/';

        var service = {};
        service.get = getById;
        service.search = search;
        return service;

        // Private Interface

        function getById(id) {
            return $http.get(url + id);
        }

        function search(search) {
            return $http.get(url + '/search/' + search);
        }

    }

})();
;(function() {

    angular
        .module('StudentCollegeFundPaidService', [])
        .factory('StudentCollegeFundPaid', studentCollegeFundPaid);

    studentCollegeFundPaid.$inject = ['$http', 'GLOBAL'];


    function studentCollegeFundPaid($http, GLOBAL) {

        // Variable and Constants
        var url = GLOBAL.API + '/students/';

        var factory = {

            get: getById,
            save: save

        };

        return factory;


        // get method
        function getById(studentId) {
            if (studentId)
                return $http.get(url + studentId + '/collegeFund');
            else
                return null;
        }


        // put method
        function save(studentCollegeFundPaid, callback) {
            if (studentCollegeFundPaid && studentCollegeFundPaid.studentId) {
                return $http.put(url + studentCollegeFundPaid.studentId + '/collegeFund', studentCollegeFundPaid).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }

})();
;/**
 * This is the factory definition for the Address Data Service. This defines how to handle data about Address objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */
(function() {

    angular
        .module('AimTypeService', [])
        .factory('AimType', aimTypeFactory);

    aimTypeFactory.$inject = ['$http', 'GLOBAL'];

    function aimTypeFactory($http, GLOBAL) {

        var self = this;
        var url = GLOBAL.API + '/aimTypes/';

        //Pubic Interface		
        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;


        //Private Interface
        /**
         * This method is used to retrieve all the AimType from the API collection.
         *
         * @return {AimType} An array of AimType objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a AimType from the API collection.
         * @param  {int} id of the AimType that is to be retrieved. 
         * @return {AimType} An AimType object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an AimType object in the database by POSTing the
         * required data to the API.
         *
         * @param  {AimType} aimType An AimType object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no AimType data is provided then the method returns null.
         */
        function create(aimType, callback) {
            if (aimType) {
                return $http.post(url, aimType).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing AimType object.
         *
         * @param  {AimType} aimType An AimType object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no AimType data is provided then the method returns null.
         */
        function save(aimType, callback) {
            if (aimType && aimType.id) {
                return $http.put(url + aimType.id, aimType).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

    }


})();
;/**
 * This is the factory definition for the AcademicYear Data Service. This defines how to handle data about AcademicYear objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */
(function() {

    angular
        .module('ApplicationStatusService', [])
        .factory('ApplicationStatus', applicationStatusFactory);

    applicationStatusFactory.$inject = ['$http', 'GLOBAL'];

    function applicationStatusFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/applicationStatuses/';

        //Public Interface
        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;

        //Private Interface
        /**
         * This method is used to retrieve all the ApplicationStatus from the API collection.
         *
         * @return {ApplicationStatus} An array of ApplicationStatus objects.
         */
        function getAll() {
            return $http.get(url);
        }


        /**
         * This method returns an individual ApplicationStatus object from the API based on the ID supplied.
         *
         * @param  {int} id The ID for the ApplicationStatus object to retrieve.
         * @return {ApplicationStatus} An ApplicationStatus Object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an ApplicationStatus object in the database by POSTing the
         * required data to the API.
         *
         * @param  {ApplicationStatus} applicationStatus An ApplicationStatus object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no ApplicationStatus data is provided then the method returns null.
         */
        function create(applicationStatus, callback) {
            if (applicationStatus) {
                return $http.post(url, applicationStatus).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }


        /**
         * This method is used to save changes to an existing ApplicationStatus object.
         *
         * @param  {ApplicationStatus} applicationStatus An ApplicationStatus object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no ApplicationStatus data is provided then the method returns null.
         */
        function save(applicationStatus, callback) {
            if (applicationStatus && applicationStatus.id) {
                return $http.put(url + applicationStatus.id, applicationStatus).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }


    }



})();
;/**
 * This is the factory definition for the AttendanceCode Data Service. This defines how to handle data about AttendanceCode objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('AttendanceCodeService', [])
        .factory('AttendanceCode', attendanceCodeFactory);

    attendanceCodeFactory.$inject = ['$http', 'GLOBAL'];

    function attendanceCodeFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/attendanceCodes/';

        // Public Interface
        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;

        //Private Interface
        /**
         * This method is used to retrieve all the AttendanceCode from the API collection.
         *
         * @return {AttendanceCode} An array of AttendanceCode objects.
         */
        function getAll() {
            return $http.get(url);
        }


        /**
         * This method is used to retrieve an instance of a AttendanceCode from the API collection.
         * @param  {int} id of the AttendanceCode object that is to be retrieved. 
         * @return {AttendanceCode} An AttendanceCode object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an AttendanceCode object in the database by POSTing the
         * required data to the API.
         *
         * @param  {AttendanceCode} attendanceCode An AttendanceCode object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no AttendanceCode data is provided then the method returns null.
         */
        function create(attendanceCode, callback) {
            if (attendanceCode) {
                return $http.post(url, attendanceCode).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing AttendanceCode object.
         *
         * @param  {AttendanceCode} attendanceCode An AttendanceCode object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no AttendanceCode data is provided then the method returns null.
         */
        function save(attendanceCode, callback) {
            if (attendanceCode && attendanceCode.id) {
                return $http.put(url + attendanceCode.id, attendanceCode).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }

        }

    }


})();




/*(function() {

	angular.module('AttendanceCodeService', [])
	.factory('AttendanceCode', function($http, GLOBAL) {
		var self = this;
		var url = GLOBAL.API + '/attendanceCodes/';

		var factory = {
			query: function() {
				return $http.get(url);
			},
			get: function(id) {
				if (id) {
					return $http.get(url + id);
				} else {
					return null;
				}
			},
			create: function(attendanceCode, callback) {
				if (attendanceCode) {
					return $http.post(url, attendanceCode).then(function(response) {
						if (callback) { callback(); }
						return response.data;
					}, function(response) {
						return {
							status: response.status,
							error: response.data
						};
					});
				} else {
					return null;
				}
			},
			save: function(attendanceCode, callback) {
				if (attendanceCode && attendanceCode.id) {
					return $http.put(url + attendanceCode.id, attendanceCode).then(function(response) {
						if (callback) { callback(); }
						return response.data;
					}, function(response) {
						return {
							status: response.status,
							error: response.data
						};
					});
				} else {
					return null;
				}
			}

		};

		return factory;
	});

}());
*/
;/**
 * This is the factory definition for the AttendanceMonitoring Data Service. This defines how to handle data about AttendanceMonitoring objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */


(function() {

    angular
        .module('AttendanceMonitoringService', ['ui-notification'])
        .factory('AttendanceMonitoring', attendanceMonitoringFactory);

    attendanceMonitoringFactory.$inject = ['$http', 'GLOBAL', 'Notification'];

    function attendanceMonitoringFactory($http, GLOBAL, Notification) {
        var self = this;
        var url = GLOBAL.API + '/attendanceMonitorings/';
        // Public Interface
        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;

        //Private Interface
        /**
         * This method is used to retrieve all the AttendanceMonitoring from the API collection.
         *
         * @return {AttendanceMonitoring} An array of AttendanceMonitoring objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a AttendanceMonitoring from the API collection.
         * @param  {int} id of the AttendanceMonitoring object that is to be retrieved. 
         * @return {AttendanceMonitoring} An AttendanceMonitoring object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an AttendanceMonitoring object in the database by POSTing the
         * required data to the API.
         *
         * @param  {AttendanceMonitoring} attendanceMonitoring An AttendanceMonitoring object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no AttendanceMonitoring data is provided then the method returns null.
         */
        function create(attendanceMonitoring, callback) {
            if (attendanceMonitoring) {
                return $http.post(url, attendanceMonitoring).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    Notification.error("Error:" + response.data.message);
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing AttendanceMonitoring object.
         *
         * @param  {AttendanceMonitoring} attendanceMonitoring An AttendanceMonitoring object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no AttendanceMonitoring data is provided then the method returns null.
         */
        function save(attendanceMonitoring, callback) {
            if (attendanceMonitoring && attendanceMonitoring.id) {
                return $http.put(url + attendanceMonitoring.id, attendanceMonitoring).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

    }

})();
;/**
 * This is the factory definition for the BlockService Data Service. This defines how to handle data about BlockService objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('BlockService', [])
        .factory('Block', blockFactory);

    blockFactory.$inject = ['$http', 'GLOBAL'];

    function blockFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/blocks/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;

        //Private Interface
        /**
         * This method is used to retrieve all the BlockService from the API collection.       *
         * @return {BlockService} An array of BlockService objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a BlockService from the API collection.
         * @param  {int} id of the BlockService object that is to be retrieved. 
         * @return {BlockService} An BlockService object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an BlockService object in the database by POSTing the
         * required data to the API.
         *
         * @param  {BlockService} block An BlockService object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no BlockService data is provided then the method returns null.
         */
        function create(block, callback) {
            if (block) {
                return $http.post(url, block).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }

        }


        /**
         * This method is used to save changes to an existing BlockService object.
         *
         * @param  {BlockService} block An BlockService object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no BlockService data is provided then the method returns null.
         */
        function save(block, callback) {
            if (block && block.id) {
                return $http.put(url + block.id, block).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }

})();
;/**
 * This is the factory definition for the CentralMonitoring Data Service. This defines how to handle data about CentralMonitoring objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('CentralMonitoringService', ['ui-notification'])
        .factory('CentralMonitoring', centralMonitoringFactory);

    centralMonitoringFactory.$inject = ['$http', 'GLOBAL', 'Notification'];

    function centralMonitoringFactory($http, GLOBAL, Notification) {
        var self = this;
        var url = GLOBAL.API + '/centralMonitorings/';
        //Public Interface
        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;

        //Private Interface
        /**
         * This method is used to retrieve all the CentralMonitoring from the API collection.
         *
         * @return {CentralMonitoring} An array of CentralMonitoring objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a CentralMonitoring from the API collection.
         * @param  {int} id of the CentralMonitoring object that is to be retrieved. 
         * @return {CentralMonitoring} An CentralMonitoring object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an CentralMonitoring object in the database by POSTing the
         * required data to the API.
         *
         * @param  {CentralMonitoring} centralMonitoring An CentralMonitoring object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no CentralMonitoring data is provided then the method returns null.
         */
        function create(centralMonitoring, callback) {
            if (centralMonitoring) {
                return $http.post(url, centralMonitoring).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    Notification.error("Error:" + response.data.message);
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }

        }

        /**
         * This method is used to save changes to an existing CentralMonitoring object.
         *
         * @param  {CentralMonitoring} centralMonitoring An CentralMonitoring object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no CentralMonitoring data is provided then the method returns null.
         */
        function save(centralMonitoring, callback) {
            if (centralMonitoring && centralMonitoring.id) {
                return $http.put(url + centralMonitoring.id, centralMonitoring).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }

        }

    }
})();
;/**
 * This is the factory definition for the CollegeFundPaid Data Service. This defines how to handle data about CollegeFundPaid objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */


(function() {

    angular
        .module('CollegeFundPaidService', [])
        .factory('CollegeFundPaid', collegeFundFactory);

    collegeFundFactory.$inject = ['$http', 'GLOBAL'];

    function collegeFundFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/collegeFundPaids/';
        // Public
        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };


        return factory;

        //Private Interface
        /**
         * This method is used to retrieve all the CollegeFundPaid from the API collection.
         *
         * @return {CollegeFundPaid} An array of CollegeFundPaid objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a CollegeFundPaid from the API collection.
         * @param  {int} id of the CollegeFundPaid object that is to be retrieved. 
         * @return {CollegeFundPaid} An CollegeFundPaid object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }


        /**
         * This method is used to create a new instance of an CollegeFundPaid object in the database by POSTing the
         * required data to the API.
         *
         * @param  {CollegeFundPaid} collegeFundPaid An CollegeFundPaid object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no CollegeFundPaid data is provided then the method returns null.
         */
        function create(collegeFundPaid, callback) {
            if (collegeFundPaid) {
                return $http.post(url, collegeFundPaid).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }


        /**
         * This method is used to save changes to an existing CollegeFundPaid object.
         *
         * @param  {CollegeFundPaid} collegeFundPaid An CollegeFundPaid object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no CollegeFundPaid data is provided then the method returns null.
         */
        function save(collegeFundPaid, callback) {
            if (collegeFundPaid && collegeFundPaid.id) {
                return $http.put(url + collegeFundPaid.id, collegeFundPaid).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

    }

})();
;/**
 * This is the factory definition for the CollegeFundPayment Data Service. This defines how to handle data about CollegeFundPayment objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('CollegeFundPaymentService', [])
        .factory('CollegeFundPayment', collegeFundPaymentFactory);

    collegeFundPaymentFactory.$inject = ['$http', 'GLOBAL'];

    function collegeFundPaymentFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/';

        var factory = {
            query: getAll,
            get: getById,
            getByStudent: getByStudentId,
            create: create,
            save: save
        };

        return factory;

        //Private Interface
        /**
         * This method is used to retrieve all the CollegeFundPayment from the API collection.
         *
         * @return {CollegeFundPayment} An array of CollegeFundPayment objects.
         */
        function getAll() {
            return $http.get(url);
        }


        /**
         * This method is used to retrieve an instance of a CollegeFundPayment from the API collection.
         * @param  {int} id of the CollegeFundPayment object that is to be retrieved. 
         * @return {CollegeFundPayment} An CollegeFundPayment object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + 'collegeFundPayments/' + id);
            } else {
                return null;
            }

        }


        /**
         * This method is used to retrieve an instance of a CollegeFundPayment from the API collection.
         * @param  {int} studentId of the Student of whose the CollegeFundPayment object is to be retrieved. 
         * @return {CollegeFundPayment} An CollegeFundPayment object of Student of studentId.
         */
        function getByStudentId(studentId) {
            if (studentId) {
                return $http.get(url + 'students/' + studentId + '/collegeFundPayments');
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an CollegeFundPayment object in the database by POSTing the
         * required data to the API.
         *
         * @param  {CollegeFundPayment} collegeFundPayment An CollegeFundPayment object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no CollegeFundPayment data is provided then the method returns null.
         */
        function create(collegeFundPayment, callback) {
            if (collegeFundPayment) {
                return $http.post(url + 'collegeFundPayments', collegeFundPayment).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing CollegeFundPayment object.
         *
         * @param  {CollegeFundPayment} collegeFundPayment An CollegeFundPayment object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no CollegeFundPayment data is provided then the method returns null.
         */
        function save(collegeFundPayment, callback) {
            if (collegeFundPayment && collegeFundPayment.id) {
                return $http.put(url + 'collegeFundPayments/' + collegeFundPayment.id, collegeFundPayment).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }

        }
    }



})();
;/**
 * This is the factory definition for the CompletionStatus Data Service. This defines how to handle data about CompletionStatus objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */


(function() {

    angular
        .module('CompletionStatusService', [])
        .factory('CompletionStatus', completionStatusFactory);

    completionStatusFactory.$inject = ['$http', 'GLOBAL'];

    function completionStatusFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/completionStatuses/';
        // Public Interface
        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };


        return factory;

        //Private Interface
        /**
         * This method is used to retrieve all the CompletionStatus from the API collection.
         *
         * @return {CompletionStatus} An array of CompletionStatus objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a CompletionStatus from the API collection.
         * @param  {int} id of the CompletionStatus object that is to be retrieved. 
         * @return {CompletionStatus} An CompletionStatus object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an CompletionStatus object in the database by POSTing the
         * required data to the API.
         *
         * @param  {CompletionStatus} completionStatus An CompletionStatus object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no CompletionStatus data is provided then the method returns null.
         */
        function create(completionStatus, callback) {
            if (completionStatus) {
                return $http.post(url, completionStatus).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing CompletionStatus object.
         *
         * @param  {CompletionStatus} completionStatus An CompletionStatus object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no CompletionStatus data is provided then the method returns null.
         */
        function save(completionStatus, callback) {
            if (completionStatus && completionStatus.id) {
                return $http.put(url + completionStatus.id, completionStatus).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }


})();
;/**
 * This is the factory definition for the ConcessionType Data Service. This defines how to handle data about ConcessionType objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('ConcessionTypeService', ['ui-notification'])
        .factory('ConcessionType', concessionTypeFactory);

    concessionTypeFactory.$inject = ['$http', 'GLOBAL', 'Notification'];

    function concessionTypeFactory($http, GLOBAL, Notification) {
        var self = this;
        var url = GLOBAL.API + '/concessionTypes/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the ConcessionType from the API collection.
         *
         * @return {ConcessionType} An array of ConcessionType objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a ConcessionType from the API collection.
         * @param  {int} id of the ConcessionType object that is to be retrieved. 
         * @return {ConcessionType} An ConcessionType object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an ConcessionType object in the database by POSTing the
         * required data to the API.
         *
         * @param  {ConcessionType} concessionType An ConcessionType object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no ConcessionType data is provided then the method returns null.
         */
        function create(concessionType, callback) {
            if (concessionType) {
                return $http.post(url, concessionType).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    Notification.error("Error:" + response.data.message);
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing ConcessionType object.
         *
         * @param  {ConcessionType} concessionType An ConcessionType object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no ConcessionType data is provided then the method returns null.
         */
        function save(concessionType, callback) {
            if (concessionType && concessionType.id) {
                return $http.put(url + concessionType.id, concessionType).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the ContactType Data Service. This defines how to handle data about ContactTypeService objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('ContactTypeService', [])
        .factory('ContactType', contactTypeFactory);

    contactTypeFactory.$inject = ['$http', 'GLOBAL'];

    function contactTypeFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/contactTypes/';
        //Public Interface
        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;

        //Private Interface
        /**
         * This method is used to retrieve all the ContactType from the API collection.
         *
         * @return {ContactTypeService} An array of ContactType objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a ContactType from the API collection.
         * @param  {int} id of the ContactType object that is to be retrieved. 
         * @return {ContactTypeService} An ContactType object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an ContactType object in the database by POSTing the
         * required data to the API.
         *
         * @param  {ContactType} contactType An ContactType object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no ContactType data is provided then the method returns null.
         */
        function create(contactType, callback) {
            if (contactType) {
                return $http.post(url, contactType).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing ContactType object.
         *
         * @param  {ContactType} contactType An ContactType object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no ContactType data is provided then the method returns null.
         */
        function save(contactType, callback) {
            if (contactType && contactType.id) {
                return $http.put(url + contactType.id, contactType).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

    }

})();
;/**
 * This is the factory definition for the Contact Data Service. This defines how to handle data about ContactService objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('ContactService', [])
        .factory('Contact', contactFactory);

    contactFactory.$inject = ['$http', 'GLOBAL'];

    function contactFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/contacts/';
        // Public Interface
        var factory = {
            query: getAll,
            search: searchByPersonId,
            get: getById,
            delete: deleteById,
            contacts: contactsByPersonId,
            create: create,
            save: save,
            deleteAddress: deleteAddress
        };

        return factory;
        //Private Interface
        /**
         * This method is used to retrieve all the Contact from the API collection.
         *
         * @return {Contact} An array of ContactService objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a Contact from the API collection.
         * @param  {int} personId of the Contact object that is to be retrieved. 
         * @return {Contact} An Contact object as identified by the personId.
         */
        function searchByPersonId(personId) {
            return $http.get(url + personId);
        }
        /**
         * This method is used to retrieve an instance of a Contact from the API collection.
         * @param  {int} id of the Contact object that is to be retrieved. 
         * @return {Contact} An Contact object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }
        /**
         * This method is used to delete an instance of a Contact from the API collection.
         * @param  {int} id of the Contact object that is to be deleted. 
         * @return {Contact} An Contact object as identified by the id.
         */
        function deleteById(id) {
            if (id) {
                return $http.delete(url + id);
            } else {
                return null;
            }
        }
        /**
         * This method is used to retrieve an instance of a Contact from the API collection.
         * @param  {int} personId of the Contact object that is to be retrieved. 
         * @return {Contact} An Contact object as identified by the id.
         */
        function contactsByPersonId(personId) {
            return $http.get(url + personId + '/contacts');
        }
        /**
         * This method is used to create a new instance of an Contact object in the database by POSTing the
         * required data to the API.
         *
         * @param  {Contact} contact An Contact object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Contact data is provided then the method returns null.
         */
        function create(contact, callback) {
            if (contact) {
                return $http.post(url, contact).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing Contact object.
         *
         * @param  {Contact} contact An Contact object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Contact data is provided then the method returns null.
         */
        function save(contact, callback) {
            if (contact && contact.id) {
                return $http.put(url + contact.id, contact).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }


        /**
         * This method is used to delete Address from an existing Contact object.
         *
         * @param  {Contact} contact An Contact object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Contact data is provided then the method returns null.
         */
        function deleteAddress(contact, callback) {
            if (contact && contact.id) {
                return $http.put(url + contact.id + '/address', contact).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

    }


})();
;/**
 * This is the factory definition for the CorrespondenceType Data Service. This defines how to handle data about CorrespondenceService objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('CorrespondenceTypeService', [])
        .factory('CorrespondenceType', correspondenceTypeFactory);

    correspondenceTypeFactory.$inject = ['$http', 'GLOBAL'];

    function correspondenceTypeFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/correspondenceTypes/';
        //Public Factory
        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;
        //Private Interface
        /**
         * This method is used to retrieve all the CorrespondenceType from the API collection.
         *
         * @return {CorrespondenceType} An array of CorrespondenceType objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a CorrespondenceType from the API collection.
         * @param  {int} id of the CorrespondenceType object that is to be retrieved. 
         * @return {CorrespondenceType} An CorrespondenceType object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an CorrespondenceType object in the database by POSTing the
         * required data to the API.
         *
         * @param  {CorrespondenceType} correspondenceType An CorrespondenceType object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no CorrespondenceType data is provided then the method returns null.
         */
        function create(correspondenceType, callback) {
            if (correspondenceType) {
                return $http.post(url, correspondenceType).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing CorrespondenceType object.
         *
         * @param  {CorrespondenceType} correspondenceType An CorrespondenceType object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no CorrespondenceType data is provided then the method returns null.
         */
        function save(correspondenceType, callback) {
            if (correspondenceType && correspondenceType.id) {
                return $http.put(url + correspondenceType.id, correspondenceType).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

    }

})();
;/**
 * This is the factory definition for the Correspondence Data Service. This defines how to handle data about CorrespondenceService objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('CorrespondenceService', [])
        .factory('Correspondence', correspondenceFactory);

    correspondenceFactory.$inject = ['$http', 'GLOBAL'];

    function correspondenceFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/';
        //Public Factory
        var factory = {
            query: getAll,
            get: getByStudentId,
            getId: getById,
            create: create,
            save: save
        };

        return factory;
        //Private Interface
        /**
         * This method is used to retrieve all the Correspondence from the API collection.
         *
         * @return {Correspondence} An array of Correspondence objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a Correspondence from the API collection.
         * @param  {int} studentId of the Correspondence object that is to be retrieved. 
         * @return {Correspondence} An Correspondence object as identified by the studentId.
         */
        function getByStudentId(studentId) {
            if (studentId) {
                return $http.get(url + 'students/' + studentId + '/correspondence');
            } else {
                return null;
            }
        }

        /**
         * This method is used to retrieve an instance of a Correspondence from the API collection.
         * @param  {int} id of the Correspondence object that is to be retrieved. 
         * @return {Correspondence} An Correspondence object as identified by the id.
         */
        function getById(id) {
            return $http.get(url + 'correspondences/' + id);
        }

        /**
         * This method is used to create a new instance of an Correspondence object in the database by POSTing the
         * required data to the API.
         *
         * @param  {Correspondence} correspondence An Correspondence object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Correspondence data is provided then the method returns null.
         */
        function create(correspondence, callback) {
            if (correspondence) {
                return $http.post(url + 'correspondences', correspondence).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }


        /**
         * This method is used to save changes to an existing Correspondence object.
         *
         * @param  {Correspondence} correspondence An Correspondence object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Correspondence data is provided then the method returns null.
         */
        function save(correspondence, callback) {
            if (correspondence && correspondence.id) {
                return $http.put(url + 'correspondences/' + correspondence.id, correspondence).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

    }

})();
;/**
 * This is the factory definition for the CourseGroup Data Service. This defines how to handle data about CourseGroup objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */
(function() {

    angular
        .module('CourseGroupService', [])
        .factory('CourseGroup', courseGroupFactory);

    courseGroupFactory.$inject = ['$http', '$rootScope', 'GLOBAL'];

    function courseGroupFactory($http, $rootScope, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/courseGroups/';
        var params = '';
        // Public Interface
        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save,
            getByYear: getByYear
        };

        return factory;

        //Private Interface
        /**
         * This method is used to retrieve all the CourseGroup from the API collection.
         *
         * @return {CourseGroup} An array of CourseGroup objects.
         */
        function getAll() {
            params = '';
            if ($rootScope.currentYear) {
                params = '?year=' + $rootScope.currentYear.code;
            }
            return $http.get(url + params);
        }

        /**
         * This method is used to retrieve an instance of a CourseGroup from the API collection.
         * @param  {int} id of the CourseGroup object that is to be retrieved. 
         * @return {CourseGroup} An CourseGroup object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an CourseGroup object in the database by POSTing the
         * required data to the API.
         *
         * @param  {CourseGroup} CourseGroup An CourseGroup object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no CourseGroup data is provided then the method returns null.
         */
        function create() {
            if (courseGroup) {
                return $http.post(url, courseGroup).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing CourseGroup object.
         *
         * @param  {CourseGroup} CourseGroup An CourseGroup object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no CourseGroup data is provided then the method returns null.
         */
        function save() {
            if (courseGroup && courseGroup.id) {
                return $http.put(url + courseGroup.id, courseGroup).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to retrieve all the CourseGroup from the API collection.
         * @param {year} Request Parameter
         * @return {CourseGroup} An array of CourseGroup objects valid for year.
         */
        function getByYear(year) {
            return $http.get(url, {
                params: {
                    yearId: year.id
                }
            });
        }

    }


})();
;/**
 * This is the factory definition for the CourseSpec Data Service. This defines how to handle data about CourseSpec objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('CourseSpecService', [])
        .factory('CourseSpec', courseSpecFactory);

    courseSpecFactory.$inject = ['$http', 'GLOBAL'];

    function courseSpecFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/courseSpecs/';

        //Public Interface
        var factory = {
            lookup: lookup,
            valid: valid
        };

        return factory;

        //Private Interface
        /**
         * This method is used to get Course Spec description of an instance of a CourseSpec Id from the API collection.
         * @param  {String} spec of the CourseSpec object that is to be retrieved.
         * @return {CourseSpec} An CourseSpec object as identified by the specId.
         */
        function lookup(spec) {
            if (spec) {
                return $http.get(url + spec);
            } else {
                return null;
            }
        }

        /**
         * This method is used to check if the Course Spec id valid or not.
         * @param  {String} spec of the CourseSpec object that is to be verified.
         * @return {CourseSpec} An CourseSpec object as identified by the spec.
         */
        function valid(spec) {
            if (spec) {
                return $http.get(url + spec + '/valid');
            } else {
                return null;
            }
        }

    }

})();
;/**
 * This is the factory definition for the Course Data Service. This defines how to handle data about Course objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('CourseService', [])
        .factory('Course', courseFactory);

    courseFactory.$inject = ['$http', 'GLOBAL', 'APP'];

    function courseFactory($http, GLOBAL, APP) {
        var self = this;
        var url = GLOBAL.API + '/courses/';
        var endpoints = {
            courseGroups: '/courseGroups',
            enrolments: '/enrolments'
        };

        // Public Interface

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save,
            courseGroups: getCourseGroupsById,
            getByYear: getByYear,
            enrolments: getEnrolmentsByCourseId
        };

        return factory;

        // Private Interface

        /**
         * This method is used to retrieve all the Course from the API collection.
         *
         * @return {Course} An array of Course objects.
         */
        function getAll() {
            var year = APP.getYear();
            return $http.get(url, {
                params: {
                    yearId: year.id
                }
            });
        }

        /**
         * This method is used to retrieve an instance of a Course from the API collection.
         * @param  {int} id of the Course object that is to be retrieved.
         * @return {Course} An Course object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }
        /**
         * This method is used to create a new instance of an Course object in the database by POSTing the
         * required data to the API.
         *
         * @param  {Course} Course An Course object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Course data is provided then the method returns null.
         */
        function create(course, callback) {
            if (course) {
                return $http.post(url, course).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing Course object.
         *
         * @param  {Course} Course An Course object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Course data is provided then the method returns null.
         */
        function save(course, callback) {
            if (course && course.id) {
                return $http.put(url + course.id, course).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to retrieve the Course Groups of a Course from the API collection.
         * @param  {int} courseId of the Course object that is to be retrieved.
         * @return {Course} An Course object as identified by the id.
         */
        function getCourseGroupsById(courseId) {
            var year = APP.getYear();
            if (courseId) {
                return $http.get(url + courseId + endpoints.courseGroups, {
                    params: {
                        yearId: year.id
                    }
                });
            }
        }


        /**
         * This method is used to retrieve the Course of a Year from the API collection.
         * @param  {AcademicYaer} year of the Course object that is to be retrieved.
         * @return {Course} List of Course valid for a year
         */
        function getByYear(year) {
            return $http.get(url, {
                params: {
                    yearId: year.id
                }
            });
        }

        function getEnrolmentsByCourseId(courseId) {
            if (courseId) {
                var year = APP.getYear();
                return $http.get(url + courseId + endpoints.enrolments, {
                    params: {
                        year: year.code
                    }
                });
            }
        }
    }
})();
;/**
 * This is the factory definition for the Department Data Service. This defines how to handle data about Department objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */
(function() {

    angular
        .module('DepartmentService', [])
        .factory('Department', departmentFactory);

    departmentFactory.$inject = ['$http', 'GLOBAL'];

    function departmentFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/departments/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;
        //Private Interface
        /**
         * This method is used to retrieve all the Department from the API collection.
         *
         * @return {Department} An array of Department objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a Department from the API collection.
         * @param  {int} id of the Department object that is to be retrieved. 
         * @return {Department} An Department object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an Department object in the database by POSTing the
         * required data to the API.
         *
         * @param  {Department} department An Department object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Department data is provided then the method returns null.
         */
        function create(department, callback) {
            if (department) {
                return $http.post(url, department).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing Department object.
         *
         * @param  {Department} department An Course object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Department data is provided then the method returns null.
         */
        function save(department, callback) {
            if (department && department.id) {
                return $http.put(url + department.id, department).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the Destination Data Service. This defines how to handle data about Destination objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('DestinationService', [])
        .factory('Destination', destinationFactory);

    destinationFactory.$inject = ['$http', 'GLOBAL'];

    function destinationFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/destinations/';
        // Public Interface
        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;

        //Private Interface
        /**
         * This method is used to retrieve all the Destination from the API collection.
         *
         * @return {Destination} An array of Destination objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a Destination from the API collection.
         * @param  {int} id of the Destination object that is to be retrieved. 
         * @return {Destination} An Destination object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an Destination object in the database by POSTing the
         * required data to the API.
         *
         * @param  {Destination} destination An Destination object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Destination data is provided then the method returns null.
         */
        function create(destination, callback) {
            if (destination) {
                return $http.post(url, destination).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing Destination object.
         *
         * @param  {Destination} destination An Destination object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Destination data is provided then the method returns null.
         */
        function save(destination, callback) {
            if (destination && destination.id) {
                return $http.put(url + destination.id, destination).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the EnglishConditionOfFunding Data Service. This defines how to handle data about EnglishConditionOfFunding objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('EnglishConditionOfFundingService', [])
        .factory('EnglishConditionOfFunding', englishConditionOfFundingFactory);

    englishConditionOfFundingFactory.$inject = ['$http', 'GLOBAL'];

    function englishConditionOfFundingFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/englishConditionOfFundings/';
        //Public Interface
        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;

        //Private Interface
        /**
         * This method is used to retrieve all the EnglishConditionOfFunding from the API collection.
         *
         * @return {EnglishConditionOfFunding} An array of EnglishConditionOfFunding objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a EnglishConditionOfFunding from the API collection.
         * @param  {int} id of the EnglishConditionOfFunding object that is to be retrieved. 
         * @return {EnglishConditionOfFunding} An EnglishConditionOfFunding object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an EnglishConditionOfFunding object in the database by POSTing the
         * required data to the API.
         *
         * @param  {EnglishConditionOfFunding} englishConditionOfFunding An EnglishConditionOfFunding object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no EnglishConditionOfFunding data is provided then the method returns null.
         */
        function create(englishConditionOfFunding, callback) {
            if (englishConditionOfFunding) {
                return $http.post(url, englishConditionOfFunding).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing EnglishConditionOfFunding object.
         *
         * @param  {EnglishConditionOfFunding} englishConditionOfFunding An EnglishConditionOfFunding object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no EnglishConditionOfFunding data is provided then the method returns null.
         */
        function save(englishConditionOfFunding, callback) {
            if (englishConditionOfFunding && englishConditionOfFunding.id) {
                return $http.put(url + englishConditionOfFunding.id, englishConditionOfFunding).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }

})();
;/**
 * This is the factory definition for the Enrolment Data Service. This defines how to handle data about Enrolment objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('EnrolmentService', [])
        .factory('Enrolment', enrolmentFactory);

    enrolmentFactory.$inject = ['$http', 'GLOBAL'];

    function enrolmentFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/enrolments/';
        // Public Interface
        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;

        //Private Interface
        /**
         * This method is used to retrieve all the Enrolment from the API collection.
         *
         * @return {Enrolment} An array of Enrolment objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a Enrolment from the API collection.
         * @param  {int} id of the Enrolment object that is to be retrieved. 
         * @return {Enrolment} An Enrolment object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an Enrolment object in the database by POSTing the
         * required data to the API.
         *
         * @param  {Enrolment} enrolment An Enrolment object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Enrolment data is provided then the method returns null.
         */
        function create(enrolment, callback) {
            if (enrolment) {
                return $http.post(url, enrolment).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing Enrolment object.
         *
         * @param  {Enrolment} enrolment An Enrolment object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Enrolment data is provided then the method returns null.
         */
        function save(enrolment, callback) {
            if (enrolment && enrolment.enrolmentId) {
                return $http.put(url + enrolment.enrolmentId, enrolment).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;angular.module('EntityServices', [
    'ngResource',

    // Collection of Exams Services
    'ExamsServices',
    'AdmissionsServices',

    'AcademicYearService',
    'AddressService',
    'AimTypeService',
    'ApplicationStatusService',
    'AttendanceCodeService',
    'AttendanceMonitoringService',
    'BlockService',
    'CentralMonitoringService',
    'CollegeFundPaidService',
    'CollegeFundPaymentService',
    'CompletionStatusService',
    'ContactService',
    'ContactTypeService',
    'CorrespondenceService',
    'CorrespondenceTypeService',
    'CourseGroupService',
    'CourseService',
    'CourseSpecService',
    'DepartmentService',
    'DestinationService',
    'EnglishConditionOfFundingService',
    'EnrolmentService',
    'EntryQualificationService',
    'EntryQualificationTypeService',
    'EthnicityService',
    'ExamBoardService',
    'ExamResultsService',
    'ExternalResultsArchiveService',
    'FacultyService',
    'FundingModelService',
    'GenderService',
    'ILPInterviewService',
    'ILPInterviewTypeService',
    'LetterTypeService',
    'LevelService',
    'LLDDHealthProblemCategoryService',
    'LLDDHealthProblemService',
    'MasterRegisterService',
    'MathsConditionOfFundingService',
    'NationalityService',
    'NoteTypeService',
    'OfferTypeService',
    'OutcomeService',
    'PeriodService',
    'PersonService',
    'PossibleGradeService',
    'PossibleGradeSetService',
    'PostcodeLookupService',
    'PriorAttainmentService',
    'ProgrammeTypeService',
    'PunctualityMonitoringService',
    'RestrictedUseIndicatorService',
    'RoomService',
    'SchoolPriorityService',
    'SchoolService',
    'SchoolTypeService',
    'SourceOfFundingService',
    'SpecialCategoryService',
    'StaffService',
    'StaffTypeService',
    'StudentBursaryService',
    'StudentEntryQualificationService',
    'StudentInterimReportService',
    'StudentLearningSupportService',
    'StudentOverallAttendanceService',
    'StudentRemarkPermissionService',
    'StudentService',
    'StudentSpecialCategoryService',
    'StudentTypeService',
    'StudentWarningService',
    'SubjectService',
    'TitleService',
    'TutorGroupRemarkPermissionService',
    'TutorGroupService',
    'WithdrawalReasonService',
    'YearGroupService',
    'RoomTypeService',
    'SettingsService',
    'SchoolReportStatusService',
    'TextLookupService',
    'LetterTemplateService',
    'IdentificationViolationService',
    'HolidayService',
    'ReferralReasonService',
    'ConcessionTypeService',
    'SupportTypeService',
    'ReportingPeriodService',
    'RoleService',
    'StudentLearningSupportCostService',
    'StudentLearningSupportVisitService'
]);
;/**
 * This is the factory definition for the EntryQualificationType Data Service. This defines how to handle data about EntryQualificationType objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('EntryQualificationTypeService', [])
        .factory('EntryQualificationType', entryQualifiactionTypeFactory);

    entryQualifiactionTypeFactory.$inject = ['$http', 'GLOBAL'];

    function entryQualifiactionTypeFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/entryQualificationTypes/';
        // Public Interface	
        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;

        //Private Interface
        /**
         * This method is used to retrieve all the EntryQualificationType from the API collection.
         *
         * @return {EntryQualificationType} An array of EntryQualificationType objects.
         */
        function getAll() {
            return $http.get(url);
        }


        /**
         * This method is used to retrieve an instance of a EntryQualificationType from the API collection.
         * @param  {int} id of the EntryQualificationType object that is to be retrieved. 
         * @return {EntryQualificationType} An EntryQualificationType object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an EntryQualificationType object in the database by POSTing the
         * required data to the API.
         *
         * @param  {EntryQualificationType} entryQualificationType An EntryQualificationType object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no EntryQualificationType data is provided then the method returns null.
         */
        function create(entryQualificationType, callback) {
            if (entryQualificationType) {
                return $http.post(url, entryQualificationType).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing EntryQualificationType object.
         *
         * @param  {EntryQualificationType} entryQualificationType An EntryQualificationType object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no EntryQualificationType data is provided then the method returns null.
         */
        function save(entryQualificationType, callback) {
            if (entryQualificationType && entryQualificationType.id) {
                return $http.put(url + entryQualificationType.id, entryQualificationType).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the EntryQualification Data Service. This defines how to handle data about EntryQualification objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('EntryQualificationService', [])
        .factory('EntryQualification', entryQualificationFactory);

    entryQualificationFactory.$inject = ['$http', 'GLOBAL'];

    function entryQualificationFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/entryQualifications/';
        //Public Interface
        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;

        //Private Interface
        /**
         * This method is used to retrieve all the EntryQualification from the API collection.
         *
         * @return {EntryQualification} An array of EntryQualification objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a EntryQualification from the API collection.
         * @param  {int} id of the EntryQualification object that is to be retrieved. 
         * @return {EntryQualification} An EntryQualification object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an EntryQualification object in the database by POSTing the
         * required data to the API.
         *
         * @param  {EntryQualification} entryQualification An EntryQualification object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no EntryQualification data is provided then the method returns null.
         */
        function create(entryQualification, callback) {
            if (entryQualification) {
                return $http.post(url, entryQualification).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing EntryQualification object.
         *
         * @param  {EntryQualification} entryQualification An EntryQualification object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no EntryQualification data is provided then the method returns null.
         */
        function save(entryQualification, callback) {
            if (entryQualification && entryQualification.id) {
                return $http.put(url + entryQualification.id, entryQualification).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the Ethnicity Data Service. This defines how to handle data about Ethnicity objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('EthnicityService', [])
        .factory('Ethnicity', ethinicityFactory);

    ethinicityFactory.$inject = ['$http', 'GLOBAL'];

    function ethinicityFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/ethnicities/';
        // Public Interface	
        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;
        //Private Interface
        /**
         * This method is used to retrieve all the Ethnicity from the API collection.
         *
         * @return {Ethnicity} An array of Ethnicity objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a Ethnicity from the API collection.
         * @param  {int} id of the Ethnicity object that is to be retrieved. 
         * @return {Ethnicity} An Ethnicity object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }


        /**
         * This method is used to create a new instance of an Ethnicity object in the database by POSTing the
         * required data to the API.
         *
         * @param  {Ethnicity} ethnicity An Ethnicity object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Ethnicity data is provided then the method returns null.
         */
        function create(ethnicity, callback) {
            if (ethnicity) {
                return $http.post(url, ethnicity).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing Ethnicity object.
         *
         * @param  {Ethnicity} ethnicity An Ethnicity object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Ethnicity data is provided then the method returns null.
         */
        function save(ethnicity, callback) {
            if (ethnicity && ethnicity.id) {
                return $http.put(url + ethnicity.id, ethnicity).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the Exam Results Service . This defines how to handle data about Results objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular.module('ExamResultsService', [])
        .factory('ExamResults', resultsFactory);

    resultsFactory.$inject = ['$http', 'GLOBAL'];

    function resultsFactory($http, GLOBAL) {
        // Variables and Constants
        var url = GLOBAL.API + '/students/';

        //Public Interface
        var factory = {
            getByStudent: getByStudent,
            get: getById,
            save: save
        };

        return factory;

        //Private 
        /**
         * This method is used to retrieve all the Result of Student id from the API collection.
         * @param  studentId
         * @return {Results} An array of Results objects.
         */
        function getByStudent(studentId) {
            if (studentId) {
                return $http.get(url + studentId + '/exam-results');
            } else
                return null;
        }


        /**
         * This method is used to retrieve an instance of Result object 
         * @param resultId -  result identifier
         * @return {Results} An instance of Result object.
         */
        function getById(resultId) {
            if (resultId) {
                return $http.get(url + 'exam-results/' + resultId);
            } else {
                return null;
            }
        }


        /**
         * This method is used to save an instance of Result object 
         * @param examResult- Results object that is to be saved
         * @return {Results} An instance of Result object saved
         */
        function save(examResult, callback) {
            if (examResult && examResult.id) {
                return $http.put(url + 'exam-results/' + examResult.id, examResult).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else
                return null;
        }

    }


})();
;/**
 * The ComponentService module for accessing Component data from the REST API
 */
angular.module('ComponentService', []).factory('Component', function($http, GLOBAL) {
    var self = this;
    var url = GLOBAL.API + '/components/';

    var factory = {
        query: function() {
            return $http.get(url);
        },
        queryByDateAndSession: function(date, session) {
            return $http.get(url + date.getTime() + '/' + session);
        },
        get: function(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        },
        create: function(component, callback) {
            if (component) {
                return $http.post(url, component).then(function(response) {
                    if (callback) {
                        callback(response);
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        },
        save: function(component, callback) {
            if (component && component.id) {
                return $http.put(url + component.id, component).then(function(response) {
                    if (callback) {
                        callback(response);
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

    };

    return factory;
});
;angular.module('CourseComponentService', []).factory('CourseComponent', function($http, GLOBAL) {
    var self = this;
    var url = GLOBAL.API + '/course-components/';

    var factory = {
        query: function() {
            return $http.get(url);
        },

        get: function(courseId, optionId, componentId) {
            if (courseId && optionId && componentId) {
                return $http.get(url + courseId + "/" + optionId + "/" + componentId);
            } else {
                return null;
            }
        },

        create: function(courseComponent, callback) {
            if (courseComponent) {
                return $http.post(url, courseComponent).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        },

        delete: function(courseId, optionId, componentId, callback) {
            if (courseId && optionId && componentId) {
                return $http.delete(url + courseId + "/" + optionId + "/" + componentId);
            } else {
                return null;
            }
        }
    };

    return factory;
});
;angular.module('CourseOptionService', []).factory('CourseOption', function($http, GLOBAL) {
    var self = this;
    var url = GLOBAL.API + '/course-options/';

    var factory = {
        query: function() {
            return $http.get(url);
        },

        get: function(courseId, examOptionId) {
            if (courseId && examOptionId) {
                return $http.get(url + courseId + "/" + examOptionId);
            } else {
                return null;
            }
        },

        create: function(courseOption, callback) {
            if (courseOption) {
                return $http.post(url, courseOption).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        },
        delete: function(courseId, examOptionId, callback) {
            if (courseId && examOptionId) {
                return $http.delete(url + courseId + "/" + examOptionId);
            } else {
                return null;
            }
        }
    };

    return factory;
});
;angular.module('CourseSyllabusService', []).factory('CourseSyllabus', function($http, GLOBAL) {
    var self = this;
    var url = GLOBAL.API + '/course-syllabi/';

    var factory = {
        query: function() {
            return $http.get(url);
        },

        get: function(courseId, syllabusId) {
            if (courseId && syllabusId) {
                return $http.get(url + courseId + "/" + syllabusId);
            } else {
                return null;
            }
        },

        create: function(courseSyllabus, callback) {
            if (courseSyllabus) {
                return $http.post(url, courseSyllabus).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        },

        delete: function(courseId, syllabusId, callback) {
            if (courseId && syllabusId) {
                return $http.delete(url + courseId + "/" + syllabusId);
            } else {
                return null;
            }
        }
    };

    return factory;
});
;(function() {
    angular
        .module('EdiDataGeneratorService', [])
        .factory('EdiDataGenerator', ediDataGeneratorService);

    ediDataGeneratorService.$inject = ["$http", "GLOBAL"];

    function ediDataGeneratorService($http, GLOBAL) {
        var vm = this;
        var url = GLOBAL.API + '/ediDataGenerator/';

        // Public Interface

        var factory = {
            generateStudentOptionEntries: generateStudentOptionEntries,
            generateEDIFile: generateEDIFile
        };

        return factory;

        // Private Interface

        /*	create function POST call generates the student option entries	*/
        function generateStudentOptionEntries() {
            return $http.post(url + 'studentOptionEntries');
        }

        /*	get function POST call generates audit records, updates student option entries, and returns edi file contents	*/
        function generateEDIFile(examYear, examSeries, examBoardId) {
            if (examYear && examSeries && examBoardId) {
                var request = '?' + 'examYear=' + examYear + '&examSeries=' + examSeries + '&examBoardId=' + examBoardId;
                return $http.post(url + 'ediFile' + request);
            } else {
                return null;
            }
        }
    }

}());
;(function() {

    angular.module('EdiStatusTypeService', [])
        .factory('EdiStatusType', function($http, GLOBAL) {
            var self = this;
            var url = GLOBAL.API + '/ediStatusTypes/';

            var factory = {
                query: function() {
                    return $http.get(url);
                },
                get: function(id) {
                    if (id) {
                        return $http.get(url + id);
                    } else {
                        return null;
                    }
                },
                create: function(ediStatusType, callback) {
                    if (ediStatusType) {
                        return $http.post(url, ediStatusType).then(function(response) {
                            if (callback) {
                                callback();
                            }
                            return response.data;
                        }, function(response) {
                            return {
                                status: response.status,
                                error: response.data
                            };
                        });
                    } else {
                        return null;
                    }
                },
                save: function(ediStatusType, callback) {
                    if (ediStatusType && ediStatusType.id) {
                        return $http.put(url + ediStatusType.id, ediStatusType).then(function(response) {
                            if (callback) {
                                callback();
                            }
                            return response.data;
                        }, function(response) {
                            return {
                                status: response.status,
                                error: response.data
                            };
                        });
                    } else {
                        return null;
                    }
                }

            };

            return factory;
        });

}());
;/**
 * This is the factory definition for the ExamBoard Data Service. This defines how to handle data about ExamBoard objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('ExamBoardService', [])
        .factory('ExamBoard', examBoardFactory);

    examBoardFactory.$inject = ['$http', 'GLOBAL'];

    function examBoardFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/examBoards/';
        //Public Interface
        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;

        // Private Interface

        /**
         * This method is used to retrieve all the ExamBoard from the API collection.
         *
         * @return {ExamBoard} An array of ExamBoard objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a ExamBoard from the API collection.
         * @param  {int} id of the ExamBoard object that is to be retrieved.
         * @return {ExamBoard} An ExamBoard object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an ExamBoard object in the database by POSTing the
         * required data to the API.
         *
         * @param  {ExamBoard} examBoard An ExamBoard object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no ExamBoard data is provided then the method returns null.
         */
        function create(examBoard, callback) {
            if (examBoard) {
                return $http.post(url, examBoard).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing ExamBoard object.
         *
         * @param  {ExamBoard} examBoard An ExamBoard object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no ExamBoard data is provided then the method returns null.
         */
        function save(examBoard, callback) {
            if (examBoard && examBoard.id) {
                return $http.put(url + examBoard.id, examBoard).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;angular.module('ExamSeriesService', ['ngResource']).factory('ExamSeries', function($http, $resource, GLOBAL, APP) {
    var self = this;
    var url = GLOBAL.API + '/exam-series/';

    var factory = {
        query: function(examBoardId, page, size, sort) {
            var yearId = APP.getYear().id;
            var request = '?';
            var pageable = false;
            if (examBoardId && examBoardId !== 0) {
                request += 'examBoardId=' + examBoardId + '&';
            }
            if (page && page !== 0) {
                pageable = true;
                request += 'page=' + page + '&';
            }
            if (size && size !== 0) {
                pageable = true;
                request += 'size=' + size + '&';
            }
            if (sort && sort !== '') {
                pageable = true;
                request += 'sort=' + sort + '&';
            }
            if (pageable) {
                return $http.get(url + '/paged' + request, {
                    params: {
                        yearId: yearId
                    }
                });
            } else {
                return $http.get(url + request, {
                    params: {
                        yearId: yearId
                    }
                });
            }
        },

        get: function(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        },

        create: function(examSeries, callback) {
            if (examSeries) {
                return $http.post(url, examSeries).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        },

        save: function(examSeries, callback) {
            if (examSeries) {
                return $http.put(url + examSeries.id, examSeries).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

    };

    return factory;
});
;(function() {

    angular.module('ExamRoomService', [])
        .factory('ExamRoom', function($http, GLOBAL) {
            var self = this;
            var url = GLOBAL.API + '/examRooms/';

            var factory = {
                query: function() {
                    return $http.get(url);
                },
                get: function(id) {
                    if (id) {
                        return $http.get(url + id);
                    } else {
                        return null;
                    }
                },
                queryByExamSessionIdAndRoomId: function(sessionId, roomId) {
                    return $http.get(url + sessionId + '/' + roomId);
                },
                queryByDateAndSession: function(date, session) {
                    return $http.get(url + 'session/' + date.getTime() + '/' + session);
                },
                create: function(examRoom, callback) {
                    if (examRoom) {
                        return $http.post(url, examRoom).then(function(response) {
                            if (callback) {
                                callback();
                            }
                            return response.data;
                        }, function(response) {
                            return {
                                status: response.status,
                                error: response.data
                            };
                        });
                    } else {
                        return null;
                    }
                },
                save: function(examRoom, callback) {
                    if (examRoom && examRoom.id) {
                        return $http.put(url + examRoom.id, examRoom).then(function(response) {
                            if (callback) {
                                callback();
                            }
                            return response.data;
                        }, function(response) {
                            return {
                                status: response.status,
                                error: response.data
                            };
                        });
                    } else {
                        return null;
                    }
                },
                delete: function(examRoom, callback) {
                    if (examRoom && examRoom.id) {
                        return $http.delete(url + examRoom.id);
                    } else {
                        return null;
                    }
                }

            };

            return factory;
        });

}());
;(function() {

    angular.module('ExamSessionService', [])
        .factory('ExamSession', function($http, GLOBAL) {
            var self = this;
            var url = GLOBAL.API + '/examSessions/';

            var factory = {
                query: function() {
                    return $http.get(url);
                },
                get: function(id) {
                    if (id) {
                        return $http.get(url + id);
                    } else {
                        return null;
                    }
                },
                queryByDateAndSession: function(date, session) {
                    return $http.get(url + date.getTime() + '/' + session);
                },
                create: function(examSession, callback) {
                    if (examSession) {
                        return $http.post(url, examSession).then(function(response) {
                            if (callback) {
                                callback();
                            }
                            return response.data;
                        }, function(response) {
                            return {
                                status: response.status,
                                error: response.data
                            };
                        });
                    } else {
                        return null;
                    }
                },
                save: function(examSession, callback) {
                    if (examSession && examSession.id) {
                        return $http.put(url + examSession.id, examSession).then(function(response) {
                            if (callback) {
                                callback();
                            }
                            return response.data;
                        }, function(response) {
                            return {
                                status: response.status,
                                error: response.data
                            };
                        });
                    } else {
                        return null;
                    }
                }

            };

            return factory;
        });

}());
;/**
 * This module is a collection of various Exams related services that are used to retrieve data
 * 
 */
(function() {

    angular.module('ExamsServices', [
        'ComponentService',
        'CourseComponentService',
        'CourseOptionService',
        'CourseSyllabusService',
        'EdiDataGeneratorService',
        'EdiStatusTypeService',
        'ExamBoardService',
        'ExamSeriesService',
        'ExamRoomService',
        'ExamSessionService',
        'OptionService',
        'OptionComponentService',
        'SeatingPlanService',
        'StatusTypeService',
        'StudentAlternativeUciService',
        'StudentConcessionTypeService',
        'StudentOptionEntryService',
        'StudentRemarkPermissionService',
        'SyllabusService',
        'TutorGroupRemarkPermissionService'
    ]);

})();
;angular.module('OptionComponentService', []).factory('OptionComponent', function($http, GLOBAL) {
    var self = this;
    var url = GLOBAL.API + '/option-components';

    var factory = {
        create: function(optionComponent, callback) {
            if (optionComponent) {
                return $http.post(url, optionComponent).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    };

    return factory;
});
;angular.module('OptionService', []).factory('Option', function($http, GLOBAL) {
    var self = this;
    var url = GLOBAL.API + '/examOptions/';

    var factory = {
        query: function(examBoardId, examYear, examSeries, page, size, sort) {
            var request = '?';
            var pageable = false;
            if (examBoardId && examBoardId !== 0) {
                request += 'examBoardId=' + examBoardId + '&';
            }
            if (examYear && examYear !== '') {
                request += 'examYear=' + examYear + '&';
            }
            if (examSeries && examSeries !== '') {
                request += 'examSeries=' + examSeries + '&';
            }
            if (page && page !== 0) {
                pageable = true;
                request += 'page=' + page + '&';
            }
            if (size && size !== 0) {
                pageable = true;
                request += 'size=' + size + '&';
            }
            if (sort && sort !== 0) {
                pageable = true;
                request += 'sort=' + sort + '&';
            }
            if (pageable) {
                return $http.get(url + '/paged' + request);
            } else {
                return $http.get(url + request);
            }
        },

        search: function(search) {
            if (search) {
                var request = '?';
                if (search.optionEntryCode) {
                    request += 'optionEntryCode=' + search.optionEntryCode;
                }
                return $http.get(url + 'search' + request);
            } else {
                return null;
            }
        },

        queryBySyllabus: function(id) {
            if (id) {
                return $http.get(url + 'syllabus?syllabusId=' + id);
            } else {
                return null;
            }
        },

        create: function(option, callback) {
            if (option) {
                return $http.post(url, option).then(function(response) {
                    if (callback) {
                        callback(response);
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        },

        save: function(option, callback) {
            if (option) {
                return $http.put(url + option.examOptionId, option).then(function(response) {
                    if (callback) {
                        callback(response);
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

    };

    return factory;
});
;/**
 * The ComponentService module for accessing Component data from the REST API
 */
angular.module('SeatingPlanService', []).factory('SeatingPlan', function($http, GLOBAL) {
    var self = this;
    var url = GLOBAL.API + '/seating-plans/';

    var factory = {
        query: function() {
            return $http.get(url);
        },
        queryByExamComponentId: function(examComponentId) {
            return $http.get(url + 'byComponentId/' + examComponentId);
        },
        get: function(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        },
        create: function(seatingPlan, callback) {
            if (seatingPlan) {
                //					return $http.post(urlStudents + seatingPlan.studentId + urlSeatingPlans, seatingPlan).then(function(response) {
                return $http.post(url + seatingPlan.examRoomId, seatingPlan).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        },
        save: function(seatingPlan, callback) {
            if (seatingPlan && seatingPlan.studentId) {
                return $http.put(url + seatingPlan.examRoomId, seatingPlan).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        },
        delete: function(seatingPlan, callback) {
            if (seatingPlan && seatingPlan.studentId && seatingPlan.examComponentId) {
                return $http.delete(url + 'byStudentAndExam/' + seatingPlan.studentId + '/' + seatingPlan.examComponentId).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            }
        }
    };

    return factory;
});
;(function() {

    angular.module('StatusTypeService', [])
        .factory('StatusType', function($http, GLOBAL) {
            var self = this;
            var url = GLOBAL.API + '/statusTypes/';

            var factory = {
                query: function() {
                    return $http.get(url);
                },
                get: function(id) {
                    if (id) {
                        return $http.get(url + id);
                    } else {
                        return null;
                    }
                },
                create: function(statusType, callback) {
                    if (statusType) {
                        return $http.post(url, statusType).then(function(response) {
                            if (callback) {
                                callback();
                            }
                            return response.data;
                        }, function(response) {
                            return {
                                status: response.status,
                                error: response.data
                            };
                        });
                    } else {
                        return null;
                    }
                },
                save: function(statusType, callback) {
                    if (statusType && statusType.id) {
                        return $http.put(url + statusType.id, statusType).then(function(response) {
                            if (callback) {
                                callback();
                            }
                            return response.data;
                        }, function(response) {
                            return {
                                status: response.status,
                                error: response.data
                            };
                        });
                    } else {
                        return null;
                    }
                }

            };
            return factory;
        });

}());
;/**
 * This is the factory definition for the AcademicYear Data Service. This
 * defines how to handle data about AcademicYear objects.
 * 
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052,
 * Y053, Y090, Y091]
 * 
 * @type Data Service
 */
(function() {
    angular
        .module('StudentAlternativeUciService', [])
        .factory('StudentAlternativeUci', studentAlternativeUciFactory);

    studentAlternativeUciFactory.$inject = ['$http', 'GLOBAL', '$window'];

    function studentAlternativeUciFactory($http, GLOBAL, $window) {
        // Variables and Constants
        var url = GLOBAL.API + '/students/';

        // Public Interface
        var factory = {
            getByStudent: getByStudent,
            create: create,
            save: save,
            delete: deleteByIds,
            getByStudentAndExamBoardId: getByStudentAndExamBoardId
        };

        return factory;

        // Private Interface

        function getByStudent(studentId) {
            if (studentId) {
                return $http.get(url + studentId + '/alternative-ucis');
            } else
                return null;
        }

        function getByStudentAndExamBoardId(studentId, examBoardId) {
            if (studentId && examBoardId) {
                return $http.get(url + studentId + '/alternative-ucis/' + examBoardId);
            } else
                return null;

        }

        function create(studentAlternativeUci, callback) {
            if (studentAlternativeUci) {
                return $http.post(url + studentAlternativeUci.studentId + '/alternative-ucis', studentAlternativeUci).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    $window.alert("Invalid Data Entry");
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        function save(studentAlternativeUci, callback) {
            if (studentAlternativeUci) {
                return $http.put(url + studentAlternativeUci.studentId + '/alternative-ucis/' + studentAlternativeUci.examBoardId, studentAlternativeUci).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    $window.alert("Invalid Data Entry");
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        function deleteByIds(studentId, examBoardId) {
            return $http.delete(url + studentId + '/alternative-ucis/' + examBoardId);
        }

    }


})();
;angular.module('StudentConcessionTypeService', []).factory('StudentConcessionType', function($http, GLOBAL) {
    var self = this;
    var url = GLOBAL.API + '/students/';

    var factory = {
        query: function() {
            return $http.get(url);
        },
        get: function(studentId) {
            if (studentId) {
                return $http.get(url + studentId + '/concessionTypes');
            } else {
                return null;
            }
        },
        save: function(studentConcessionType, callback) {
            if (studentConcessionType && studentConcessionType.studentId) {
                return $http.put(url + studentConcessionType.studentId + '/concessionTypes', studentConcessionType).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    };
    return factory;
});
;(function() {

    angular.module('StudentOptionEntryService', [])
        .factory('StudentOptionEntry', function($http, GLOBAL, APP) {
            var self = this;
            var url = GLOBAL.API + '/';

            var factory = {
                query: function() {
                    return $http.get(url + 'studentOptionEntries');
                },
                markExamAmendment: function(studentId, callback) {
                    return $http.post(url + 'students/' + studentId + '/examAmendmentsRequired').then(function(response) {
                        if (callback) {
                            callback(response.data);
                        }
                        return response.data;
                    }, function(response) {
                        return {
                            status: response.status,
                            error: response.data
                        };
                    });
                },
                getId: function(studentId) {
                    var year = APP.getYear();
                    return $http.get(url + 'students/' + studentId + '/optionEntries', {
                        params: {
                            yearId: year.id
                        }
                    });
                },
                getByOptionId: function(studentId, examOptionId) {
                    return $http.get(url + 'students/' + studentId + '/optionEntries/' + examOptionId);
                },
                delete: function(studentId, examOptionId, callback) {
                    return $http.delete(url + 'students/' + studentId + '/optionEntries/' + examOptionId).then(function(response) {
                        if (callback) {
                            callback(response.data);
                        }
                        return response.data;
                    }, function(response) {
                        return {
                            status: response.status,
                            error: response.data
                        };
                    });
                },
                create: function(studentOptionEntry, callback) {
                    if (studentOptionEntry.studentId) {
                        return $http.post(url + 'students/' + studentOptionEntry.studentId + '/optionEntries', studentOptionEntry).then(function(response) {
                            if (callback) {
                                callback(response.data);
                            }
                            return response.data;
                        }, function(response) {
                            return {
                                status: response.status,
                                error: response.data
                            };
                        });
                    } else {
                        return null;
                    }
                },
                save: function(studentId, examOptionId, data, callback) {
                    if (studentId && examOptionId) {
                        return $http.put(url + 'students/' + studentId + '/optionEntries/' + examOptionId, data).then(function(response) {
                            if (callback) {
                                callback();
                            }
                            return response.data;
                        }, function(response) {
                            return {
                                status: response.status,
                                error: response.data
                            };
                        });
                    } else {
                        return null;
                    }
                }

            };

            return factory;
        });

}());
;(function() {

    angular.module('StudentRemarkPermissionService', [])
        .factory('StudentRemarkPermission', function($http, GLOBAL) {
            var self = this;
            var url = GLOBAL.API + '/studentRemarkPermissions/';

            var factory = {
                query: function() {
                    return $http.get(url);
                },
                get: function(id) {
                    if (id) {
                        return $http.get(url + id);
                    } else {
                        return null;
                    }
                },
                create: function(studentRemarkPermission, callback) {
                    if (studentRemarkPermission) {
                        return $http.post(url, studentRemarkPermission).then(function(response) {
                            if (callback) {
                                callback();
                            }
                            return response.data;
                        }, function(response) {
                            return {
                                status: response.status,
                                error: response.data
                            };
                        });
                    } else {
                        return null;
                    }
                },
                save: function(studentRemarkPermission, callback) {
                    if (studentRemarkPermission && studentRemarkPermission.id) {
                        return $http.put(url + studentRemarkPermission.id, studentRemarkPermission).then(function(response) {
                            if (callback) {
                                callback();
                            }
                            return response.data;
                        }, function(response) {
                            return {
                                status: response.status,
                                error: response.data
                            };
                        });
                    } else {
                        return null;
                    }
                }

            };

            return factory;
        });

}());
;angular.module('SyllabusService', []).factory('Syllabus', function($http, GLOBAL) {
    var self = this;
    var url = GLOBAL.API + '/syllabi/';

    var factory = {
        query: function(options) {
            // expects: options : {yearId, examBoardId, examYear, examSeries, page, size, sort}
            var request = '?';
            var pageable = false;
            if (options.yearId && options.yearId !== 0) {
                request += 'yearId=' + options.yearId + '&';
            }
            if (options.examBoardId && options.examBoardId !== 0) {
                request += 'examBoardId=' + options.examBoardId + '&';
            }
            if (options.syllabusCode && options.syllabusCode !== '') {
                request += 'syllabusCode=' + options.syllabusCode + '&';
            }
            if (options.examYear && options.examYear !== '') {
                request += 'examYear=' + options.examYear + '&';
            }
            if (options.examSeries && options.examSeries !== '') {
                request += 'examSeries=' + options.examSeries + '&';
            }
            if (options.page && options.page !== 0) {
                pageable = true;
                request += 'page=' + options.page + '&';
            }
            if (options.size && options.size !== 0) {
                pageable = true;
                request += 'size=' + options.size + '&';
            }
            if (options.sort && options.sort !== '') {
                pageable = true;
                request += 'sort=' + options.sort + '&';
            }
            if (pageable) {
                return $http.get(url + '/paged' + request);
            } else {
                if (options.yearId && options.yearId !== 0) {
                    return $http.get(url + request);
                } else {
                    return $http.get(GLOBAL.API + '/search/exam-syllabus' + request);
                }
            }
        },

        get: function(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        },

        create: function(syllabus, callback) {
            if (syllabus) {
                return $http.post(url, syllabus).then(function(response) {
                    if (callback) {
                        callback(response);
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        },

        save: function(syllabus, callback) {
            if (syllabus) {
                return $http.put(url + syllabus.id, syllabus).then(function(response) {
                    if (callback) {
                        callback(response);
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

    };

    return factory;
});
;(function() {

    angular.module('TutorGroupRemarkPermissionService', [])
        .factory('TutorGroupRemarkPermission', function($http, GLOBAL) {

            var self = this;
            var url = GLOBAL.API + '/tutorGroups/';

            var factory = {
                query: function() {
                    return $http.get(url);
                },

                get: function(tutorGroupId) {
                    if (tutorGroupId) {
                        return $http.get(url + tutorGroupId + '/remarkPermissions');
                    } else {
                        return null;
                    }
                },

                save: function(remarkPermission, tutorGroupId) {
                    if (remarkPermission && tutorGroupId) {
                        return $http.post(url + tutorGroupId + '/remarkPermissions', remarkPermission).then(function(response) {
                            if (callback) {
                                callback();
                            }
                            return response.data;
                        }, function(response) {
                            return {
                                status: response.status,
                                error: response.data
                            };
                        });
                    } else {
                        return null;
                    }
                }
            };

            return factory;
        });

}());
;/**
 * This is the factory definition for the ExternalResultsArchive Data Service. This defines how to handle data about ExternalResultsArchive objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('ExternalResultsArchiveService', [])
        .factory('ExternalResultsArchive', externalResultArchiveFactory);

    externalResultArchiveFactory.$inject = ['$http', 'GLOBAL'];

    function externalResultArchiveFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/students/';
        // Public Interface
        var factory = {
            query: getAll,
            get: getById
        };

        return factory;
        // Private Interface
        /**
         * This method is used to retrieve all the ExternalResultsArchive from the API collection.
         *
         * @return {ExternalResultsArchive} An array of ExternalResultsArchive objects.
         */
        function getAll() {
            return $http.get(url);
        }


        /**
         * This method is used to retrieve an instance of a ExternalResultsArchive from the API collection.
         * @param  {int} id of the ExternalResultsArchive object that is to be retrieved. 
         * @return {ExternalResultsArchive} An ExternalResultsArchive object as identified by the id.
         */
        function getById(id) {
            if (studentId) {
                return $http.get(url + studentId + '/externalResults');
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the Faculty Data Service. This defines how to handle data about Faculty objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */
(function() {

    angular
        .module('FacultyService', [])
        .factory('Faculty', facultyFactory);

    facultyFactory.$inject = ['$http', 'GLOBAL'];

    function facultyFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/faculties/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;
        //Private Interface
        /**
         * This method is used to retrieve all the Faculty from the API collection.
         *
         * @return {Faculty} An array of Faculty objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a Faculty from the API collection.
         * @param  {int} id of the Faculty object that is to be retrieved.
         * @return {Faculty} An Faculty object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an Faculty object in the database by POSTing the
         * required data to the API.
         *
         * @param  {Faculty} faculty An Faculty object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Faculty data is provided then the method returns null.
         */
        function create(faculty, callback) {
            if (faculty) {
                return $http.post(url, faculty).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing Faculty object.
         *
         * @param  {Faculty} faculty An Course object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Faculty data is provided then the method returns null.
         */
        function save(faculty, callback) {
            if (faculty && faculty.id) {
                return $http.put(url + faculty.id, faculty).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the FundingModel Data Service. This defines how to handle data about FundingModel objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('FundingModelService', [])
        .factory('FundingModel', fundingModelFactory);

    fundingModelFactory.$inject = ['$http', 'GLOBAL'];

    function fundingModelFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/fundingModels/';
        //Public Interface
        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;

        // Private Interface

        /**
         * This method is used to retrieve all the FundingModel from the API collection.
         *
         * @return {FundingModel} An array of FundingModel objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a FundingModel from the API collection.
         * @param  {int} id of the FundingModel object that is to be retrieved. 
         * @return {FundingModel} An FundingModel object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an FundingModel object in the database by POSTing the
         * required data to the API.
         *
         * @param  {FundingModel} fundingModel An FundingModel object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no FundingModel data is provided then the method returns null.
         */
        function create(fundingModel, callback) {
            if (fundingModel) {
                return $http.post(url, fundingModel).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing FundingModel object.
         *
         * @param  {FundingModel} fundingModel An FundingModel object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no FundingModel data is provided then the method returns null.
         */
        function save(fundingModel, callback) {
            if (fundingModel && fundingModel.id) {
                return $http.put(url + fundingModel.id, fundingModel).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }

})();

/*


(function() {

	angular.module('FundingModelService', [])
	.factory('FundingModel', function($http, GLOBAL) {
		var self = this;
		var url = GLOBAL.API + '/fundingModels/';

		var factory = {
			query: function() {
				return $http.get(url);
			},
			get: function(id) {
				if (id) {
					return $http.get(url + id);
				} else {
					return null;
				}
			},
			create: function(fundingModel, callback) {
				if (fundingModel) {
					return $http.post(url, fundingModel).then(function(response) {
						if (callback) { callback(); }
						return response.data;
					}, function(response) {
						return {
							status: response.status,
							error: response.data
						};
					});
				} else {
					return null;
				}
			},
			save: function(fundingModel, callback) {
				if (fundingModel && fundingModel.id) {
					return $http.put(url + fundingModel.id, fundingModel).then(function(response) {
						if (callback) { callback(); }
						return response.data;
					}, function(response) {
						return {
							status: response.status,
							error: response.data
						};
					});
				} else {
					return null;
				}
			}

		};

		return factory;
	});

}());
*/
;/**
 * This is the factory definition for the Gender Data Service. This defines how to handle data about Gender objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('GenderService', [])
        .factory('Gender', genderFactory);

    genderFactory.$inject = ['$http', 'GLOBAL'];

    function genderFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/genders/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the Gender from the API collection.
         *
         * @return {Gender} An array of Gender objects.
         */
        function getAll() {
            return $http.get(url);
        }


        /**
         * This method is used to retrieve an instance of a Gender from the API collection.
         * @param  {int} id of the Gender object that is to be retrieved. 
         * @return {Gender} An Gender object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an Gender object in the database by POSTing the
         * required data to the API.
         *
         * @param  {Gender} gender An Gender object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Gender data is provided then the method returns null.
         */
        function create(gender, callback) {
            if (gender) {
                return $http.post(url, gender).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing Gender object.
         *
         * @param  {Gender} gender An Gender object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Gender data is provided then the method returns null.
         */
        function save(gender, callback) {
            if (gender && gender.id) {
                return $http.put(url + gender.id, gender).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the Holiday Data Service. This defines how to handle data about Holiday objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('HolidayService', [])
        .factory('Holiday', holidayFactory);

    holidayFactory.$inject = ['$http', 'GLOBAL'];

    function holidayFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/holidays/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;

        // Private Interface

        /**
         * This method is used to retrieve all the Holiday from the API collection.
         *
         * @return {Holiday} An array of Holiday objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a Holiday from the API collection.
         * @param  {int} id of the Holiday object that is to be retrieved. 
         * @return {Holiday} An Holiday object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an Holiday object in the database by POSTing the
         * required data to the API.
         *
         * @param  {Holiday} holiday An Holiday object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Holiday data is provided then the method returns null.
         */
        function create(holiday, callback) {
            if (holiday) {
                return $http.post(url, holiday).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing Holiday object.
         *
         * @param  {Holiday} holiday An Holiday object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Holiday data is provided then the method returns null.
         */
        function save(holiday, callback) {
            if (holiday && holiday.id) {
                return $http.put(url + holiday.id, holiday).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the IdentificationViolation Data Service. This defines how to handle data about IdentificationViolation objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */


(function() {
    angular
        .module('IdentificationViolationService', [])
        .factory('IdentificationViolation', identificationViolationFactory);

    identificationViolationFactory.$inject = ['$http', 'GLOBAL'];

    function identificationViolationFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/id-violations/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            delete: deleteById,
            save: save
        };

        return factory;

        // Private Interface

        /**
         * This method is used to retrieve all the IdentificationViolation from the API collection.
         *
         * @return {IdentificationViolation} An array of IdentificationViolation objects.
         */
        function getAll(options) {
            var reqParams = {};
            if (options) {
                if (options.page) {
                    reqParams.page = options.page;
                }
                if (options.size) {
                    reqParams.size = options.size;
                }
            }
            //			return $http.get(url, {params: reqParams});
            return $http.get(url);
        }


        /**
         * This method is used to retrieve an instance of a IdentificationViolation from the API collection.
         * @param  {int} id of the IdentificationViolation object that is to be retrieved.
         * @return {IdentificationViolation} An IdentificationViolation object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an IdentificationViolation object in the database by POSTing the
         * required data to the API.
         *
         * @param  {IdentificationViolation} identificationViolation An IdentificationViolation object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no identificationViolation data is provided then the method returns null.
         */
        function create(identificationViolation, callback) {
            if (identificationViolation) {
                return $http.post(url, identificationViolation).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to delete an instance of a IdentificationViolation from the API collection.
         * @param  {int} id of the IdentificationViolation object that is to be deleted. 
         * @return {IdentificationViolation} An IdentificationViolation object as identified by the id.
         */
        function deleteById(id) {
            if (id) {
                return $http.delete(url + id);
            } else {
                return null;
            }
        }
        /**
         * This method is used to save changes to an existing IdentificationViolation object.
         *
         * @param  {IdentificationViolation} identificationViolation An IdentificationViolation object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no identificationViolation data is provided then the method returns null.
         */
        function save(identificationViolation, callback) {
            if (identificationViolation && identificationViolation.id) {
                return $http.put(url + identificationViolation.id, identificationViolation).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the ILPInterviewType Data Service. This defines how to handle data about ILPInterviewType objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('ILPInterviewTypeService', [])
        .factory('ILPInterviewType', ilpInterviewTypeFactory);

    ilpInterviewTypeFactory.$inject = ['$http', 'GLOBAL'];

    function ilpInterviewTypeFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/iLPInterviewTypes/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;

        // Private Interface

        /**
         * This method is used to retrieve all the ILPInterviewType from the API collection.
         *
         * @return {ILPInterviewType} An array of ILPInterviewType objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a ILPInterviewType from the API collection.
         * @param  {int} id of the ILPInterviewType object that is to be retrieved. 
         * @return {ILPInterviewType} An ILPInterviewType object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an ILPInterviewType object in the database by POSTing the
         * required data to the API.
         *
         * @param  {ILPInterviewType} iLPInterviewType An ILPInterviewType object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no ILPInterviewType data is provided then the method returns null.
         */
        function create(iLPInterviewType, callback) {
            if (iLPInterviewType) {
                return $http.post(url, iLPInterviewType).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }


        /**
         * This method is used to save changes to an existing ILPInterviewType object.
         *
         * @param  {ILPInterviewType} iLPInterviewType An ILPInterviewType object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no ILPInterviewType data is provided then the method returns null.
         */
        function save(iLPInterviewType, callback) {
            if (iLPInterviewType && iLPInterviewType.id) {
                return $http.put(url + iLPInterviewType.id, iLPInterviewType).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }

})();
;/**
 * This is the factory definition for the ILPInterview Data Service. This defines how to handle data about ILPInterview objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('ILPInterviewService', [])
        .factory('ILPInterview', ilpInterviewFactory);

    ilpInterviewFactory.$inject = ['$http', 'GLOBAL'];

    function ilpInterviewFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the ILPInterview from the API collection.
         *
         * @return {ILPInterview} An array of ILPInterview objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a ILPInterview from the API collection.
         * @param  {int} id of the ILPInterview object that is to be retrieved. 
         * @return {ILPInterview} An ILPInterview object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + 'students/' + id + '/ilpInterviews');
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an ILPInterview object in the database by POSTing the
         * required data to the API.
         *
         * @param  {ILPInterview} ILPInterview An ILPInterview object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no ILPInterview data is provided then the method returns null.
         */
        function create(ilpInterview, callback) {
            if (ilpInterview) {
                return $http.post(url + 'ilpInterviews', ilpInterview).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing ILPInterview object.
         *
         * @param  {ILPInterview} ILPInterview An ILPInterview object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no ILPInterview data is provided then the method returns null.
         */
        function save(ilpInterview, callback) {
            if (ilpInterview && ilpInterview.id) {
                return $http.put(url + 'ilpInterviews/' + ilpInterview.id, ilpInterview).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the LetterTemplate Service.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('LetterTemplateService', [])
        .factory('LetterTemplate', letterTemplateService);

    letterTemplateService.$inject = ['$http', 'GLOBAL'];

    function letterTemplateService($http, GLOBAL) {

        var vm = this;
        var url = GLOBAL.API + '/letterTemplates/';

        var factory = {
            query: getAll,
            get: getById,
            save: save,
            create: create
        };

        return factory;


        /**
         * This method is used to retrieve an instance of a LetterTemplate from the API collection.
         * @param  {int} id of the Gender object that is to be retrieved. 
         * @return {LetterTemplate} An Gender object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }


        /**
         * This method is used to retrieve all the LetterTemplate from the API collection.
         *
         * @return {LetterTemplate} An array of LetterTemplate objects.
         */
        function getAll() {
            return $http.get(url, {
                params: {
                    showAll: 'true'
                }
            });
        }



        /**
         * This method is used to save changes to an existing Gender object.
         *
         * @param  {LetterTemplate} gender An LetterTemplate object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no LetterTemplate data is provided then the method returns null.
         */
        function save(letterTemplate, callback) {
            if (letterTemplate && letterTemplate.id) {
                return $http.put(url + letterTemplate.id, letterTemplate).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }


        /**
         * This method is used to create a new instance of an LetterTemplate object in the database by POSTing the
         * required data to the API.
         *
         * @param  {LetterTemplate} gender An Gender object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no LetterTemplate data is provided then the method returns null.
         */
        function create(letterTemplate, callback) {
            if (letterTemplate) {
                return $http.post(url, letterTemplate).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }


    }

})();
;/**
 * This is the factory definition for the LetterType Data Service. This defines how to handle data about LetterType objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('LetterTypeService', [])
        .factory('LetterType', letterTypeFactory);

    letterTypeFactory.$inject = ['$http', 'GLOBAL'];

    function letterTypeFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/letterTypes/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save,
        };

        return factory;

        // Private Interface

        /**
         * This method is used to retrieve all the LetterType from the API collection.
         *
         * @return {LetterType} An array of LetterType objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a LetterType from the API collection.
         * @param  {int} id of the LetterType object that is to be retrieved. 
         * @return {LetterType} An LetterType object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an LetterType object in the database by POSTing the
         * required data to the API.
         *
         * @param  {LetterType} letterType An LetterType object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no LetterType data is provided then the method returns null.
         */
        function create(letterType, callback) {
            if (letterType) {
                return $http.post(url, letterType).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing LetterType object.
         *
         * @param  {LetterType} letterType An LetterType object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no LetterType data is provided then the method returns null.
         */
        function save(letterType, callback) {
            if (letterType && letterType.id) {
                return $http.put(url + letterType.id, letterType).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the Level Data Service. This defines how to handle data about Level objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('LevelService', [])
        .factory('Level', levelFactory);

    levelFactory.$inject = ['$http', 'GLOBAL'];

    function levelFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/levels/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;

        // Private Interface

        /**
         * This method is used to retrieve all the Level from the API collection.
         *
         * @return {Level} An array of Level objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a Level from the API collection.
         * @param  {int} id of the Level object that is to be retrieved. 
         * @return {Level} An Level object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an Level object in the database by POSTing the
         * required data to the API.
         *
         * @param  {Level} level An Level object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Level data is provided then the method returns null.
         */
        function create(level, callback) {
            if (level) {
                return $http.post(url, level).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing Level object.
         *
         * @param  {Level} level An Level object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Level data is provided then the method returns null.
         */
        function save(level, callback) {
            if (level && level.id) {
                return $http.put(url + level.id, level).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the LLDDHealthProblemCategory Data Service. This defines how to handle data about LLDDHealthProblemCategory objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('LLDDHealthProblemCategoryService', [])
        .factory('LLDDHealthProblemCategory', lLDDHealthProblemCategoryFactory);

    lLDDHealthProblemCategoryFactory.$inject = ['$http', 'GLOBAL'];

    function lLDDHealthProblemCategoryFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/lLDDHealthProblemCategories/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the LLDDHealthProblemCategory from the API collection.
         *
         * @return {LLDDHealthProblemCategory} An array of LLDDHealthProblemCategory objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a LLDDHealthProblemCategory from the API collection.
         * @param  {int} id of the LLDDHealthProblemCategory object that is to be retrieved. 
         * @return {LLDDHealthProblemCategory} An LLDDHealthProblemCategory object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an LLDDHealthProblemCategory object in the database by POSTing the
         * required data to the API.
         *
         * @param  {LLDDHealthProblemCategory} lLDDHealthProblemCategory An LLDDHealthProblemCategory object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no LLDDHealthProblemCategory data is provided then the method returns null.
         */
        function create(lLDDHealthProblemCategory, callback) {
            if (lLDDHealthProblemCategory) {
                return $http.post(url, lLDDHealthProblemCategory).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data

                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing LLDDHealthProblemCategory object.
         *
         * @param  {LLDDHealthProblemCategory} lLDDHealthProblemCategory An LLDDHealthProblemCategory object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no LLDDHealthProblemCategory data is provided then the method returns null.
         */
        function save(lLDDHealthProblemCategory, callback) {
            if (lLDDHealthProblemCategory && lLDDHealthProblemCategory.id) {
                return $http.put(url + lLDDHealthProblemCategory.id, lLDDHealthProblemCategory).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the LLDDHealthProblem Data Service. This defines how to handle data about LLDDHealthProblem objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('LLDDHealthProblemService', [])
        .factory('LLDDHealthProblem', lldHealthProblemFactory);

    lldHealthProblemFactory.$inject = ['$http', 'GLOBAL'];

    function lldHealthProblemFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/lLDDHealthProblems/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the LLDDHealthProblem from the API collection.
         *
         * @return {LLDDHealthProblem} An array of LLDDHealthProblem objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a LLDDHealthProblem from the API collection.
         * @param  {int} id of the LLDDHealthProblem object that is to be retrieved. 
         * @return {LLDDHealthProblem} An LLDDHealthProblem object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an LLDDHealthProblem object in the database by POSTing the
         * required data to the API.
         *
         * @param  {LLDDHealthProblem} lLDDHealthProblem An LLDDHealthProblem object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no LLDDHealthProblem data is provided then the method returns null.
         */
        function create(lLDDHealthProblem, callback) {
            if (lLDDHealthProblem) {
                return $http.post(url, lLDDHealthProblem).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data

                    };
                });
            } else {
                return null;
            }
        }


        /**
         * This method is used to save changes to an existing LLDDHealthProblem object.
         *
         * @param  {LLDDHealthProblem} lLDDHealthProblem An LLDDHealthProblem object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no LLDDHealthProblem data is provided then the method returns null.
         */
        function save(lLDDHealthProblem, callback) {
            if (lLDDHealthProblem && lLDDHealthProblem.id) {
                return $http.put(url + lLDDHealthProblem.id, lLDDHealthProblem).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the MasterRegister Data Service. This defines how to handle data about MasterRegister objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('MasterRegisterService', [])
        .factory('MasterRegister', masterRegisterFactory);

    masterRegisterFactory.$inject = ['$http', 'GLOBAL', 'APP'];

    function masterRegisterFactory($http, GLOBAL, APP) {
        var self = this;
        var url = GLOBAL.API + '/';

        var factory = {
            query: getAll,
            get: getByStudentId,
            create: create,
            save: save,
            getById: getById
        };

        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the MasterRegister from the API collection.
         *
         * @return {MasterRegister} An array of MasterRegister objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a MasterRegister from the API collection.
         * @param  {int} id of the MasterRegister object that is to be retrieved.
         * @return {MasterRegister} An MasterRegister object as identified by the id.
         */
        function getById(id) {
            return $http.get(url + 'masterRegisters/' + id);
        }

        /**
         * This method is used to retrieve an instance of a MasterRegister from the API collection for a specific student.
         * @param  {int} id of the Student of whose Master Register is to be retrieved.
         * @return {MasterRegister} MasterRegister objects as identified by the student id.
         */
        function getByStudentId(id) {
            year = APP.getYear();
            if (id !== null) {
                return $http.get(url + 'students/' + id + '/masterRegisters', {
                    params: {
                        yearId: year.id
                    }
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an MasterRegister object in the database by POSTing the
         * required data to the API.
         *
         * @param  {MasterRegister} masterRegister An MasterRegister object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no MasterRegister data is provided then the method returns null.
         */
        function create(masterRegister, callback) {
            if (masterRegister) {
                return $http.post(url + 'masterRegisters', masterRegister).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing MasterRegister object.
         *
         * @param  {MasterRegister} masterRegister An MasterRegister object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no MasterRegister data is provided then the method returns null.
         */
        function save(masterRegister, callback) {
            if (masterRegister && masterRegister.id) {
                return $http.put(url + 'masterRegisters/' + masterRegister.id, masterRegister).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the MathsConditionOfFunding Data Service. This defines how to handle data about MathsConditionOfFunding objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('MathsConditionOfFundingService', [])
        .factory('MathsConditionOfFunding', mathsConditionOfFundingFactory);

    mathsConditionOfFundingFactory.$inject = ['$http', 'GLOBAL'];

    function mathsConditionOfFundingFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/mathsConditionOfFundings/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;

        // Private Interface

        /**
         * This method is used to retrieve all the MathsConditionOfFunding from the API collection.
         *
         * @return {MathsConditionOfFunding} An array of MathsConditionOfFunding objects.
         */
        function getAll() {
            return $http.get(url);
        }


        /**
         * This method is used to retrieve an instance of a MathsConditionOfFunding from the API collection.
         * @param  {int} id of the MathsConditionOfFunding object that is to be retrieved. 
         * @return {MathsConditionOfFunding} An MathsConditionOfFunding object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an MathsConditionOfFunding object in the database by POSTing the
         * required data to the API.
         *
         * @param  {MathsConditionOfFunding} mathsConditionOfFunding An MathsConditionOfFunding object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no MathsConditionOfFunding data is provided then the method returns null.
         */
        function create(mathsConditionOfFunding, callback) {
            if (mathsConditionOfFunding) {
                return $http.post(url, mathsConditionOfFunding).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing MathsConditionOfFunding object.
         *
         * @param  {MathsConditionOfFunding} mathsConditionOfFunding An MathsConditionOfFunding object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no MathsConditionOfFunding data is provided then the method returns null.
         */
        function save(mathsConditionOfFunding, callback) {
            if (mathsConditionOfFunding && mathsConditionOfFunding.id) {
                return $http.put(url + mathsConditionOfFunding.id, mathsConditionOfFunding).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the Nationality Data Service. This defines how to handle data about Nationality objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('NationalityService', [])
        .factory('Nationality', nationalityFactory);

    nationalityFactory.$inject = ['$http', 'GLOBAL'];

    function nationalityFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/nationalities/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the Nationality from the API collection.
         *
         * @return {Nationality} An array of Nationality objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a Nationality from the API collection.
         * @param  {int} id of the Nationality object that is to be retrieved. 
         * @return {Nationality} An Nationality object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an Nationality object in the database by POSTing the
         * required data to the API.
         *
         * @param  {Nationality} nationality An Nationality object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Nationality data is provided then the method returns null.
         */
        function create(nationality, callback) {
            if (nationality) {
                return $http.post(url, nationality).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing Nationality object.
         *
         * @param  {Nationality} nationality An Nationality object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Nationality data is provided then the method returns null.
         */
        function save(nationality, callback) {
            if (nationality && nationality.id) {
                return $http.put(url + nationality.id, nationality).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }

})();
;/**
 * This is the factory definition for the NoteType Data Service. This defines how to handle data about NoteType objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('NoteTypeService', [])
        .factory('NoteType', noteTypeFactory);

    noteTypeFactory.$inject = ['$http', 'GLOBAL'];

    function noteTypeFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/noteTypes/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the NoteType from the API collection.
         *
         * @return {NoteType} An array of NoteType objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a NoteType from the API collection.
         * @param  {int} id of the NoteType object that is to be retrieved. 
         * @return {NoteType} An NoteType object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an NoteType object in the database by POSTing the
         * required data to the API.
         *
         * @param  {NoteType} noteType An NoteType object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no NoteType data is provided then the method returns null.
         */
        function create(noteType, callback) {
            if (noteType) {
                return $http.post(url, noteType).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing NoteType object.
         *
         * @param  {NoteType} noteType An NoteType object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no NoteType data is provided then the method returns null.
         */
        function save(noteType, callback) {
            if (noteType && noteType.id) {
                return $http.put(url + noteType.id, noteType).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the OfferType Data Service. This defines how to handle data about OfferType objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('OfferTypeService', [])
        .factory('OfferType', offerTypeFactory);

    offerTypeFactory.$inject = ['$http', 'GLOBAL'];

    function offerTypeFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/offerTypes/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the OfferType from the API collection.
         *
         * @return {OfferType} An array of OfferType objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a OfferType from the API collection.
         * @param  {int} id of the OfferType object that is to be retrieved. 
         * @return {OfferType} An OfferType object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }


        /**
         * This method is used to create a new instance of an OfferType object in the database by POSTing the
         * required data to the API.
         *
         * @param  {OfferType} offerType An OfferType object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no OfferType data is provided then the method returns null.
         */
        function create(offerType, callback) {
            if (offerType) {
                return $http.post(url, offerType).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing OfferType object.
         *
         * @param  {OfferType} offerType An OfferType object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no OfferType data is provided then the method returns null.
         */
        function save(offerType, callback) {
            if (offerType && offerType.id) {
                return $http.put(url + offerType.id, offerType).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the Outcome Data Service. This defines how to handle data about Outcome objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('OutcomeService', [])
        .factory('Outcome', outcomeFactory);

    outcomeFactory.$inject = ['$http', 'GLOBAL'];

    function outcomeFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/outcomes/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;

        // Private Interface

        /**
         * This method is used to retrieve all the Outcome from the API collection.
         *
         * @return {Outcome} An array of Outcome objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a Outcome from the API collection.
         * @param  {int} id of the Outcome object that is to be retrieved. 
         * @return {Outcome} An Outcome object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an Outcome object in the database by POSTing the
         * required data to the API.
         *
         * @param  {Outcome} Outcome An Outcome object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Outcome data is provided then the method returns null.
         */
        function create(outcome, callback) {
            if (outcome) {
                return $http.post(url, outcome).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }


        /**
         * This method is used to save changes to an existing Outcome object.
         *
         * @param  {Outcome} Outcome An Outcome object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Outcome data is provided then the method returns null.
         */
        function save(outcome, callback) {
            if (outcome && outcome.id) {
                return $http.put(url + outcome.id, outcome).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the Period Data Service. This defines how to handle data about Period objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('PeriodService', [])
        .factory('Period', periodFactory);

    periodFactory.$inject = ['$http', 'GLOBAL'];

    function periodFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/periods/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the Period from the API collection.
         *
         * @return {Period} An array of Period objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a Period from the API collection.
         * @param  {int} id of the Period object that is to be retrieved. 
         * @return {Period} An Period object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an Period object in the database by POSTing the
         * required data to the API.
         *
         * @param  {Period} period An Period object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Period data is provided then the method returns null.
         */
        function create(period, callback) {
            if (period) {
                return $http.post(url, period).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing Period object.
         *
         * @param  {Period} period An Period object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Period data is provided then the method returns null.
         */
        function save(period, callback) {
            if (period && period.id) {
                return $http.put(url + period.id, period).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }

})();
;/**
 * This is the factory definition for the Person Data Service. This defines how to handle data about Person objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('PersonService', [])
        .factory('Person', personFactory);

    personFactory.$inject = ['$http', 'GLOBAL'];

    function personFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/people/';
        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save,
            contacts: getContactsById
        };

        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the Person from the API collection.
         *
         * @return {Person} An array of Person objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a Person from the API collection.
         * @param  {int} id of the Person object that is to be retrieved. 
         * @return {Person} An Person object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an Person object in the database by POSTing the
         * required data to the API.
         *
         * @param  {Person} Person An Person object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Person data is provided then the method returns null.
         */
        function create(person, callback) {
            if (person) {
                return $http.post(url, person).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing Person object.
         *
         * @param  {Person} Person An Person object with the data to be updated.
         * @param  {Function} successCallback 
         * @param  {Function} failureCallback  A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Person data is provided then the method returns null.
         */
        function save(person, successCallback, failureCallback) {
            if (person && person.id) {
                return $http.put(url + person.id, person).then(function(response) {
                    if (successCallback) {
                        successCallback();
                    }
                    return response.data;
                }, function(response) {
                    if (failureCallback) {
                        failureCallback();
                    }
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to get Contacts of a Person with personId from the API collection.
         * @param  {int} id of the Person object that is to be retrieved. 
         * @return {Person} An array of contacts
         */
        function getContactsById(id) {
            if (id) {
                return $http.get(url + id + '/contacts');
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the PossibleGradeSet Data Service. This defines how to handle data about PossibleGradeSet objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('PossibleGradeSetService', [])
        .factory('PossibleGradeSet', possibleGradeSetFactory);

    possibleGradeSetFactory.$inject = ['$http', 'GLOBAL'];

    function possibleGradeSetFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/possibleGradeSets/';

        var factory = {
            query: getAll,
            get: getById,
            getPossibleGrades: getPossibleGradeSetId,
            create: create,
            save: save
        };

        return factory;

        /**
         * This method is used to retrieve all the PossibleGradeSet from the API collection.
         *
         * @return {PossibleGradeSet} An array of PossibleGradeSet objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a PossibleGradeSet from the API collection.
         * @param  {int} id of the PossibleGradeSet object that is to be retrieved. 
         * @return {PossibleGradeSet} An PossibleGradeSet object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to retrieve an instance of a PossibleGradeSet from the API collection.
         * @param  {int} id of the PossibleGradeSet object that is to be retrieved. 
         * @return {PossibleGradeSet} An array of PossibleGradeSet object as identified by the id.
         */
        function getPossibleGradeSetId(id) {
            return $http.get(url + id + '/possibleGrades');
        }

        /**
         * This method is used to create a new instance of an PossibleGradeSet object in the database by POSTing the
         * required data to the API.
         *
         * @param  {PossibleGradeSet} possibleGradeSet An PossibleGradeSet object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no PossibleGradeSet data is provided then the method returns null.
         */
        function create(possibleGradeSet, callback) {
            if (possibleGradeSet) {
                return $http.post(url, possibleGradeSet).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing PossibleGradeSet object.
         *
         * @param  {PossibleGradeSet} possibleGradeSet An PossibleGradeSet object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no PossibleGradeSet data is provided then the method returns null.
         */
        function save(possibleGradeSet, callback) {
            if (possibleGradeSet && possibleGradeSet.id) {
                return $http.put(url + possibleGradeSet.id, possibleGradeSet).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the PossibleGrade Data Service. This defines how to handle data about PossibleGrade objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('PossibleGradeService', [])
        .factory('PossibleGrade', possibleGradeFactory);

    possibleGradeFactory.$inject = ['$http', 'GLOBAL'];

    function possibleGradeFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/possibleGrades/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;

        /**
         * This method is used to retrieve all the PossibleGrade from the API collection.
         *
         * @return {PossibleGrade} An array of PossibleGrade objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a PossibleGrade from the API collection.
         * @param  {int} id of the PossibleGrade object that is to be retrieved. 
         * @return {PossibleGrade} An PossibleGrade object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an PossibleGrade object in the database by POSTing the
         * required data to the API.
         *
         * @param  {PossibleGrade} possibleGrade An PossibleGrade object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no PossibleGrade data is provided then the method returns null.
         */
        function create(possibleGrade, callback) {
            if (possibleGrade) {
                return $http.post(url, possibleGrade).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing PossibleGrade object.
         *
         * @param  {PossibleGrade} possibleGrade An PossibleGrade object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no PossibleGrade data is provided then the method returns null.
         */
        function save(possibleGrade, callback) {
            if (possibleGrade && possibleGrade.id) {
                return $http.put(url + possibleGrade.id, possibleGrade).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the PostcodeLookup Data Service. This defines how to handle data about PostcodeLookup objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('PostcodeLookupService', [])
        .factory('PostcodeLookup', postCodeFactory);

    postCodeFactory.$inject = ['$http', 'GLOBAL'];

    function postCodeFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/postcodes';

        var factory = {
            search: search,
            retrieve: retrieve
        };

        return factory;

        // Private Interface

        /**
         * This method is used to retrieve all the PostcodeLookup from the API collection.
         * @param  {String} postcode The Unique Postcode to retrieve the address
         * @return {PostcodeLookup} An array of PostcodeLookup objects.
         */
        function search(postcode) {
            return $http.get(url + '/search/' + postcode);
        }

        /**
         * This method is used to retrieve an instance of a PostcodeLookup from the API collection.
         * @param  {int} id The Unique Id of the Postcode to retrieve the address
         * @return {PostcodeLookup} An PostcodeLookup object as identified by the id.
         */
        function retrieve(id) {
            return $http.get(url + '/retrieve/' + id);
        }
    }

})();
;/**
 * This is the factory definition for the PriorAttainment Data Service. This defines how to handle data about PriorAttainment objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('PriorAttainmentService', [])
        .factory('PriorAttainment', priorAttainmentFactory);

    priorAttainmentFactory.$inject = ['$http', 'GLOBAL'];

    function priorAttainmentFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/priorAttainments/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;

        // Private Interface

        /**
         * This method is used to retrieve all the PriorAttainment from the API collection.
         *
         * @return {PriorAttainment} An array of PriorAttainment objects.
         */
        function getAll() {
            return $http.get(url);
        }
        /**
         * This method is used to retrieve an instance of a PriorAttainment from the API collection.
         * @param  {int} id of the PriorAttainment object that is to be retrieved. 
         * @return {PriorAttainment} An PriorAttainment object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }


        /**
         * This method is used to create a new instance of an PriorAttainment object in the database by POSTing the
         * required data to the API.
         *
         * @param  {PriorAttainment} priorAttainment An PriorAttainment object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no PriorAttainment data is provided then the method returns null.
         */
        function create(priorAttainment, callback) {
            if (priorAttainment) {
                return $http.post(url, priorAttainment).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing PriorAttainment object.
         *
         * @param  {PriorAttainment} priorAttainment An PriorAttainment object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no PriorAttainment data is provided then the method returns null.
         */
        function save(priorAttainment, callback) {
            if (priorAttainment && priorAttainment.id) {
                return $http.put(url + priorAttainment.id, priorAttainment).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }

})();
;/**
 * This is the factory definition for the ProgrammeType Data Service. This defines how to handle data about ProgrammeType objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('ProgrammeTypeService', [])
        .factory('ProgrammeType', programmeTypeFactory);

    programmeTypeFactory.$inject = ['$http', 'GLOBAL'];

    function programmeTypeFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/programmeTypes/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the ProgrammeType from the API collection.
         *
         * @return {ProgrammeType} An array of ProgrammeType objects.
         */
        function getAll() {
            return $http.get(url);
        }


        /**
         * This method is used to retrieve an instance of a ProgrammeType from the API collection.
         * @param  {int} id of the ProgrammeType object that is to be retrieved. 
         * @return {ProgrammeType} An ProgrammeType object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an ProgrammeType object in the database by POSTing the
         * required data to the API.
         *
         * @param  {ProgrammeType} programmeType An ProgrammeType object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no ProgrammeType data is provided then the method returns null.
         */
        function create(programmeType, callback) {
            if (programmeType) {
                return $http.post(url, programmeType).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing ProgrammeType object.
         *
         * @param  {ProgrammeType} programmeType An ProgrammeType object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no ProgrammeType data is provided then the method returns null.
         */
        function save(programmeType, callback) {
            if (programmeType && programmeType.id) {
                return $http.put(url + programmeType.id, programmeType).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the PunctualityMonitoring Data Service. This defines how to handle data about PunctualityMonitoring objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('PunctualityMonitoringService', ['ui-notification'])
        .factory('PunctualityMonitoring', punctualityMonitoringFactory);

    punctualityMonitoringFactory.$inject = ['$http', 'GLOBAL', 'Notification'];

    function punctualityMonitoringFactory($http, GLOBAL, Notification) {
        var self = this;
        var url = GLOBAL.API + '/punctualityMonitorings/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the PunctualityMonitoring from the API collection.
         *
         * @return {PunctualityMonitoring} An array of PunctualityMonitoring objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a PunctualityMonitoring from the API collection.
         * @param  {int} id of the PunctualityMonitoring object that is to be retrieved. 
         * @return {PunctualityMonitoring} An PunctualityMonitoring object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an PunctualityMonitoring object in the database by POSTing the
         * required data to the API.
         *
         * @param  {PunctualityMonitoring} punctualityMonitoring An PunctualityMonitoring object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no PunctualityMonitoring data is provided then the method returns null.
         */
        function create(punctualityMonitoring, callback) {
            if (punctualityMonitoring) {
                return $http.post(url, punctualityMonitoring).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    Notification.error("Error:" + response.data.message);
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing PunctualityMonitoring object.
         *
         * @param  {PunctualityMonitoring} punctualityMonitoring An PunctualityMonitoring object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no PunctualityMonitoring data is provided then the method returns null.
         */
        function save(punctualityMonitoring, callback) {
            if (punctualityMonitoring && punctualityMonitoring.id) {
                return $http.put(url + punctualityMonitoring.id, punctualityMonitoring).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
/*

(function() {

	angular.module('PunctualityMonitoringService', [])
	.factory('PunctualityMonitoring', function($http, GLOBAL) {
		var self = this;
		var url = GLOBAL.API + '/punctualityMonitorings/';

		var factory = {
			query: function() {
				return $http.get(url);
			},
			get: function(id) {
				if (id) {
					return $http.get(url + id);
				} else {
					return null;
				}
			},
			create: function(punctualityMonitoring, callback) {
				if (punctualityMonitoring) {
					return $http.post(url, punctualityMonitoring).then(function(response) {
						if (callback) { callback(); }
						return response.data;
					}, function(response) {
						return {
							status: response.status,
							error: response.data
						};
					});
				} else {
					return null;
				}
			},
			save: function(punctualityMonitoring, callback) {
				if (punctualityMonitoring && punctualityMonitoring.id) {
					return $http.put(url + punctualityMonitoring.id, punctualityMonitoring).then(function(response) {
						if (callback) { callback(); }
						return response.data;
					}, function(response) {
						return {
							status: response.status,
							error: response.data
						};
					});
				} else {
					return null;
				}
			}

		};

		return factory;
	});

}());
*/
;/**
 * This is the factory definition for the ReferralReason Data Service. This defines how to handle data about ReferralReason objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('ReferralReasonService', ['ui-notification'])
        .factory('ReferralReason', referralReasonFactory);

    referralReasonFactory.$inject = ['$http', 'GLOBAL', 'Notification'];

    function referralReasonFactory($http, GLOBAL, Notification) {
        var self = this;
        var url = GLOBAL.API + '/referralReasons/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the ReferralReason from the API collection.
         *
         * @return {ReferralReason} An array of ReferralReason objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a ReferralReason from the API collection.
         * @param  {int} id of the ReferralReason object that is to be retrieved. 
         * @return {ReferralReason} An ReferralReason object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an ReferralReason object in the database by POSTing the
         * required data to the API.
         *
         * @param  {ReferralReason} referralReason An ReferralReason object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no ReferralReason data is provided then the method returns null.
         */
        function create(referralReason, callback) {
            if (referralReason) {
                return $http.post(url, referralReason).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    Notification.error("Error:" + response.data.message);
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing ReferralReason object.
         *
         * @param  {ReferralReason} referralReason An ReferralReason object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no ReferralReason data is provided then the method returns null.
         */
        function save(referralReason, callback) {
            if (referralReason && referralReason.id) {
                return $http.put(url + referralReason.id, referralReason).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the ReportingPeriod Data Service. This defines how to handle data about ReportingPeriod objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('ReportingPeriodService', [])
        .factory('ReportingPeriod', reportingPeriodFactory);

    reportingPeriodFactory.$inject = ['$http', 'GLOBAL'];

    function reportingPeriodFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/reportingPeriods/';
        //Public Interface
        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save,
            getByYear: getByYear
        };

        return factory;

        //Private Interface
        /**
         * This method is used to retrieve all the ReportingPeriod from the API collection.
         *
         * @return {ReportingPeriod} An array of ReportingPeriod objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve all the ReportingPeriod from the API collection of current year.
         *
         * @return {ReportingPeriod} An array of ReportingPeriod objects.
         */
        function getByYear() {
            return $http.get(url + 'years');
        }
        /**
         * This method is used to retrieve an instance of a ReportingPeriod from the API collection.
         * @param  {int} id of the ReportingPeriod object that is to be retrieved. 
         * @return {ReportingPeriod} An ReportingPeriod object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an ReportingPeriod object in the database by POSTing the
         * required data to the API.
         *
         * @param  {ReportingPeriod} reportingPeriod An ReportingPeriod object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no ReportingPeriod data is provided then the method returns null.
         */
        function create(reportingPeriod, callback) {
            if (reportingPeriod) {
                return $http.post(url, reportingPeriod).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }

        }

        /**
         * This method is used to save changes to an existing ReportingPeriod object.
         *
         * @param  {ReportingPeriod} reportingPeriod An ReportingPeriod object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no ReportingPeriod data is provided then the method returns null.
         */
        function save(reportingPeriod, callback) {
            if (reportingPeriod && reportingPeriod.id) {
                return $http.put(url + reportingPeriod.id, reportingPeriod).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }

        }

    }
})();
;/**
 * This is the factory definition for the RestrictedUseIndicator Data Service. This defines how to handle data about RestrictedUseIndicator objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('RestrictedUseIndicatorService', [])
        .factory('RestrictedUseIndicator', restrictedUseIndicatorFactory);

    restrictedUseIndicatorFactory.$inject = ['$http', 'GLOBAL'];

    function restrictedUseIndicatorFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/restrictedUseIndicators/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;
        //Private Interface
        /**
         * This method is used to retrieve all the RestrictedUseIndicator from the API collection.
         *
         * @return {RestrictedUseIndicator} An array of RestrictedUseIndicator objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a RestrictedUseIndicator from the API collection.
         * @param  {int} id of the RestrictedUseIndicator object that is to be retrieved. 
         * @return {RestrictedUseIndicator} An RestrictedUseIndicator object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an RestrictedUseIndicator object in the database by POSTing the
         * required data to the API.
         *
         * @param  {RestrictedUseIndicator} restrictedUseIndicator An RestrictedUseIndicator object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no RestrictedUseIndicator data is provided then the method returns null.
         */
        function create(restrictedUseIndicator, callback) {
            if (restrictedUseIndicator) {
                return $http.post(url, restrictedUseIndicator).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
        /**
         * This method is used to save changes to an existing RestrictedUseIndicator object.
         *
         * @param  {RestrictedUseIndicator} restrictedUseIndicator An RestrictedUseIndicator object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no RestrictedUseIndicator data is provided then the method returns null.
         */
        function save(restrictedUseIndicator, callback) {
            if (restrictedUseIndicator && restrictedUseIndicator.id) {
                return $http.put(url + restrictedUseIndicator.id, restrictedUseIndicator).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the Role Data Service. This defines how to handle data about Role objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('RoleService', [])
        .factory('Role', roleFactory);

    roleFactory.$inject = ['$http', 'GLOBAL'];

    function roleFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/roles/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the Role from the API collection.
         *
         * @return {Role} An array of Role objects.
         */
        function getAll() {
            return $http.get(url);
        }


        /**
         * This method is used to retrieve an instance of a Role from the API collection.
         * @param  {int} id of the Role object that is to be retrieved. 
         * @return {Role} An Role object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an Role object in the database by POSTing the
         * required data to the API.
         *
         * @param  {Role} role An Role object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Role data is provided then the method returns null.
         */
        function create(role, callback) {
            if (role) {
                return $http.post(url, role).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing Role object.
         *
         * @param  {Role} role An Role object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Role data is provided then the method returns null.
         */
        function save(role, callback) {
            if (role && role.id) {
                return $http.put(url + role.id, role).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the RoomType Data Service. This defines how to handle data about RoomType objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('RoomTypeService', [])
        .factory('RoomType', roomTypeFactory);

    roomTypeFactory.$inject = ['$http', 'GLOBAL'];

    function roomTypeFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/roomTypes/';

        var factory = {
            query: getAll,
            get: getById,
        };

        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the RoomType from the API collection.
         *
         * @return {RoomType} An array of RoomType objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a RoomType from the API collection.
         * @param  {int} id of the RoomType object that is to be retrieved. 
         * @return {RoomType} An RoomType object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

    }
})();
;/**
 * This is the factory definition for the Room Data Service. This defines how to handle data about Room objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('RoomService', [])
        .factory('Room', roomFactory);

    roomFactory.$inject = ['$http', 'GLOBAL'];

    function roomFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/rooms/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the Room from the API collection.
         *
         * @return {Room} An array of Room objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a Room from the API collection.
         * @param  {int} id of the Room object that is to be retrieved. 
         * @return {Room} An Room object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an Room object in the database by POSTing the
         * required data to the API.
         *
         * @param  {Room} room An Room object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Room data is provided then the method returns null.
         */
        function create(room, callback) {
            if (room) {
                return $http.post(url, room).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }


        /**
         * This method is used to save changes to an existing Room object.
         *
         * @param  {Room} room An Room object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Room data is provided then the method returns null.
         */
        function save(room, callback) {
            if (room && room.id) {
                return $http.put(url + room.id, room).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the SchoolPriority Data Service. This defines how to handle data about SchoolPriority objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('SchoolPriorityService', [])
        .factory('SchoolPriority', schoolPriorityFactory);

    schoolPriorityFactory.$inject = ['$http', 'GLOBAL'];

    function schoolPriorityFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/schoolPriorities/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the SchoolPriority from the API collection.
         *
         * @return {SchoolPriority} An array of SchoolPriority objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a SchoolPriority from the API collection.
         * @param  {int} id of the SchoolPriority object that is to be retrieved. 
         * @return {SchoolPriority} An SchoolPriority object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }


        /**
         * This method is used to create a new instance of an SchoolPriority object in the database by POSTing the
         * required data to the API.
         *
         * @param  {SchoolPriority} schoolPriority An SchoolPriority object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no SchoolPriority data is provided then the method returns null.
         */
        function create(schoolPriority, callback) {
            if (schoolPriority) {
                return $http.post(url, schoolPriority).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing SchoolPriority object.
         *
         * @param  {SchoolPriority} schoolPriority An SchoolPriority object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no SchoolPriority data is provided then the method returns null.
         */
        function save(schoolPriority, callback) {
            if (schoolPriority && schoolPriority.id) {
                return $http.put(url + schoolPriority.id, schoolPriority).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the SchoolReportStatus Data Service. This defines how to handle data about SchoolReportStatus objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('SchoolReportStatusService', [])
        .factory('SchoolReportStatus', schoolReportStatusFactory);

    schoolReportStatusFactory.$inject = ['$http', 'GLOBAL'];

    function schoolReportStatusFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/schoolReportStatuses/';

        var factory = {
            query: getAll,
            get: getById,
            save: save
        };

        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the SchoolReportStatus from the API collection.
         *
         * @return {SchoolReportStatus} An array of SchoolReportStatus objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a SchoolReportStatus from the API collection.
         * @param  {int} id of the SchoolReportStatus object that is to be retrieved. 
         * @return {SchoolReportStatus} An SchoolReportStatus object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }


        /**
         * This method is used to save changes to an existing SchoolReportStatus object.
         *
         * @param  {schoolReportStatus} SchoolReportStatus An SchoolReportStatus object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no SchoolReportStatus data is provided then the method returns null.
         */
        function save(schoolReportStatus, callback) {
            if (schoolReportStatus && schoolReportStatus.id) {
                return $http.put(url + schoolReportStatus.id, schoolReportStatus).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the SchoolType Data Service. This defines how to handle data about SchoolType objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('SchoolTypeService', [])
        .factory('SchoolType', schoolTypeFactory);

    schoolTypeFactory.$inject = ['$http', 'GLOBAL'];

    function schoolTypeFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/schoolTypes/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;

        // Private Interface

        /**
         * This method is used to retrieve all the SchoolType from the API collection.
         *
         * @return {SchoolType} An array of SchoolType objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a SchoolType from the API collection.
         * @param  {int} id of the SchoolType object that is to be retrieved. 
         * @return {SchoolType} An SchoolType object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }


        /**
         * This method is used to create a new instance of an SchoolType object in the database by POSTing the
         * required data to the API.
         *
         * @param  {SchoolType} schoolType An SchoolType object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no SchoolType data is provided then the method returns null.
         */
        function create(schoolType, callback) {
            if (schoolType) {
                return $http.post(url, schoolType).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing School object.
         *
         * @param  {SchoolType} schoolType An SchoolType object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no School data is provided then the method returns null.
         */
        function save(schoolType, callback) {
            if (schoolType && schoolType.id) {
                return $http.put(url + schoolType.id, schoolType).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the School Data Service. This defines how to handle data about School objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('SchoolService', [])
        .factory('School', schoolFactory);

    schoolFactory.$inject = ['$http', 'GLOBAL'];

    function schoolFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/schools/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the School from the API collection.
         *
         * @return {School} An array of School objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a School from the API collection.
         * @param  {int} id of the School object that is to be retrieved. 
         * @return {School} An School object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an School object in the database by POSTing the
         * required data to the API.
         *
         * @param  {School} school An School object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no School data is provided then the method returns null.
         */
        function create(school, callback) {
            if (school) {
                return $http.post(url, school).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }


        /**
         * This method is used to save changes to an existing School object.
         *
         * @param  {School} school An School object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no School data is provided then the method returns null.
         */
        function save(school, callback) {
            if (school && school.id) {
                return $http.put(url + school.id, school).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the settingsService Data Service. This defines how to handle data about settingsService objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('SettingsService', [])
        .factory('Settings', settingsFactory);

    settingsFactory.$inject = ['$http', 'GLOBAL'];

    function settingsFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/settings/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;

        //Private Interface
        /**
         * This method is used to retrieve all the settingsService from the API collection.       *
         * @return {settingsService} An array of settingsService objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a settingsService from the API collection.
         * @param  {int} id of the settingsService object that is to be retrieved. 
         * @return {settingsService} An settingsService object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an settingsService object in the database by POSTing the
         * required data to the API.
         *
         * @param  {settingsService} settings An settingsService object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no settingsService data is provided then the method returns null.
         */
        function create(settings, callback) {
            if (settings) {
                return $http.post(url, settings).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }

        }


        /**
         * This method is used to save changes to an existing settingsService object.
         *
         * @param  {settingsService} settings An settingsService object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no settingsService data is provided then the method returns null.
         */
        function save(settings, callback) {
            if (settings && settings.id) {
                return $http.put(url + settings.id, settings).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }

})();
;/**
 * This is the factory definition for the SourceOfFunding Data Service. This defines how to handle data about SourceOfFunding objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('SourceOfFundingService', [])
        .factory('SourceOfFunding', sourceOfFundingFactory);

    sourceOfFundingFactory.$inject = ['$http', 'GLOBAL'];

    function sourceOfFundingFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/sourceOfFundings/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;

        // Private Interface

        /**
         * This method is used to retrieve all the SourceOfFunding from the API collection.
         *
         * @return {SourceOfFunding} An array of SourceOfFunding objects.
         */
        function getAll() {
            return $http.get(url);
        }


        /**
         * This method is used to retrieve an instance of a SourceOfFunding from the API collection.
         * @param  {int} id of the SourceOfFunding object that is to be retrieved. 
         * @return {SourceOfFunding} An SourceOfFunding object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an SourceOfFunding object in the database by POSTing the
         * required data to the API.
         *
         * @param  {SourceOfFunding} sourceOfFunding An SourceOfFunding object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no SourceOfFunding data is provided then the method returns null.
         */
        function create(sourceOfFunding, callback) {
            if (sourceOfFunding) {
                return $http.post(url, sourceOfFunding).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing SourceOfFunding object.
         *
         * @param  {SourceOfFunding} sourceOfFunding An SourceOfFunding object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no SourceOfFunding data is provided then the method returns null.
         */
        function save(sourceOfFunding, callback) {
            if (sourceOfFunding && sourceOfFunding.id) {
                return $http.put(url + sourceOfFunding.id, sourceOfFunding).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the SpecialCategory Data Service. This defines how to handle data about SpecialCategory objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('SpecialCategoryService', [])
        .factory('SpecialCategory', specialCategoryFactory);

    specialCategoryFactory.$inject = ['$http', 'GLOBAL'];

    function specialCategoryFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/specialCategories/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;

        // Private Interface

        /**
         * This method is used to retrieve all the SpecialCategory from the API collection.
         *
         * @return {SpecialCategory} An array of SpecialCategory objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a SpecialCategory from the API collection.
         * @param  {int} id of the SpecialCategory object that is to be retrieved. 
         * @return {SpecialCategory} An SpecialCategory object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }


        /**
         * This method is used to create a new instance of an SpecialCategory object in the database by POSTing the
         * required data to the API.
         *
         * @param  {SpecialCategory} specialCategory An SpecialCategory object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no SpecialCategory data is provided then the method returns null.
         */
        function create(specialCategory, callback) {
            if (specialCategory) {
                return $http.post(url, specialCategory).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing SpecialCategory object.
         *
         * @param  {SpecialCategory} specialCategory An SpecialCategory object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no SpecialCategory data is provided then the method returns null.
         */
        function save(specialCategory, callback) {
            if (specialCategory && specialCategory.id) {
                return $http.put(url + specialCategory.id, specialCategory).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }

})();
;/**
 * This is the factory definition for the StaffType Data Service. This defines how to handle data about StaffType objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */


(function() {

    angular
        .module('StaffTypeService', [])
        .factory('StaffType', staffTypeFactory);

    staffTypeFactory.$inject = ['$http', 'GLOBAL'];

    function staffTypeFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/staffTypes/';
        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };
        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the StaffType from the API collection.
         *
         * @return {StaffType} An array of StaffType objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a StaffType from the API collection.
         * @param  {int} id of the StaffType object that is to be retrieved. 
         * @return {StaffType} An StaffType object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an StaffType object in the database by POSTing the
         * required data to the API.
         *
         * @param  {StaffType} staffType An StaffType object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no StaffType data is provided then the method returns null.
         */
        function create(staffType, callback) {
            if (staffType) {
                return $http.post(url, staffType).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }


        /**
         * This method is used to save changes to an existing StaffType object.
         *
         * @param  {StaffType} staffType An StaffType object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no StaffType data is provided then the method returns null.
         */
        function save(staffType, callback) {
            if (staffType && staffType.id) {
                return $http.put(url + staffType.id, staffType).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the Staff Data Service. This defines how to handle data about Staff objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('StaffService', [
            'cid.app.constants',
            'cid.app.variables'
        ])
        .factory('Staff', staffFactory);

    staffFactory.$inject = ['$http', 'GLOBAL', 'APP'];

    function staffFactory($http, GLOBAL, APP) {
        var MAX_RETURN = 9999;
        var vm = this;
        var url = GLOBAL.API + '/staff/';

        var staffList = [];

        var factory = {
            query: getAll,
            queryPage: getAllByPage,
            get: getById,
            create: create,
            save: save,
            getTimetable: getTimetable,
            getCourseGroups: getCourseGroups
        };

        return factory;

        /**
         * This method is used to retrieve all the Staff from the API collection.
         *
         * @return {Staff} An array of Staff objects.
         */
        function getAll(current) {
            if (current === undefined) {
                current = true;
            }
            var request = '';
            if (current) {
                request += '?current=1&page=0&size=' + MAX_RETURN + '&sort=person.surname,ASC';
            } else {
                request += 'all/';
            }
            return $http.get(url + request);
        }

        function getAllByPage(page, size, sort) {
            var request = '?current=1&';
            if (page && page !== 0) {
                request += 'page=' + page + '&';
            }
            if (size && size !== 0) {
                request += 'size=' + size + '&';
            } else {
                request += 'size=' + MAX_RETURN + '&';
            }
            if (sort && sort !== '') {
                request += 'sort=' + sort + '&';
            }
            return $http.get(url + request);
        }

        /**
         * This method is used to retrieve an instance of a Staff from the API collection.
         * @param  {int} id of the Staff object that is to be retrieved.
         * @return {Staff} An Staff object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an Staff object in the database by POSTing the
         * required data to the API.
         *
         * @param  {Staff} Staff An staff object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Staff data is provided then the method returns null.
         */
        function create(staff, callback) {
            if (staff) {
                return $http.post(url, staff).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing Staff object.
         *
         * @param  {Staff} Staff An staff object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Staff data is provided then the method returns null.
         */
        function save(staff, callback) {
            if (staff && staff.id) {
                return $http.put(url + staff.id, staff).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to retrieve the timetable data for the supplied staffId.
         *
         * @param  {Integer} staffId the ID for a memeber of staff
         * @return {promise}         a promise to the staff timetable API
         */
        function getTimetable(staffId) {
            year = APP.getYear();
            if (staffId !== undefined && staffId !== null) {
                return $http.get(url + staffId + '/timetable', {
                    params: {
                        yearId: year.id
                    }
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to retrieve the course groups data for the supplied staffId.
         *
         * @param  {Integer} staffId the ID for a memeber of staff
         * @return {promise}         a promise to the staff course-groups API
         */
        function getCourseGroups(staffId) {
            year = APP.getYear();
            if (staffId !== undefined && staffId !== null) {
                return $http.get(url + staffId + '/course-groups', {
                    params: {
                        yearId: year.id
                    }
                });
            } else {
                return null;
            }
        }

    }
})();
;/**
 * This is the factory definition for the StudentBursary Data Service. This defines how to handle data about StudentBursary objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */
(function() {

    angular
        .module('StudentBursaryService', [])
        .factory('StudentBursary', studentBursaryFactory);

    studentBursaryFactory.$inject = ['$http', 'GLOBAL'];

    function studentBursaryFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/students/';

        var factory = {
            query: getAll,
            get: getByStudentId,
            save: save
        };

        return factory;

        /**
         * This method is used to retrieve all the StudentBursary from the API collection.
         *
         * @return {StudentBursary} An array of StudentBursary objects.
         */
        function getAll() {
            return $http.get(url);
        }


        /**
         * This method is used to retrieve an instance of a StudentBursary from the API collection.
         * @param  {int} id of the StudentBursary object that is to be retrieved. 
         * @return {StudentBursary} An StudentBursary object as identified by the id.
         */
        function getByStudentId(studentId) {
            if (studentId) {
                return $http.get(url + studentId + '/bursary');
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing StudentBursary object.
         *
         * @param  {StudentBursary} studentBursary An StudentBursary object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no StudentBursary data is provided then the method returns null.
         */
        function save(studentBursary, callback) {
            if (studentBursary && studentBursary.studentId) {
                return $http.put(url + studentBursary.studentId + '/bursary', studentBursary).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the StudentEntryQualification Data Service. This defines how to handle data about StudentEntryQualification objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('StudentEntryQualificationService', [])
        .factory('StudentEntryQualification', studentEntryQualificationFactory);

    studentEntryQualificationFactory.$inject = ['$http', 'GLOBAL'];

    function studentEntryQualificationFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/';
        //Public Interface
        var factory = {
            query: getAll,
            get: getById,
            entryQualification: getEntryQualification,
            delete: deleteById,
            create: create,
            save: save
        };
        return factory;

        // Private Interface

        /**
         * This method is used to retrieve all the StudentEntryQualification from the API collection.
         *
         * @return {StudentEntryQualification} An array of StudentEntryQualification objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an collection of StudentEntryQualification entities from the API collection.
         * @param  {int} studentEntryQualificationId of the StudentEntryQualification object that is to be retrieved. 
         * @return {StudentEntryQualification} An StudentEntryQualification object as identified by the id.
         */
        function getById(studentEntryQualificationId) {
            if (studentEntryQualificationId) {
                return $http.get(url + 'students/' + studentEntryQualificationId + '/entryQualifications');
            } else {
                return null;
            }
        }

        /**
         * This method is used to retrieve an instance of a StudentEntryQualification from the API collection.
         * @param  {int} studentEntryQualificationId of the StudentEntryQualification object that is to be retrieved. 
         * @return {StudentEntryQualification} An StudentEntryQualification object as identified by the id.
         */
        function getEntryQualification(studentEntryQualificationId) {
            return $http.get(url + 'studentEntryQualifications/' + studentEntryQualificationId);
        }

        /**
         * This method is used to delete an instance of a StudentEntryQualification from the API collection.
         * @param  {int} studentEntryQualificationId of the StudentEntryQualification object that is to be retrieved. 
         * @return {StudentEntryQualification} An StudentEntryQualification object as identified by the studentEntryQualificationId.
         */
        function deleteById(studentEntryQualificationId) {
            if (studentEntryQualificationId) {
                return $http.delete(url + 'studentEntryQualifications/' + studentEntryQualificationId);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an StudentEntryQualification object in the database by POSTing the
         * required data to the API.
         *
         * @param  {StudentEntryQualification} studentEntryQualification An StudentEntryQualification object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no studentEntryQualification data is provided then the method returns null.
         */
        function create(studentEntryQualification, callback) {
            if (studentEntryQualification) {
                return $http.post(url + 'studentEntryQualifications', studentEntryQualification).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing StudentEntryQualification object.
         *
         * @param  {StudentEntryQualification} studentEntryQualification An StudentEntryQualification object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no studentEntryQualification data is provided then the method returns null.
         */
        function save(studentEntryQualification, callback) {
            if (studentEntryQualification && studentEntryQualification.studentEntryQualificationId) {
                return $http.put(url + 'studentEntryQualifications/' + studentEntryQualification.studentEntryQualificationId, studentEntryQualification).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the StudentInterimReport Data Service. This defines how to handle data about StudentInterimReport objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('StudentInterimReportService', [])
        .factory('StudentInterimReport', studentInterimReportFactory);

    studentInterimReportFactory.$inject = ['$http', 'GLOBAL'];

    function studentInterimReportFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/students/';

        var factory = {
            query: getAll,
            get: getById

        };

        return factory;


        /**
         * This method is used to retrieve all the StudentInterimReport from the API collection.
         *
         * @return {StudentInterimReport} An array of StudentInterimReport objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve a collection of a StudentInterimReport of a Student from the API collection.
         * @param  {int} studentId of the StudentInterimReport object that is to be retrieved. 
         * @return {StudentInterimReport} An An array of StudentInterimReports object as identified by the studentId.
         */
        function getById(studentId) {
            if (studentId) {
                return $http.get(url + studentId + '/interimReports');
            } else {
                return null;
            }
        }

    }

})();
;/**
 * This is the factory definition for the StudentLearningSupportCost Data Service. This defines how to handle data about StudentLearningSupportCost objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('StudentLearningSupportCostService', [])
        .factory('LearningSupportCost', studentLearningSupportCostFactory);

    studentLearningSupportCostFactory.$inject = ['$http', 'GLOBAL'];

    function studentLearningSupportCostFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/';

        var factory = {
            query: getAll,
            get: getById,
            getByStudent: getByStudent,
            create: create,
            save: save
        };

        return factory;

        // Private Interface

        /**
         * This method is used to retrieve all the StudentLearningSupportCost from the API collection.
         *
         * @return {StudentLearningSupportCost} An array of StudentLearningSupportCost objects.
         */
        function getAll() {
            return $http.get(url + 'learningSupportCosts');
        }

        /**
         * This method is used to retrieve an instance of a StudentLearningSupportCost from the API collection.
         * @param  {int} id of the StudentLearningSupportCost object that is to be retrieved. 
         * @return {StudentLearningSupportCost} An StudentLearningSupportCost object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + 'learningSupportCosts/' + id);
            } else {
                return null;
            }
        }

        function getByStudent(id) {
            if (id) {
                return $http.get(url + 'students/' + id + '/learningSupportCosts');
            } else {
                return null;
            }
        }


        /**
         * This method is used to create a new instance of an StudentLearningSupportCost object in the database by POSTing the
         * required data to the API.
         *
         * @param  {StudentLearningSupportCost} studentLearningSupportCost An StudentLearningSupportCost object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no StudentLearningSupportCost data is provided then the method returns null.
         */
        function create(studentLearningSupportCost, callback) {
            if (studentLearningSupportCost) {
                return $http.post(url + 'learningSupportCosts', studentLearningSupportCost).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing School object.
         *
         * @param  {StudentLearningSupportCost} studentLearningSupportCost An StudentLearningSupportCost object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no School data is provided then the method returns null.
         */
        function save(studentLearningSupportCost, callback) {
            if (studentLearningSupportCost && studentLearningSupportCost.id) {
                return $http.put(url + 'learningSupportCosts/' + studentLearningSupportCost.id, studentLearningSupportCost).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the StudentLearningSupportVisit Data Service. This defines how to handle data about StudentLearningSupportVisit objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('StudentLearningSupportVisitService', [])
        .factory('LearningSupportVisit', studentLearningSupportVisitFactory);

    studentLearningSupportVisitFactory.$inject = ['$http', 'GLOBAL'];

    function studentLearningSupportVisitFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/';

        var factory = {
            query: getAll,
            get: getById,
            getByStudent: getByStudent,
            create: create,
            save: save
        };

        return factory;

        // Private Interface

        /**
         * This method is used to retrieve all the StudentLearningSupportVisit from the API collection.
         *
         * @return {StudentLearningSupportVisit} An array of StudentLearningSupportVisit objects.
         */
        function getAll() {
            return $http.get(url + 'learningSupportVisits');
        }

        /**
         * This method is used to retrieve an instance of a StudentLearningSupportVisit from the API collection.
         * @param  {int} id of the StudentLearningSupportVisit object that is to be retrieved. 
         * @return {StudentLearningSupportVisit} An StudentLearningSupportVisit object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + 'learningSupportVisits/' + id);
            } else {
                return null;
            }
        }

        function getByStudent(id) {
            if (id) {
                return $http.get(url + 'students/' + id + '/learningSupportVisits');
            } else {
                return null;
            }
        }


        /**
         * This method is used to create a new instance of an StudentLearningSupportVisit object in the database by POSTing the
         * required data to the API.
         *
         * @param  {StudentLearningSupportVisit} studentLearningSupportVisit An StudentLearningSupportVisit object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no StudentLearningSupportVisit data is provided then the method returns null.
         */
        function create(studentLearningSupportVisit, callback) {
            if (studentLearningSupportVisit) {
                return $http.post(url + 'learningSupportVisits', studentLearningSupportVisit).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing School object.
         *
         * @param  {StudentLearningSupportVisit} studentLearningSupportVisit An StudentLearningSupportVisit object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no School data is provided then the method returns null.
         */
        function save(studentLearningSupportVisit, callback) {
            if (studentLearningSupportVisit && studentLearningSupportVisit.id) {
                return $http.put(url + 'learningSupportVisits/' + studentLearningSupportVisit.id, studentLearningSupportVisit).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the StudentLearningSupport Data Service. This defines how to handle data about StudentLearningSupport objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */
(function() {
    angular
        .module('StudentLearningSupportService', [])
        .factory('StudentLearningSupport', studentLearningSupportFactory);

    studentLearningSupportFactory.$inject = ['$http', 'GLOBAL'];

    function studentLearningSupportFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/students/';
        var factory = {
            query: getAll,
            get: getById,
            save: save
        };
        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the StudentLearningSupport from the API collection.
         *
         * @return {StudentLearningSupport} An array of StudentLearningSupport objects.
         */
        function getAll() {
            return $http.get(url);
        }
        /**
         * This method is used to retrieve an instance of a StudentLearningSupport of a Student from the API collection.
         * @param  {int} studentId of the Student object that is to be retrieved. 
         * @return {StudentLearningSupport} An StudentLearningSupport object as identified by the studentId.
         */
        function getById(studentId) {
            if (studentId) {
                return $http.get(url + studentId + '/learningSupport');
            } else {
                return null;
            }
        }

        function save(studentLearningSupport, callback) {
            if (studentLearningSupport && studentLearningSupport.studentId) {
                return $http.put(url + studentLearningSupport.studentId + '/learningSupport', studentLearningSupport).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the StudentOverallAttendance Data Service. This defines how to handle data about StudentOverallAttendance objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */
(function() {

    angular
        .module('StudentOverallAttendanceService', [])
        .factory('StudentOverallAttendance', studentOverAllAttendanceFactory);

    studentOverAllAttendanceFactory.$inject = ['$http', 'GLOBAL'];

    function studentOverAllAttendanceFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/students/';
        var factory = {
            query: getAll,
            get: getByStudentId,
            save: save
        };

        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the StudentOverallAttendance from the API collection.
         *
         * @return {StudentOverallAttendance} An array of StudentOverallAttendance objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a StudentOverallAttendance of a student from the API collection.
         * @param  {int} studentId of the StudentOverallAttendance object that is to be retrieved. 
         * @return {StudentOverallAttendance} An StudentOverallAttendance object as identified by the studentId.
         */
        function getByStudentId(studentId) {
            if (studentId) {
                return $http.get(url + studentId + '/attendance');
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing StudentOverallAttendance object.
         *
         * @param  {StudentOverallAttendance} studentOverallAttendance An StudentOverallAttendance object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no StudentOverallAttendance data is provided then the method returns null.
         */
        function save(studentOverallAttendance, callback) {
            if (studentOverallAttendance && studentOverallAttendance.studentId) {
                return $http.put(url + studentOverallAttendance.studentId + '/attendance', studentOverallAttendance).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the StudentRemarkPermission Data Service. This defines how to handle data about StudentRemarkPermission objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('StudentRemarkPermissionService', [])
        .factory('StudentRemarkPermission', studentRemarkPermissionFactory);

    studentRemarkPermissionFactory.$inject = ['$http', 'GLOBAL'];

    function studentRemarkPermissionFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/studentRemarkPermissions/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the StudentRemarkPermission from the API collection.
         *
         * @return {StudentRemarkPermission} An array of StudentRemarkPermission objects.
         */
        function getAll() {
            return $http.get(url);
        }
        /**
         * This method is used to retrieve an instance of a StudentRemarkPermission from the API collection.
         * @param  {int} id of the StudentRemarkPermission object that is to be retrieved. 
         * @return {StudentRemarkPermission} An StudentRemarkPermission object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }
        /**
         * This method is used to create a new instance of an StudentRemarkPermission object in the database by POSTing the
         * required data to the API.
         *
         * @param  {StudentRemarkPermission} studentRemarkPermission An StudentRemarkPermission object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no studentRemarkPermission data is provided then the method returns null.
         */
        function create(studentRemarkPermission, callback) {
            if (studentRemarkPermission) {
                return $http.post(url, studentRemarkPermission).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
        /**
         * This method is used to save changes to an existing StudentRemarkPermission object.
         *
         * @param  {StudentRemarkPermission} studentRemarkPermission An StudentRemarkPermission object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no studentRemarkPermission data is provided then the method returns null.
         */
        function save(studentRemarkPermission, callback) {
            if (studentRemarkPermission && studentRemarkPermission.id) {
                return $http.put(url + studentRemarkPermission.id, studentRemarkPermission).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the StudentSpecialCategory Data Service. This defines how to handle data about StudentSpecialCategory objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */


(function() {

    angular
        .module('StudentSpecialCategoryService', [])
        .factory('StudentSpecialCategory', studentSpecialCatergoryFactory);

    studentSpecialCatergoryFactory.$inject = ['$http', 'GLOBAL'];

    function studentSpecialCatergoryFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/';

        var factory = {
            query: getAll,
            get: getById,
            getForm: getFormByStudentId,
            getCompleteForm: getCompleteFormByStudentId,
            create: create,
            save: save
        };
        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the StudentSpecialCategory from the API collection.
         *
         * @return {StudentSpecialCategory} An array of StudentSpecialCategory objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a StudentSpecialCategory from the API collection.
         * @param  {int} id of the StudentSpecialCategory object that is to be retrieved. 
         * @return {StudentSpecialCategory} An StudentSpecialCategory object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + 'studentSpecialCategories/' + id);
            } else {
                return null;
            }
        }

        function getFormByStudentId(studentId) {
            return $http.get(url + 'students/' + studentId + '/specialCategories');
        }


        function getCompleteFormByStudentId(studentId) {
            return $http.get(url + 'students/' + studentId + '/specialCategoriesForm');
        }
        /**
         * This method is used to create a new instance of an StudentSpecialCategory object in the database by POSTing the
         * required data to the API.
         *
         * @param  {StudentSpecialCategory} studentSpecialCategory An StudentSpecialCategory object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no studentSpecialCategory data is provided then the method returns null.
         */
        function create(studentSpecialCategory, callback) {
            if (studentSpecialCategory) {
                return $http.post(url + 'studentSpecialCategories', studentSpecialCategory).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
        /**
         * This method is used to save changes to an existing StudentSpecialCategory object.
         *
         * @param  {StudentSpecialCategory} StudentSpecialCategory An StudentSpecialCategory object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no StudentSpecialCategory data is provided then the method returns null.
         */
        function save(studentSpecialCategory, callback) {
            if (studentSpecialCategory && studentSpecialCategory.id) {
                return $http.put(url + 'studentSpecialCategories/' + studentSpecialCategory.id, studentSpecialCategory).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the StudentType Data Service. This defines how to handle data about StudentType objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('StudentTypeService', [])
        .factory('StudentType', studentTypeFactory);

    studentTypeFactory.$inject = ['$http', 'GLOBAL'];

    function studentTypeFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/studentTypes/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the StudentType from the API collection.
         *
         * @return {StudentType} An array of StudentType objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a StudentType from the API collection.
         * @param  {int} id of the StudentType object that is to be retrieved. 
         * @return {StudentType} An StudentType object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an StudentType object in the database by POSTing the
         * required data to the API.
         *
         * @param  {StudentType} studentType An StudentType object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no studentType data is provided then the method returns null.
         */
        function create(studentType, callback) {
            if (studentType) {
                return $http.post(url, studentType).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing StudentType object.
         *
         * @param  {StudentType} studentType An StudentType object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no studentType data is provided then the method returns null.
         */
        function save(studentType, callback) {
            if (studentType && studentType.id) {
                return $http.put(url + studentType.id, studentType).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the StudentWarning Data Service. This defines how to handle data about StudentWarning objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('StudentWarningService', [])
        .factory('StudentWarning', studentWarningFactory);

    studentWarningFactory.$inject = ['$http', 'GLOBAL', 'APP'];

    function studentWarningFactory($http, GLOBAL, APP) {
        var self = this;
        var url = GLOBAL.API + '/students/';

        var factory = {
            query: getAll,
            get: getByStudentId,
            getStudentWarning: getByStudent,
            save: save
        };

        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the StudentWarning from the API collection.
         *
         * @return {StudentWarning} An array of StudentWarning objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a StudentWarning from the API collection.
         * @param  {int} studentId of the StudentWarning object that is to be retrieved. 
         * @return {StudentWarning} An StudentWarning object as identified by the studentId.
         */
        function getByStudent(studentId) {
            year = APP.getYear();
            if (studentId !== null) {
                return $http.get(url + studentId + '/warning-code-changes', {
                    params: {
                        yearId: year.id
                    }
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to retrieve an instance of a StudentWarning from the API collection.
         * @param  {int} studentId of the StudentWarning object that is to be retrieved. 
         * @return {StudentWarning} An StudentWarning object as identified by the studentId.
         */
        function getByStudentId(studentId) {
            if (studentId) {
                return $http.get(url + studentId + '/warnings');
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing StudentWarning object.
         *
         * @param  {StudentWarning} studentWarning An StudentWarning object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no studentWarning data is provided then the method returns null.
         */
        function save(studentWarning, callback) {
            if (studentWarning && studentWarning.studentId) {
                return $http.put(url + studentWarning.studentId + '/warnings', studentWarning).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the Student Data Service. This defines how to handle data about Student objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('StudentService', ['cid.app.constants', 'cid.app.variables'])
        .factory('Student', studentFactory);

    studentFactory.$inject = ['$http', 'GLOBAL', 'APP'];

    function studentFactory($http, GLOBAL, APP) {
        var MAX_RETURN = 9999;
        var self = this;
        var url = GLOBAL.API + '/students/';
        var endpoints = {
            current: '/current',
            enrolments: '/enrolments',
            warnings: '/warnings',
            ilpInterviews: '/ilpInterviews',
            studentYears: '/years',
            specialCategories: '/specialCategories',
            bursary: '/bursary',
            results: '/exam-results'
        };

        //Public Interface
        var factory = {
            query: getAll,
            queryPage: getAllByPage,
            get: getById,
            create: create,
            save: save,
            studentYears: studentYears,
            current: getCurrent,
            enrolments: getEnrolments,
            warnings: getStudentWarnings,
            ilpInterviews: getILPInterviews,
            specialCategories: getSpecialCategories,
            bursary: getBursary,
            externalResultsArchive: getExternalResultsArchive,
            learningSupport: getLearningSupport,
            attendance: getAttendance,
            admissions: getAdmissions,
            collegeFundPayments: getCollegeFundPayments,
            interimReports: getInterimReports,
            results: getResults,
            idViolations: getIdViolations,
            // Operations
            withdraw: withdraw,
            optionEntries: optionEntries,
            studentAlternativeUci: getAlternativeUcis,
            saveAdmission: saveAdmission,
            getDataSharingOption: getDataSharingOption,
            saveDataSharingOption: saveDataSharingOption
        };

        return factory;

        //Private Interface
        /**
         * This method is used to retrieve all the Room from the API collection.
         *
         * @return {Student} An array of Student objects.
         */
        function getAll(current) {
            if (current === undefined) {
                current = true;
            }
            var request = '';
            // if (current) {
            // 	request += '?current=1&page=0&size=' + MAX_RETURN + '&sort=person.surname,ASC';
            // } else {
            // 	request += 'all/';
            // }
            return $http.get(url + request);
        }

        function getAllByPage(page, size, sort) {
            var request = '?current=1&';
            if (page && page !== 0) {
                request += 'page=' + page + '&';
            }
            if (size && size !== 0) {
                request += 'size=' + size + '&';
            } else {
                request += 'size=' + MAX_RETURN + '&';
            }
            if (sort && sort !== '') {
                request += 'sort=' + sort + '&';
            }
            return $http.get(url + request);
        }

        /**
         * This method is used to retrieve an instance of a Student from the API collection.
         *
         * @param  {int} id of the Student object that is to be retrieved.
         * @return {Student} A Student object as identified by the id.
         */
        function getById(id) {
            if (id !== undefined && id !== null) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }


        /**
         * This method is used to create a new instance of an Student object in the database by POSTing the
         * required data to the API.
         *
         * @param  {Student} room An Student object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Student data is provided then the method returns null.
         */
        function create(student, callback) {
            if (student) {
                return $http.post(url, student).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }


        /**
         * This method is used to save changes to an existing Student object.
         *
         * @param  {Student} room An Student object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no Student data is provided then the method returns null.
         */
        function save(student, callback) {
            if (student && student.id) {
                return $http.put(url + student.id, student).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        function studentYears(studentId, yearId, data, callback) {
            if (studentId !== null && yearId !== null) {
                if (data) {
                    return $http.put(url + studentId + endpoints.studentYears + '/' + yearId, data).then(function(data, status) {
                        if (callback) {
                            callback();
                        }
                        return response.data;
                    }, function(data, status) {
                        return {
                            status: response.status,
                            error: response.data
                        };
                    });

                } else {
                    return $http.get(url + studentId + endpoints.studentYears + '/' + yearId);
                }
            } else {
                return null;
            }
        }

        function getCurrent() {
            return $http.get(url + endpoints.current);
        }
        /**
         * This method is used to retrieve an instance of a Enrolment of a Student from the API collection.
         * @param  {int} studentId of the Student object that is to be retrieved.
         * @return {Enrolment} An Enrolment object as identified by the studentId.
         */
        function getEnrolments(studentId) {
            year = APP.getYear();
            if (studentId !== null) {
                return $http.get(url + studentId + endpoints.enrolments, {
                    params: {
                        yearId: year.id
                    }
                });
            } else
                return null;
        }
        /**
         * This method is used to retrieve an instance of a AttendanceCode of a Student from the API collection.
         * @param  {int} studentId of the Student object that is to be retrieved.
         * @return {AttendanceCode} An AttendanceCode object as identified by the studentId.
         */
        function getAttendance(studentId) {
            year = APP.getYear();
            if (studentId !== null) {
                return $http.get(url + studentId + '/attendance', {
                    params: {
                        yearId: year.id
                    }
                });
            } else {
                return null;
            }
        }
        /**
         * This method is used to retrieve an instance of a InterimReport of a Student from the API collection.
         * @param  {int} studentId of the Student object that is to be retrieved.
         * @return {AttendanceCode} An InterimReport object as identified by the studentId.
         */
        function getInterimReports(studentId) {
            year = APP.getYear();
            if (studentId !== null) {
                return $http.get(url + studentId + '/interimReports', {
                    params: {
                        yearId: year.id
                    }
                });
            } else {
                return null;
            }

        }

        function getLearningSupport(studentId) {
            if (studentId !== null) {
                return $http.get(url + studentId + '/learningSupport');
            } else {
                return null;
            }
        }
        /**
         * This method is used to retrieve an instance of a ILPInterview of a Student from the API collection.
         * @param  {int} studentId of the Student object that is to be retrieved.
         * @return {AttendanceCode} An ILPInterview object as identified by the studentId.
         */
        function getILPInterviews(studentId) {
            if (studentId !== null) {
                return $http.get(url + studentId + endpoints.ilpInterviews);
            } else {
                return null;
            }
        }
        /**
         * This method is used to retrieve an instance of a StudentWarning of a Student from the API collection.
         * @param  {int} studentId of the Student object that is to be retrieved.
         * @return {StudentWarning} An StudentWarning object as identified by the studentId.
         */
        function getStudentWarnings(studentId) {
            if (studentId !== null) {
                return $http.get(url + studentId + endpoints.warnings);
            } else {
                return null;
            }
        }
        /**
         * This method is used to retrieve an instance of a StudentWarning of a Student from the API collection.
         * @param  {int} studentId of the Student object that is to be retrieved.
         * @return {StudentWarning} An StudentWarning object as identified by the studentId.
         */
        function getAdmissions(studentId) {
            if (studentId !== null) {
                return $http.get(url + studentId + '/admissions');
            } else {
                return null;
            }
        }
        /**
         * This method is used to retrieve an instance of a SpecialCategory  of a Student from the API collection.
         * @param  {int} studentId of the Student object that is to be retrieved.
         * @return {SpecialCategory } An SpecialCategory  object as identified by the studentId.
         */
        function getSpecialCategories(studentId) {
            if (studentId !== null) {
                return $http.get(url + studentId + endpoints.specialCategories);
            } else {
                return null;
            }
        }
        /**
         * This method is used to retrieve an instance of a CollegeFundPayment  of a Student from the API collection.
         * @param  {int} studentId of the Student object that is to be retrieved.
         * @return {CollegeFundPayment } An CollegeFundPayment  object as identified by the studentId.
         */
        function getCollegeFundPayments(studentId) {
            if (studentId !== null) {
                return $http.get(url + studentId + '/collegeFundPayments');
            } else {
                return null;
            }
        }
        /**
         * This method is used to retrieve an instance of a CollegeFundPayment  of a Student from the API collection.
         * @param  {int} studentId of the Student object that is to be retrieved.
         * @return {CollegeFundPayment } An CollegeFundPayment  object as identified by the studentId.
         */
        function getBursary(studentId) {
            if (studentId !== null) {
                return $http.get(url + studentId + endpoints.bursary);
            } else {
                return null;
            }
        }
        /**
         * This method is used to retrieve an instance of a StudentBursary   of a Student from the API collection.
         * @param  {int} studentId of the Student object that is to be retrieved.
         * @return {StudentBursary  } An StudentBursary object as identified by the studentId.
         */
        function getExternalResultsArchive(studentId) {
            if (studentId !== null) {
                return $http.get(url + studentId + '/externalResults');
            } else {
                return null;
            }
        }

        /**
         * This method is used to retrieve an array of exam results of a Student from the API.
         * @param  {Integer} studentId The studentId of the student to retireve the results for
         * @return {promise}           A promise that will be used to retireve the results data
         */
        function getResults(studentId) {
            if (studentId !== null) {
                return $http.get(url + studentId + endpoints.results);
            } else {
                return null;
            }
        }

        /**
         * This method is used to withdraw a Student from a specified academic year.
         * @param  {int} studentId of the Student object that is to be retrieved.
         * @return {Student} An Student object as identified by the studentId.
         */
        function withdraw(studentId, withdrawalRequest) {
            if (studentId !== null && withdrawalRequest) {
                return $http.post(url + studentId + '/withdraw', withdrawalRequest);
            } else {
                return null;
            }
        }


        /**
         * This method is used to retrieve an array of student exam options of a Student from the API.
         * @param  {Integer} studentId The studentId of the student to retireve the results for
         * @return {OptionEntries}
         */
        function optionEntries(studentId) {
            year = APP.getYear();
            if (studentId !== null) {
                return $http.get(url + studentId + '/optionEntries', {
                    params: {
                        yearId: year.id
                    }
                });
            } else {
                return null;
            }
        }

        /**
         * This methods is used to retrieve an array of alternative UCIs of a Student from the API.
         * @param  {Integer} studentId The studentId of the student to retireve the results for
         * @return {Array}           an array of alternative UCIs
         */
        function getAlternativeUcis(studentId) {
            if (studentId !== null) {
                return $http.get(url + studentId + '/alternative-ucis');
            } else {
                return null;
            }
        }

        /**
         * This methods is used to update details of Admission
         * @param  {Integer} studentId The studentId of the student to retireve the results for
         * @return {Array}           an array of alternative UCIs
         */
        function saveAdmission(studentAdmission, callback) {
            if (studentAdmission && studentAdmission.id) {
                return $http.put(url + studentAdmission.id + '/admissions', studentAdmission).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This methods is used to retrieve details of Data Sharing Options of a Student from the API.
         * @param  {Integer} studentId The studentId of the student to retireve the results for
         * @return {Array}           an array of alternative UCIs
         */
        function getDataSharingOption(studentId) {
            if (studentId !== null) {
                return $http.get(url + studentId + '/dataSharingOptions');
            } else {
                return null;
            }

        }

        /**
         * This methods is used to retrieve details of Data Sharing Options of a Student from the API.
         * @param  {Integer} studentId The studentId of the student to retireve the results for
         * @return {Array}           an array of alternative UCIs
         */
        function getIdViolations(studentId) {
            if (studentId !== null) {
                return $http.get(url + studentId + '/id-violations');
            } else {
                return null;
            }

        }


        function saveDataSharingOption(dataSharingOption) {
            if (dataSharingOption && dataSharingOption.studentId) {
                return $http.put(url + dataSharingOption.studentId + '/dataSharingOptions', dataSharingOption).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

    }

})();
;/**
 * This is the factory definition for the Subject Data Service. This defines how to handle data about Subject objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */


(function() {
    angular
        .module('SubjectService', [])
        .factory('Subject', subjectFactory);

    subjectFactory.$inject = ['$http', 'GLOBAL'];

    function subjectFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/subjects/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;

        // Private Interface

        /**
         * This method is used to retrieve all the Subject from the API collection.
         *
         * @return {Subject} An array of Subject objects.
         */
        function getAll(options) {
            var reqParams = {};
            if (options) {
                if (options.page) {
                    reqParams.page = options.page;
                }
                if (options.size) {
                    reqParams.size = options.size;
                }
            }
            //			return $http.get(url, {params: reqParams});
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a Subject from the API collection.
         * @param  {int} id of the Subject object that is to be retrieved. 
         * @return {Subject} An Subject object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an Subject object in the database by POSTing the
         * required data to the API.
         *
         * @param  {Subject} subject An Subject object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no subject data is provided then the method returns null.
         */
        function create(subject, callback) {
            if (subject) {
                return $http.post(url, subject).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing Subject object.
         *
         * @param  {Subject} subject An Subject object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no subject data is provided then the method returns null.
         */
        function save(subject, callback) {
            if (subject && subject.id) {
                return $http.put(url + subject.id, subject).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the SupportType Data Service. This defines how to handle data about SupportType objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('SupportTypeService', ['ui-notification'])
        .factory('SupportType', supportTypeFactory);

    supportTypeFactory.$inject = ['$http', 'GLOBAL', 'Notification'];

    function supportTypeFactory($http, GLOBAL, Notification) {
        var self = this;
        var url = GLOBAL.API + '/supportTypes/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the SupportType from the API collection.
         *
         * @return {SupportType} An array of SupportType objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a SupportType from the API collection.
         * @param  {int} id of the SupportType object that is to be retrieved. 
         * @return {SupportType} An SupportType object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an SupportType object in the database by POSTing the
         * required data to the API.
         *
         * @param  {SupportType} supportType An SupportType object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no SupportType data is provided then the method returns null.
         */
        function create(supportType, callback) {
            if (supportType) {
                return $http.post(url, supportType).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    Notification.error("Error:" + response.data.message);
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing SupportType object.
         *
         * @param  {SupportType} supportType An SupportType object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no SupportType data is provided then the method returns null.
         */
        function save(supportType, callback) {
            if (supportType && supportType.id) {
                return $http.put(url + supportType.id, supportType).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the textLookup Data Service. This defines how to handle data about textLookup objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */


(function() {
    angular
        .module('TextLookupService', [])
        .factory('TextLookup', textLookupFactory);

    textLookupFactory.$inject = ['$http', 'GLOBAL'];

    function textLookupFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/text-lookup/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;

        // Private Interface

        /**
         * This method is used to retrieve all the textLookup from the API collection.
         *
         * @return {textLookup} An array of textLookup objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a textLookup from the API collection.
         * @param  {int} id of the textLookup object that is to be retrieved.
         * @return {textLookup} An textLookup object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an textLookup object in the database by POSTing the
         * required data to the API.
         *
         * @param  {textLookup} textLookup An textLookup object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no textLookup data is provided then the method returns null.
         */
        function create(textLookup, callback) {
            if (textLookup) {
                return $http.post(url, textLookup).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing textLookup object.
         *
         * @param  {textLookup} textLookup An textLookup object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no textLookup data is provided then the method returns null.
         */
        function save(textLookup, callback) {
            if (textLookup && textLookup.id) {
                return $http.put(url + textLookup.id, textLookup).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the Title Data Service. This defines how to handle data about Title objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('TitleService', [])
        .factory('Title', titleFactory);

    titleFactory.$inject = ['$http', 'GLOBAL'];

    function titleFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/titles/';
        var factory = {

            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the Title from the API collection.
         *
         * @return {Title} An array of Title objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a Title from the API collection.
         * @param  {int} id of the Title object that is to be retrieved. 
         * @return {Title} An Title object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an Title object in the database by POSTing the
         * required data to the API.
         *
         * @param  {Title} title An Title object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no title data is provided then the method returns null.
         */
        function create(title, callback) {
            if (title) {
                return $http.post(url, title).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing Title object.
         *
         * @param  {Title} title An Title object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no title data is provided then the method returns null.
         */
        function save(title, callback) {
            if (title && title.id) {
                return $http.put(url + title.id, title).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the StudentYear Data Service. This defines how to handle data about StudentYear objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */
(function() {

    angular
        .module('TutorGroupRemarkPermissionService', [])
        .factory('StudentYear', studentYearFactory);

    studentYearFactory.$inject = ['$http', 'GLOBAL'];

    function studentYearFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/tutorGroups/';
        var factory = {
            query: getAll,
            get: getById
        };

        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the StudentYear from the API collection.
         *
         * @return {StudentYear} An array of StudentYear objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a StudentYear from the API collection.
         * @param  {int} id of the StudentYear object that is to be retrieved. 
         * @return {StudentYear} An StudentYear object as identified by the id.
         */
        function getById(tutorGroupId) {
            if (tutorGroupId) {
                return $http.get(url + tutorGroupId + '/remarkPermissions');
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the TutorGroup Data Service. This defines how to handle data about TutorGroup objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */
(function() {

    angular
        .module('TutorGroupService', [])
        .factory('TutorGroup', tutorGroupFactory);

    tutorGroupFactory.$inject = ['$http', 'GLOBAL'];

    function tutorGroupFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/tutorGroups/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save,
            getValid: getValid,
        };

        return factory;

        // Private Interface

        /**
         * This method is used to retrieve all the TutorGroup from the API collection.
         *
         * @return {TutorGroup} An array of TutorGroup objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a TutorGroup from the API collection.
         * @param  {int} id of the TutorGroup object that is to be retrieved. 
         * @return {TutorGroup} An TutorGroup object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an TutorGroup object in the database by POSTing the
         * required data to the API.
         *
         * @param  {TutorGroup} tutorGroup An TutorGroup object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no tutorGroup data is provided then the method returns null.
         */
        function create(tutorGroup, callback) {
            if (tutorGroup) {
                return $http.post(url, tutorGroup).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing TutorGroup object.
         *
         * @param  {TutorGroup} tutorGroup An TutorGroup object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no tutorGroup data is provided then the method returns null.
         */
        function save(tutorGroup, callback) {
            if (tutorGroup && tutorGroup.id) {
                return $http.put(url + tutorGroup.id, tutorGroup).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }


        /**
         * This method is used to retrieve all the  Valid TutorGroup from the API collection.
         *
         * @return {TutorGroup} An array of TutorGroup objects.
         */
        function getValid(inUse) {
            return $http.get(url, {
                params: {
                    inUse: inUse
                }
            });
        }
    }

})();
;/**
 * This is the factory definition for the WithdrawalReason Data Service. This defines how to handle data about WithdrawalReason objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('WithdrawalReasonService', [])
        .factory('WithdrawalReason', withdrawalReasonFactory);

    withdrawalReasonFactory.$inject = ['$http', 'GLOBAL'];

    function withdrawalReasonFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/withdrawalReasons/';
        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;
        // Private Interface		
        /**
         * This method is used to retrieve all the WithdrawalReason from the API collection.
         *
         * @return {WithdrawalReason} An array of WithdrawalReason objects.
         */
        function getAll() {
            return $http.get(url);
        }


        /**
         * This method is used to retrieve an instance of a WithdrawalReason from the API collection.
         * @param  {int} id of the WithdrawalReason object that is to be retrieved. 
         * @return {WithdrawalReason} An WithdrawalReason object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an WithdrawalReason object in the database by POSTing the
         * required data to the API.
         *
         * @param  {WithdrawalReason} withdrawalReason An WithdrawalReason object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no withdrawalReason data is provided then the method returns null.
         */
        function create(withdrawalReason, callback) {
            if (withdrawalReason) {
                return $http.post(url, withdrawalReason).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing WithdrawalReason object.
         *
         * @param  {WithdrawalReason} withdrawalReason An WithdrawalReason object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no withdrawalReason data is provided then the method returns null.
         */
        function save(withdrawalReason, callback) {
            if (withdrawalReason && withdrawalReason.id) {
                return $http.put(url + withdrawalReason.id, withdrawalReason).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is the factory definition for the YearGroup Data Service. This defines how to handle data about YearGroup objects.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053]
 *
 * @type Data Service
 */

(function() {

    angular
        .module('YearGroupService', [])
        .factory('YearGroup', yearGroupFactory);

    yearGroupFactory.$inject = ['$http', 'GLOBAL'];

    function yearGroupFactory($http, GLOBAL) {
        var self = this;
        var url = GLOBAL.API + '/yearGroups/';

        var factory = {
            query: getAll,
            get: getById,
            create: create,
            save: save
        };

        return factory;
        // Private Interface

        /**
         * This method is used to retrieve all the YearGroup from the API collection.
         *
         * @return {YearGroup} An array of YearGroup objects.
         */
        function getAll() {
            return $http.get(url);
        }

        /**
         * This method is used to retrieve an instance of a YearGroup from the API collection.
         * @param  {int} id of the YearGroup object that is to be retrieved. 
         * @return {YearGroup} An YearGroup object as identified by the id.
         */
        function getById(id) {
            if (id) {
                return $http.get(url + id);
            } else {
                return null;
            }
        }

        /**
         * This method is used to create a new instance of an YearGroup object in the database by POSTing the
         * required data to the API.
         *
         * @param  {YearGroup} yearGroup An YearGroup object to persist to the database.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no yearGroup data is provided then the method returns null.
         */
        function create(yearGroup, callback) {
            if (yearGroup) {
                return $http.post(url, yearGroup).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }

        /**
         * This method is used to save changes to an existing YearGroup object.
         *
         * @param  {YearGroup} yearGroup An YearGroup object with the data to be updated.
         * @param  {Function} callback (Optional) A function to be called on a successful call to the API
         * @return {various} This method will return different things depending on the success or failure of the API call.
         * On a success full call the data returned from the API is returned, in the event of an error on the API call the
         * status and data are returned, if no yearGroup data is provided then the method returns null.
         */
        function save(yearGroup, callback) {
            if (yearGroup && yearGroup.id) {
                return $http.put(url + yearGroup.id, yearGroup).then(function(response) {
                    if (callback) {
                        callback();
                    }
                    return response.data;
                }, function(response) {
                    return {
                        status: response.status,
                        error: response.data
                    };
                });
            } else {
                return null;
            }
        }
    }
})();
;/**
 * This is an AngularJS filter that when used on a field will check to see if the fields is blank, null or undefined. If
 * the data in the fields is any of these values the text 'No Data' will be displayed.
 *
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y024]
 *
 * @type filter
 */
(function() {
    angular
        .module('BlankFilter', [])
        .filter('blank', blankFilter);

    function blankFilter() {
        return function(data, length, end) {
            if (data === null || data === undefined || data === '') {
                return 'No Data';
            }
            return data;
        };
    }
})();
;/**
 * This is the main module definition for the Filters module.
 *
 * Applied Styles: [V001, Y002, Y010, Y021, Y023]
 */
(function() {
    angular
        .module('Filters', [
            'BlankFilter',
            'NotSetFilter',
            'PaginateFilter',
            'PercentFilter',
            'TelephoneFilter',
            'YesNoFilter'
        ]);
})();
;/**
 * This is an AngularJS filter that when used on a field will check to see if the fields is set or not. This means
 * if the fields has any data that is not null or undefined. If the data in the fields is any of these values the
 * text 'Not Set' will be displayed.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y024]
 *
 * @type filter
 */
(function() {
    angular
        .module('NotSetFilter', [])
        .filter('notSet', NotSetFilter);

    function NotSetFilter() {
        return function(data, length, end) {
            if (data === null || data === undefined || data === '') {
                return 'Not Set';
            }
            return data;
        };
    }
})();
;/**
 *
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y024]
 *
 * @type filter
 */
(function() {
    angular
        .module('PaginateFilter', [])
        .filter('paginate', PaginateFilter);

    function PaginateFilter() {
        return function(input, page, size) {
            page = +page - 1;
            size = +size;
            return input.slice(page * size, (page * size) + size);
        };
    }

})();
;/**
 *
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y024, Y060]
 *
 * @type filter
 */
(function() {
    angular.module('PercentFilter', []).filter('percent', PercentFilter);

    PercentFilter.$inject = ['$filter'];

    function PercentFilter($filter) {
        return function(input, decimals) {
            if (input !== null && input !== undefined) {
                if (!isNaN(parseFloat(input))) {
                    return $filter('number')(input * 100, decimals) + '%';
                } else {
                    return input;
                }
            } else {
                return 'No Data';
            }
        };
    }
})();
;angular.module('TelephoneFilter', []).filter('telNo', function() {
    return function(text, length, end) {
        if (text && text.length == 11) {
            // Remove all spaces
            var value = text.toString().trim().replace(' ', '');

            // Check that telephone no does contain any alpha characters
            if (value.match(/[^0-9]/)) {
                return text;
            }

            // London / Cardiff
            if (jQuery.inArray(value.slice(0, 3), ['020', '029']) >= 0) {
                return value.slice(0, 3) + ' ' + value.slice(3, 7) + ' ' + value.slice(7, 99);
            }

            // Leeds / Birmingham / Leicester / Edinburgh / Manchester
            if (jQuery.inArray(value.slice(0, 4), ['0113', '0121', '0116', '0131', '0161']) >= 0) {
                return value.slice(0, 4) + ' ' + value.slice(4, 7) + ' ' + value.slice(7, 99);
            }

            // Sedbergh / Brampton
            if (jQuery.inArray(value.slice(0, 5), ['015396', '016977']) >= 0) {
                return value.slice(0, 4) + ' ' + value.slice(4, 6) + ' ' + value.slice(6, 99);
            }

            // Other Landline and Mobile
            if (jQuery.inArray(value.slice(0, 2), ['01', '02', '03', '07']) >= 0) {
                return value.slice(0, 5) + ' ' + value.slice(5, 99);
            }

            // Unformatted
            return text;
        }
        return text;
    };
});
;angular.module('YesNoFilter', []).filter('yesNo', function() {
    return function(text, length, end) {
        if (text === null || text === undefined) {
            return 'No data';
        }
        if (text) {
            return 'Yes';
        }
        return 'No';
    };
});
;(function() {
    'use strict';

    angular
        .module('cid.service.logger', [
            'ui-notification',
            'cid.app.constants',
        ])
        .factory('Logger', LoggerService);

    LoggerService.$inject = ['$log', 'Notification', 'GLOBAL'];

    function LoggerService($log, Notification, GLOBAL) {
        var service = {};

        service.log = log;
        service.info = log;
        service.warn = warn;
        service.error = error;
        service.debug = debug;

        return service;

        // Private Interface

        /**
         * This method is for logging normal messages
         *
         * @param  {String} message The message to be displayed
         * @param  {bool} display This determines if the message is displayed in the UI
         */
        function log(message, display) {
            if (display === true) {
                Notification(message);
            }
            $log.info(message);
        }

        /**
         * This method is for logging normal messages
         *
         * @param  {String} message The message to be displayed
         * @param  {bool} display This determines if the message is displayed in the UI
         */
        function warn(message, display) {
            if (display === true) {
                Notification(message, 'warning');
            }
            $log.warn(message);
        }

        /**
         * This method is for logging error messages
         *
         * @param  {String} message The message to be displayed
         * @param  {bool} display This determines if the message is displayed in the UI
         */
        function error(message, display) {
            if (display === true) {
                Notification(message, 'error');
            }
            $log.error(message);
        }

        /**
         * This method is for logging debug messages
         *
         * @param  {String} message The message to be displayed
         */
        function debug(message) {
            if (GLOBAL.debug === true) {
                $log.debug(message);
            }
        }

    }

})();
;/**
 * This is a course search service that is used to search for a course based on various elements.
 *
 * Applied Styles: [Y001, Y002, Y010, Y020, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053, Y090, Y091]
 *
 * @type Factory
 */
(function() {
    'use strict';

    angular
        .module('cid.search.course', [])
        .factory('CourseSearch', courseSearchService);

    courseSearchService.$inject = ['$http', 'GLOBAL', 'APP'];

    function courseSearchService($http, GLOBAL, APP) {
        var url = GLOBAL.API + '/courseSearch';

        // Public Interface
        var factory = {
            search: search
        };

        return factory;

        // Private Interface

        /**
         * This method is used to perform a course search operation on the API. The method takes a search object that will contain
         * the data to be searched for on the API.
         *
         * @param {object} search The search object will contain the various fields to use in a search on the API. Currently supported
         * options are: search
         * @return {promise} containing the data return from the API or null if the search params are not supplied.
         */
        function search(search) {
            if (search) {
                var year = APP.getYear();
                var reqParams = '?';
                if (search.searchText) {
                    reqParams += 'search=' + search.searchText + '&';
                }
                var requestParams = reqParams.slice(0, -1);
                return $http.get(url + requestParams, {
                    params: {
                        yearId: year.id
                    }
                });
            } else {
                return null;
            }
        }
    }
}());
;angular.module('cid.search', [
    'cid.search.course',
    'cid.search.student',
    'cid.search.student-course',
    'StudentEmailSearchService',
]);
;angular.module('cid.search.student-course', []).factory('StudentCourseSearch', function($http, GLOBAL) {
    var url = GLOBAL.API + '/search/studentCourse';

    return {
        query: function() {
            return $http.get(url);
        },
        search: function(searchParams) {
            if (searchParams && searchParams instanceof Object) {
                var encodedUri = url + '?' + $.param(searchParams);
                return $http.get(encodedUri);
                //return $http.get(url, { params: searchParams });
            }
        }
    };
});
;/**
 * This is a student search service that is used to search for a student based on various elements.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y022, Y023, Y024, Y050, Y051, Y052, Y053, Y090, Y091]
 *
 * @type Factory
 */
(function() {
    'use strict';

    angular
        .module('cid.search.student', [])
        .factory('StudentSearch', studentSearchSerivce);

    studentSearchSerivce.$inject = ['$log', '$http', '$q', 'GLOBAL', 'APP'];

    function studentSearchSerivce($log, $http, $q, GLOBAL, APP) {
        var url = GLOBAL.API + '/search/student';

        // Public Interface

        var factory = {
            search: search
        };

        return factory;

        // Private Interface

        /**
         * This method is used to perform a student search operation on the API. The method takes a search object that will contain
         * the data to be searched for on the API.
         *
         * @param {object} search The search object will contain the various fields to use in a search on the API. Currently supported
         *                        options are: year, surname, firstName, ref
         * @return {promise} containing the data return from the API or null if the search params are not supplied.
         */
        function search(search) {
            var deferred = $q.defer();
            if (search) {
                var reqParams = '?';
                if (search.year) {
                    reqParams += 'yearId=' + search.year + '&';
                } else {
                    reqParams += 'yearId=' + APP.getYear().id + '&';
                }
                if (search.surname) {
                    reqParams += 'surname=' + search.surname + '&';
                }
                if (search.firstName) {
                    reqParams += 'firstName=' + search.firstName + '&';
                }
                if (search.reference) {
                    reqParams += 'studentId=' + search.reference + '&';
                }
                if (search.candidateNo) {
                    reqParams += 'candidateNo=' + search.candidateNo + '&';
                }
                var requestParams = reqParams.slice(0, -1);
                $http.get(url + requestParams).then(function(response) {
                    deferred.resolve(response);
                }, function(error) {
                    deferred.reject(error);
                    $log.error(error);
                });
            } else {
                deferred.reject({
                    data: {
                        code: 1,
                        message: 'No search parameters supplied.'
                    }
                });
            }
            return deferred.promise;
        }
    }
}());
;angular.module('StudentEmailSearchService', []).factory('StudentEmail', function($http, GLOBAL) {
    var url = GLOBAL.API + '/search/studentEmail';

    return {
        query: function() {
            return $http.get(url);
        },
        search: function(searchParams) {
            if (searchParams && searchParams instanceof Object) {
                return $http.get(url, {
                    params: searchParams
                });
            }
        }
    };
});
;angular.module('Base64EncoderService', []).factory('Base64', function() {
    /* jshint ignore:start */

    var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

    return {
        encode: function(input) {
            var output = "";
            var chr1, chr2, chr3 = "";
            var enc1, enc2, enc3, enc4 = "";
            var i = 0;

            do {
                chr1 = input.charCodeAt(i++);
                chr2 = input.charCodeAt(i++);
                chr3 = input.charCodeAt(i++);

                enc1 = chr1 >> 2;
                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                enc4 = chr3 & 63;

                if (isNaN(chr2)) {
                    enc3 = enc4 = 64;
                } else if (isNaN(chr3)) {
                    enc4 = 64;
                }

                output = output +
                    keyStr.charAt(enc1) +
                    keyStr.charAt(enc2) +
                    keyStr.charAt(enc3) +
                    keyStr.charAt(enc4);
                chr1 = chr2 = chr3 = "";
                enc1 = enc2 = enc3 = enc4 = "";
            } while (i < input.length);

            return output;
        },

        decode: function(input) {
            var output = "";
            var chr1, chr2, chr3 = "";
            var enc1, enc2, enc3, enc4 = "";
            var i = 0;

            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
            var base64test = /[^A-Za-z0-9\+\/\=]/g;
            if (base64test.exec(input)) {
                window.alert("There were invalid base64 characters in the input text.\n" +
                    "Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\n" +
                    "Expect errors in decoding.");
            }
            input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

            do {
                enc1 = keyStr.indexOf(input.charAt(i++));
                enc2 = keyStr.indexOf(input.charAt(i++));
                enc3 = keyStr.indexOf(input.charAt(i++));
                enc4 = keyStr.indexOf(input.charAt(i++));

                chr1 = (enc1 << 2) | (enc2 >> 4);
                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                chr3 = ((enc3 & 3) << 6) | enc4;

                output = output + String.fromCharCode(chr1);

                if (enc3 != 64) {
                    output = output + String.fromCharCode(chr2);
                }
                if (enc4 != 64) {
                    output = output + String.fromCharCode(chr3);
                }

                chr1 = chr2 = chr3 = "";
                enc1 = enc2 = enc3 = enc4 = "";

            } while (i < input.length);

            return output;
        }
    };

    /* jshint ignore:end */
});
;(function() {
    'use strict';

    angular.module('DateUtilService', []).service(
        'DateUtils',
        function() {
            this.convertLocaleDateToServer = function(date) {
                if (date) {
                    var utcDate = new Date();
                    utcDate.setUTCDate(date.getDate());
                    utcDate.setUTCMonth(date.getMonth());
                    utcDate.setUTCFullYear(date.getFullYear());
                    return utcDate;
                } else {
                    return null;
                }
            };

            this.convertLocaleDateFromServer = function(date) {
                if (date) {
                    var dateString = date.split("-");
                    return new Date(dateString[0], dateString[1] - 1,
                        dateString[2]);
                }
                return null;
            };

            this.convertDateTimeFromServer = function(date) {
                if (date) {
                    return new Date(date);
                } else {
                    return null;
                }
            };
        });

}());
;(function() {
    'use strict';

    angular.module('RestUrlService', []).service(
        'RestUrlUtils',
        function() {
            this.convertUriToId = function(uri) {
                if (uri) {
                    var arr;
                    if (uri.href) {
                        arr = uri.href.split('/');
                    } else {
                        arr = uri.split('/');
                    }
                    return arr[arr.length - 1];
                } else {
                    return null;
                }
            };
        });

}());
;/**
 * The module definition for the MainApp for the cis-template application. This includes all the dependencies that are required by the system.
 *
 * Applied Styles: [Y001, Y002, Y010, Y020, Y021, Y023]
 */
(function() {
    angular
        .module('cid', [
            'ui.router',
            //            'ngResource',
            //            'ngStorage',
            //    'ngCookies',
            'ngMaterial',
            'ui.bootstrap',
            'ui.timepicker',

            // Dependencies
            'cid.app.constants',
            'cid.app.variables',
            'cid.app.config',
            'cid.app.environment',
            'cid.user-settings',
            'cid.data',
            'ContactsTableDirective',
            'cid.search',
            'Lookups',
            'SelectionBoxes',
            'Filters',



            // Core Services
            'ErrorHandler',
            'cid.core.authentication',

            // Main Modules
            'cid.site',
            'cid.tests',

            'cid.exams',

            'cid.admissions',
            'cid.student-record',
            'cid.course-record-viewer',
            'StudentEmailer',

            // General Directives
            'ReportLinkDirective',
            'CurrentYearSelectorDirective',

            // Read-Only Directive Definitions
            'AddressDetailsDirective',
            'ContactsTableDirective',
            'CourseSearchDirective',
            'CoursesTableDirective',
            'CourseGroupsTableDirective',
            'EnrolmentsTableDirective',
            'StudentEntryQualificationsTableDirective',
            'PersonContactDetailsDirective',
            'PersonContactDetailsLookupDirective',
            'PersonDetailsDirective',
            'PersonDetailsLookupDirective',
            'StudentSummaryDirective',
            'StudentImageDirective',
            'StudentDetailsDirective',
            'StudentDetailsLookupDirective',
            'RegistersTableDirective',
            'CorrespondencesTableDirective',
            'ILPInterviewsTableDirective',
            'StudentWarningDetailsDirective',
            'StudentSpecialCategoryDetailsDirective',
            'StudentYearDetailsDirective',
            'StudentTimetableDirective',
            'ExternalResultsArchiveTableDirective',
            'StudentInterimReportsTableDirective',
            'StudentLearningSupportDetailsDirective',
            'CollegeFundPaymentDetailsDirective',
            'WordGeneratorDirective',
            'StudentOverallAttendanceDetailsDirective',
            'StudentAdmissionsDetailsDirective',
            'MedicalNotesDetailsDirective',
            'TutorGroupRemarkPermissionTableDirective',
            'ExamResultsTableDirective',
            'OptionEntriesDirective',
            'WarningCodeChangeDetailsDirective',

            // Editor Directives
            'AddressEditorDirective',
            'AcademicYearsEditorDirective',
            'ApplicationStatusesEditorDirective',
            'ContactsEditorDirective',
            'EnrolmentManagerDirective', // This is the dynamic checker version
            'EnrolmentsEditorDirective', // This is the table editing version (not is working order)
            'StudentEntryQualificationsEditorDirective',
            'RegistersEditorDirective',
            'StudentSpecialCategoryEditorDirective',
            'PersonEditorDirective',
            'StudentWarningEditorDirective',
            'StudentBursaryEditorDirective',
            'StudentWithdrawalDirective',
            'StudentYearEditorDirective',
            'CourseDetailsDirective',
            'CollegeFundPaymentEditorDirective',
            'StudentSummaryEditorDirective',
            'StudentContactPreferencesEditorDirective',
            'MedicalNotesEditorDirective',
            'ExamResultsEditorDirective',
            'RoomsEditorDirective',
            'BlocksEditorDirective',
            'PeriodsEditorDirective',
            'TutorGroupsEditorDirective',
            'FacultiesEditorDirective',
            'DepartmentsEditorDirective',
            'SubjectsEditorDirective',
            'LevelsEditorDirective',
            'YearGroupsEditorDirective',
            'SchoolsEditorDirective',
            'AdmissionsDirective',
            'SettingsEditorDirective',
            'TextLookupEditorDirective',
            'LetterTemplateEditorDirective',
            'PossibleGradesEditorDirective',
            'PossibleGradeSetsEditorDirective',
            'StaffsEditorDirective',
            'SpecialCategoriesEditorDirective',
            'HolidaysEditorDirective',
            'AttendanceMonitoringsEditorDirective',
            'CentralMonitoringsEditorDirective',
            'PunctualityMonitoringsEditorDirective',
            'ReferralReasonsEditorDirective',
            'ConcessionTypesEditorDirective',
            'SupportTypesEditorDirective',
            'OfferTypesEditorDirective',
            'EntryQualificationTypesEditorDirective',
            'ReportingPeriodsEditorDirective',
            'EntryQualificationsEditorDirective',
            'StudentLearningSupportCostsEditorDirective',
            'StudentLearningSupportVisitsEditorDirective',
            'StudentLearningSupportEditorDirective',
            'RolesEditorDirective'

        ]);

})();
;(function() {
    angular
        .module('cid')
        .config(configCors)
        .config(configNoCache)

    ;

    configCors.$inject = ['$httpProvider'];
    configNoCache.$inject = ['$httpProvider'];

    /**
     * Setting up the CORS (Cross-Origin Resource Sharing) setting for use with the API
     */
    function configCors($httpProvider) {
        //	$httpProvider.defaults.headers.common["X-Requested-With"] = 'XMLHttpRequest';
        $httpProvider.defaults.headers.post["Content-Type"] = "application/json";
        //    $httpProvider.defaults.withCredentials = true;
        $httpProvider.defaults.useXDomain = true;
        delete $httpProvider.defaults.headers.common['X-Requested-With'];
    }

    // Disable XHR request chaching (IE Fix)
    function configNoCache($httpProvider) {
        $httpProvider.defaults.headers.common['Cache-Control'] = 'no-cache';
    }




})();
;/**
 * This is the definition of the application's configuraiton and initial launch.
 */
(function() {

    angular
        .module('cid')
        .run(initialiseApplication)
        .run(initialiseAuthentication)
        .run(debugConfiguration);

    initialiseApplication.$inject = ['$rootScope', '$location', '$state', '$stateParams', 'Auth', 'AcademicYear', 'Logger', 'GLOBAL', 'APP', 'USER'];
    initialiseAuthentication.$inject = ['$state', '$transitions', 'Auth', 'Logger', 'GLOBAL'];
    debugConfiguration.inject = ['$transitions', 'Logger', 'APP'];

    function initialiseApplication($rootScope, $location, $state, $stateParams, Auth, AcademicYear, Logger, GLOBAL, APP, USER) {
        function getAcademicYear() {
            AcademicYear.getCurrent().then(function(response) {
                APP.setYear(response.data);
            }, function(response) {
                Logger.log('EE Cannot retrieve the defaults current year.');
            });
        }

        var DEBUG = GLOBAL.DEBUG;

        Logger.info('II TemplateApplication - run');
        $rootScope.GLOBAL = GLOBAL;

        $rootScope.$state = $state;
        $rootScope.$stateParams = $stateParams;

        USER.refresh();

        if ($rootScope.globals === undefined) {
            $rootScope.globals = {};
        }
        $rootScope.globals.sideBar = USER.getSetting('displaySideBar');

        Auth.getUser();
        Auth.refreshUser();

        $rootScope.$watch(APP.getYear(), function(newValue, oldValue) {
            Logger.log(oldValue);
            Logger.log(newValue);
        });

        getAcademicYear();
    }

    // Set up Authentication and Authorization
    function initialiseAuthentication($state, $transitions, Auth, Logger, GLOBAL) {
        Logger.info('II - Initialising the Authentication and Authorisation component');
        $transitions.onStart({}, function(trans) {
            var targetState = trans.$to();
            var isStateLogin = $state.is('login') || targetState.name === 'login';
            var isAuthenticated = Auth.isAuthenticated();
            if (!isStateLogin && !isAuthenticated) {
                return trans.router.stateService.target('login');
            }
            var roles = targetState.data !== undefined ? targetState.data.roles : undefined;
            var isAuthorised = Auth.isAuthorised(roles);

            if (!isStateLogin && !isAuthorised) {
                Logger.debug('II Authorisation Failed');
                return trans.router.stateService.target('accessdenied');
            }
            return true;
        });

    }

    // Set up the debug information
    function debugConfiguration($transitions, Logger, APP) {
        $transitions.onStart({}, function(trans) {
            var fromState = trans.$from();
            var toState = trans.$to();
            APP.setCurrentState(toState.name);
            APP.setCurrentStateParams(toState.params);
            APP.setPreviousState(fromState.name);
            APP.setPreviousStateParams(fromState.params);
        });
    }

})();
;/**
 * This is the AcademicYears Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';

    angular
        .module('AcademicYearsEditorDirective', ['EntityServices'])
        .directive('academicYearsEditor', academicYearsEditor);

    function academicYearsEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                showID: '@',
                academicYears: '=?',
            },
            controller: 'AcademicYearsEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/academic-years-editor/views/academic-years-editor.html',
        };

        return directive;

    }
})();
;/**
 * This directive is used to display an address in a pre formatted way.
 *
 * Applied Styles: [Y001, Y002, Y010, Y020, Y021, Y022, Y023, Y024, Y070, Y074, Y075, ]
 *
 * @author Michael Horgan, Vinaya Bali
 * @example <address-details show-all="true" address="{address object}"></address-details>
 */
(function() {
    'use strict';

    angular
        .module('AddressDetailsDirective', [])
        .directive('addressDetails', addressDetails);

    function addressDetails() {
        return {
            restrict: 'E',
            scope: {
                showAll: '=?',
                address: '=',
            },
            templateUrl: 'js/directives/address-details/address-details.html',
        };
    }
})();
;/**
 * This directive is used for address editor
 *
 * Applied Style: [Y001, Y002, Y010, Y022, Y023, Y024, Y032, Y033, Y034] *
 * 
 */

(function() {
    'use strict';

    angular
        .module('AddressEditorDirective', ['ui.bootstrap.modal', 'EntityServices', 'AddressDetailsDirective'])
        .directive('addressEditor', addressEditor);

    function addressEditor($log, PostcodeLookup) {

        var directive = {
            restrict: 'E',
            replace: true,
            scope: {
                showAll: '=?',
                showAddressId: '=?',
                address: '=',
                id: '@id',
            },
            bindToController: {
                address: '=',
                addressId: '=',
            },
            controller: 'AddressEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/address-editor/views/addressEditor.html'
        };

        return directive;
    }
})();
;(function() {
    'use strict';

    angular
        .module('AdmissionDetailsDirective', [])
        .directive('admissionDetails', admissionDetails);

    function admissionDetails() {
        var directive = {
            restrict: 'E',
            scope: {
                studentAdmissions: '='
            },
            templateUrl: 'js/directives/admissions/admission-details/admission-details.html'
        };

        return directive;
    }

})();
;(function() {
    'use strict';

    angular
        .module('DataSharingOptionDirective', ['ui.bootstrap.modal', 'EntityServices'])
        .directive('dataSharingOption', dataSharingOption);

    function dataSharingOption() {
        var directive = {
            restrict: 'E',
            scope: {
                dataSharingOption: '=?'
            },
            templateUrl: 'js/directives/admissions/data-sharing-option/views/data-sharing-option-details.html',
            controller: 'DataSharingOptionEditorController',
            controllerAs: 'ctrl'
        };

        return directive;

    }


})();
;(function() {
    'use strict';
    angular
        .module('InductionDetailsDirective', [])
        .directive('inductionDetails', inductionDetails);

    function inductionDetails() {
        var directive = {
            restrict: 'E',
            scope: {
                studentAdmissions: '='
            },
            templateUrl: 'js/directives/admissions/induction-details/induction-details.html'
        };

        return directive;
    }
})();
;(function() {
    'use strict';
    angular
        .module('InterviewerDetailsDirective', [])
        .directive('interviewerDetails', interviewerDetails);

    function interviewerDetails() {

        var directive = {
            restrict: 'E',
            scope: {
                studentAdmissions: '='
            },
            templateUrl: 'js/directives/admissions/interviewer-details/interviewer-details.html'
        };

        return directive;
    }

})();
;(function() {
    'use strict';
    angular
        .module('PreviousSchoolDetailsDirective', [])
        .directive('previousSchoolDetails', previousSchoolDetails);

    function previousSchoolDetails() {

        var directive = {
            restrict: 'E',
            scope: {
                studentAdmissions: '='
            },
            templateUrl: 'js/directives/admissions/previous-school-details/previous-school-details.html'
        };

        return directive;
    }

})();
;(function() {
    'use strict';

    angular
        .module('StudentAdmissionEditorDirective', ['ui.bootstrap.modal', 'EntityServices'])
        .directive('studentAdmissionEditor', studentAdmissionEditor);


    function studentAdmissionEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                studentAdmission: '=?'
            },
            templateUrl: 'js/directives/admissions/student-admission-editor/views/student-admission-editor.html',
            controller: 'StudentAdmissionEditorController',
            controllerAs: 'ctrl'
        };

        return directive;

    }


})();
;(function() {
    'use strict';

    angular
        .module('StudentCollegeFundPaidDirective', ['ui.bootstrap.modal'])
        .directive('studentCollegeFundPaid', studentCollegeFundPaid);

    function studentCollegeFundPaid() {

        var directive = {
            restrict: 'E',
            scope: {
                studentCollegeFundPaid: '='
            },
            templateUrl: 'js/directives/admissions/student-college-fund-paid/views/student-college-fund-paid.html',
            controller: 'StudentCollegeFundPaidController',
            controllerAs: 'ctrl'
        };

        return directive;


    }
})();
;/**
 * This is the ApplicationStatuss Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';

    angular
        .module('ApplicationStatusesEditorDirective', ['EntityServices'])
        .directive('applicationStatusesEditor', applicationStatusesEditor);

    function applicationStatusesEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                applicationStatuses: '=?',
            },
            controller: 'ApplicationStatusesEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/application-statuses-editor/views/application-statuses-editor.html',
        };

        return directive;

    }
})();
;/**
 * This is the AttendanceMonitoring Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *  
 *  @type Directive
 *  
 *  
 *   */
(function() {
    'use strict';

    angular
        .module('AttendanceMonitoringsEditorDirective', ['EntityServices'])
        .directive('attendanceMonitoringsEditor', attendanceMonitoringsEditor);

    function attendanceMonitoringsEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                attendanceMonitorings: '=?',
            },
            controller: 'AttendanceMonitoringsEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/attendance-monitorings-editor/views/attendance-monitorings-editor.html',
        };

        return directive;

    }
})();
;/**
 * This is the BlocksTableDirective definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *  
 *  @type Directive
 *  
 */
(function() {
    'use strict';

    angular
        .module('BlocksEditorDirective', ['EntityServices'])
        .directive('blocksEditor', blocksEditor);

    function blocksEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                blocks: '=?',
            },
            controller: 'BlocksEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/blocks-editor/views/blocks-editor.html',
        };

        return directive;

    }
})();
;/**
 * This is the CentralMonitoring Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *  
 *  @type Directive
 *  
 *  
 *   */
(function() {
    'use strict';

    angular
        .module('CentralMonitoringsEditorDirective', ['EntityServices'])
        .directive('centralMonitoringsEditor', centralMonitoringsEditor);

    function centralMonitoringsEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                centralMonitorings: '=?',
            },
            controller: 'CentralMonitoringsEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/central-monitorings-editor/views/central-monitorings-editor.html',
        };

        return directive;

    }
})();
;/**
 * This directive, is used to display College Fund Payment Details
 *
 * Applied Styles: [Y001, Y002, Y010, Y020, Y021, Y022, Y023, Y024, Y070, Y074, Y075, ]
 * 
 */


(function() {
    'use strict';
    angular
        .module('CollegeFundPaymentDetailsDirective', [])
        .directive('collegeFundPaymentDetails', collegeFundPaymentDetails);

    function collegeFundPaymentDetails() {

        var directive = {
            restrict: 'E',
            scope: {
                showAll: '=?',
                showStudent: '=?',
                collegeFundPayment: '=',
            },
            templateUrl: 'js/directives/college-fund-payment-details/college-fund-payment-details.html'
        };
        return directive;
    }

})();
;/**
 * This is the ContactsEditorDirective definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]
 *
 * @example <college-fund-payment-editor student-id="{ctrl.studentId}" contacts="{ctrl.collegeFundPayments}"></college-fund-payment-editor>
 */
(function() {
    'use strict';

    angular
        .module('CollegeFundPaymentEditorDirective', ['ui.bootstrap.modal'])
        .directive('collegeFundPaymentEditor', collegeFundPaymentEditor);

    function collegeFundPaymentEditor() {
        return {
            restrict: 'E',
            scope: {
                showAll: '=?',
                showStudent: '=?',
            },
            bindToController: {
                studentId: '=',
                collegeFundPayment: '='
            },
            controller: 'CollegeFundPaymentEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/college-fund-payment-editor/views/college-fund-payment-editor.html',
        };
    }
})();
;/**
 * This is the ConcessionType Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *  
 *  @type Directive
 *  
 *  
 *   */
(function() {
    'use strict';

    angular
        .module('ConcessionTypesEditorDirective', ['EntityServices'])
        .directive('concessionTypesEditor', concessionTypesEditor);

    function concessionTypesEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                concessionTypes: '=?',
            },
            controller: 'ConcessionTypesEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/concession-types-editor/views/concession-types-editor.html',
        };

        return directive;

    }
})();
;/**
 * This is the ContactsEditorDirective definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]
 *
 * @example <contacts-editor person-id="{ctrl.personId}" contacts="{ctrl.contacts}"></contacts-editor>
 */
(function() {
    'use strict';

    angular
        .module('ContactsEditorDirective', ['ui.bootstrap.modal', 'AddressDetailsDirective'])
        .directive('contactsEditor', contactsEditor);

    function contactsEditor() {
        return {
            restrict: 'E',
            scope: {
                showId: '=?',
                showContact: '=?',
                showPersonId: '=?',
                showAll: '=?'
            },
            bindToController: {
                personId: '=',
                contacts: '='
            },
            controller: 'ContactsEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/contacts-editor/views/contactsEditor.html',
        };
    }
})();
;/**
 * This is the ContactsTableDirective definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 * 
 */


(function() {
    'use strict';

    angular
        .module('ContactsTableDirective', ['EntityServices', 'AddressDetailsDirective'])
        .directive('contactsTable', contactsTable);

    function contactsTable() {
        var directive = {
            restrict: 'E',
            scope: {
                showId: '=?',
                showContact: '=?',
                showAll: '=?',
                contacts: '=',
            },
            templateUrl: 'js/directives/contacts-table/contactsTable.html',

        };

        return directive;
    }
})();
;/**
 * This is the CorrespondencesTableDirective definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 * 
 */

(function() {
    'use strict';

    angular
        .module('CorrespondencesTableDirective', ['EntityServices'])
        .directive('correspondencesTable', correspondencesTable);

    function correspondencesTable() {

        var directive = {
            restrict: 'E',
            scope: {
                showId: '=?',
                showCorrespondence: '=?',
                showAll: '=?',
                correspondences: '=',
            },
            //		controller: 'CorrespondencesTableDirectiveController',
            //     	controllerAs: 'ctrl',
            templateUrl: 'js/directives/correspondencesTable/correspondencesTable.html',
        };
        return directive;
    }

})();
;/**
 * This is the CourseDetailsDirective definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 * 
 */

(function() {
    'use strict';

    angular
        .module('CourseDetailsDirective', [])
        .directive('courseDetails', courseDetails);

    function courseDetails() {

        var directive = {
            restrict: 'E',
            scope: {
                course: '=',
            },
            templateUrl: 'js/directives/course-details/course-details.html'
        };

        return directive;

    }

})();
;/**
 * This is the ContactsEditorDirective definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]
 *
 * @example <contacts-editor person-id="{ctrl.personId}" contacts="{ctrl.contacts}"></contacts-editor>
 */

(function() {
    'use strict';

    angular
        .module('CourseGroupsTableDirective', ['EntityServices'])
        .directive('courseGroupsTable', courseGroupsTable);

    function courseGroupsTable() {
        var directive = {
            restrict: 'E',
            scope: {
                showId: '@?',
                showYearGroup: '@?',
                showYear: '@?',
                showAll: '@?',
                includeReports: '@?',
                courseGroups: '=',
                filterParams: '=?'

            },
            bindToController: true,
            templateUrl: 'js/directives/course-groups-table/course-groups-table.html',
            controller: 'CourseGroupsTableDirectiveController',
            controllerAs: 'ctrl'
        };
        return directive;
    }
})();
;/**
 * This is the CourseSearchDirective definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 * 
 */

(function() {
    'use strict';

    angular
        .module('CourseSearchDirective', ['EntityServices', 'cid.search.course'])
        .directive('courseSearch', courseSearch);

    function courseSearch() {

        var directive = {
            restrict: 'E',
            scope: {},
            bindToController: {
                'callback': '&onSelect',
            },
            transclude: true,
            controller: 'CourseSearchController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/course-search/courseSearch.html'
        };

        return directive;

    }
})();
;/**
 * This is the CoursesTableDirective definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 */

(function() {
    'use strict';

    angular
        .module('CoursesTableDirective', ['EntityServices'])
        .directive('coursesTable', coursesTable);

    function coursesTable() {

        var directive = {
            restrict: 'E',
            scope: {
                showId: '=?',
                showExamBoard: '=?',
                showYear: '=?',
                showDetails: '=?',
                showAll: '=?',
                courses: '=',
                filterParams: '=?',
                showReports: '=?'
            },
            templateUrl: 'js/directives/courses-table/courses-table.html',
            controller: 'CoursesTableDirectiveController',
            controllerAs: 'ctrl'
        };

        return directive;
    }
})();
;/**
 * This is the CurrentYearSelectorDirective definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 */

(function() {
    'use strict';

    angular
        .module('CurrentYearSelectorDirective', [
            'cid.service.logger',
            'AcademicYearService'
        ])
        .directive('currentYearSelector', currentYearSelector);

    function currentYearSelector() {
        var directive = {
            restrict: 'E',
            scope: {
                readonly: '=?'
            },
            controller: 'CurrentYearSelectorController',
            controllerAs: 'ctrl',
            //template: 'Current Year: <academic-year-selection class="form-control" ng-model="ctrl.currentYear.id"></academic-year-selection>',
            templateUrl: 'js/directives/current-year-selector/current-year-selector.html'
        };

        return directive;
    }

})();
;/**
 * This is the Departments Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *  
 *  @type Directive
 *  
 *  
 *   */
(function() {
    'use strict';

    angular
        .module('DepartmentsEditorDirective', ['EntityServices'])
        .directive('departmentsEditor', departmentsEditor);

    function departmentsEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                departments: '=?',
            },
            controller: 'DepartmentsEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/departments-editor/views/departments-editor.html',
        };

        return directive;

    }
})();
;/**
 * This is the EnrolmentManagerDirective definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 */

(function() {
    'use strict';

    angular
        .module('EnrolmentManagerDirective', [
            'ui.bootstrap.modal',
            'Lookups',
            'cid.lookup.course-spec-validity',
            'cid.lookup.course-spec',
        ])
        .directive('enrolmentManager', enrolmentManager);

    function enrolmentManager() {
        var directive = {
            restrict: 'E',
            scope: {
                showId: '=?',
                showStudent: '=?',
                showYear: '=?',
                showStatus: '=?',
                showAll: '=?',
            },
            bindToController: {
                student: '=',
                enrolments: '=',
            },
            controller: 'EnrolmentManagerDirectiveController',
            controllerAs: 'ctrl',
            //        templateUrl: 'js/directives/enrolment-editor/views/enrolment-checker.html',
            templateUrl: 'js/directives/enrolment-manager/views/enrolment-manager-button.html'

        };

        return directive;
    }

})();
;/**
 * This is the EnrolmentsEditorDirective definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 * 
 *  @type Directive
 */

(function() {
    'use strict';

    angular
        .module('EnrolmentsEditorDirective', ['ui.bootstrap.modal'])
        .directive('enrolmentsEditor', enrolmentsEditorDirective);

    function enrolmentsEditorDirective() {
        var directive = {
            restrict: 'E',
            scope: {
                showId: '=?',
                showStudent: '=?',
                showYear: '=?',
                showStatus: '=?',
                showMonitoring: '=?',
                showAll: '=?',
                showEnrolment: '=?',
            },
            bindToController: {
                studentId: '=',
                enrolments: '=',
            },
            controller: 'EnrolmentsEditorDirectiveController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/enrolments-editor/views/list.html',
        };

        return directive;

    }

})();
;/**
 * This directive is used to display a table of Enrolments Table.
 *
 * Applied Styles:
 *
 * @type Directive
 */

(function() {
    'use strict';
    angular
        .module('EnrolmentsTableDirective', ['EntityServices'])
        .directive('enrolmentsTable', enrolmentsTableDirective);

    function enrolmentsTableDirective() {

        var directive = {
            restrict: 'E',
            scope: {
                showId: '=?',
                showStudent: '=?',
                showYear: '=?',
                showStatus: '=?',
                showMonitoring: '=?',
                showAll: '=?',
                enrolments: '=',
            },
            templateUrl: 'js/directives/enrolments-table/enrolmentsTable.html',
        };

        return directive;

    }
})();
;/**
 * This is the EntryQualificationType Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *  
 *  @type Directive
 *  
 *  
 *   */
(function() {
    'use strict';

    angular
        .module('EntryQualificationTypesEditorDirective', ['EntityServices'])
        .directive('entryQualificationTypesEditor', entryQualificationTypesEditor);

    function entryQualificationTypesEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                entryQualificationTypes: '=?',
            },
            controller: 'EntryQualificationTypesEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/entry-qualification-types-editor/views/entry-qualification-types-editor.html',
        };

        return directive;

    }
})();
;/**
 * This is the EntryQualification Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *  
 *  @type Directive
 *  
 *  
 *   */
(function() {
    'use strict';

    angular
        .module('EntryQualificationsEditorDirective', ['EntityServices'])
        .directive('entryQualificationsEditor', entryQualificationsEditorDirective);

    function entryQualificationsEditorDirective() {

        var directive = {
            restrict: 'E',
            scope: {
                entryQualifications: '=?',
            },
            controller: 'EntryQualificationsEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/entry-qualifications-editor/views/entry-qualifications-editor.html',
        };

        return directive;

    }
})();
;/**
 * This is the ExamResultsTableDirective definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *  
 *  @type Directive
 *  
 *   <Element>
 *  <exam-results-editor results="ctrl.results" show-series="true"></exam-results-editor>
    <exam-results-editor results="ctrl.results" show-all="true"></exam-results-editor>
 */
(function() {
    'use strict';

    angular
        .module('ExamResultsEditorDirective', ['EntityServices'])
        .directive('examResultsEditor', examResultsEditor);

    function examResultsEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                showStudent: '=?',
                showYear: '=?',
                showBoard: '=?',
                showSeries: '=?',
                showAll: '=?',
                results: '=?',
            },
            controller: 'ExamResultsEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/exam-results-editor/views/exam-results-editor.html',
        };

        return directive;

    }
})();
;/**
 * This is the ExamResultsTableDirective definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 */
(function() {
    'use strict';

    angular
        .module('ExamResultsTableDirective', ['EntityServices'])
        .directive('examResultsTable', examResultsTable);

    function examResultsTable() {
        var directive = {
            restrict: 'E',
            scope: {
                showStudent: '=?',
                showYear: '=?',
                showBoard: '=?',
                showSeries: '=?',
                showAll: '=?',
                results: '=?',
            },
            templateUrl: 'js/directives/exam-results-table/exam-results-table.html',
        };

        return directive;
    }

})();
;/**
 * 
 */
(function() {
    angular
        .module('BaseDataEditButtonsDirective', ['ngResource', 'ui.bootstrap'])
        .directive('baseDataEditButtons', baseDataEditButtonsDirective);

    //baseDataEditButtonsDirective.$inject = [];

    function baseDataEditButtonsDirective() {
        var directive = {
            scope: {
                addCallback: '&',
                editCallback: '&',
                viewStudentsCallback: '&'
            },
            controller: 'BaseDataEditButtonsDirectiveController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/exams/base-data-edit-buttons/views/base-data-edit-buttons.html'
        };

        return directive;
    }
})();
;angular.module('CheckBoxDirective', ['ngResource', 'ui.bootstrap'])
    .directive('checkBox', function() {
        return {
            scope: {
                changeSelected: '&'
            },
            //replace: true,
            controller: 'CheckBoxDirectiveController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/exams/checkBox/checkBox.html',
        };
    });
;angular.module('ComponentTableDirective', [
    'ngResource',
    'ui.bootstrap',
    'ComponentService',
]).directive('componentTable', function() {
    return {
        scope: {
            componentList: '=',
        },
        transclude: true,
        controller: 'ComponentTableDirectiveController',
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/exams/componentTable/componentTable.html'
    };
});
;angular.module('CourseEnrolmentTableDirective', [
    'ngResource',
    'ui.bootstrap',
]).directive('courseEnrolmentTable', function() {
    return {
        scope: {
            group: "=",
        },
        transclude: true,
        controller: 'CourseEnrolmentTableDirectiveController',
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/exams/course-enrolment-table/courseEnrolmentTable.html'
    };
});
;angular.module('CourseExamDirective', ['ngResource', 'ui.bootstrap', 'EntityServices', ]).directive('courseExam', function() {
    return {
        scope: {},
        replace: true,
        controller: 'CourseExamDirectiveController',
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/exams/courseExam/courseExam.html',
    };
});
;/**
 * 
 */
(function() {
    angular
        .module('ExamCourseTableDirective', ['ngResource', 'ui.bootstrap'])
        .directive('examCourseTable', examCourseTableDirective);

    examCourseTableDirective.$inject = [];

    function examCourseTableDirective() {
        var directive = {
            scope: {},
            controller: 'ExamCourseTableDirectiveController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/exams/exam-course-table/views/exam-course-table.html'
        };

        return directive;
    }
})();
;/**
 * This is the ExamSeriesTableDirective definition
 */
(function() {
    angular
        .module('ExamSeriesTableDirective', ['ngResource', 'ui.bootstrap', 'EntityServices', ])
        .directive('examSeriesTable', examSeriesTableDirective);

    function examSeriesTableDirective() {
        var directive = {
            scope: {
                examSeriesList: '=?',
                getIndex: '&'
            },
            transclude: true,
            controller: 'ExamSeriesTableDirectiveController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/exams/exam-series-table/views/exam-series-table.html',
        };

        return directive;
    }
})();
;angular.module('ExamBoardTableDirective', ['ngResource',
        'ui.bootstrap',
        'EntityServices',
    ])
    .directive('examBoardTable', function() {
        return {
            scope: false,
            /*{
			examBoardList: '='
//			curExamBoard: '=?',
//			expandable: '=',
		},*/
            transclude: true,
            replace: true,
            controller: 'ExamBoardTableDirectiveController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/exams/examBoardTable/examBoardTable.html',
        };
    });
;angular.module('ExamSeriesCheckBoxDirective', ['ngResource', 'ui.bootstrap'])
    .directive('examSeriesCheckBox', function() {
        return {
            scope: {
                changeSelected: '&'
            },
            //replace: true,
            controller: 'ExamSeriesCheckBoxDirectiveController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/exams/examSeriesCheckBox/examSeriesCheckBox.html',
        };
    });
;/**
 * 
 */
angular.module('IndeterminateCheckboxDirective', ['ngResource', 'ui.bootstrap'])
    .directive('indeterminateCheckbox', function() {
        return {
            scope: true,
            require: '?ndModel',
            link: function(scope, element, attrs, modelCtrl) {
                var childList = attrs.childList;
                var property = attrs.property;

                element.bind('change', function() {
                    scope.$apply(function() {
                        var isChecked = element.prop('checked');

                        angular.forEach(scope.$eval(childList), function(child) {
                            child[property] = isChecked;
                        });
                    });
                });

                scope.$watch(childList, function(newValue) {
                    var hasChecked = false;
                    var hasUnchecked = false;

                    angular.forEach(newValue, function(child) {
                        if (child[property]) {
                            hasChecked = true;
                        } else {
                            hasUnchecked = true;
                        }
                    });

                    if (hasChecked && hasUnchecked) {
                        element.prop('checked', false);
                        element.prop('indeterminate', true);
                        if (modelCtrl) {
                            modelCtrl.$setViewValue(false);
                        }
                    } else {
                        element.prop('checked', hasChecked);
                        element.prop('indeterminate', false);
                        if (modelCtrl) {
                            modelCtrl.$setViewValue(hasChecked);
                        }
                    }
                }, true);
            }
        };
    });
;(function() {
    angular
        .module('OptionTableDirective', ['ngResource', 'ui.bootstrap', 'OptionService', 'ExpandDirective'])
        .directive('optionTable', optionTableDirective);

    function optionTableDirective() {
        return {
            scope: {
                syllabusId: '=',
                expandable: '=',
            },
            transclude: true,
            controller: 'OptionTableDirectiveController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/exams/optionTable/optionTable.html'
        };
    }
})();
;angular.module('SeatingPlanSeatDirective', ['ngResource', 'ui.bootstrap', 'EntityServices']).directive('seatingPlanSeat', function() {
    return {
        scope: {
            student: '=',
            callback: '&'
        },
        //replace: true,
        controller: 'SeatingPlanSeatDirectiveController',
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/exams/seatingPlanSeat/seatingPlanSeat.html',
    };
});
;(function() {
    angular
        .module('SeatingPlanStudentDirective', ['ngResource', 'ui.bootstrap', 'EntityServices'])
        .directive('seatingPlanStudent', function() {
            return {
                scope: {
                    student: '=',
                    displayOptions: '=',
                },
                //replace: true,
                controller: 'SeatingPlanStudentDirectiveController',
                controllerAs: 'ctrl',
                templateUrl: 'js/directives/exams/seatingPlanStudent/seatingPlanStudent.html',
            };
        });
}());
;angular.module('StudentExamTableDirective', [
    'ngResource',
    'ui.bootstrap',
    'StudentService',
]).directive('studentExamTable', function() {
    return {
        scope: {
            studentList: '=',
        },
        transclude: true,
        controller: 'StudentExamTableDirectiveController',
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/exams/studentExamTable/studentExamTable.html'
    };
});
;(function() {
    angular
        .module('SyllabusTableDirective', ['ngResource', 'ui.bootstrap', 'EntityServices', 'OptionTableDirective', 'GenericViewer', "ExpandDirective"])
        .directive('syllabusTable', syllabusTableDirective);

    syllabusTableDirective.$inject = ['$filter'];

    function syllabusTableDirective($filter) {

        var directive = {
            scope: {
                curExamBoard: '=?',
                syllabus: '=',
                syllabusCode: '=',
                expandable: '=',
                filterParams: '=',
            },
            link: function(scope, element, attrs, ctrl) {
                scope.$watch("syllabusCode", function(newValue, oldValue) {
                    if (newValue != oldValue) {
                        ctrl.loadSyllabi();
                    }
                });
                scope.$watch('filterParams', function(newVal, oldVal) {
                    if (newVal !== undefined) {
                        if (newVal.examSeries.examBoard === null) {
                            newVal.examSeries.examBoard = undefined;
                        }

                        var filtered = $filter('filter')(ctrl.syllabusList, scope.filterParams);

                        ctrl.paginationInfo.totalItems = filtered.length;
                    }
                }, true);
            },
            transclude: true,
            controller: 'SyllabusTableDirectiveController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/exams/syllabus-table/views/syllabus-table.html',
        };

        return directive;
    }
})();
;/**
 * This is the ExpandDirective Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';
    angular
        .module('ExpandDirective', ['ngResource', 'ui.bootstrap'])
        .directive('expand', expand);

    function expand() {
        return {
            scope: {
                visible: '=',
                expandable: '=',
                expanded: '='
            },
            controller: 'ExpandDirectiveController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/expand/expand.html',
        };
    }

})();
;/**
 * This is the ExternalResultsArchiveTableDirective definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 */

(function() {
    'use strict';
    angular
        .module('ExternalResultsArchiveTableDirective', [])
        .directive('externalResultsArchiveTable', externalResultsArchiveTable);

    function externalResultsArchiveTable() {

        var directive = {
            restrict: 'E',
            scope: {
                showAll: '=?',
                showStudent: '=?',
                externalResultsArchive: '=?',
            },
            templateUrl: 'js/directives/external-results-archive-table/external-results-archive-table.html'
        };

        return directive;
    }

})();
;/**
 * This is the Faculties Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *  
 *  @type Directive
 *  
 *  
 *   */
(function() {
    'use strict';
    angular
        .module('FacultiesEditorDirective', ['EntityServices'])
        .directive('facultiesEditor', facultiesEditor);

    function facultiesEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                faculties: '=?',
            },
            controller: 'FacultiesEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/faculties-editor/views/faculties-editor.html',
        };

        return directive;

    }
})();
;/**
 * This is the Holidays Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *  
 *  @type Directive
 *  
 *  
 *   */
(function() {
    'use strict';

    angular
        .module('HolidaysEditorDirective', ['EntityServices'])
        .directive('holidaysEditor', holidaysEditor);

    function holidaysEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                holidays: '=?',
            },
            controller: 'HolidaysEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/holidays-editor/views/holidays-editor.html',
        };

        return directive;

    }
})();
;/**
 * This is the Subjects Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]
 *
 *  @type Directive
 *
 *
 */
(function() {
    'use strict';

    angular
        .module('IdentificationViolationsEditorDirective', ['EntityServices'])
        .directive('identificationViolationsEditor', identificationViolationsEditor);

    function identificationViolationsEditor() {
        var directive = {
            restrict: 'E',
            scope: {
                studentId: '=',
                identificationViolations: '=?',
            },
            bindToController: {
                studentId: '=',
                identificationViolations: '='
            },
            controller: 'IdentificationViolationsEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/identification-violation-editor/views/identification-violation-editor.html',
        };

        return directive;
    }
})();
;/**
 * This directive is used to display a table of ILP Interviews
 *
 * Applied Styles:
 *
 * @type Directive
 * @example <ilp-interviews-table ilp-interviews="{ilpInterviewArray}"></ilp-interviews-table>
 */
(function() {
    'use strict';

    angular
        .module('ILPInterviewsTableDirective', [])
        .directive('ilpInterviewsTable', ilpInterviewsTable);

    function ilpInterviewsTable() {
        return {
            restrict: 'E',
            scope: {
                showAll: '=?',
                showStudent: '=?',
                showStaff: '=?',
                showCourse: '=?',
                showCourseGroup: '=?',
                showLip: '=?',
                showLetterHome: '=?',
                showTargets: '=?',
                interviewFilter: '=?filter',
                ilpInterviews: '='
            },
            templateUrl: 'js/directives/ilpInterviewsTable/ilpInterviewsTable.html',
            controller: function($scope) {
                // Setting default attribute values
                if (angular.isUndefined($scope.showCourse)) {
                    $scope.showCourse = true;
                }
                if (angular.isUndefined($scope.showStaff)) {
                    $scope.showStaff = true;
                }
                if (angular.isUndefined($scope.showLetterHome)) {
                    $scope.showLetterHome = true;
                }
            }
        };
    }
})();
;/**
 * This is the Letter Template Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */

(function() {
    'use strict';

    angular
        .module('LetterTemplateEditorDirective', ['EntityServices', 'ngCkeditor'])
        .directive('letterTemplateEditor', letterTemplateEditor);

    function letterTemplateEditor() {

        var directive = {
            restrict: 'E',
            templateUrl: 'js/directives/letter-template-editor/views/letter-template-editor.html',
            scope: {
                letterTemplates: '='
            },
            controller: 'LetterTemplateEditorController',
            controllerAs: 'ctrl'
        };

        return directive;

    }

})();
;/**
 * This is the Levels Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *  
 *  @type Directive
 *  
 *  
 *   */
(function() {
    'use strict';

    angular
        .module('LevelsEditorDirective', ['EntityServices'])
        .directive('levelsEditor', levelsEditor);

    function levelsEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                levels: '=?',
            },
            controller: 'LevelsEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/levels-editor/views/levels-editor.html',
        };

        return directive;

    }
})();
;/**
 * This directive is used to display a the Medical Notes 
 *
 * Applied Styles:
 *
 * @type Directive
 * 
 */

(function() {
    'use strict';

    angular
        .module('MedicalNotesDetailsDirective', [])
        .directive('medicalNotesDetails', medicalNotesDetails);

    function medicalNotesDetails() {

        var directive = {
            restrict: 'E',
            scope: {
                showAll: '=?',
                student: '=',
            },
            templateUrl: 'js/directives/medical-notes-details/medical-notes-details.html',
            transclude: true,
        };

        return directive;
    }
})();
;/**
 * This directive is used to display a the Medical Notes 
 *
 * Applied Styles:
 *
 * @type Directive
 * 
 */

(function() {
    'use strict';

    angular
        .module('MedicalNotesEditorDirective', ['ui.bootstrap.modal', 'EntityServices'])
        .directive('medicalNotesEditor', medicalNotesEditor);

    function medicalNotesEditor() {
        var directive = {
            restrict: 'E',
            scope: {
                showAll: '=?',
                showStudent: '=?',
                showStudentId: '=?',
                id: '@id',
            },
            bindToController: {
                student: '=',
                studentId: '=?'
            },
            controller: 'MedicalNotesEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/medical-notes-editor/views/medical-notes-editor.html'
        };

        return directive;
    }

})();
;/**
 * This is the OfferType Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *  
 *  @type Directive
 *  
 *  
 *   */
(function() {
    'use strict';

    angular
        .module('OfferTypesEditorDirective', ['EntityServices'])
        .directive('offerTypesEditor', offerTypesEditor);

    function offerTypesEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                offerTypes: '=?',
            },
            controller: 'OfferTypesEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/offer-types-editor/views/offer-types-editor.html',
        };

        return directive;

    }
})();
;/**
 * This is the Option Entries Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *  
 *  @type Directive
 *  
<option-entries option-entries="ctrl.optionEntries" show-all-entries="false" show-board="false" show-option="true"></option-entries>

<option-entries option-entries="ctrl.optionEntries" show-all-entries="true" show-board="true"></option-entries>

<option-entries option-entries="ctrl.optionEntries" show-all-entries="true" show-option="true" show-board="true"></option-entries>
  */

(function() {
    'use strict';

    angular
        .module('OptionEntriesDirective', ['EntityServices'])
        .directive('optionEntries', optionEntries);

    function optionEntries() {

        var directive = {
            restrict: 'E',
            scope: {
                showAllEntries: '=?',
                showBoard: '=?',
                showOption: '=?',
                optionEntries: '=?',
            },
            templateUrl: 'js/directives/option-entries/option-entries.html',
        };

        return directive;

    }
})();
;/**
 * This is the Periods Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *  
 *  @type Directive
 *  
 */

(function() {
    'use strict';

    angular
        .module('PeriodsEditorDirective', ['EntityServices'])
        .directive('periodsEditor', periodsEditor);

    function periodsEditor() {

        var directive = {

            restrict: 'E',
            scope: {
                periods: '=?'
            },
            controller: 'PeriodsEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/periods-editor/views/periods-editor.html',

        };

        return directive;

    }

})();
;/**
 * This is the PersonContactDetails Directive
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Directive
 */
(function() {
    'use strict';

    angular
        .module('PersonContactDetailsDirective', ['EntityServices'])
        .directive('personContactDetails', personContactDetails);

    function personContactDetails() {
        return {
            restrict: 'E',
            scope: {
                person: '=?',
            },
            controller: 'PersonContactDetailsDirectiveController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/personContactDetails/personContactDetailsFormatted.html',
        };
    }

})();
;/**
 * This is the PersonContactDetailsLookupDirective Directive
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Directive
 */
(function() {
    'use strict';

    angular.module('PersonContactDetailsLookupDirective', ['EntityServices'])
        .directive('personContactDetailsLookup', personContactDetailsLookup);

    function personContactDetailsLookup() {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                personId: '=?',
            },
            link: function(scope, element, attrs, controller) {
                scope.$watch(controller.personId, function() {
                    controller.init();
                });
            },
            controller: 'PersonContactDetailsLookupDirectiveController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/personContactDetailsLookup/personContactDetailsLookup.html',
            transclude: true,
        };
    }

})();
;/**
 * This is the PersonDetails Directive
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Directive
 */
(function() {
    'use strict';

    angular
        .module('PersonDetailsDirective', ['EntityServices'])
        .directive('personDetails', personDetails);

    function personDetails() {
        return {
            restrict: 'E',
            scope: {
                showAll: '=?',
                showDob: '=?',
                showGender: '=?',
                showTelephoneNos: '=?',
                showEmail: '=?',
                person: '=',
            },
            controller: 'PersonDetailsDirectiveController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/personDetails/personDetailsFormatted.html',
        };
    }
})();
;/**
 * This is the PersonDetailsLookupDirective Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';

    angular
        .module('PersonDetailsLookupDirective', ['EntityServices'])
        .directive('personDetailsLookup', personDetailsLookup);

    function personDetailsLookup($log) {

        return {
            restrict: 'E',
            scope: {
                showDob: '=?',
                showGender: '=?',
                showAll: '=?',
            },
            bindToController: {
                personId: '=?',
            },
            link: function(scope, element, attrs, controllers) {
                scope.$watch(attrs.person, function(newValue, oldValue) {
                    $log.log("II Person object changed on PersonDetailsLookupDirective");
                });
            },
            controller: 'PersonDetailsLookupDirectiveController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/personDetailsLookup/personDetailsLookup.html',
            transclude: true,
        };
    }
})();
;/**
 * This is the AcademicYears Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';
    angular
        .module('PersonEditorDirective', ['ui.bootstrap.modal', 'EntityServices'])
        .directive('personEditor', personEditor);

    function personEditor() {
        return {
            restrict: 'E',
            scope: {
                showAll: '=?',
                person: '=',
                id: '@id',
            },
            bindToController: {
                person: '=',
                personId: '=',
            },
            controller: 'PersonEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/personEditor/views/personEditor.html',
        };
    }
})();
;/**
 * This is the PossibleGradeSets Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *  
 *  @type Directive
 *  
 */
(function() {
    'use strict';

    angular
        .module('PossibleGradeSetsEditorDirective', ['EntityServices'])
        .directive('possibleGradeSetsEditor', possibleGradeSetsEditor);

    function possibleGradeSetsEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                possibleGradeSets: '=?',
            },
            controller: 'PossibleGradeSetsEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/possible-grade-set-editor/views/possible-grade-sets-editor.html',
        };

        return directive;

    }
})();
;/**
 * This is the PossibleGrades Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *  
 *  @type Directive
 *  
 */
(function() {
    'use strict';

    angular
        .module('PossibleGradesEditorDirective', ['EntityServices'])
        .directive('possibleGradesEditor', possibleGradesEditor);

    function possibleGradesEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                possibleGrades: '=?',
            },
            controller: 'PossibleGradesEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/possible-grades-editor/views/possible-grades-editor.html',
        };

        return directive;

    }
})();
;/**
 * This is the PunctualityMonitoring Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *  
 *  @type Directive
 *  
 *  
 *   */
(function() {
    'use strict';

    angular
        .module('PunctualityMonitoringsEditorDirective', ['EntityServices'])
        .directive('punctualityMonitoringsEditor', punctualityMonitoringsEditor);

    function punctualityMonitoringsEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                punctualityMonitorings: '=?',
            },
            controller: 'PunctualityMonitoringsEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/punctuality-monitorings-editor/views/punctuality-monitorings-editor.html',
        };

        return directive;

    }
})();
;/**
 * This is the ReferralReason Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *  
 *  @type Directive
 *  
 *  
 *   */
(function() {
    'use strict';

    angular
        .module('ReferralReasonsEditorDirective', ['EntityServices'])
        .directive('referralReasonsEditor', referralReasonsEditor);

    function referralReasonsEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                referralReasons: '=?',
            },
            controller: 'ReferralReasonsEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/referral-reasons-editor/views/referral-reasons-editor.html',
        };

        return directive;

    }
})();
;/**
 * This is the RegistersEditorDirective definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';
    angular
        .module('RegistersEditorDirective', ['ui.bootstrap.modal'])
        .directive('registersEditor', registersEditor);

    function registersEditor() {
        return {
            restrict: 'E',
            scope: {
                showAll: '=?',
                showStudentRef: '=?',
                showSessionRef: '=?',
            },
            bindToController: {
                studentId: '=',
                registers: '='
            },
            controller: 'RegistersEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/registersEditor/views/registersEditor.html',
        };
    }
})();
;/**
 * This is the Registers Table Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';
    angular
        .module('RegistersTableDirective', [])
        .directive('registersTable', registersTable);

    function registersTable() {
        return {
            restrict: 'E',
            scope: {
                showAll: '=?',
                showStudentRef: '=?',
                showSessionRef: '=?',
                registers: '=',
            },
            templateUrl: 'js/directives/registersTable/registersTable.html',
            controller: 'RegistersTableController',
            controllerAs: 'ctrl'
        };
    }
})();
;/**
 * This is the Report Link Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';

    angular
        .module('ReportLinkDirective', [])
        .directive('reportLink', reportLink);

    function reportLink() {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                class: '@?',
                reportPath: '=',
                reportParams: '=?',
                reportToolbar: '=?',
                reportFormat: '=?',
                includeYear: '=?',
                previousYear: '=?',
                showParams: '=?',
            },
            link: function(scope, element, attrs) {
                element[0].removeAttribute('class');
            },
            controller: 'ReportLinkDirectiveController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/report-link/report-link.html',
            transclude: true,
        };
    }
})();
;/**
 * This is the ReportingPeriod Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *  
 *  @type Directive
 *  
 *  
 *   */
(function() {
    'use strict';

    angular
        .module('ReportingPeriodsEditorDirective', ['EntityServices'])
        .directive('reportingPeriodsEditor', reportingPeriodsEditor);

    function reportingPeriodsEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                reportingPeriods: '=?',
            },
            controller: 'ReportingPeriodsEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/reporting-periods-editor/views/reporting-periods-editor.html',
        };

        return directive;

    }
})();
;/**
 * This is the ExamResultsTableDirective definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *  
 *  @type Directive
 *  
 */
(function() {
    'use strict';

    angular
        .module('RolesEditorDirective', ['EntityServices'])
        .directive('rolesEditor', rolesEditor);

    function rolesEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                roles: '=?',
            },
            controller: 'RolesEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/roles-editor/views/roles-editor.html',
        };

        return directive;

    }
})();
;/**
 * This is the RoomTable Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';
    angular
        .module('RoomTableDirective', ['ngResource', 'ui.bootstrap', 'RoomService'])
        .directive('roomTable', roomTable);

    function roomTable() {
        return {
            scope: {
                roomList: '=',
            },
            transclude: true,
            controller: 'RoomTableDirectiveController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/roomTable/roomTable.html'
        };
    }
})();
;/**
 * This is the ExamResultsTableDirective definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *  
 *  @type Directive
 *  
 */
(function() {
    'use strict';

    angular
        .module('RoomsEditorDirective', ['EntityServices'])
        .directive('roomsEditor', roomsEditor);

    function roomsEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                rooms: '=?',
            },
            controller: 'RoomsEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/roomsEditor/views/rooms-editor.html',
        };

        return directive;

    }
})();
;/**
 * This is the Schools Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';
    angular
        .module('SchoolsEditorDirective', ['EntityServices'])
        .directive('schoolEditor', schoolEditor);

    function schoolEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                schools: '=?'
            },
            controller: 'SchoolsEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/schools-editor/views/school-editor.html'

        };

        return directive;

    }


})();
;/**
 * This is the AcademicYears Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';

    angular
        .module('SettingsEditorDirective', ['ui.bootstrap.modal'])
        .directive('settingsEditor', settingsEditor);

    function settingsEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                settings: '=?'
            },
            templateUrl: 'js/directives/settings-editor/views/setting-editor.html',
            controller: 'SettingsEditorController',
            controllerAs: 'ctrl'
        };

        return directive;

    }


})();
;/**
 * This is the SpecialCategories Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *  
 *  @type Directive
 *  
 *  
 *   */
(function() {
    'use strict';

    angular
        .module('SpecialCategoriesEditorDirective', ['EntityServices'])
        .directive('specialCategoriesEditor', specialCategoriesEditor);

    function specialCategoriesEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                specialCategories: '=?',
            },
            controller: 'SpecialCategoriesEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/special-categories-editor/views/special-categories-editor.html',
        };

        return directive;

    }
})();
;/**
 * This is the Staffs Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *  
 *  @type Directive
 *  
 *  
 *   */
(function() {
    'use strict';

    angular
        .module('StaffsEditorDirective', ['EntityServices'])
        .directive('staffsEditor', staffsEditor);

    function staffsEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                staffs: '=?',
            },
            controller: 'StaffsEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/staffs-editor/views/staffs-editor.html',
        };

        return directive;

    }
})();
;/**
 * This is the Student Admissions Details Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';
    angular
        .module('StudentAdmissionsDetailsDirective', ['EntityServices'])
        .directive('studentAdmissionsDetails', studentAdmissionsDetails);

    function studentAdmissionsDetails($log, $rootScope) {
        return {
            restrict: 'E',
            scope: {
                showAll: '=?',
            },
            bindToController: {
                studentAdmissions: '=',
            },
            controller: 'StudentAdmissionsDetailsDirectiveController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/student-admissions-details/student-admissions-details.html',
            transclude: true,
        };
    }
})();
;/**
 * This is the StudentAlternativeUci Table Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';
    angular
        .module('StudentAlternativeUciTableDirective', ['ui.bootstrap.modal'])
        .directive('studentAlternativeUciTable', studentAlternativeUciTable);

    function studentAlternativeUciTable() {
        return {
            restrict: 'E',
            scope: {
                showAll: '=?',
                showStudent: '=?',
            },
            bindToController: {
                studentId: '=',
                studentAlternativeUcis: '='

            },
            controller: 'StudentAlternativeUciTableController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/student-alternative-uci-table-editor/views/student-alternative-uci-table.html',

        };
    }
})();
;/**
 * This is the StudentConcessionType Table Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';
    angular
        .module('StudentConcessionTypeTableDirective', ['EntityServices'])
        .directive('studentConcessionTypeTable', studentConcessionTypeTable);

    function studentConcessionTypeTable() {
        return {
            restrict: 'E',
            scope: {
                showAll: '=?',
                showStudent: '=?',
                studentId: '='
            },
            controller: 'StudentConcessionTypeTableDirectiveController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/student-concession-type-table/student-concession-type-table.html',
        };
    }
})();
;/**
 * This is the AcademicYears Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';
    angular
        .module('StudentContactPreferencesEditorDirective', ['ui.bootstrap.modal', 'EntityServices'])
        .directive('studentContactPreferencesEditor', studentContactPreferencesEditor);

    function studentContactPreferencesEditor() {
        return {
            restrict: 'E',
            scope: {
                showAll: '=?',
                showStudent: '=?',
                showStudentId: '=?',
                id: '@id',
            },
            bindToController: {
                student: '=',
                studentId: '=?'
            },
            controller: 'StudentContactPreferencesEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/student-contact-preferences-editor/views/student-contact-preferences-editor.html',
        };
    }
})();
;/**
 * This is the AcademicYears Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';
    angular
        .module('StudentDetailsDirective', ['EntityServices'])
        .directive('studentDetails', studentDetails);

    function studentDetails($log, $rootScope) {
        return {
            restrict: 'E',
            scope: {
                showAll: '=?',
                showDob: '=?',
                showGender: '=?',
                student: '=?',
            },
            bindToController: {
                studentId: '=?',
            },
            controller: 'StudentDetailsDirectiveController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/student-details/student-details.html',
            transclude: true,
        };
    }
})();
;/**
 * This is the StudentEntryQualificationsTableDirective definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 * 
 *  @type Directive
 */


(function() {
    'use strict';

    angular
        .module('StudentEntryQualificationsTableDirective', [])
        .directive('studentEntryQualificationsTable', studentEntryQualificationsTable);

    function studentEntryQualificationsTable() {

        var directive = {
            restrict: 'E',
            scope: {
                showAll: '=?',
                showStudent: '=?',
                studentEntryQualifications: '=?',
            },
            templateUrl: 'js/directives/student-entry-qualifications-table/student-entry-qualifications-table.html'
        };

        return directive;
    }
})();
;/**
 * This is the StudentImage Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';
    angular
        .module('StudentImageDirective', [])
        .directive('studentImage', studentImage);

    function studentImage($log, $rootScope, GLOBAL) {
        return {
            restrict: 'E',
            scope: {
                studentId: '=',
            },
            controller: 'StudentImageDirectiveController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/student-image/student-image.html',
        };
    }
})();
;/**
 * This is the StudentInterimReports Table Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';
    angular
        .module('StudentInterimReportsTableDirective', [])
        .directive('studentInterimReportsTable', studentInterimReportsTable);

    function studentInterimReportsTable() {
        return {
            restrict: 'E',
            scope: {
                showAll: '=?',
                showStudent: '=?',
                showIRInfo: '=?',
                showAttendanceFigures: '=?',
                showKeyAssessments: '=?',
                studentInterimReports: '=',
            },
            templateUrl: 'js/directives/student-interim-reports-table/student-interim-reports-table.html',
        };
    }
})();
;/**
 * This is the EntryQualificationsEditorDirective definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 * 
 *  @type Directive
 */
(function() {
    'use strict';

    angular
        .module('StudentLearningSupportCostsEditorDirective', ['ui.bootstrap.modal', 'ui.bootstrap.datepicker', 'ngMaterial'])
        .directive('studentLearningSupportCostsEditor', studentLearningSupportCostsEditor);

    function studentLearningSupportCostsEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                showAll: '=?',
                showStudent: '=?',
            },
            bindToController: {
                studentId: '=',
                studentLearningSupportCosts: '='
            },
            controller: 'StudentLearningSupportCostsEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/student-learning-support-costs-editor/views/student-learning-support-costs-editor.html'
        };

        return directive;

    }

})();
;/**
 * This is the StudentLearningSupport Details Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';
    angular
        .module('StudentLearningSupportDetailsDirective', [])
        .directive('studentLearningSupportDetails', studentLearningSupportDetails);

    function studentLearningSupportDetails() {
        return {
            restrict: 'E',
            scope: {
                showAll: '=?',
                showStudent: '=?',
                studentLearningSupport: '=',
            },
            templateUrl: 'js/directives/student-learning-support-details/student-learning-support-details.html',
        };
    }
})();
;/**
 * This is the StudentLearningSupport Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';

    angular
        .module('StudentLearningSupportEditorDirective', ['ui.bootstrap.modal', 'EntityServices', 'StudentLearningSupportDetailsDirective'])
        .directive('studentLearningSupportEditor', studentLearningSupportEditor);

    function studentLearningSupportEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                showAll: '=?',
                showStudent: '=?',
                id: '@id',
            },
            bindToController: {
                studentLearningSupport: '=',
                studentId: '=',
            },
            controller: 'StudentLearningSupportEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/student-learning-support-editor/views/student-learning-support-editor.html',
        };

        return directive;
    }

})();
;/**
 * This is the EntryQualificationsEditorDirective definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 * 
 *  @type Directive
 */
(function() {
    'use strict';

    angular
        .module('StudentLearningSupportVisitsEditorDirective', ['ui.bootstrap.modal', 'ui.bootstrap.datepicker', 'ngMaterial'])
        .directive('studentLearningSupportVisitsEditor', studentLearningSupportVisitsEditor);

    function studentLearningSupportVisitsEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                showAll: '=?',
                showStudent: '=?',
            },
            bindToController: {
                studentId: '=',
                studentLearningSupportVisits: '='
            },
            controller: 'StudentLearningSupportVisitsEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/student-learning-support-visits-editor/views/student-learning-support-visits-editor.html'
        };

        return directive;

    }

})();
;/**
 * This is the AcademicYears Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';
    angular
        .module('StudentOptionEditorTableDirective', ['ui.bootstrap.modal', 'StudentOptionEntryService'])
        .directive('studentOptionEditorTable', studentOptionEditorTable);

    function studentOptionEditorTable() {
        return {
            restrict: 'E',
            scope: {
                showAll: '=?',
                showStudent: '=?',
                showOption: '=?',
            },
            bindToController: {
                studentId: '=?',
                studentOptionEntries: '='
            },
            controller: 'StudentOptionEditorTableController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/student-option-editor-table/views/student-option-editor-table.html',
        };
    }

})();
;/**
 * This is the StudentOverallAttendance Details Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';
    angular
        .module('StudentOverallAttendanceDetailsDirective', [])
        .directive('studentOverallAttendanceDetails', studentOverallAttendanceDetails);

    function studentOverallAttendanceDetails() {
        return {
            restrict: 'E',
            scope: {
                showAll: '=?',
                showStudent: '=?',
                studentOverallAttendance: '=',
            },
            templateUrl: 'js/directives/student-overall-attendance-details/student-overall-attendance-details.html',
        };

    }
})();
;/**
 * This is the StudentSummaryEditorDirective definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]
 *  
 */
(function() {
    'use strict';

    angular
        .module('StudentSummaryEditorDirective', ['ui.bootstrap.modal', 'EntityServices'])
        .directive('studentSummaryEditor', studentSummaryEditor);

    function studentSummaryEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                showAll: '=?',
                showStudent: '=?',
                showStudentId: '=?',
                id: '@id',
            },
            bindToController: {
                student: '=',
                studentId: '=?'
            },
            controller: 'StudentSummaryEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/student-summary-editor/views/student-summary-editor.html',

        };

    }
})();
;/**
 * This is the StudentSummary Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';
    angular
        .module('StudentSummaryDirective', [])
        .directive('studentSummary', studentSummary);

    function studentSummary($log, $rootScope) {
        return {
            restrict: 'E',
            scope: {
                showAll: '=?',
                showDob: '=?',
                showGender: '=?',
                student: '=',
            },
            templateUrl: 'js/directives/student-summary/student-summary.html',
            transclude: true,
        };
    }
})();
;/**
 * This is the StudentTimetable Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';
    angular
        .module('StudentTimetableDirective', [])
        .directive('studentTimetable', studentTimetable);

    function studentTimetable() {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                studentId: '=',
            },
            controller: 'StudentTimetableController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/student-timetable/views/student-timetable.html',
        };
    }
})();
;/**
 * This is the StudentWithdrawalDirective definition, it is used to handle the student withdrawal directive
 *
 * @type Directive
 */
(function() {
    'use strict';

    angular
        .module('StudentWithdrawalDirective', ['ui.bootstrap.modal'])
        .directive('studentWithdrawal', studentWithdrawal);

    function studentWithdrawal($log, Student) {
        return {
            restrict: 'E',
            scope: {
                id: '@id',
            },
            bindToController: {
                studentId: '=',
                yearId: '='
            },
            controller: 'StudentWithdrawalController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/student-withdrawal/views/student-withdrawal.html',
        };
    }
})();
;/**
 * This is the StudentYearDetailsDirective definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]
 *  
 */

(function() {
    'use strict';

    angular
        .module('StudentYearDetailsDirective', ['EntityServices'])
        .directive('studentYearDetails', studentYearDetails);

    function studentYearDetails($log, $rootScope) {
        var directive = {
            restrict: 'E',
            scope: {
                showAll: '=?',
            },
            bindToController: {
                studentYear: '=',
            },
            controller: 'StudentYearDetailsDirectiveController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/student-year-details/student-year-details.html',
            transclude: true,
        };

        return directive;
    }
})();
;/**
 * This is the StudentYearEditorDirective definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]
 *  
 */
(function() {
    'use strict';

    angular
        .module('StudentYearEditorDirective', ['ui.bootstrap.modal', 'EntityServices'])
        .directive('studentYearEditor', studentYearEditor);

    function studentYearEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                showAll: '=?',
                showStudent: '=?',
                showYearId: '=?',
                showStudentId: '=?',
                id: '@id',
            },
            bindToController: {
                studentYear: '=',
                studentId: '=?',
                yearId: '=?',
            },
            controller: 'StudentYearEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/student-year-editor/views/student-year-editor.html'
        };

        return directive;
    }
})();
;/**
 * This is the Student Bursary Details Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]
 *
 */
(function() {
    'use strict';

    angular
        .module('StudentBursaryDetailsDirective', [
            'cid.service.logger',
            'StudentService'
        ])
        .directive('studentBursaryDetails', studentBursaryDetails);

    function studentBursaryDetails() {

        var directive = {

            restrict: 'E',
            scope: {
                showAll: '=?',
            },
            bindToController: {
                studentBursary: '=',
            },
            controller: 'StudentBursaryDetailsDirectiveController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/studentBursaryDetails/studentBursaryDetails.html',

        };

        return directive;
    }
})();
;/**
 * This is the Student Bursary Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]
 *  
 */

(function() {
    'use strict';

    angular
        .module('StudentBursaryEditorDirective', ['ui.bootstrap.modal', 'EntityServices', 'StudentBursaryDetailsDirective'])
        .directive('studentBursaryEditor', studentBursaryEditor);

    function studentBursaryEditor() {

        var directive = {

            restrict: 'E',
            scope: {
                showAll: '=?',
                showStudent: '=?',
            },
            bindToController: {
                studentBursary: '=',
            },
            controller: 'StudentBursaryEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/studentBursaryEditor/views/studentBursaryEditor.html',
        };
        return directive;
    }

})();
;/**
 * This is the Student Details Lookup Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]
 *  
 */
(function() {
    'use strict';

    angular
        .module('StudentDetailsLookupDirective', ['EntityServices'])
        .directive('studentDetailsLookup', studentDetailsLookup);

    function studentDetailsLookup($log, $rootScope) {

        var directive = {
            restrict: 'E',
            scope: {
                showAll: '=?',
                showDob: '=?',
                showGender: '=?',
            },
            bindToController: {
                studentId: '=?',
            },
            link: function(scope, element, attrs, ctrl) {
                scope.$watch('student', function(newValue, oldValue) {
                    $log.log('Student changed');
                    $log.log(oldValue);
                    $log.log(newValue);
                }, true);
            },
            controller: 'StudentDetailsLookupDirectiveController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/studentDetailsLookup/studentDetailsLookup.html',
            transclude: true,

        };

        return directive;
    }
})();
;/**
 * This is the EntryQualificationsEditorDirective definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 * 
 *  @type Directive
 */
(function() {
    'use strict';

    angular
        .module('StudentEntryQualificationsEditorDirective', ['ui.bootstrap.modal', 'ui.bootstrap.datepicker', 'ngMaterial'])
        .directive('studentEntryQualificationsEditor', studentEntryQualificationsEditor);

    function studentEntryQualificationsEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                showAll: '=?',
                showStudent: '=?',
            },
            bindToController: {
                studentId: '=',
                studentEntryQualifications: '='
            },
            controller: 'StudentEntryQualificationsEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/studentEntryQualificationsEditor/views/studentEntryQualificationsEditor.html'
        };

        return directive;

    }

})();
;/**
 * This is the Student Search Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]
 *
 */

(function() {
    'use strict';

    angular
        .module('StudentSearchDirective', ['cid.search.student'])
        .directive('studentSearch', studentSearch);

    function studentSearch() {

        var directive = {

            restrict: 'E',
            scope: {},
            bindToController: {
                showCandidateNo: '&?',
                'callback': '&onSelect',
            },
            transclude: true,
            controller: 'StudentSearchController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/studentSearch/studentSearch.html'

        };

        return directive;
    }
})();
;/**
 * This is the StudentSpecialCategory Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';

    angular
        .module('StudentSpecialCategoryDetailsDirective', ['EntityServices'])
        .directive('studentSpecialCategoryDetails', studentSpecialCategoryDetails);

    function studentSpecialCategoryDetails() {
        return {
            restrict: 'E',
            scope: {
                showAll: '=?',
                specialCategories: '=',
            },
            controller: 'StudentSpecialCategoryDetailsDirectiveController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/studentSpecialCategoryDetails/studentSpecialCategoryDetails.html',
        };
    }
})();
;/**
 * This is the StudentSpecialCategory Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';

    angular
        .module('StudentSpecialCategoryEditorDirective', ['ui.bootstrap.modal'])
        .directive('studentSpecialCategoryEditor', studentSpecialCategoryEditor);

    function studentSpecialCategoryEditor() {
        return {
            restrict: 'E',
            scope: {
                showAll: '=?',
                showId: '=?',
                showStudentSpecialCategory: '=?',
                showStudentId: '=?',
                id: '@id',
            },
            bindToController: {
                specialCategories: '=',
                studentId: '=',
            },
            controller: 'StudentSpecialCategoryEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/studentSpecialCategoryEditor/views/studentSpecialCategoryEditor.html',
        };
    }
})();
;/**
 * This is the StudentWarningDetails Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';

    angular
        .module('StudentWarningDetailsDirective', ['EntityServices'])
        .directive('studentWarningDetails', studentWarningDetails);

    function studentWarningDetails() {
        return {
            restrict: 'E',
            scope: {
                // showAll: '=?',
                studentWarning: '=',
            },
            // controller: 'StudentWarningDetailsDirectiveController',
            // controllerAs: 'ctrl',
            templateUrl: 'js/directives/studentWarningDetails/studentWarningDetails.html',
        };
    }
})();
;/**
 * This is the StudentWarning Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';

    angular
        .module('StudentWarningEditorDirective', ['ui.bootstrap.modal', 'EntityServices', 'StudentWarningDetailsDirective'])
        .directive('studentWarningEditor', studentWarningEditor);

    function studentWarningEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                showAll: '=?',
                showStudent: '=?',
                id: '@id',
            },
            bindToController: {
                studentWarning: '=',
                studentId: '=',
            },
            controller: 'StudentWarningEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/studentWarningEditor/views/studentWarningEditor.html',
        };

        return directive;
    }

})();
;/**
 * This is the Subjects Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *  
 *  @type Directive
 *  
 *  
 *   */
(function() {
    'use strict';

    angular
        .module('SubjectsEditorDirective', ['EntityServices'])
        .directive('subjectsEditorDirective', subjectsEditorDirective);

    function subjectsEditorDirective() {

        var directive = {
            restrict: 'E',
            scope: {
                subjects: '=?',
            },
            controller: 'SubjectsEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/subjects-editor/views/subjects-editor.html',
        };

        return directive;

    }
})();
;/**
 * This is the SupportType Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *  
 *  @type Directive
 *  
 *  
 *   */
(function() {
    'use strict';

    angular
        .module('SupportTypesEditorDirective', ['EntityServices'])
        .directive('supportTypesEditor', supportTypesEditor);

    function supportTypesEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                supportTypes: '=?',
            },
            controller: 'SupportTypesEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/support-types-editor/views/support-types-editor.html',
        };

        return directive;

    }
})();
;/**
 * This is the TextLookup Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  <text-look-up-editor text-look-ups="ctrl.textLookups"></text-look-up-editor>
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';

    angular
        .module('TextLookupEditorDirective', ['ui.tinymce', 'TextLookupService'])
        .directive('textLookupEditor', textLookupEditor);

    function textLookupEditor() {
        var directive = {
            restrict: 'E',
            scope: {
                textLookups: '=?',
            },
            controller: 'TextLookupEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/text-lookup-editor/views/text-lookup-editor.html',
        };

        return directive;
    }
})();
;/**
 * This is the TutorGroupRemarkPermissionTable Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';

    angular
        .module('TutorGroupRemarkPermissionTableDirective', ['EntityServices'])
        .directive('tutorGroupRemarkPermissionTable', tutorGroupRemarkPermissionTable);

    function tutorGroupRemarkPermissionTable() {
        return {
            restrict: 'E',
            scope: {
                showAll: '=?',
                showStudentYear: '=?',
                remarkPermission: '=',
            },
            //	controller: 'TutorGroupRemarkPermissionTableDirectiveController',
            //	controllerAs: 'ctrl',
            templateUrl: 'js/directives/tutor-group-remark-permission-table/tutor-group-remark-permission-table.html',
        };
    }
})();
;/**
 * This is the Tutor Groups Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *  
 *  @type Directive
 *  
 */

(function() {
    'use strict';

    angular
        .module('TutorGroupsEditorDirective', ['EntityServices'])
        .directive('tutorGroupsEditor', tutorGroupsEditor);

    function tutorGroupsEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                tutorGroups: '=?'
            },
            controller: 'TutorGroupsEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/tutor-groups-editor/views/tutor-groups-editor.html'
        };

        return directive;

    }
})();
;/**
 * This is the WarningCodeChangeDetails Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('WarningCodeChangeDetailsDirective', [])
        .directive('warningCodeChangeDetails', warningCodeChangeDetails);

    function warningCodeChangeDetails() {
        var directive = {
            restrict: 'E',
            scope: {
                showAll: '=?',
                showStudent: '=?',
                warningCodeChanges: '=?',
            },
            templateUrl: 'js/directives/warning-code-change-details/warning-code-change-details.html',
        };
        return directive;
    }
})();
;/**
 * This is the AcademicYears Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Directive
 *
 *
 *   */
(function() {
    'use strict';

    angular
        .module('WordGeneratorDirective', [])
        .directive('wordGenerator', wordGenerator);

    wordGenerator.$inject = ['$log', '$rootScope', 'GLOBAL'];

    function wordGenerator($log, $rootScope, GLOBAL) {
        return {
            restrict: 'E',
            scope: {
                studentId: '=',
            },
            controller: 'WordGeneratorDirectiveController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/wordGenerator/wordGenerator.html',
        };
    }
})();
;/**
 * This is the YearGroup Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *  
 *  @type Directive
 *  
 *  
 *   */
(function() {
    'use strict';

    angular
        .module('YearGroupsEditorDirective', ['EntityServices'])
        .directive('yearGroupsEditor', yearGroupsEditor);

    function yearGroupsEditor() {

        var directive = {
            restrict: 'E',
            scope: {
                yearGroups: '=?',
            },
            controller: 'YearGroupsEditorController',
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/year-groups-editor/views/year-groups-editor.html',
        };

        return directive;

    }
})();
;angular.module('AdmissionsDirective', [
    'AdmissionDetailsDirective',
    'DataSharingOptionDirective',
    'InductionDetailsDirective',
    'InterviewerDetailsDirective',
    'PreviousSchoolDetailsDirective',
    'StudentAdmissionEditorDirective',
    'StudentCollegeFundPaidDirective',
]);
;angular.module('Lookups', ['EntityServices']);
;angular.module('Lookups', ['EntityServices',
    'cid.lookup.course-spec',
    'cid.lookup.course-spec-validity',
]);
;angular.module('SelectionBoxes', ['EntityServices']);
;/**
 * This is the main module definition for the site.
 *
 *  Applied Styles: [Y001, Y002, Y010, Y021]
 *
 * @type Module
 */
(function() {
    'use strict';

    angular
        .module('cid.admissions', [
            'cid.service.data.admission.application-form',
        ]);

})();
;/**
 * This is the course-record viewer definition for the site.
 *
 *  Applied Styles: [Y001, Y002, Y010, Y021]
 *
 * @type Module
 */
(function() {
    'use strict';

    angular
        .module('cid.course-record-viewer', [
            'ui.router',
            'ui.bootstrap',
            'ui.bootstrap.tabs',
            'ngResource',

            'cid.app.constants',
            'CourseService',
        ]);
})();
;/**
 * This is the main module definition for the site.
 *
 *  Applied Styles: [Y001, Y002, Y010, Y021]
 *
 * @type Module
 */
(function() {
    'use strict';

    angular
        .module('cid.data', [
            'ui.router',
            'ui.bootstrap',
            'ngResource',
            'cid.service.logger',
        ]);
})();
;(function() {
    angular
        .module('cid.exams.course-exam-details', ['ui.router',
            'ui.bootstrap',
            'ui.bootstrap.tabs',
            'ngResource',
            'CourseExamDirective',
            'SyllabusTableDirective',
            'OptionTableDirective'
        ]);
})();
;(function() {
    angular
        .module('cid.exams.base-data-viewer', ['ui.router',
            'ui.bootstrap',
            'ngResource',
            'SyllabusService',
            'OptionService',
            'ComponentService',
            'SyllabusTableDirective',
            'OptionTableDirective',
            'BaseDataEditButtonsDirective'
        ]);
})();
;(function() {
    angular
        .module('cid.exams.exam-board-editor', ['ui.router', 'ui.bootstrap', 'ngResource', 'ExamBoardService']);
})();
;/**
 * This is the main module definition for the site.
 *
 *  Applied Styles: [Y001, Y002, Y010, Y021]
 *
 * @type Module
 */
(function() {
    angular
        .module('cid.exams.exam-series', ['ui.router', 'ui.bootstrap', 'ngResource', 'ExamSeriesService']);
})();
;(function() {
    angular.module('cid.exams', [
        'cid.exams.import-base-data',
        'cid.exams.base-data-viewer',
        'cid.exams.course-exam-details',
        'cid.exams.generate-entries',
        'cid.exams.generate-edi',
        'cid.exams.seating-plan',
        'cid.exams.exam-series',
        'cid.exams.exam-board-editor'
    ]);
}());
;(function() {
    angular
        .module('cid.exams.generate-edi', ['ui.router',
            'ui.bootstrap',
            'ngResource',
            'ExamSeriesTableDirective',
            'ExamSeriesService',
            'ExamSeriesCheckBoxDirective'
        ]);
})();
;(function() {
    angular.module('cid.exams.generate-entries', ['ui.router',
        'ui.bootstrap',
        'ngResource'
    ]);
})();
;(function() {
    angular.module('cid.exams.import-base-data', ['ui.router',
        'ui.bootstrap',
        'ngResource',
        'EntityServices'
    ]);
})();
;(function() {
    angular.module('cid.exams.seating-plan', ['ui.router',
        'ui.bootstrap',
        'ngResource',
        'dndLists',
        'SeatingPlanStudentDirective',
        'SeatingPlanSeatDirective',
        'CourseEnrolmentTableDirective',
        'ExpandDirective',
        'IndeterminateCheckboxDirective'
    ]);
})();
;/**
 * This is the main module definition for the site.
 *
 *  Applied Styles: [Y001, Y002, Y010, Y021]
 *
 * @type Module
 */
(function() {
    'use strict';

    angular
        .module('cid.site', [
            'ui.router',
            'ui.bootstrap',
            'ngResource',
            'cid.service.logger'
        ]);

})();
;/**
 * This file defines the student records module for the CID system.
 */
(function() {
    'use strict';

    angular.module('cid.student-record', [
        'ui.router',
        'ui.bootstrap',
        'ui.bootstrap.tabs',
        'ngResource',
        'StudentSearchDirective',
        'StudentDetailsDirective',
        'StudentYearDetailsDirective',
        'StudentOptionEditorTableDirective',
        'StudentAlternativeUciTableDirective',
        'StudentConcessionTypeTableDirective',

        'IdentificationViolationsEditorDirective'
    ]);

})();
;(function() {
    'use strict';

    angular
        .module('StudentEmailer', [
            'ui.bootstrap.tabs',
            'frapontillo.bootstrap-duallistbox',
            'ngCkeditor',
            'cid.search.student-course'
        ]);

})();
;angular.module('cid.tests', [
    'ui.router',
    'ui.bootstrap',
    'ngResource',

    'cid.app.constants',
    'cid.app.variables',
    'cid.search',
    'SelectionBoxes',

    // 'EnrolmentsTableDirective',
    // 'PersonDetailsDirective',
    // 'PersonDetailsLookupDirective',
    // 'PersonContactDetailsDirective',
    // 'PersonContactDetailsLookupDirective',
    // 'StudentDetailsDirective',
    // 'StudentDetailsLookupDirective',
    // 'RegistersTableDirective',
    // 'CorrespondencesTableDirective',
    // 'ILPInterviewsTableDirective',
    // 'StudentWarningDetailsDirective',
    // 'StudentBursaryDetailsDirective',
    // 'ExternalResultsArchiveTableDirective',
    // 'StudentInterimReportsTableDirective',
]);
;/**
 * This is the AcademicYears Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('AcademicYearsEditorDirective')
        .controller('AcademicYearsEditorController', AcademicYearsEditorController);

    AcademicYearsEditorController.$inject = ['$log', '$uibModal', '$scope', 'AcademicYear'];

    function AcademicYearsEditorController($log, $uibModal, $scope, AcademicYear) {
        /* jshint validthis:true */
        var vm = this;
        vm.academicYears = [];

        vm.loadAcademicYears = loadAcademicYears;
        vm.editAcademicYears = editAcademicYears;
        vm.addAcademicYears = addAcademicYears;

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+code';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }


        function loadAcademicYears() {
            AcademicYear.query().then(function(response) {
                vm.academicYears = response.data;
                $log.info("Loading AcademicYears ");
            }, function(response) {
                $log.error("Failed to load AcademicYears");
            });
        }


        function editAcademicYears(academicYearId) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/academic-years-editor/views/academic-years-editorDialog.html',
                controller: 'AcademicYearsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    academicYearsEntity: function(AcademicYear) {
                        return AcademicYear.get(academicYearId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadAcademicYears();
            });

        }


        function addAcademicYears() {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/academic-years-editor/views/academic-years-editor-addDialog.html',
                controller: 'AcademicYearsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    academicYearsEntity: function() {
                        var academicYears = {};
                        return academicYears;
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadAcademicYears();
            });

        }
    }

})();
;/**
 * This is the AcademicYear Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('AcademicYearsEditorDirective')
        .controller('AcademicYearsEditorDialogController', academicYearsEditorDialogController);

    academicYearsEditorDialogController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModalInstance', 'AcademicYear', 'academicYearsEntity'];

    function academicYearsEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, AcademicYear, academicYearsEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.academicYears = academicYearsEntity !== undefined ? academicYearsEntity : {};

        vm.cancel = cancel;
        vm.save = save;
        vm.add = add;

        var onSaveFinished = function(result) {
            $scope.$emit('academic-year-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        function add() {
            if (vm.academicYears.id !== null) {
                AcademicYear.create(vm.academicYears, onSaveFinished);
            }
        }

        function save() {
            if (vm.academicYears.id) {
                AcademicYear.save(vm.academicYears, onSaveFinished);
            }
        }

    }


})();
;/**
 * This controller is used by the AddressEditorDirective.
 *
 * Applied Style: [Y001, Y002, Y010, Y022, Y023, Y024, Y032, Y033, Y034] *
 *
 */

(function() {
    'use strict';

    angular
        .module('AddressEditorDirective')
        .controller('AddressEditorDialogController', AddressEditorDialogController);

    AddressEditorDialogController.$inject = ['$log', '$scope', '$filter', '$state', '$uibModalInstance', '$uibModal', '$rootScope', 'addressEntity', 'Address', 'PostcodeLookup'];

    function AddressEditorDialogController($log, $scope, $filter, $state, $uibModalInstance, $uibModal, $rootScope, addressEntity, Address, PostcodeLookup) {
        /* jshint validthis:true */
        var vm = this;

        // Public Interface
        vm.address = addressEntity !== undefined ? addressEntity : {};
        vm.postcode = [];
        vm.onSaveFinished = onSaveFinished;
        vm.save = save;
        vm.cancel = cancel;
        vm.postcodeLookup = postcodeLookup;


        // Private Interface
        function onSaveFinished(result) {
            $scope.$emit('address-saved', result);
            $uibModalInstance.close(result);
        }

        $scope.$watch('ctrl.address.postcode', function(postcode) {
            $scope.ctrl.address.postcode = $filter('uppercase')(postcode);
        }, true);


        /**
         * This saves the address and closes that dialog box
         */
        function save() {
            $log.log('AddressDialogController::save called');
            $log.info(vm.address);
            if (vm.address.id) {
                // update the contact information
                Address.save(vm.address, onSaveFinished);
            } else {
                // Create New Address
                Address.create(vm.address, onSaveFinished);
            }

        }

        /**
         * This closes the address editor dialog box without saving
         */
        function cancel() {
            $log.log('AddressDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        }

        //Lookup button
        function postcodeLookup(postcode) {
            $log.log('AddressEditorPostcodeLookupController::lookup called');
            vm.modalOptions = {
                templateUrl: 'js/directives/address-editor/views/addressEditorPostcodeLookupDialog.html',
                controller: 'AddressEditorPostcodeLookupDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    postcodeLookups: function(PostcodeLookup) {
                        return PostcodeLookup.search(postcode);
                    }
                }
            };
            $uibModal.open(vm.modalOptions).result.then(function(response) {
                vm.address.line1 = response.line1;
                vm.address.line2 = response.line2;
                vm.address.line3 = response.line3;
                vm.address.line4 = response.line4;
                vm.address.line5 = response.line5;
                vm.address.town = response.town;
                vm.address.county = response.county;
                vm.address.buildingName = response.buildingName;
                vm.address.subBuilding = response.subBuilding;
                $log.log(response);
            });
        }

    }
})();
;/**
 * This controller is used by the AddressEditorDirective.
 *
 * Applied Style: [Y001, Y002, Y010, Y022, Y023, Y024, Y032, Y033, Y034] *
 *
 */

(function() {
    'use strict';

    angular
        .module('AddressEditorDirective')
        .controller('AddressEditorPostcodeLookupDialogController', AddressEditorPostcodeLookupDialogController);

    AddressEditorPostcodeLookupDialogController.$inject = ['$log', '$scope', '$state', '$uibModal', '$uibModalInstance', 'postcodeLookups', 'PostcodeLookup'];

    function AddressEditorPostcodeLookupDialogController($log, $scope, $state, $uibModal, $uibModalInstance, postcodeLookups, PostcodeLookup) {
        /* jshint validthis:true */
        var vm = this;
        vm.postcode = postcodeLookups.data;
        vm.selectedPostcodeId = null;
        vm.selectAddress = selectAddress;
        vm.clear = clear;

        function selectAddress() {
            $log.log('AddressEditorPostcodeLookupDialogController::select called');
            if (vm.selectedPostCode === null) {
                // No postcode selected
            }
            PostcodeLookup.retrieve(vm.selectedPostcodeId).then(function(response) {
                $scope.$emit('address-selected', response.data);
                $uibModalInstance.close(response.data);
            });
        }

        function clear() {
            $log.log('AddressEditorPostcodeLookupDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
;/**
 * This controller is used by the AddressEditorDirective.
 *
 * Applied Style: [Y001, Y002, Y010, Y022, Y023, Y024, Y032, Y033, Y034] *
 *
 */
(function() {
    'use strict';

    angular
        .module('AddressEditorDirective')
        .controller('AddressEditorController', AddressEditorController);

    AddressEditorController.$inject = ['$log', '$scope', '$rootScope', '$uibModal', 'Address'];

    function AddressEditorController($log, $scope, $rootScope, $uibModal, Address) {
        /* jshint validthis:true */
        var vm = this;

        vm.message = '';
        vm.addressId = vm.addressId ? vm.addressId : undefined;
        vm.address = vm.address ? vm.address : {};
        vm.init = init;
        vm.loadAddress = loadAddress;
        vm.editAddress = editAddress;

        function init() {
            $log.log('AddressDetailsDirectiveController::init called');
            vm.loadAddress(vm.addressId);
        }

        function loadAddress(addressId) {
            Address.get(addressId).then(function(response) {
                $log.info('II Address Loaded');
                vm.address = response.data;
            });
        }

        function editAddress(id) {
            $log.log('AddressEditorDirectiveController::editAddress called');
            var addressId = id;
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/address-editor/views/addressEditorDialog.html',
                controller: 'AddressEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                backdrop: 'static',
                keyboard: false,
                resolve: {
                    addressEntity: function(Address) {
                        return Address.get(addressId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });
            modalInstance.result.then().finally(function() {
                vm.loadAddress(vm.addressId);
            });
        }
    }
})();
;/**
 * This is the College Fund Payment Dialog Controller it is used to control the dialog box used to add and edit a college fund payment.
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */
(function() {
    'use strict';

    angular
        .module('DataSharingOptionDirective')
        .controller('DataSharingOptionEditorDialogController', DataSharingOptionEditorDialogController);

    DataSharingOptionEditorDialogController.$inject = ['$log', '$scope', '$uibModalInstance', '$uibModal', 'dataSharingOptionEntity', 'Student'];

    function DataSharingOptionEditorDialogController($log, $scope, $uibModalInstance, $uibModal, dataSharingOptionEntity, Student) {
        /* jshint validthis:true */
        var vm = this;

        // Public Interface
        this.dataSharingOption = dataSharingOptionEntity !== undefined ? dataSharingOptionEntity : {};

        vm.save = save;
        vm.cancel = cancel;

        // Private Interface

        var onSaveFinished = function(result) {
            $scope.$emit('dataSharingOption-saved', result);
            $uibModalInstance.close(result);
        };

        /**
         * This methods is used to save the college fund payment that is being edited in the dialog
         */
        function save() {
            $log.log('dataSharingOptionDialogController::save called');
            if (vm.dataSharingOption.id) {
                //update the DataSharingOption information
                Student.saveDataSharingOption(vm.dataSharingOption, onSaveFinished);
            }
        }

        /**
         * This method is used to cancel the edit operation and close the dialog box.
         */
        function cancel() {
            $log.log('DataSharingOptionDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
;/**
 * The DataSharingOptionEditorController is used to define the main controller for the DataSharingOptionEditorDirective.
 *
 * Applied Styles: [Y001, Y002, Y010, Y020, Y022, Y023, Y024, Y031, Y032, Y033, Y034, Y035, Y036, Y090, Y091]
 *
 * @type Controller
 */
(function() {
    'use strict';

    angular
        .module('DataSharingOptionDirective')
        .controller('DataSharingOptionEditorController', DataSharingOptionEditorController);

    DataSharingOptionEditorController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModal', 'Student'];

    function DataSharingOptionEditorController($log, $scope, $state, $rootScope, $uibModal, Student) {
        // Variables and Constants
        /* jshint validthis:true */
        var vm = this;

        // Public Interface
        vm.studentId = vm.studentId ? vm.studentId : undefined;
        vm.dataSharingOption = vm.dataSharingOption ? vm.dataSharingOption : [];


        vm.editDataSharingOption = editDataSharingOption;


        /**
         * This methods is used to open the edit data sharing Options
         *
         * @param  {Integer} id The ID of the student to be edited
         */
        function editDataSharingOption(studentId) {
            $log.log('DataSharingOptionEditorController::editDataSharingOption called');

            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/admissions/data-sharing-option/views/data-sharing-option-editorDialog.html',
                controller: 'DataSharingOptionEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    dataSharingOptionEntity: function(Student) {
                        return Student.getDataSharingOption(studentId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });

        }
    }
})();
;(function() {
    'use strict';
    angular
        .module('StudentAdmissionEditorDirective')
        .controller('StudentAdmissionEditorController', StudentAdmissionEditorController);

    StudentAdmissionEditorController.$inject = ['$uibModal', '$log', 'Student', '$scope', '$rootScope'];

    function StudentAdmissionEditorController($uibModal, $log, Student, $scope, $rootScope) {
        /* jshint validthis:true */
        var vm = this;

        vm.studentAdmission = [];

        vm.editStudentAdmission = editStudentAdmission;

        function editStudentAdmission(studentId) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/admissions/student-admission-editor/views/student-admission-editorDialog.html',
                controller: 'StudentAdmissionEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    studentAdmissionEntity: function(Student) {
                        return Student.admissions(studentId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            $log.error("Failed to retreive");
                        });
                    }
                }

            });
        }

    }

})();
;(function() {
    'use strict';

    angular
        .module('StudentAdmissionEditorDirective')
        .controller('StudentAdmissionEditorDialogController', StudentAdmissionEditorDialogController);

    StudentAdmissionEditorDialogController.$inject = ['studentAdmissionEntity', 'Student', '$uibModalInstance', '$scope'];

    function StudentAdmissionEditorDialogController(studentAdmissionEntity, Student, $uibModalInstance, $scope) {
        /* jshint validthis:true */
        var vm = this;

        vm.studentAdmission = studentAdmissionEntity !== undefined ? studentAdmissionEntity : {};

        vm.save = save;
        vm.cancel = cancel;

        var options = {
            'step': 5
        };

        var onSaveFinished = function(result) {
            $scope.$emit('student-admission-updated', result);
            $uibModalInstance.close(result);
        };

        function save() {
            Student.saveAdmission(vm.studentAdmission, onSaveFinished);
        }

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }


    }


})();
;(function() {
    'use strict';

    angular
        .module('StudentCollegeFundPaidDirective')
        .controller('StudentCollegeFundPaidEditorController', StudentCollegeFundPaidEditorController);

    StudentCollegeFundPaidEditorController.$inject = ['collegeFundEntity', 'StudentCollegeFundPaid', '$uibModalInstance', '$scope'];

    function StudentCollegeFundPaidEditorController(collegeFundEntity, StudentCollegeFundPaid, $uibModalInstance, $scope) {
        /* jshint validthis:true */
        var vm = this;

        vm.studentCollegeFundPaid = collegeFundEntity !== undefined ? collegeFundEntity : {};

        vm.save = save;
        vm.cancel = cancel;

        var onSaveFinished = function(result) {
            $scope.$emit("fund-paid-updated", result);
            $uibModalInstance.close(result);
        };

        function save() {
            StudentCollegeFundPaid.save(vm.studentCollegeFundPaid, onSaveFinished);
        }

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }


    }


})();
;(function() {
    'use strict';

    angular
        .module('StudentCollegeFundPaidDirective')
        .controller('StudentCollegeFundPaidController', StudentCollegeFundPaidController);


    StudentCollegeFundPaidController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModal', 'StudentCollegeFundPaid'];


    function StudentCollegeFundPaidController($log, $scope, $state, $rootScope, $uibModal, StudentCollegeFundPaid) {
        /* jshint validthis:true */
        var vm = this;
        var studentId = vm.studentId;
        vm.studentCollegeFundPaid = vm.studentCollegeFundPaid ? vm.studentCollegeFundPaid : [];

        vm.editCollegeFundPaid = editCollegeFundPaid;


        // Opens an $uibModal instance on click of Edit Button
        function editCollegeFundPaid(studentId) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/admissions/student-college-fund-paid/views/student-college-fund-paid-editorDialog.html',
                controller: 'StudentCollegeFundPaidEditorController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    collegeFundEntity: function(StudentCollegeFundPaid) {
                        return StudentCollegeFundPaid.get(studentId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("Failed to retrive");
                        });
                    }
                }

            });
        }


    }


})();
;/**
 * This is the ApplicationStatuss Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('ApplicationStatusesEditorDirective')
        .controller('ApplicationStatusesEditorController', ApplicationStatusesEditorController);

    ApplicationStatusesEditorController.$inject = ['$log', '$uibModal', '$scope', 'ApplicationStatus'];

    function ApplicationStatusesEditorController($log, $uibModal, $scope, ApplicationStatus) {
        /* jshint validthis:true */
        var vm = this;
        vm.applicationStatuses = [];

        vm.loadApplicationStatuses = loadApplicationStatuses;
        vm.editApplicationStatuses = editApplicationStatuses;
        vm.addApplicationStatuses = addApplicationStatuses;

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+code';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }


        function loadApplicationStatuses() {
            ApplicationStatus.query().then(function(response) {
                vm.applicationStatuses = response.data;
                $log.info("Loading ApplicationStatuses ");
            }, function(response) {
                $log.error("Failed to load ApplicationStatuses");
            });
        }


        function editApplicationStatuses(applicationStatusId) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/application-statuses-editor/views/application-statuses-editorDialog.html',
                controller: 'ApplicationStatusesEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    applicationStatusesEntity: function(ApplicationStatus) {
                        return ApplicationStatus.get(applicationStatusId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadApplicationStatuses();
            });

        }


        function addApplicationStatuses() {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/application-statuses-editor/views/application-statuses-editorDialog.html',
                controller: 'ApplicationStatusesEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    applicationStatusesEntity: function() {
                        var applicationStatuses = {};
                        return applicationStatuses;
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadApplicationStatuses();
            });

        }
    }

})();
;/**
 * This is the ApplicationStatus Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('ApplicationStatusesEditorDirective')
        .controller('ApplicationStatusesEditorDialogController', ApplicationStatusesEditorDialogController);

    ApplicationStatusesEditorDialogController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModalInstance', 'ApplicationStatus', 'applicationStatusesEntity'];

    function ApplicationStatusesEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, ApplicationStatus, applicationStatusesEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.applicationStatuses = applicationStatusesEntity !== undefined ? applicationStatusesEntity : {};

        vm.cancel = cancel;
        vm.save = save;

        var onSaveFinished = function(result) {
            $scope.$emit('application-statuses-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        function save() {
            if (vm.applicationStatuses.id) {
                ApplicationStatus.save(vm.applicationStatuses, onSaveFinished);
            } else {
                if (vm.applicationStatuses.id !== null) {
                    ApplicationStatus.create(vm.applicationStatuses, onSaveFinished);
                }
            }
        }

    }


})();
;/**
 * This is the AttendanceMonitorings Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('AttendanceMonitoringsEditorDirective')
        .controller('AttendanceMonitoringsEditorController', AttendanceMonitoringsEditorController);

    AttendanceMonitoringsEditorController.$inject = ['$log', '$uibModal', '$scope', 'AttendanceMonitoring'];

    function AttendanceMonitoringsEditorController($log, $uibModal, $scope, AttendanceMonitoring) {
        /* jshint validthis:true */
        var vm = this;
        vm.attendanceMonitorings = [];

        vm.loadAttendanceMonitorings = loadAttendanceMonitorings;
        vm.editAttendanceMonitorings = editAttendanceMonitorings;
        vm.addAttendanceMonitorings = addAttendanceMonitorings;

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+code';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function loadAttendanceMonitorings() {
            AttendanceMonitoring.query().then(function(response) {
                vm.attendanceMonitorings = response.data;
                $log.info("Loading Faculty ");
            }, function(response) {
                $log.error("Failed to load Faculties");
            });
        }


        function editAttendanceMonitorings(attendanceMonitoringId) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/attendance-monitorings-editor/views/attendance-monitorings-editorDialog.html',
                controller: 'AttendanceMonitoringsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    attendanceMonitoringsEntity: function(AttendanceMonitoring) {
                        return AttendanceMonitoring.get(attendanceMonitoringId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadAttendanceMonitorings();
            });

        }


        function addAttendanceMonitorings() {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/attendance-monitorings-editor/views/attendance-monitorings-editor-addDialog.html',
                controller: 'AttendanceMonitoringsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    attendanceMonitoringsEntity: function() {
                        var attendanceMonitorings = {};
                        return attendanceMonitorings;
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadAttendanceMonitorings();
            });

        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

    }

})();
;/**
 * This is the Year Group Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('AttendanceMonitoringsEditorDirective')
        .controller('AttendanceMonitoringsEditorDialogController', AttendanceMonitoringsEditorDialogController);

    AttendanceMonitoringsEditorDialogController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModalInstance', 'AttendanceMonitoring', 'attendanceMonitoringsEntity'];

    function AttendanceMonitoringsEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, AttendanceMonitoring, attendanceMonitoringsEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.attendanceMonitorings = attendanceMonitoringsEntity !== undefined ? attendanceMonitoringsEntity : {};

        vm.cancel = cancel;
        vm.save = save;
        vm.add = add;

        var onSaveFinished = function(result) {
            $scope.$emit('attendance-monitorings-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        function add() {
            if (vm.attendanceMonitorings.id !== null) {
                AttendanceMonitoring.create(vm.attendanceMonitorings, onSaveFinished);
            }
        }

        function save() {
            if (vm.attendanceMonitorings.id) {
                AttendanceMonitoring.save(vm.attendanceMonitorings, onSaveFinished);
            }
        }

    }

})();
;/**
 * This is the Blocks Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('BlocksEditorDirective')
        .controller('BlocksEditorController', BlocksEditorController);

    BlocksEditorController.$inject = ['$log', '$uibModal', 'Block'];

    function BlocksEditorController($log, $uibModal, Block) {
        /* jshint validthis:true */
        var vm = this;
        vm.blocks = [];

        vm.loadBlocks = loadBlocks;
        vm.editBlocks = editBlocks;
        vm.addBlocks = addBlocks;


        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+code';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }



        function loadBlocks() {
            Block.query().then(function(response) {
                vm.blocks = response.data;
                $log.info("Loading Blocks");
            }, function(response) {
                $log.error("Failed to load Blocks");
            });
        }


        function editBlocks(blockId) {
            $log.log("BlocksEditorController :: editBlocks called");
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/blocks-editor/views/blocks-editorDialog.html',
                controller: 'BlocksEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    blocksEntity: function(Block) {
                        return Block.get(blockId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadBlocks();
            });

        }


        function addBlocks() {
            $log.log("BlocksEditorController :: addBlocks called");
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/blocks-editor/views/blocks-editorDialog.html',
                controller: 'BlocksEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    blocksEntity: function() {
                        var blocks = {};
                        return blocks;
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadBlocks();
            });

        }
    }

})();
;/**
 * This is the Blocks Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('BlocksEditorDirective')
        .controller('BlocksEditorDialogController', BlocksEditorDialogController);

    BlocksEditorDialogController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModalInstance', 'Block', 'blocksEntity'];

    function BlocksEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, Block, blocksEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.blocks = blocksEntity !== undefined ? blocksEntity : {};

        vm.cancel = cancel;
        vm.save = save;


        var onSaveFinished = function(result) {
            $scope.$emit('blocks-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $log.log('BlocksEditorDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        }

        function save() {
            if (vm.blocks.id) {
                Block.save(vm.blocks, onSaveFinished);
            } else {
                if (vm.blocks.id !== null) {
                    Block.create(vm.blocks, onSaveFinished);
                }
            }
        }

    }


})();
;/**
 * This is the CentralMonitorings Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('CentralMonitoringsEditorDirective')
        .controller('CentralMonitoringsEditorController', CentralMonitoringsEditorController);

    CentralMonitoringsEditorController.$inject = ['$log', '$uibModal', '$scope', 'CentralMonitoring'];

    function CentralMonitoringsEditorController($log, $uibModal, $scope, CentralMonitoring) {
        /* jshint validthis:true */
        var vm = this;
        vm.centralMonitorings = [];

        vm.loadCentralMonitorings = loadCentralMonitorings;
        vm.editCentralMonitorings = editCentralMonitorings;
        vm.addCentralMonitorings = addCentralMonitorings;

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+code';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function loadCentralMonitorings() {
            CentralMonitoring.query().then(function(response) {
                vm.centralMonitorings = response.data;
                $log.info("Loading Faculty ");
            }, function(response) {
                $log.error("Failed to load Faculties");
            });
        }


        function editCentralMonitorings(centralMonitoringId) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/central-monitorings-editor/views/central-monitorings-editorDialog.html',
                controller: 'CentralMonitoringsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    centralMonitoringsEntity: function(CentralMonitoring) {
                        return CentralMonitoring.get(centralMonitoringId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadCentralMonitorings();
            });

        }


        function addCentralMonitorings() {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/central-monitorings-editor/views/central-monitorings-editor-addDialog.html',
                controller: 'CentralMonitoringsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    centralMonitoringsEntity: function() {
                        var centralMonitorings = {};
                        return centralMonitorings;
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadCentralMonitorings();
            });

        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

    }

})();
;/**
 * This is the Year Group Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('CentralMonitoringsEditorDirective')
        .controller('CentralMonitoringsEditorDialogController', CentralMonitoringsEditorDialogController);

    CentralMonitoringsEditorDialogController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModalInstance', 'CentralMonitoring', 'centralMonitoringsEntity'];

    function CentralMonitoringsEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, CentralMonitoring, centralMonitoringsEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.centralMonitorings = centralMonitoringsEntity !== undefined ? centralMonitoringsEntity : {};

        vm.cancel = cancel;
        vm.save = save;
        vm.add = add;

        var onSaveFinished = function(result) {
            $scope.$emit('central-monitorings-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        function add() {
            if (vm.centralMonitorings.id !== null) {
                CentralMonitoring.create(vm.centralMonitorings, onSaveFinished);
            }
        }

        function save() {
            if (vm.centralMonitorings.id) {
                CentralMonitoring.save(vm.centralMonitorings, onSaveFinished);
            }
        }

    }

})();
;/**
 * This is the College Fund Payment Dialog Controller it is used to control the dialog box used to add and edit a college fund payment.
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */
(function() {
    'use strict';

    angular
        .module('CollegeFundPaymentEditorDirective')
        .controller('CollegeFundPaymentEditorDialogController', CollegeFundPaymentEditorDialogController);

    CollegeFundPaymentEditorDialogController.$inject = ['$log', '$scope', '$uibModalInstance', '$uibModal', 'collegeFundPaymentEntity', 'CollegeFundPayment'];

    function CollegeFundPaymentEditorDialogController($log, $scope, $uibModalInstance, $uibModal, collegeFundPaymentEntity, CollegeFundPayment) {
        /* jshint validthis:true */
        var vm = this;

        // Public Interface
        this.collegeFundPayment = collegeFundPaymentEntity !== undefined ? collegeFundPaymentEntity : {};

        vm.save = save;
        vm.cancel = cancel;

        // Private Interface

        var onSaveFinished = function(result) {
            $scope.$emit('collegeFundPayment-saved', result);
            $uibModalInstance.close(result);
        };

        /**
         * This methods is used to save the college fund payment that is being edited in the dialog
         */
        function save() {
            $log.log('CollegeFundPaymentDialogController::save called');
            if (vm.collegeFundPayment.id) {
                //update the collegeFundPayment information
                CollegeFundPayment.save(vm.collegeFundPayment, onSaveFinished);
            } else {
                // Create New CollegeFundPayment
                if (vm.collegeFundPayment.id !== null) {
                    CollegeFundPayment.create(vm.collegeFundPayment, onSaveFinished);
                }
            }
        }

        /**
         * This method is used to cancel the edit operation and close the dialog box.
         */
        function cancel() {
            $log.log('CollegeFundPaymentDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
;/**
 * The CollegeFundPaymentEditorController is used to define the main controller for the CollegeFundPaymentEditorDirective.
 *
 * Applied Styles: [Y001, Y002, Y010, Y020, Y022, Y023, Y024, Y031, Y032, Y033, Y034, Y035, Y036, Y090, Y091]
 *
 * @type Controller
 */
(function() {
    'use strict';

    angular
        .module('CollegeFundPaymentEditorDirective')
        .controller('CollegeFundPaymentEditorController', CollegeFundPaymentEditorController);

    CollegeFundPaymentEditorController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModal', 'CollegeFundPayment'];

    function CollegeFundPaymentEditorController($log, $scope, $state, $rootScope, $uibModal, CollegeFundPayment) {
        // Variables and Constants
        /* jshint validthis:true */
        var vm = this;
        vm.dialog = {};

        // Public Interface
        vm.studentId = vm.studentId ? vm.studentId : undefined;
        vm.collegeFundPayment = vm.collegeFundPayment ? vm.collegeFundPayment : [];

        vm.loadCollegeFundPayment = loadCollegeFundPayment;
        vm.addCollegeFundPayment = addCollegeFundPayment;
        vm.editCollegeFundPayment = editCollegeFundPayment;

        // Private Interface

        /**
         * This method is used to load the CollegeFundPayments for a specified studentId
         *
         * @param  {Integer} studentId The ID of the student
         */
        function loadCollegeFundPayment(studentId) {
            $log.info('II Loading CollegeFundPayment Data');
            CollegeFundPayment.getByStudent(studentId).then(function(response) {
                $log.info('II CollegeFundPayment Loaded');
                vm.collegeFundPayment = response.data;
            }, function(response) {
                $log.error('EE CollegeFundPayment could not be loaded');
            });
        }

        /**
         * This methods is used to open the add new college fund payments dialog box
         *
         * @param {Integer} studentId The ID of the student
         */
        function addCollegeFundPayment(studentId) {
            $log.log('CollegeFundPaymentEditorController::addContact called');
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/college-fund-payment-editor/views/college-fund-payment-editor-dialog.html',
                controller: 'CollegeFundPaymentEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    collegeFundPaymentEntity: function() {
                        var collegeFundPayment = {};
                        collegeFundPayment.studentId = studentId;
                        return collegeFundPayment;
                    }
                }
            });
            // Reload CollegeFundPayment after dialog closed
            modalInstance.result.then().finally(function() {
                vm.loadCollegeFundPayment(vm.studentId);
            });
        }

        /**
         * This methods is used to open the edit college fund payment dialog box
         *
         * @param  {Integer} id The ID of the college fund payment to be edited
         */
        function editCollegeFundPayment(id) {
            $log.log('CollegeFundPaymentEditorController::editContact called');

            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/college-fund-payment-editor/views/college-fund-payment-editor-dialog.html',
                controller: 'CollegeFundPaymentEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    collegeFundPaymentEntity: function(Contact) {
                        return CollegeFundPayment.get(id).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });
            // Reload CollegeFundPayment after dialog closed
            modalInstance.result.then().finally(function() {
                vm.loadCollegeFundPayment(vm.studentId);
            });
        }
    }
})();
;/**
 * This is the ConcessionTypes Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('ConcessionTypesEditorDirective')
        .controller('ConcessionTypesEditorController', ConcessionTypesEditorController);

    ConcessionTypesEditorController.$inject = ['$log', '$uibModal', '$scope', 'ConcessionType'];

    function ConcessionTypesEditorController($log, $uibModal, $scope, ConcessionType) {
        /* jshint validthis:true */
        var vm = this;
        vm.concessionTypes = [];

        vm.loadConcessionTypes = loadConcessionTypes;
        vm.editConcessionTypes = editConcessionTypes;
        vm.addConcessionTypes = addConcessionTypes;

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+code';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function loadConcessionTypes() {
            ConcessionType.query().then(function(response) {
                vm.concessionTypes = response.data;
                $log.info("Loading Faculty ");
            }, function(response) {
                $log.error("Failed to load Faculties");
            });
        }


        function editConcessionTypes(concessionTypeId) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/concession-types-editor/views/concession-types-editorDialog.html',
                controller: 'ConcessionTypesEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    concessionTypesEntity: function(ConcessionType) {
                        return ConcessionType.get(concessionTypeId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadConcessionTypes();
            });

        }


        function addConcessionTypes() {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/concession-types-editor/views/concession-types-editor-addDialog.html',
                controller: 'ConcessionTypesEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    concessionTypesEntity: function() {
                        var concessionTypes = {};
                        return concessionTypes;
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadConcessionTypes();
            });

        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

    }

})();
;/**
 * This is the Year Group Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('ConcessionTypesEditorDirective')
        .controller('ConcessionTypesEditorDialogController', ConcessionTypesEditorDialogController);

    ConcessionTypesEditorDialogController.$inject = ['$log', '$scope', '$state',
        '$rootScope', '$uibModalInstance', 'ConcessionType', 'concessionTypesEntity'
    ];

    function ConcessionTypesEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, ConcessionType, concessionTypesEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.concessionTypes = concessionTypesEntity !== undefined ? concessionTypesEntity : {};

        vm.cancel = cancel;
        vm.save = save;
        vm.add = add;

        var onSaveFinished = function(result) {
            $scope.$emit('concessionTypes-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        function add() {
            if (vm.concessionTypes.id !== null) {
                ConcessionType.create(vm.concessionTypes, onSaveFinished);
            }
        }

        function save() {
            if (vm.concessionTypes.id) {
                ConcessionType.save(vm.concessionTypes, onSaveFinished);
            }
        }

    }

})();
;/**
 * This is the Contacts Editor Dialog Controller it is used to control the dialog box used to edit a contact.
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */
(function() {
    'use strict';

    angular
        .module('ContactsEditorDirective')
        .controller('ContactsEditorDialogController', ContactsEditorDialogController);

    ContactsEditorDialogController.$inject = ['$log', '$scope', '$uibModalInstance', '$uibModal', 'contactEntity', 'Contact'];

    function ContactsEditorDialogController($log, $scope, $uibModalInstance, $uibModal, contactEntity, Contact) {
        /* jshint validthis:true */
        var vm = this;

        //Public Interface
        vm.contact = contactEntity !== undefined ? contactEntity : {};
        vm.personId = vm.contact ? vm.contact : undefined;

        vm.save = save;
        vm.cancel = cancel;
        vm.addAddress = addAddress;
        vm.deleteAddress = deleteAddress;

        // Private interface

        var onSaveFinished = function(result) {
            $scope.$emit('contact-saved', result);
            $uibModalInstance.close(result);
        };

        function save() {
            $log.log('ContactDialogController::save called');
            $log.info(vm.contact);
            if (vm.contact.id) {
                //update the contact information
                Contact.save(vm.contact, onSaveFinished);
            } else {
                // Create New Contact
                if (vm.contact.id !== null) {
                    Contact.create(vm.contact, onSaveFinished);
                }
            }
        }

        function cancel() {
            $log.log('ContactDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        }

        function addAddress(personId) {
            $log.log('AddressEditorDirectiveController::addAddress called');
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/address-editor/views/addressEditorDialog.html',
                controller: 'AddressEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                backdrop: 'static',
                keyboard: false,
                resolve: {
                    addressEntity: function() {
                        var address = {};
                        return address;
                    }
                }
            });
            modalInstance.result.then(function(response) {
                $log.info(response);
                vm.contact.contact.addressId = response.id;
                vm.contact.contact.address = response;
            });
        }

        function deleteAddress() {
            $log.log('AddressEditorDirectiveController::deleteAddress called');
            if (vm.contact.id) {
                var msg = "Are you sure you want to delete this Address?";
                if (window.confirm(msg)) {
                    Contact.deleteAddress(vm.contact, onSaveFinished);
                }
            }
        }
    }
})();
;/**
 * The ContactsEditorController is used to define the ContactsEditorDirective main controller.
 *
 * Applied Styles: [Y001, Y002, Y010, Y020, Y022, Y023, Y024, Y031, Y032, Y033, Y034, Y035, Y036, Y090, Y091]
 *
 * @type Controller
 */
(function() {
    'use strict';

    angular
        .module('ContactsEditorDirective')
        .controller('ContactsEditorController', ContactsEditorController);

    ContactsEditorController.$inject = ['$log', '$uibModal', 'Person', 'Contact'];

    function ContactsEditorController($log, $uibModal, Person, Contact) {
        /* jshint validthis:true */
        var vm = this;

        // Public Interface
        vm.personId = vm.personId ? vm.personId : undefined;
        vm.contacts = vm.contacts ? vm.contacts : [];

        vm.loadContacts = loadContacts;
        vm.editContact = editContact;
        vm.addContact = addContact;
        vm.deleteContact = deleteContact;

        // Private Interface

        function loadContacts(personId) {
            $log.info('II Loading Contacts Data');
            Person.contacts(personId).then(function(response) {
                $log.info('II Contacts Loaded');
                vm.contacts = response.data;
            }, function(response) {
                $log.error('EE Contacts could not be loaded');
            });
        }

        // Create New Contact
        function addContact(personId) {
            $log.log('ContactsEditorController::addContact called');
            if (personId) {
                var modalInstance = $uibModal.open({
                    templateUrl: 'js/directives/contacts-editor/views/contactEditorDialog.html',
                    controller: 'ContactsEditorDialogController',
                    controllerAs: 'ctrl',
                    size: 'lg',
                    backdrop: 'static',
                    keyboard: false,
                    resolve: {
                        contactEntity: function() {
                            var contact = {};
                            contact.personId = personId;
                            return contact;
                        }
                    }
                });
                // Reload Contacts after dialog closed
                modalInstance.result.then().finally(function() {
                    vm.loadContacts(vm.personId);
                });
            } else {
                $log.error('EE No Person ID Specified');
            }
        }

        //update the contact information
        function editContact(contactId) {
            $log.log('ContactsEditorController::editContact called');

            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/contacts-editor/views/contactEditorDialog.html',
                controller: 'ContactsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                backdrop: 'static',
                keyboard: false,
                resolve: {
                    contactEntity: function(Contact) {
                        return Contact.get(contactId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });
            // Reload Contacts after dialog closed
            modalInstance.result.then().finally(function() {
                vm.loadContacts(vm.personId);
            });
        }

        // Delete the contact
        function deleteContact(contactId) {
            $log.log('ContactsEditorController::deleteContact called');
            if (contactId) {
                var msg = "Are you sure you want to delete this contact?";
                if (window.confirm(msg)) {
                    Contact.delete(contactId).then(function(response) {
                        $log.info("II Contact ($contactId) has been deleted");
                    }, function(response) {
                        $log.info("EE A problem occurred trying to delete contact ($contactId)");
                    }).finally(function() {
                        vm.loadContacts(vm.personId);
                    });
                }
            }
        }
    }
})();
;/**
 * This is the Contacts Table Directive Controller ,used byContactsTableDirective
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */
(function() {
    'use strict';

    angular
        .module('ContactsTableDirective')
        .controller('ContactsTableDirectiveController', ContactsTableDirectiveController);

    ContactsTableDirectiveController.$inject = ['$log', '$scope', '$state', '$rootScope', 'Person', 'Contact'];

    function ContactsTableDirectiveController($log, $scope, $state, $rootScope, Person, Contact) {
        /* jshint validthis:true */
        var vm = this;
        vm.contacts = [];
        vm.init = init;

        function init() {
            $log.log('ContactsTableDirectiveController::init called');
        }
    }

})();
;/**
 * This is the Correspondences Table Directive Controller ,used CorrespondencesTableDirective
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('CorrespondencesTableDirective')
        .controller('CorrespondencesTableDirectiveController', CorrespondencesTableDirectiveController);

    CorrespondencesTableDirectiveController.$inject = ['$log', '$scope', '$state', '$rootScope', 'Correspondence'];

    function CorrespondencesTableDirectiveController($log, $scope, $state, $rootScope, Correspondence) {
        /* jshint validthis:true */
        var vm = this;
        vm.correspondences = [];
        vm.init = init;

        function init() {
            $log.log('CorrespondenceTableDirectiveController::init called');
        }
    }
})();
;/**
 * This is the Course Groups Table Directive Controller ,used by ContactsTableDirective
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('CourseGroupsTableDirective')
        .controller('CourseGroupsTableDirectiveController', CourseGroupsTableDirectiveController);

    CourseGroupsTableDirectiveController.$inject = ['$log', '$scope', '$rootScope', 'GLOBAL'];

    function CourseGroupsTableDirectiveController($log, $scope, $rootScope, GLOBAL) {
        var vm = this;
        var url = GLOBAL.REPORT_URL;

        vm.sortOrder = "+spec";
        // Down arrow: &#x25BC;
        // Up Arrow: &#x25B2;

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // TODO: check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // TODO: check if sortOrder is an array and if it contains fieldName
        }
    }
})();
;/**
 * This is the Course Search Controller it is used to control the Search Course list.
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('CourseSearchDirective')
        .controller('CourseSearchController', CourseSearchController);

    CourseSearchController.$inject = ['$log', '$scope', 'CourseSearch'];

    function CourseSearchController($log, $scope, CourseSearch) {
        /* jshint validthis:true */
        var vm = this;
        vm.searchText = "";

        vm.loading = false;
        vm.message = "";
        vm.results = [];
        vm.visible = false;
        vm.sortOrder = '+spec';

        vm.displayMessage = displayMessage;
        vm.search = search;
        vm.executeCallback = executeCallback;
        vm.hasResults = hasResults;
        vm.isLoading = isLoading;
        vm.resultsVisible = resultsVisible;
        vm.toggleResults = toggleResults;
        vm.hideResults = hideResults;
        vm.showResults = showResults;

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;



        function displayMessage(message) {
            $log.log('II CourseSearchController :: displayMessage called');
            vm.message = message;
        }

        function search() {
            $log.log('II CourseSearchController :: search called');
            vm.loading = true;
            vm.displayMessage("Loading please wait!");
            vm.results = [];
            CourseSearch.search({
                searchText: encodeURIComponent(vm.searchText)
            }).then(function(response) {
                vm.loading = false;
                vm.results = response.data;
                if (vm.hasResults()) {
                    vm.showResults();
                }
                vm.displayMessage("");
            }, function(response) {
                vm.loading = false;
                vm.visible = false;
                vm.displayMessage(response.data.message);
            });
        }

        function executeCallback(id) {
            // vm.hideResults();
            // vm.callback(id);
            if (vm.callback) {
                vm.hideResults();
                vm.callback(id);
            } else {
                $log.warning('WW CourseSearchController - No Callback function defined');
            }
        }

        function hasResults() {
            if (vm.results.length !== 0) {
                return true;
            }
            return false;
        }

        function isLoading() {
            return vm.loading;
        }

        function resultsVisible() {
            if (vm.hasResults()) {
                return vm.visible;
            }
            return false;
        }

        function toggleResults() {
            vm.visible = !vm.visible;
        }

        function hideResults() {
            vm.visible = false;
        }

        function showResults() {
            vm.visible = true;
        }



        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

    }
})();
;/**
 * This is the Course Groups Table Directive Controller ,used by ContactsTableDirective
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('CoursesTableDirective')
        .controller('CoursesTableDirectiveController', CoursesTableDirectiveController);

    CoursesTableDirectiveController.$inject = ['$log', '$scope', '$rootScope', 'GLOBAL'];

    function CoursesTableDirectiveController($log, $scope, $rootScope, GLOBAL) {
        /* jshint validthis:true */
        var vm = this;

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+spec';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

    }
})();
;/**
 * This is the Current Year Selector Controller,used by CurrentYearSelectorDirective
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('CurrentYearSelectorDirective')
        .controller('CurrentYearSelectorController', CurrentYearSelectorController);

    CurrentYearSelectorController.$inject = ['$scope', '$rootScope', 'AcademicYear', 'Logger', 'GLOBAL', 'APP'];

    function CurrentYearSelectorController($scope, $rootScope, AcademicYear, Logger, GLOBAL, APP) {
        /* jshint validthis:true */
        var vm = this;
        var DEBUG = GLOBAL.DEBUG;
        vm.currentYear = APP.getYear();

        init();

        function init() {
            $scope.$watch(function() {
                return vm.currentYear.id;
            }, function() {
                Logger.debug('II Year Changed');
                getAcademicYear();
            });
        }

        function getAcademicYear() {
            if (vm.currentYear.id !== undefined) {
                AcademicYear.get(vm.currentYear.id).then(function(response) {
                    Logger.debug('II Successfully retrieved AcademicYear');
                    Logger.debug(vm.currentYear);
                    APP.setYear(response.data);
                    vm.currentYear = APP.getYear();
                    $rootScope.$emit("current-year-changed");
                }, function(response) {
                    Logger.error('EE Cannot retrieve the defaults current year.');
                    vm.currentYear = undefined;
                });
            }
        }
    }
})();
;/**
 * This is the Departments Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('DepartmentsEditorDirective')
        .controller('DepartmentsEditorController', DepartmentsEditorController);

    DepartmentsEditorController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModal', 'Department'];

    function DepartmentsEditorController($log, $scope, $state, $rootScope, $uibModal, Department) {
        /* jshint validthis:true */
        var vm = this;
        vm.departments = [];
        vm.department = {};
        vm.searchText = '';
        vm.visible = false;

        vm.loadDepartments = loadDepartments;
        vm.editDepartments = editDepartments;
        vm.addDepartments = addDepartments;

        vm.applyFilter = applyFilter;
        vm.toggleVisibility = toggleVisibility;
        vm.resetFilters = resetFilters;

        function toggleVisibility() {
            vm.visible = !vm.visible;
        }

        // Apply filters
        $scope.filter = {
            _facultyDescription: '',
            description: ''
        };

        function applyFilter() {
            vm.filterParams = {
                _facultyDescription: $scope.filter._facultyDescription,
                description: $scope.filter.description
            };
        }

        function resetFilters() {

            vm.filterParams = {
                _facultyDescription: '',
                description: ''
            };

            $scope.filter = {
                _facultyDescription: '',
                description: ''
            };
        }

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+description';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }


        function loadDepartments() {
            Department.query().then(function(response) {
                vm.departments = response.data;
                $log.info("Loading Department ");
            }, function(response) {
                $log.error("Failed to load Department");
            });
        }


        function editDepartments(departmentId) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/departments-editor/views/departments-editorDialog.html',
                controller: 'DepartmentsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    departmentsEntity: function(Department) {
                        return Department.get(departmentId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadDepartments();
            });

        }


        function addDepartments() {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/departments-editor/views/departments-editorDialog.html',
                controller: 'DepartmentsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    departmentsEntity: function() {
                        var departments = {};
                        return departments;
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadDepartments();
            });

        }
    }

})();
;/**
 * This is the Department Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('DepartmentsEditorDirective')
        .controller('DepartmentsEditorDialogController', DepartmentsEditorDialogController);

    DepartmentsEditorDialogController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModalInstance', 'Department', 'departmentsEntity'];

    function DepartmentsEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, Department, departmentsEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.departments = departmentsEntity !== undefined ? departmentsEntity : {};

        vm.cancel = cancel;
        vm.save = save;

        var onSaveFinished = function(result) {
            $scope.$emit('departments-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        function save() {
            if (vm.departments.id) {
                Department.save(vm.departments, onSaveFinished);
            } else {
                if (vm.departments.id !== null) {
                    Department.create(vm.departments, onSaveFinished);
                }

            }
        }

    }


})();
;/**
 * This is the Enrolment Manager Dialog Directive Controller.
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('EnrolmentManagerDirective')
        .controller('EnrolmentManagerDialogDirectiveController', EnrolmentManagerDialogDirectiveController);

    EnrolmentManagerDialogDirectiveController.$inject = ['$log', '$scope', '$rootScope', '$http', '$uibModal', '$uibModalInstance', '$cidConfig', 'studentEntity', 'enrolmentsList', 'GLOBAL'];

    function EnrolmentManagerDialogDirectiveController($log, $scope, $rootScope, $http, $uibModal, $uibModalInstance, $cidConfig, studentEntity, enrolmentsList, GLOBAL) {
        /* jshint validthis:true */
        var vm = this;

        vm.loading = false;

        vm.message = '';

        vm.student = studentEntity ? studentEntity : {};
        vm.enrolments = enrolmentsList ? enrolmentsList : [];

        vm.page = 1;
        vm.size = 8;
        vm.totalItems = 0;

        vm.changeDate = new Date();

        vm.ttCheck = {
            specs: [],
            status: 'PENDING',
            options: []
        };

        vm.init = init;
        vm.cancel = cancel;
        vm.getTotalItems = getTotalItems;
        vm.check = check;
        vm.requestCount = requestCount;
        vm.addRequest = addRequest;
        vm.removeRequest = removeRequest;
        vm.selectOption = selectOption;
        vm.next = next;
        vm.previous = previous;
        vm.onSaveFinished = onSaveFinished;

        vm.init();

        function onSaveFinished(result) {
            $rootScope.$emit('enrolments-saved', result);
            $uibModalInstance.close(result);
        }


        function init() {
            $log.log('II EnrolmentEditorDialogDirectiveController::init called');
            $log.info(vm.student);
            if (vm.enrolments && vm.enrolments.length !== 0) {
                vm.ttCheck.specs = [];
                vm.enrolments.forEach(function(element, index, array) {
                    vm.ttCheck.specs.push(element._courseGroupReference);
                });
            }
        }

        function cancel() {
            $log.log('II EnrolmentEditorDialogDirectiveController::cancel called');
            $uibModalInstance.dismiss('cancel');
        }

        function getTotalItems() {
            if (this.ttCheck.options) {
                return this.ttCheck.options.size;
            } else {
                return 0;
            }
        }

        function check() {
            $log.log('II EnrolmentEditorDialogDirectiveController::check called');
            if (vm.requestCount() === 0) {
                bootbox.alert("There are no requests to check. Please ensure you have entered some course code before trying to check.");
            } else {
                vm.ttCheck.options = [];
                vm.totalItems = 0;
                vm.loading = true;

                $http.post(GLOBAL.API + '/enrolmentChecker', {
                    specs: vm.ttCheck.specs,
                    date: vm.changeDate
                }).then(function(response) {
                    vm.ttCheck.options = response.data;
                    vm.totalItems = response.data.length;
                    vm.loading = false;
                    $log.log(vm.ttCheck);
                }, function(response) {
                    vm.ttCheck.options = [];
                    vm.loading = false;
                    $log.log(vm.ttCheck);
                    switch (response.status) {
                        case 400:
                            vm.message = response.data;
                            bootbox.alert(vm.message.message);
                            break;
                        default:
                            bootbox.alert("Some unknown error occurred. <br />The following message was returned: <br /> " + response.data.message);
                    }
                });
            }
        }


        function requestCount() {
            return vm.ttCheck.specs.length;
        }


        function addRequest(request) {
            $log.log('II EnrolmentEditorDialogDirectiveController::addRequest called');
            if (request !== undefined && request.length !== 0) {
                $http.post(GLOBAL.API + '/enrolmentChecker/validRequest', {
                    request: request.toUpperCase()
                }).then(function(response) {
                    switch (response.status) {
                        case 200: // Request Valid
                            vm.ttCheck.specs.push(request.toUpperCase());
                            vm.newRequest = '';
                            break;
                        case 204: // Request Invalid
                            bootbox.alert("The course request code you entered is not found on the timetable. Please check the code and try again.");
                            break;
                        default:
                            break;
                    }
                }, function(response) {

                });
            }
        }

        function removeRequest(request) {
            vm.ttCheck.specs.splice(vm.ttCheck.specs.indexOf(request), 1);
        }

        function selectOption(option) {
            bootbox.confirm("Are you sure that you want to make this selection? This will replace all the students current enrolments. ", function(result) {
                if (result) {
                    $http.post(GLOBAL.API + '/enrolments/change/programme', {
                        studentId: vm.student.id,
                        academicYearId: $rootScope.currentYear ? $rootScope.currentYear.id : null,
                        courseGroups: option.courseGroups,
                        changeDate: vm.changeDate
                    }).then(function(response) {
                        $log.info(response);
                        if (response.status == 200) {
                            $rootScope.$emit('enrolments-saved', response.data);
                            $uibModalInstance.close(response);
                        }
                    }, function(response) {
                        $log.info(response);
                        vm.message = response.data.message;
                    });
                }
            });
        }


        function next() {
            vm.page++;
        }

        function previous() {
            vm.page--;
        }

    }

})();
;/**
 * This is the Enrolment Manager Directive Controller.
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('EnrolmentManagerDirective')
        .controller('EnrolmentManagerDirectiveController', EnrolmentManagerDirectiveController);

    EnrolmentManagerDirectiveController.$inject = ['$log', '$scope', '$rootScope', '$http', '$uibModal'];

    function EnrolmentManagerDirectiveController($log, $scope, $rootScope, $http, $uibModal) {
        /* jshint validthis:true */
        var vm = this;

        vm.student = vm.student ? vm.student : {};
        vm.enrolments = vm.enrolments ? vm.enrolments : [];
        vm.init = init;
        vm.editEnrolments = editEnrolments;

        vm.init();

        function init() {
            $log.log('II EnrolmentEditorDirectiveController::init called');
        }

        function editEnrolments() {
            $log.log('II EnrolmentEditorDirectiveController::editEnrolments called');
            vm.modalInstance = $uibModal.open({
                templateUrl: 'js/directives/enrolment-manager/views/enrolment-manager-dialog.html',
                controller: 'EnrolmentManagerDialogDirectiveController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    enrolmentsList: [function() {
                        return vm.enrolments.filter(function(obj) {
                            return obj.endDate === null;
                        });
                    }],
                    studentEntity: [function() {
                        return vm.student;
                    }]
                }
            });
        }
    }
})();
;/**
 * This is the Enrolments Editor Directive Controller.
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('EnrolmentsEditorDirective')
        .controller('EnrolmentsEditorDirectiveController', EnrolmentsEditorDirectiveController);

    EnrolmentsEditorDirectiveController.$inject = ['$scope', '$rootScope', '$uibModal', 'Student', 'Enrolment', 'Logger', 'GLOBAL'];

    function EnrolmentsEditorDirectiveController($scope, $rootScope, $uibModal, Student, Enrolment, Logger, GLOBAL) {
        /* jshint validthis:true */
        var vm = this;
        var DEBUG = GLOBAL.DEBUG;

        vm.dialog = {};

        vm.enrolments = vm.enrolments ? vm.enrolments : [];
        vm.studentId = vm.studentId ? vm.studentId : undefined;

        // Public Interface
        vm.init = init;
        vm.loadEnrolments = loadEnrolments;
        vm.editEnrolment = editEnrolment;
        vm.withdraw = withdraw;

        // Private Interface

        function init() {
            Logger.debug('EnrolmentsEditorController::init called');
            if (vm.studentId !== undefined) {
                vm.loadEnrolments(vm.studentId);
            }
        }

        function loadEnrolments(studentId) {
            Logger.debug('II Loading Enrolments Data');
            Student.enrolments(studentId).then(function(response) {
                Logger.debug('II Contacts Loaded');
                vm.enrolments = response.data;
            }, function(response) {
                Logger.error('EE Enrolments could not be loaded');
            });
        }

        /**
         * This method is used to reload the enrolments for the currently loaded student.
         *
         * @return {void}
         */
        function reloadEnrolments() {
            Logger.debug('II Reloading the enrolment information');
            vm.loadEnrolments(vm.studentId);
        }

        /**
         * This method is used by the modal dialog box to handle the cancelling of the dialog.
         *
         * @return {void}
         */
        function handleCancel() {
            // Do nothinng
            Logger.debug('II Dialog box cancelled.');
        }

        /**
         * This method is used to load a dialog box that will allow the end-user to ediit the enrolment information.
         *
         * @param  {Integer} id the enrolmentId for the enrolment to be edited.
         * @return {void}
         */
        function editEnrolment(id) {
            Logger.debug('EnrolmentsEditorController::editEnrolment called');
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/enrolments-editor/views/enrolmentEditorDialog.html',
                controller: 'EnrolmentsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    enrolmentEntity: function() {
                        return Enrolment.get(id).then(function(response) {
                            return response.data;
                        }, function(response) {
                            bootbox.alert("Failed to retrieve enrolment.");
                        });
                    }
                }
            });
            // Reload enrolments after dialog closed
            modalInstance.result.then(reloadEnrolments, handleCancel);
        }

        function withdraw(enrolment) {
            Logger.debug('II EnrolmentsEditorDirective :: Withdraw Started');
            Logger.debug(enrolment);
            var modalOptions = {
                templateUrl: 'js/directives/enrolments-editor/views/withdraw.html',
                controller: 'EnrolmentsEditorWithdrawDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    enrolmentEntity: function() {
                        return {
                            data: enrolment
                        };
                    }
                },
                scope: $scope,
            };
            var modalInstance = $uibModal.open(modalOptions);
            // Reload enrolments after dialog closed
            modalInstance.result.then(reloadEnrolments(), handleCancel());
        }
    }

})();
;/**
 * This is the Enrolments Editor Directive Controller.
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';
    angular
        .module('EnrolmentsEditorDirective')
        .controller('EnrolmentsEditorCourseChangeDialogController', enrolmentsEditorCourseChangeDialogController);

    enrolmentsEditorCourseChangeDialogController.$inject = ['$log', '$rootScope', '$uibModalInstance', 'enrolmentEntity', 'courseGroups'];

    function enrolmentsEditorCourseChangeDialogController($log, $rootScope, $uibModalInstance, enrolmentEntity, courseGroups) {
        /* jshint validthis:true */
        var vm = this;
        vm.courseGroupOptions = courseGroups.data;
        vm.enrolment = enrolmentEntity.data;
        vm.dateOfChange = new Date();
        vm.dialogTitle = "Change Group";
        vm.onSaveFinished = onSaveFinished;
        vm.selectCourseGroup = selectCourseGroup;
        vm.selectCourse = selectCourse;

        function onSaveFinished(result) {
            $rootScope.$emit('enrolment-course-change-selected', result);
            $log.log(result);
            $uibModalInstance.close(result);
        }

        function selectCourse(id) {
            $log.info(id);
        }

        function selectCourseGroup(courseGroup) {
            onSaveFinished(courseGroup);
        }

        function cancel() {
            $log.log('II EnrolmentsEditorCourseChangeDialogController :: cancel called');
            $rootScope.$emit('enrolment-course-change-cancelled');
            $uibModalInstance.dismiss('cancel');
        }
    }

})();
;/**
 * This is the Enrolments Editor Dialog Controller.
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';
    angular
        .module('EnrolmentsEditorDirective')
        .controller('EnrolmentsEditorDialogController', EnrolmentsEditorDialogController);

    EnrolmentsEditorDialogController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModalInstance', 'enrolmentEntity', 'Enrolment'];

    function EnrolmentsEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, enrolmentEntity, Enrolment) {
        /* jshint validthis:true */
        var vm = this;

        // Public Interface
        vm.enrolment = enrolmentEntity !== undefined ? enrolmentEntity : {};
        vm.save = save;
        vm.cancel = cancel;

        // Private Interface

        var onSaveFinished = function(result) {
            $scope.$emit('enrolments-updated', result);
            $uibModalInstance.close(result);
        };

        function save() {
            $log.log('EnrolmentDialogController::save called');
            if (vm.enrolment.enrolmentId) {
                //update the enrolment information
                Enrolment.save(vm.enrolment, onSaveFinished);
            }
        }

        function cancel() {
            $log.log('EnrolmentDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
;/**
 * This is the Enrolments Editor Group Change Dialog Controller used by EnrolmentsEditorDirective
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('EnrolmentsEditorDirective')
        .controller('EnrolmentsEditorGroupChangeDialogController', enrolmentsEditorGroupChangeDialogController);

    enrolmentsEditorGroupChangeDialogController.$inject = ['$log', '$rootScope', '$uibModalInstance', 'enrolmentEntity', 'courseGroups'];

    function enrolmentsEditorGroupChangeDialogController($log, $rootScope, $uibModalInstance, enrolmentEntity, courseGroups) {
        /* jshint validthis:true */
        var vm = this;
        vm.courseGroupOptions = courseGroups.data;
        vm.enrolment = enrolmentEntity.data;
        vm.dateOfChange = new Date();
        vm.dialogTitle = "Change Group";
        vm.selectCourseGroup = selectCourseGroup;
        vm.cancel = cancel;

        var onSaveFinished = function(result) {
            $rootScope.$emit('enrolment-group-change-selected', result);
            $log.log(result);
            $uibModalInstance.close(result);
        };

        function selectCourseGroup(courseGroup) {
            onSaveFinished(courseGroup);
        }

        function cancel() {
            $log.log('II EnrolmentsEditorGroupChangeDialogController :: cancel called');
            $rootScope.$emit('enrolment-group-change-cancelled');
            $uibModalInstance.dismiss('cancel');
        }
    }

})();
;/**
 * This is the Enrolments Editor Withdraw Dialog Controller used by EnrolmentsEditorDirective used by EnrolmentsEditorDirective
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('EnrolmentsEditorDirective')
        .controller('EnrolmentsEditorWithdrawDialogController', enrolmentsEditorWithdrawDialogController);

    enrolmentsEditorWithdrawDialogController.$inject = ['$log', '$rootScope', '$uibModalInstance', 'enrolmentEntity', 'Enrolment'];

    function enrolmentsEditorWithdrawDialogController($log, $rootScope, $uibModalInstance, enrolmentEntity, Enrolment) {
        /* jshint validthis:true */
        var vm = this;
        vm.DEBUG = false;
        vm.withdrawDefaults = {
            completionStatusId: 3,
            outcomeId: 3
        };

        vm.enrolment = enrolmentEntity.data;
        vm.withdrawalDate = new Date();
        vm.withdrawalReason = {};
        vm.dialogTitle = "Withdraw from Course";
        vm.onSaveFinished = onSaveFinished;
        vm.save = save;
        vm.cancel = cancel;


        function onSaveFinished(result) {
            $log.log('II EnrolmentsEditorWithdrawDialogController :: save complete');
            $rootScope.$emit('enrolment-withdrawal-complete', result);
            $rootScope.$emit('enrolments-updated');
            $uibModalInstance.close(result);
        }

        function save() {
            $log.log('II EnrolmentsEditorWithdrawDialogController :: save called');
            if (!vm.withdrawalReason) {
                bootbox.alert("You must enter a withdrawal reason.");
            } else {
                bootbox.confirm('Are you sure?', function(result) {
                    if (result) {
                        vm.enrolment.endDate = vm.withdrawalDate;
                        vm.enrolment.withdrawalReasonId = vm.withdrawalReasonId;
                        vm.enrolment.completionStatusId = vm.withdrawDefaults.completionStatusId;
                        vm.enrolment.outcomeId = vm.withdrawDefaults.outcomeId;
                        Enrolment.save(vm.enrolment, onSaveFinished);
                    } else {
                        $log.log('II EnrolmentsEditorWithdrawDialogController :: save cancelled');
                    }
                });
            }
        }

        function cancel() {
            $log.log('II EnrolmentsEditorGroupChangeDialogController :: cancel called');
            $rootScope.$emit('enrolment-withdrawal-cancelled');
            $uibModalInstance.dismiss('cancel');
        }

    }

})();
;/**
 * This is the EntryQualificationTypes Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('EntryQualificationTypesEditorDirective')
        .controller('EntryQualificationTypesEditorController', EntryQualificationTypesEditorController);

    EntryQualificationTypesEditorController.$inject = ['$log', '$uibModal', '$scope', 'EntryQualificationType'];

    function EntryQualificationTypesEditorController($log, $uibModal, $scope, EntryQualificationType) {
        /* jshint validthis:true */
        var vm = this;
        vm.entryQualificationTypes = [];

        vm.loadEntryQualificationTypes = loadEntryQualificationTypes;
        vm.editEntryQualificationTypes = editEntryQualificationTypes;
        vm.addEntryQualificationTypes = addEntryQualificationTypes;

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+code';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function loadEntryQualificationTypes() {
            EntryQualificationType.query().then(function(response) {
                vm.entryQualificationTypes = response.data;
                $log.info("Loading Faculty ");
            }, function(response) {
                $log.error("Failed to load Faculties");
            });
        }


        function editEntryQualificationTypes(entryQualificationTypeId) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/entry-qualification-types-editor/views/entry-qualification-types-editorDialog.html',
                controller: 'EntryQualificationTypesEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    entryQualificationTypesEntity: function(EntryQualificationType) {
                        return EntryQualificationType.get(entryQualificationTypeId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadEntryQualificationTypes();
            });

        }


        function addEntryQualificationTypes() {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/entry-qualification-types-editor/views/entry-qualification-types-editorDialog.html',
                controller: 'EntryQualificationTypesEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    entryQualificationTypesEntity: function() {
                        var entryQualificationTypes = {};
                        return entryQualificationTypes;
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadEntryQualificationTypes();
            });

        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

    }

})();
;/**
 * This is the Year Group Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('EntryQualificationTypesEditorDirective')
        .controller('EntryQualificationTypesEditorDialogController', EntryQualificationTypesEditorDialogController);

    EntryQualificationTypesEditorDialogController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModalInstance', 'EntryQualificationType', 'entryQualificationTypesEntity'];

    function EntryQualificationTypesEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, EntryQualificationType, entryQualificationTypesEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.entryQualificationTypes = entryQualificationTypesEntity !== undefined ? entryQualificationTypesEntity : {};

        vm.cancel = cancel;
        vm.save = save;

        var onSaveFinished = function(result) {
            $scope.$emit('entryQualificationTypes-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        function save() {
            if (vm.entryQualificationTypes.id) {
                EntryQualificationType.save(vm.entryQualificationTypes, onSaveFinished);
            } else {
                if (vm.entryQualificationTypes.id !== null) {
                    EntryQualificationType.create(vm.entryQualificationTypes, onSaveFinished);
                }
            }
        }

    }

})();
;/**
 * This is the EntryQualifications Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('EntryQualificationsEditorDirective')
        .controller('EntryQualificationsEditorController', EntryQualificationsEditorController);

    EntryQualificationsEditorController.$inject = ['$log', '$uibModal', '$scope', 'EntryQualification'];

    function EntryQualificationsEditorController($log, $uibModal, $scope, EntryQualification) {
        /* jshint validthis:true */
        var vm = this;
        vm.entryQualifications = [];
        vm.searchText = '';
        vm.visible = false;

        vm.loadEntryQualifications = loadEntryQualifications;
        vm.editEntryQualifications = editEntryQualifications;
        vm.addEntryQualifications = addEntryQualifications;

        vm.applyFilter = applyFilter;
        vm.toggleVisibility = toggleVisibility;
        vm.resetFilters = resetFilters;

        function toggleVisibility() {
            vm.visible = !vm.visible;
        }

        // Apply filters
        $scope.filter = {
            _entryQualificationTypeDescription: '',
            title: ''
        };

        function applyFilter() {
            vm.filterParams = {
                _entryQualificationTypeDescription: $scope.filter._entryQualificationTypeDescription,
                title: $scope.filter.title
            };
        }

        function resetFilters() {

            vm.filterParams = {
                _entryQualificationTypeDescription: '',
                title: ''
            };

            $scope.filter = {
                _entryQualificationTypeDescription: '',
                title: ''
            };
        }

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+code';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function loadEntryQualifications() {
            EntryQualification.query().then(function(response) {
                vm.entryQualifications = response.data;
                $log.info("Loading Faculty ");
            }, function(response) {
                $log.error("Failed to load Faculties");
            });
        }


        function editEntryQualifications(entryQualificationId) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/entry-qualifications-editor/views/entry-qualifications-editorDialog.html',
                controller: 'EntryQualificationsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    entryQualificationsEntity: function(EntryQualification) {
                        return EntryQualification.get(entryQualificationId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadEntryQualifications();
            });

        }


        function addEntryQualifications() {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/entry-qualifications-editor/views/entry-qualifications-editorDialog.html',
                controller: 'EntryQualificationsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    entryQualificationsEntity: function() {
                        var entryQualifications = {};
                        return entryQualifications;
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadEntryQualifications();
            });

        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

    }

})();
;/**
 * This is the Year Group Editor Dialog Controller
 * 
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 * 
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('EntryQualificationsEditorDirective')
        .controller('EntryQualificationsEditorDialogController', EntryQualificationsEditorDialogController);

    EntryQualificationsEditorDialogController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModalInstance', 'EntryQualification', 'entryQualificationsEntity'];

    function EntryQualificationsEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, EntryQualification, entryQualificationsEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.entryQualifications = entryQualificationsEntity !== undefined ? entryQualificationsEntity : {};

        vm.cancel = cancel;
        vm.save = save;

        var onSaveFinished = function(result) {
            $scope.$emit('entryQualifications-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        function save() {
            if (vm.entryQualifications.id) {
                EntryQualification.save(vm.entryQualifications, onSaveFinished);
            } else {
                if (vm.entryQualifications.id !== null) {
                    EntryQualification.create(vm.entryQualifications,
                        onSaveFinished);
                }
            }
        }

    }

})();
;/**
 * This is the Exam Results Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('ExamResultsEditorDirective')
        .controller('ExamResultsEditorController', ExamResultsEditorController);

    ExamResultsEditorController.$inject = ['$log', '$uibModal', 'ExamResults'];

    function ExamResultsEditorController($log, $uibModal, ExamResults) {
        /* jshint validthis:true */
        var vm = this;
        vm.results = [];
        vm.studentId = vm.studentId ? vm.studentId : null;


        vm.loadExamResults = loadExamResults;
        vm.editExamResults = editExamResults;

        function loadExamResults(studentId) {
            ExamResults.getByStudent(studentId).then(function(response) {
                vm.results = response.data;
                $log.info("Loading Exam Results");
            }, function(response) {
                $log.error("Failed to load Results");
            });
        }


        function editExamResults(examResultId) {
            $log.log("ExamResultsEditorController :: editExamResult called");
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/exam-results-editor/views/exam-results-editorDialog.html',
                controller: 'ExamResultsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    examResultsEntity: function(ExamResults) {
                        return ExamResults.get(examResultId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadExamResults(vm.studentId);
            });

        }
    }

})();
;/**
 * This is the Exam Results Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('ExamResultsEditorDirective')
        .controller('ExamResultsEditorDialogController', ExamResultsEditorDialogController);

    ExamResultsEditorDialogController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModalInstance', 'ExamResults', 'examResultsEntity'];

    function ExamResultsEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, ExamResults, examResultsEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.examResults = examResultsEntity !== undefined ? examResultsEntity : {};

        vm.cancel = cancel;
        vm.save = save;


        var onSaveFinished = function(result) {
            $scope.$emit('exam-results-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $log.log('ExamResultsEditorDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        }

        function save() {
            if (vm.examResults.id) {
                ExamResults.save(vm.examResults, onSaveFinished);
            }
        }

    }


})();
;/**
 * 
 */
(function() {
    angular
        .module('BaseDataEditButtonsDirective')
        .controller('BaseDataEditButtonsDirectiveController', baseDataEditButtonsDirectiveController);

    baseDataEditButtonsDirectiveController.$inject = ['$scope', '$uibModal'];

    function baseDataEditButtonsDirectiveController($scope, $uibModal) {
        var vm = this;

        vm.addCallback = addCallback;
        vm.editCallback = editCallback;
        vm.viewStudentsCallback = viewStudentsCallback;
        vm.init = init;

        function addCallback() {
            $scope.addCallback({
                syllabusData: vm.syllabusData,
                optionData: vm.optionData,
                componentData: vm.componentData
            });
        }

        function componentCallback(data) {
            return data.component;
        }

        function editCallback() {
            $scope.editCallback({
                syllabusData: vm.syllabusData,
                optionData: vm.optionData,
                componentData: vm.componentData
            });
        }

        function init() {
            vm.syllabusData = locateData(syllabusCallback);
            vm.optionData = locateData(optionCallback);
            vm.componentData = locateData(componentCallback);
            if (vm.syllabusData) {
                if (vm.optionData) {
                    if (vm.componentData) {
                        // component level
                        vm.visible = false;
                        vm.editTooltip = "Edit component";
                    } else {
                        // option level
                        vm.visible = true;
                        vm.addTooltip = "Add new component";
                        vm.editTooltip = "Edit option";
                    }
                } else {
                    // syllabus level
                    vm.visible = true;
                    vm.addTooltip = "Add new option";
                    vm.editTooltip = "Edit syllabus";
                }
            } else {
                // error - something should be defined here, but nothing is.
            }
        }

        function locateData(callback) {
            $scope.curParent = $scope.$parent;
            while ($scope.curParent.$parent !== null) {
                if (callback($scope.curParent) !== undefined) {
                    return callback($scope.curParent);
                } else {
                    $scope.curParent = $scope.curParent.$parent;
                }
            }
        }

        function optionCallback(data) {
            return data.option;
        }

        function syllabusCallback(data) {
            return data.syllabus;
        }

        function viewStudentsCallback() {
            $scope.viewStudentsCallback({
                syllabusData: vm.syllabusData,
                optionData: vm.optionData,
                componentData: vm.componentData
            });
        }
    }
})();
;angular.module('CheckBoxDirective').controller(
    'CheckBoxDirectiveController',
    function($rootScope, $scope, $http, $uibModal) {
        var vm = this;
        $scope.checkBox = false;
        console.log('CheckBoxDirectiveController loaded');

        $scope.callChangeSelected = function() {
            $scope.changeSelected({
                checkBoxListIndex: $scope.checkBoxId,
                selected: $scope.checkBox
            });
        };

        $scope.locateData = function(callback) {
            $scope.curParent = $scope.$parent;
            while ($scope.curParent.$parent !== null) {
                if (callback($scope.curParent) !== undefined) {
                    return callback($scope.curParent);
                } else {
                    $scope.curParent = $scope.curParent.$parent;
                }
            }
        };

        $scope.init = function() {
            // $scope.examBoard = $scope.locateData(function(data) { return
            // data.examBoard });
            $scope.checkBoxId = $scope.locateData(function(data) {
                return data.$index;
            });
        };

        $scope.init();
    });
;/**
 * The ExamComponentViewer module for viewing Component basedata
 */
angular
    .module('ComponentTableDirective')
    .controller('ComponentTableDirectiveController', function($scope, $http, Component) {
        console.log('ExamComponentViewer Controller loaded');

    });
;/**
 * 
 */
angular.module('CourseEnrolmentTableDirective').controller('CourseEnrolmentTableDirectiveController', ["$scope", "$http", "$uibModal", "Student",
    function($scope, $http, $uibModal, Student) {
        var vm = this;


        // //////////////////////////////////////////////////////////////

        console.log('CourseEnrolmentTableDirectiveController loaded');
        init();

        /**
         * This function is called when the directive is loaded
         */
        function init() {
            if ($scope.group.studentList[0].person === undefined) {
                for (var i = 0; i < $scope.group.studentList.length; i++) {
                    populateStudent(i);
                }
            }
        }

        /**
         * This function loads the details for the student, given the student number, and populates the
         * array element specified.
         */
        function populateStudent(i) {
            Student.get($scope.group.studentList[i].id).then(function(response) {
                $scope.group.studentList[i] = response.data;
            });
        }
    }
]);
;(function() {
    angular
        .module('CourseExamDirective')
        .controller('CourseExamDirectiveController', ["$rootScope", "$scope", "$http", "$uibModal", "CourseSyllabus", "CourseOption", "CourseComponent",
            function($rootScope, $scope, $http, $uibModal, CourseSyllabus, CourseOption, CourseComponent) {
                var vm = this;
                $scope.courseExamCheckBox = false;
                $scope.dataLevel = 0;
                console.log('CourseExamDirectiveController loaded');

                /**
                 * Save courseComponent data to the database
                 */
                $rootScope.courseExamRecordToSave.courseComponent.push(function(data) {
                    if ($scope.dataLevel == 1 && $scope.courseExamCheckBox) {
                        // save CourseComponent record
                        courseComponent = {
                            component: {},
                            courseOption: {}
                        };
                        courseComponent.examComponentId = $scope.component.id;
                        courseComponent.courseOption.courseId = $scope.course.id;
                        courseComponent.courseOption.examOptionId = $scope.option.examOptionId;
                        CourseComponent.create(courseComponent);
                    }
                });

                /**
                 * Save courseOption data to the database
                 */
                $rootScope.courseExamRecordToSave.courseOption.push(function(data) {
                    if ($scope.dataLevel == 2 && $scope.courseExamCheckBox) {
                        // save CourseOption record
                        courseOption = {};
                        courseOption.courseId = $scope.course.id;
                        courseOption.examOptionId = $scope.option.examOptionId;
                        CourseOption.create(courseOption).finally(function() {
                            $rootScope.courseExamRecordSavedCounter++;
                        });
                    } else {
                        $rootScope.courseExamRecordSavedCounter++;
                    }
                });

                /**
                 * Save courseSyllabus data to the database
                 */
                $rootScope.courseExamRecordToSave.courseSyllabus.push(function(data) {
                    if ($scope.dataLevel == 3 && $scope.courseExamCheckBox) {
                        // save CourseSyllabus record
                        courseSyllabus = {};
                        courseSyllabus.courseId = $scope.course.id;
                        courseSyllabus.syllabusId = $scope.syllabus.id;
                        CourseSyllabus.create(courseSyllabus);
                    }
                });

                /**
                 * Remove courseComponent link record from the database
                 */
                $rootScope.courseExamRecordToDelete.courseComponent.push(function(data) {
                    if ($scope.dataLevel == 1 && !$scope.courseExamCheckBox) {
                        // delete CourseComponent record
                        CourseComponent.delete($scope.course.id, $scope.option.examOptionId, $scope.component.id).finally(function() {
                            $rootScope.courseExamRecordDeletedCounter++;
                        });
                    } else {
                        $rootScope.courseExamRecordDeletedCounter++;
                    }
                });

                /**
                 * Remove courseOption link record from the database
                 */
                $rootScope.courseExamRecordToDelete.courseOption.push(function(data) {
                    if ($scope.dataLevel == 2 && !$scope.courseExamCheckBox) {
                        // delete CourseOption record
                        CourseOption.delete($scope.course.id, $scope.option.examOptionId);
                    }
                });

                /**
                 * Remove courseSyllabus link record from the database
                 */
                $rootScope.courseExamRecordToDelete.courseSyllabus.push(function(data) {
                    if ($scope.dataLevel == 3 && !$scope.courseExamCheckBox) {
                        // delete CourseSyllabus record
                        CourseSyllabus.delete($scope.course.id, $scope.syllabus.id);
                    }
                });

                /**
                 * listener function to determine whether to check/uncheck checkbox
                 */
                var courseExamCheckboxChangedTearDown = $rootScope.$on('course-exam-checkbox-changed', function(data, level, checkBoxVal, syllabusId, examOptionId) {
                    // 3 - Syllabus    ->    Option    ->    Component - 1
                    // Higher level unchecked, then uncheck lower level check boxes
                    if (level > $scope.dataLevel && !checkBoxVal) {
                        if ((examOptionId && $scope.option !== undefined && $scope.option.examOptionId == examOptionId) ||
                            ($scope.dataLevel == 3 && syllabusId == $scope.syllabus.id)) {
                            $scope.courseExamCheckBox = false;
                        }
                    }

                    // Lower checked, then check higher level check boxes
                    if (level < $scope.dataLevel && checkBoxVal) {
                        if ((examOptionId && $scope.option !== undefined && $scope.option.examOptionId == examOptionId) ||
                            ($scope.dataLevel == 3 && syllabusId == $scope.syllabus.id)) {
                            $scope.courseExamCheckBox = true;
                        }
                    }
                });

                /**
                 * listener function to remove all listener functions from the root scope listener
                 */
                var courseExamTearDownTearDown = $rootScope.$on('course-exam-tear-down', function() {
                    courseExamCheckboxChangedTearDown(); // Remove listener functions when saving or cancelling from window.
                    courseExamTearDownTearDown();
                });

                /**
                 * checkBoxChanged - The a function to broadcast a checkBoxChanged message to all directives
                 */
                $scope.checkBoxChanged = function() {
                    if ($scope.option === undefined) {
                        $rootScope.$emit('course-exam-checkbox-changed', $scope.dataLevel, $scope.courseExamCheckBox, $scope.syllabus.id, 0);
                    } else {
                        $rootScope.$emit('course-exam-checkbox-changed', $scope.dataLevel, $scope.courseExamCheckBox, $scope.syllabus.id, $scope.option.examOptionId);
                    }
                };

                /**
                 * Scan through scope parents to locate the related data for this checkbox
                 */
                $scope.locateData = function(callback) {
                    $scope.curParent = $scope.$parent;
                    while ($scope.curParent.$parent !== null) {
                        if (callback($scope.curParent) !== undefined) {
                            return callback($scope.curParent);
                        } else {
                            $scope.curParent = $scope.curParent.$parent;
                        }
                    }
                };

                /**
                 * Initialise the data for this checkbox
                 */
                $scope.init = function() {
                    // Locate course data (if it exists)
                    $scope.course = $scope.locateData(function(data) {
                        return data.currentCourse;
                    });

                    // Locate syllabus data (if it exists)
                    $scope.syllabus = $scope.locateData(function(data) {
                        return data.syllabus;
                    });

                    // Locate option data (if it exists)
                    $scope.option = $scope.locateData(function(data) {
                        return data.option;
                    });

                    // Locate component data (if it exists)
                    $scope.component = $scope.locateData(function(data) {
                        return data.component;
                    });

                    if ($scope.course && $scope.course.id && $scope.option && $scope.option.examOptionId) {
                        if ($scope.component && $scope.component.id) {
                            // This is Exam Component check box (lowest)
                            $scope.dataLevel = 1;
                            CourseComponent.get($scope.course.id, $scope.option.examOptionId, $scope.component.id).then(function(response) {
                                $scope.courseExamCheckBox = (response.status == 200 &&
                                    response.data.courseOption.courseId == $scope.course.id &&
                                    response.data.courseOption.examOptionId == $scope.option.examOptionId &&
                                    response.data.examComponentId == $scope.component.id);
                            });
                        } else {
                            // This is Exam Option check box
                            $scope.dataLevel = 2;
                            CourseOption.get($scope.course.id, $scope.option.examOptionId).then(function(response) {
                                $scope.courseExamCheckBox = (response.status == 200 &&
                                    response.data.courseId == $scope.course.id &&
                                    response.data.examOptionId == $scope.option.examOptionId);
                            });
                        }
                    } else {
                        if ($scope.course && $scope.course.id && $scope.syllabus && $scope.syllabus.id) {
                            // This is Exam Syllabus level (highest)
                            $scope.dataLevel = 3;
                            CourseSyllabus.get($scope.course.id, $scope.syllabus.id).then(function(response) {
                                $scope.courseExamCheckBox = (response.status == 200 &&
                                    response.data.courseId == $scope.course.id &&
                                    response.data.syllabusId == $scope.syllabus.id);
                            });
                        }
                    }

                };

                $scope.init();
            }
        ]);
}());
;(function() {
    angular
        .module('ExamCourseTableDirective')
        .controller('ExamCourseTableDirectiveController', examCourseTableDirectiveController);

    examCourseTableDirectiveController.$inject = ["$uibModal", "$uibModalInstance", "$state", "$scope", "entity", "Course", "StudentOptionEntry"];

    function examCourseTableDirectiveController($uibModal, $uibModalInstance, $state, $scope, entity, Course, StudentOptionEntry) {
        var vm = this;

        $scope.cancel = cancel;
        $scope.groups = {
            groupList: [],
        };
        $scope.save = save;

        ////////////////////////////

        console.log('SeatingPlanCustomExamStudentsComponentController Loaded');
        init();

        function cancel() {
            $uibModalinstance.dismiss();
        }

        /**
         * This function initialises the settings for the window
         * 
         * course group and students list require a numbered array, called $scope.groups.groupList
         * For fast processing, and quick tracking of previously encountered course groups, we will use an
         * associative array, groupIndex, which links course group reference to the appropriate 
         * $scope.groups.groupList element number
         */
        function init() {
            Course.enrolments(entity.customExam.courseId).then(function(response) {
                groupIndex = [];

                for (var index in response.data) {
                    student = response.data[index];
                    if (student._completionStatus.id === 1) { // Only want to include current students.
                        // Check if course group array element has been created
                        if (groupIndex[student._courseGroupReference] === undefined) {
                            // Course group array element hasn't been created yet, so create it 
                            groupIndex[student._courseGroupReference] = $scope.groups.groupList.length;
                            // Populate details for course group array element
                            $scope.groups.groupList[groupIndex[student._courseGroupReference]] = {
                                courseGroupId: student.courseGroupId,
                                _courseGroupReference: student._courseGroupReference,
                                _levelDescription: student._levelDescription,
                                _subjectDescription: student._subjectDescription,
                                studentList: [{ // Create student array for course group, and add student.
                                    id: student.studentId,
                                }],
                            };
                        } else { // Course group array element already exists, so use it, and add student to student array 
                            $scope.groups.groupList[groupIndex[student._courseGroupReference]].studentList.push({
                                id: student.studentId,
                            });
                        }
                    }
                }
            }, function(response) {
                console.log("Error occurred loading course enrolments");
            });
        }

        /**
         * This function creates student option entry records for all the selected students
         */
        function save() {
            for (var groupIndex in $scope.groups.groupList) {
                for (var studentIndex in $scope.groups.groupList[groupIndex].studentList) {
                    // Student has been selected if any of Select All, Course group, or student itself has been selected. 
                    if ($scope.groups.groupList[groupIndex]._selected || $scope.groups.groupList[groupIndex].studentList[studentIndex]._selected) {
                        StudentOptionEntry.create({
                            studentId: $scope.groups.groupList[groupIndex].studentList[studentIndex].id,
                            examOptionId: entity.customExam.examOptionId,
                            statusId: 1,
                            ediStatusId: 8,
                            resit: 0,
                            private: 0
                        }).then(function(response) {}, function(response) {});
                    }
                }
            }

            $uibModalInstance.close();
        }
    }

})();
;/**
 * 
 */
(function() {

    angular
        .module('ExamSeriesTableDirective')
        .controller('ExamSeriesTableDirectiveController', examSeriesTableController);

    examSeriesTableController.$inject = ['$log', '$scope', '$state', '$rootScope', 'ExamSeries', 'APP'];

    function examSeriesTableController($log, $scope, $state, $rootScope, ExamSeries, APP) {
        var vm = this;

        vm.examBoardList = $scope.examSeriesList;
        vm.filterParams = {
            academicYearId: APP.getYear().id
        };
        vm.callGetIndex = callGetIndex;
        vm.searchTerm = '';

        $rootScope.$on("current-year-changed", function() {
            vm.filterParams.academicYearId = APP.getYear().id;
        });

        function callGetIndex(examSeries) {
            $scope.getIndex({
                examSeriesId: examSeries.id
            });
        }
    }
})();
;angular.module('ExamBoardTableDirective')
    .controller('ExamBoardTableDirectiveController', function($log, $scope, $state, ExamBoard) {
        console.log('ExamBoardTableDirectiveController loaded');

        $scope.searchTerm = '';
        //	$scope.examBoardList = [];

        /*	$scope.paginationInfo = {
        			pageNumber : 1,
        			pageSize : 10,
        			sort : 'name',
        			order : 'ASC',
        			maxSize : 5
        	};
        */

        /*	$scope.setSort = function(column) {
        		if ($scope.paginationInfo.sort != column) {
        			$scope.paginationInfo.sort = column;
        			$scope.paginationInfo.order = 'ASC';
        			$scope.orderReverse = false;
        		} else {
        			$scope.orderReverse = !$scope.orderReverse;
        			if ($scope.orderReverse) {
        				$scope.paginationInfo.order = 'DESC';
        			} else {
        				$scope.paginationInfo.order = 'ASC';
        			}
        		}
        		$scope.getSyllabusPage();
        	};
        */

        $scope.setCurrentExamBoard = function(newExamBoard) {
            $scope.curExamBoard = newExamBoard;
        };

        $scope.getPage = function() {
            console.log('Loading page: ' + $scope.paginationInfo.pageNumber);
            ExamBoard.query({
                page: this.paginationInfo.pageNumber - 1,
                size: this.paginationInfo.pageSize,
                sort: this.paginationInfo.sort + ',' + this.paginationInfo.order
            }, function(data, header) {
                $scope.paginationInfo.pageNumber = data.page.number + 1;
                $scope.paginationInfo.pageSize = data.page.size;
                $scope.paginationInfo.totalItems = data.page.totalElements;
                $scope.paginationInfo.totalPages = data.page.totalPages;
                $scope.examBoardList = data.examBoardDtos;
            });
        };

        $scope.pageChanged = function() {
            console.log('Page changed to: ' + $scope.paginationInfo.pageNumber);
            $scope.getPage();
        };

        $scope.loadExamBoards = function() {
            $log.debug('$scope.loadExamBoards');
            ExamBoard.query().success(function(data) {
                $scope.examBoardList = data;
            });
        };

        $scope.search = function() {
            console.log('$scope.search');
            var search = $scope.searchTerm;
            var url = this.url;
            if (search.size > 3) {
                var appList = this.applicationList;
                $http.get(url).success(function(response) {
                    $scope.examBoardList = response;
                });
            }
        };

        //$scope.init();
        //$scope.getPage();
        $scope.loadExamBoards();
    });
;(function() {
    angular.module('ExamSeriesCheckBoxDirective').controller('ExamSeriesCheckBoxDirectiveController', ExamSeriesCheckBoxDirectiveController);

    ExamSeriesCheckBoxDirectiveController.$inject = ['$rootScope', '$scope', '$http', '$uibModal'];

    function ExamSeriesCheckBoxDirectiveController($rootScope, $scope, $http, $uibModal) {
        var vm = this;
        $scope.examSeriesCheckBox = false;

        console.log('ExamSeriesCheckBoxDirectiveController loaded');

        $scope.callChangeSelected = function() {
            $scope.changeSelected({
                examSeriesListIndex: $scope.examSeriesId,
                selected: $scope.examSeriesCheckBox
            });
        };

        $scope.locateData = function(callback) {
            $scope.curParent = $scope.$parent;
            while ($scope.curParent.$parent !== null) {
                if (callback($scope.curParent) !== undefined) {
                    return callback($scope.curParent);
                } else {
                    $scope.curParent = $scope.curParent.$parent;
                }
            }
        };

        $scope.init = function() {
            //		$scope.examBoard = $scope.locateData(function(data) { return data.examBoard });
            $scope.examSeriesId = $scope.locateData(function(data) {
                return data.$index;
            });
        };

        $scope.init();
    }
})();
;/**
 * 
 */
;angular.module('Lookups').directive('examSessionLookup', function(ExamSession) {
    return {
        restrict: 'E',
        scope: {
            examSessionId: '=',
        },
        link: function(scope, element) {
            if (scope.examSessionId !== undefined) {
                ExamSession.get(scope.examSessionId).then(function(response) {
                    scope.examSession = response.data.description;
                }, function(response) {
                    scope.examSession = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/examSession/examSession.lookup.html',
    };
});
;angular.module('Lookups').directive('roomLookup', function(Room) {
    return {
        restrict: 'E',
        scope: {
            roomId: '=',
        },
        link: function(scope, element) {
            if (scope.roomId !== undefined) {
                Room.get(scope.roomId).then(function(response) {
                    scope.room = response.data.description;
                }, function(response) {
                    scope.room = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/room/room.lookup.html',
    };
});
;/**
 * The ExamOptionViewer module for viewing Option basedata for either a specified syllabus, or for an individual examBoard
 */
(function() {
    'use strict';

    angular
        .module('OptionTableDirective')
        .controller('OptionTableDirectiveController', optionTableDirectiveController);


    optionTableDirectiveController.$inject = ['$rootScope', '$scope', '$http', '$uibModal', 'Option'];

    function optionTableDirectiveController($rootScope, $scope, $http, $uibModal, Option) {
        /*jshint validthis: true */
        var vm = this;
        vm.getOptions = getOptions;
        vm.getOptionsForSyllabus = getOptionsForSyllabus;
        vm.init = init;
        vm.optionList = [];
        vm.viewDetails = viewDetails;

        vm.init();

        $scope.$on('destroy', $rootScope.$on('exam-option-saved', getOptionsForSyllabus));
        $scope.$on('destroy', $rootScope.$on('exam-component-saved', getOptionsForSyllabus));

        /////////////////////////////////////////////////////////////////////////////////////

        //$scope.paginationInfo defaults populated within ExamSyllabusviewer

        function getOptions() {
            //			Option.query({
            //				page
            //			});
        }

        function getOptionsForSyllabus() {
            console.log("getOptionsForSyllabus" + $scope.syllabusId);
            Option.queryBySyllabus($scope.syllabusId).then(function(data, header) {
                vm.optionList = data.data;
            });
        }

        function init() {
            if ($scope.expandable === null) {
                $scope.expandable = true;
            }
        }

        function viewDetails(headerCode, headerTitle, details) {
            console.log('$scope.viewDetails');
            var detailsViewer = $uibModal.open({
                templateUrl: 'js/modules/entities/genericViewer/genericViewer.html',
                controller: 'GenericViewerController',
                resolve: {
                    headerVal: function() {
                        return headerCode + " - " + headerTitle;
                    },
                    dataSet: function() {
                        return details;
                    }
                }
            });
        }
    }
})();
;(function() {
    angular
        .module('SeatingPlanSeatDirective')
        .controller('SeatingPlanSeatDirectiveController', ["$rootScope", "$scope",
            function($rootScope, $scope) {
                var vm = this;
                console.log('SeatingPlanSeatDirectiveController loaded');

            }
        ]);
}());
;(function() {
    angular
        .module('SeatingPlanStudentDirective')
        .controller('SeatingPlanStudentDirectiveController', ["$rootScope", "$scope",
            function($rootScope, $scope) {
                var vm = this;
                console.log('SeatingPlanStudentDirectiveController loaded');

            }
        ]);
}());
;/**
 * The StudentExamTableViewer module for viewing Component basedata
 */
angular
    .module('StudentExamTableDirective')
    .controller('StudentExamTableDirectiveController', function($scope, $http, Student) {
        console.log('StudentExamTable Controller loaded');

    });
;(function() {
    angular
        .module('SyllabusTableDirective')
        .controller('SyllabusTableDirectiveController', syllabusTableController);

    syllabusTableController.$inject = ['$rootScope', '$scope', '$http', '$uibModal', '$filter', 'Syllabus', 'APP'];

    function syllabusTableController($rootScope, $scope, $http, $uibModal, $filter, Syllabus, APP) {
        console.log('SyllabusTableDirectiveController loaded');
        var vm = this;

        vm.getSyllabusNonPageable = getSyllabusNonPageable;
        vm.getSyllabusPage = getSyllabusPage;
        vm.init = init;
        vm.loadSyllabi = loadSyllabi;
        vm.pageChanged = pageChanged;
        vm.paginationInfo = {
            pageNumber: 1, // Current page number for pagination
            pageSize: undefined, // Number of items to display on page - undefined means not paginated
            startItem: undefined, // Start item for pagination - undefined means not paginated
            sort: 'code',
            order: ['-examSeries.examYear', '+examSeries.examSeries', '+code'],
            maxSize: 5 // Number of page options to show on pagination bar
        };
        vm.search = search;
        vm.setCurrentExamBoard = setCurrentExamBoard;
        vm.setSort = setSort;
        vm.viewDetails = viewDetails;

        ///////////////////////////////////////////////////////////////////////////////////////////

        init();

        /*****************************************************************/
        /**	Non-pageable version used when a syllabus code is passed	**/
        /*****************************************************************/
        function getSyllabusNonPageable() {
            console.log('Loading non pageable');

            //	CHANGE THIS TO CALL A NON-PAGEABLE VERSION, which will potentially load syllabi where the option matches.

            vm.syllabusList = [];
            var syllabi = $scope.syllabusCode.split(",");
            syllabi.forEach(function(s) {
                Syllabus.query({
                        examBoardId: $scope.curExamBoard,
                        syllabusCode: s.trim(),
                        examYear: $scope.examYear,
                        examSeries: $scope.examSeries
                    })
                    .then(function(data, status, header) {
                        for (i = 0; i < data.data.length; i++) {
                            vm.syllabusList.push(data.data[i]);
                        }
                        //						$scope.syllabusList.push(data[0]);
                        //						var returnedHeaders = header();
                        //						$scope.paginationInfo.totalItems = returnedHeaders["x-total-items"];
                        //						$scope.paginationInfo.totalPages = returnedHeaders["x-total-pages"];
                    });
            });
        }

        /*************************************************************************/
        /**	Client side pagination version used when NO syllabus code is passed	**/
        /*************************************************************************/
        function getSyllabusPage() {
            console.log('Loading (client side pagination)');
            var yearId = APP.getYear().id;

            Syllabus.query({
                    examBoardId: $scope.curExamBoard,
                    //				syllabusCode: $scope.syllabusCode,			// <--  DO NOT PASS IN PAGEABLE VERSION
                    yearId: yearId,
                    examYear: $scope.examYear, // {
                    examSeries: $scope.examSeries, // { <-- NEED TO BRING YEAR AND POSSIBLY SERIES INTO SITE 
                    //                    page: vm.paginationInfo.pageNumber - 1,
                    //                    size: vm.paginationInfo.pageSize,
                    //                    sort: vm.paginationInfo.sort + ',' + vm.paginationInfo.order
                })
                .then(function(data /*, status, headers*/ ) {
                    /* angular 1.5 way of retrieving data and headers is no longer valid in angular 1.6
                    //					$scope.syllabusList = data;
                    //					var returnedHeaders = headers();
                    //					$scope.paginationInfo.totalItems = returnedHeaders["x-total-items"];
                    //					$scope.paginationInfo.totalPages = returnedHeaders["x-total-pages"];
                    */
                    vm.syllabusList = data.data;
                    vm.paginationInfo.totalItems = data.headers("x-total-items");
                    vm.paginationInfo.totalPages = data.headers("x-total-pages");
                });
        }

        /**
         * function init
         */
        function init() {
            vm.curExamBoard = $scope.$parent.curExamBoard;
            vm.syllabus = $scope.syllabus;
            vm.syllabusList = [];
            vm.searchTerm = '';
            vm.orderReverse = false;
            //            vm.filterParams = $scope.filterParams;
            vm.pageable = ($scope.syllabusCode === undefined);
            vm.expandable = ($scope.expandable === null || $scope.expandable === undefined || $scope.expandable);
            if (vm.pageable) {
                vm.paginationInfo.pageSize = 10;
                vm.paginationInfo.startItem = 0;
            }
            loadSyllabi();
        }

        /**
         * function loadSyllabi
         */
        function loadSyllabi() {
            if (vm.pageable) {
                getSyllabusPage();
            } else {
                getSyllabusNonPageable();
            }
        }

        /**
         * function pageChanged
         */
        function pageChanged() {
            console.log('Page changed to: ' + vm.paginationInfo.pageNumber);
            vm.paginationInfo.startItem = (vm.paginationInfo.pageNumber - 1) * vm.paginationInfo.pageSize;

            //            getSyllabusPage();
        }

        /**
         * function search
         */
        function search() {
            console.log('$scope.search');
            var search = vm.searchTerm;
            var url = this.url;
            if (search.size > 3) {
                var appList = this.applicationList;
                $http.get(url).then(function(response) {
                    $scope.syllabusList = response;
                });
            }
        }

        /**
         * function setCurrentExamBoard
         */
        function setCurrentExamBoard(newExamBoard) {
            vm.curExamBoard = newExamBoard;
        }

        /**
         * function setSort
         */
        function setSort(column) {
            if (vm.paginationInfo.sort != column) {
                vm.paginationInfo.sort = column;
                vm.paginationInfo.order = ['+' + vm.paginationInfo.sort];
                vm.orderReverse = false;
            } else {
                vm.orderReverse = !vm.orderReverse;
                if (vm.orderReverse) {
                    vm.paginationInfo.order = ['-' + vm.paginationInfo.sort];
                } else {
                    vm.paginationInfo.order = ['+' + vm.paginationInfo.sort];
                }
            }
            //            vm.syllabusList = 
            //            getSyllabusPage();
        }

        /**
         * function viewDetails
         */
        function viewDetails(headerCode, headerTitle, details) {
            console.log('$scope.viewDetails');
            var detailsViewer = $uibModal.open({
                templateUrl: 'js/modules/entities/genericViewer/genericViewer.html',
                controller: 'GenericViewerController',
                resolve: {
                    headerVal: function() {
                        return headerCode + " - " + headerTitle;
                    },
                    dataSet: function() {
                        return details;
                    }
                }
            });
        }

        $scope.$on('$destroy', $rootScope.$on('exam-syllabus-saved', loadSyllabi));

        $rootScope.$on("current-year-changed", loadSyllabi);
    }
})();
;/**
 * 
 */
(function() {
    'use strict';

    angular
        .module('ExpandDirective')
        .controller('ExpandDirectiveController', ExpandDirectiveController);

    function ExpandDirectiveController($rootScope, $scope, $http, $uibModal) {
        /* jshint validthis:true */
        var vm = this;

        $scope.expand = expand;
        $scope.collapse = collapse;

        // //////////////////////////////////////////////////////////////

        console.log("ExpandDirectiveController loaded");
        init();

        function collapse() {
            $scope.expanded = false;
        }

        function expand() {
            $scope.expanded = true;
        }

        function init() {
            //        	if ($scope.expanded === undefined) {
            //        		$scope.expanded = false;
            //        	}
        }

    }


})();
;/**
 * This is the FAculties Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('FacultiesEditorDirective')
        .controller('FacultiesEditorController', FacultiesEditorController);

    FacultiesEditorController.$inject = ['$log', '$uibModal', '$scope', 'Faculty'];

    function FacultiesEditorController($log, $uibModal, $scope, Faculty) {
        /* jshint validthis:true */
        var vm = this;
        vm.faculties = [];

        vm.loadFaculties = loadFaculties;
        vm.editFaculties = editFaculties;
        vm.addFaculties = addFaculties;

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+code';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }


        function loadFaculties() {
            Faculty.query().then(function(response) {
                vm.facilties = response.data;
                $log.info("Loading Faculty ");
            }, function(response) {
                $log.error("Failed to load Faculties");
            });
        }


        function editFaculties(facultyId) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/faculties-editor/views/faculties-editorDialog.html',
                controller: 'FacultiesEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    facultiesEntity: function(Faculty) {
                        return Faculty.get(facultyId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadFaculties();
            });

        }


        function addFaculties() {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/faculties-editor/views/faculties-editorDialog.html',
                controller: 'FacultiesEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    facultiesEntity: function() {
                        var faculties = {};
                        return faculties;
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadFaculties();
            });

        }
    }

})();
;/**
 * This is the FAculty Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('FacultiesEditorDirective')
        .controller('FacultiesEditorDialogController', FacultiesEditorDialogController);

    FacultiesEditorDialogController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModalInstance', 'Faculty', 'facultiesEntity'];

    function FacultiesEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, Faculty, facultiesEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.faculties = facultiesEntity !== undefined ? facultiesEntity : {};

        vm.cancel = cancel;
        vm.save = save;

        var onSaveFinished = function(result) {
            $scope.$emit('faculties-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        function save() {
            if (vm.faculties.id) {
                Faculty.save(vm.faculties, onSaveFinished);
            } else {
                if (vm.faculties.id !== null) {
                    Faculty.create(vm.faculties, onSaveFinished);
                }
            }
        }

    }


})();
;/**
 * This is the Holidays Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('HolidaysEditorDirective')
        .controller('HolidaysEditorController', HolidaysEditorController);

    HolidaysEditorController.$inject = ['$log', '$uibModal', '$scope', 'Holiday'];

    function HolidaysEditorController($log, $uibModal, $scope, Holiday) {
        /* jshint validthis:true */
        var vm = this;
        vm.holidays = [];

        vm.loadHolidays = loadHolidays;
        vm.editHolidays = editHolidays;
        vm.addHolidays = addHolidays;

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+code';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }


        function loadHolidays() {
            Holiday.query().then(function(response) {
                vm.holidays = response.data;
                $log.info("Loading Holidays ");
            }, function(response) {
                $log.error("Failed to load Holidays");
            });
        }


        function editHolidays(holidayId) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/holidays-editor/views/holidays-editorDialog.html',
                controller: 'HolidaysEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    holidaysEntity: function(Holiday) {
                        return Holiday.get(holidayId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadHolidays();
            });

        }


        function addHolidays() {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/holidays-editor/views/holidays-editorDialog.html',
                controller: 'HolidaysEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    holidaysEntity: function() {
                        var holidays = {};
                        return holidays;
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadHolidays();
            });

        }
    }

})();
;/**
 * This is the Holiday Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('HolidaysEditorDirective')
        .controller('HolidaysEditorDialogController', HolidaysEditorDialogController);

    HolidaysEditorDialogController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModalInstance', 'Holiday', 'holidaysEntity'];

    function HolidaysEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, Holiday, holidaysEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.holidays = holidaysEntity !== undefined ? holidaysEntity : {};

        vm.cancel = cancel;
        vm.save = save;

        var onSaveFinished = function(result) {
            $scope.$emit('holidays-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        function save() {
            if (vm.holidays.id) {
                Holiday.save(vm.holidays, onSaveFinished);
            } else {
                if (vm.holidays.id !== null) {
                    Holiday.create(vm.holidays, onSaveFinished);
                }
            }
        }

    }


})();
;/**
 * This is the IdentificationViolations Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('IdentificationViolationsEditorDirective')
        .controller('IdentificationViolationsEditorDialogController', IdentificationViolationsEditorDialogController);

    IdentificationViolationsEditorDialogController.$inject = ['$rootScope', '$uibModalInstance', 'IdentificationViolation', 'identificationViolationEntity'];

    function IdentificationViolationsEditorDialogController($rootScope, $uibModalInstance, IdentificationViolation, identificationViolationEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.identificationViolation = identificationViolationEntity !== undefined ? identificationViolationEntity : {};

        vm.cancel = cancel;
        vm.save = save;

        var onSaveFinished = function(result) {
            $rootScope.$emit('identification-violation-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        function save() {
            if (vm.identificationViolation.id) {
                IdentificationViolation.save(vm.identificationViolation, onSaveFinished);
            } else {
                if (vm.identificationViolation.id !== null) {
                    IdentificationViolation.create(vm.identificationViolation, onSaveFinished);
                }
            }
        }

    }


})();
;/**
 * This is the identificationViolations Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('IdentificationViolationsEditorDirective')
        .controller('IdentificationViolationsEditorController', IdentificationViolationsEditorController);

    IdentificationViolationsEditorController.$inject = ['$log', '$scope', '$uibModal', 'IdentificationViolation'];

    function IdentificationViolationsEditorController($log, $scope, $uibModal, IdentificationViolation) {
        /* jshint validthis:true */
        var vm = this;

        vm.studentId = vm.studentId ? vm.studentId : undefined;
        vm.identificationViolations = vm.identificationViolations ? vm.identificationViolations : [];
        vm.init = init;
        vm.loadIdentificationViolation = loadIdentificationViolation;
        vm.editIdentificationViolation = editIdentificationViolation;
        vm.addIdentificationViolation = addIdentificationViolation;
        vm.deleteIdentificationViolation = deleteIdentificationViolation;



        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '-date';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function init() {
            $log.info('II IdentificationViolation Editor Initialised');
            vm.loadIdentificationViolation(vm.studentId);
        }

        function loadIdentificationViolation() {
            $log.info('II Loading IdentificationViolation Data');
            IdentificationViolation.query().then(function(response) {
                $log.log('IdentificationViolation:: load called');
                vm.identificationViolations = response.data;
            }, function(response) {
                $log.error('EE IdentificationViolation could not be loaded');
            });
        }

        function editIdentificationViolation(idViolationId) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/identification-violation-editor/views/identification-violation-editor-dialog.html',
                controller: 'IdentificationViolationsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'sm',
                resolve: {
                    identificationViolationEntity: function(IdentificationViolation) {
                        return IdentificationViolation.get(idViolationId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });
        }

        // Delete the IdentificationViolation
        function deleteIdentificationViolation(idViolationId) {
            $log.log('IdentificationViolationsEditorController::deleteIdentificationViolation called');
            if (idViolationId) {
                var msg = "Are you sure you want to delete this IdentificationViolation?";
                if (window.confirm(msg)) {
                    IdentificationViolation.delete(idViolationId).then(function(response) {
                        $log.info("II IdentificationViolation ($idViolationId) has been deleted");
                    }, function(response) {
                        $log.info("EE A problem occurred trying to delete IdViolation ($idViolationId)");
                    }).finally(function() {
                        vm.loadIdentificationViolation();
                    });
                }
            }
        }


        function addIdentificationViolation() {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/identification-violation-editor/views/identification-violation-editor-dialog.html',
                controller: 'IdentificationViolationsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'sm',
                resolve: {
                    identificationViolationEntity: function() {
                        var identificationViolations = {
                            studentId: $scope.studentId,
                            date: new Date()
                        };
                        return identificationViolations;
                    }
                }
            });
        }



    }

})();
;/**
 * This is the Letter Template Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('LetterTemplateEditorDirective')
        .controller('LetterTemplateEditorController', LetterTemplateEditorController);

    LetterTemplateEditorController.$inject = ['$uibModal', 'LetterTemplate'];

    function LetterTemplateEditorController($uibModal, LetterTemplate) {
        /* jshint validthis:true */
        var vm = this;
        vm.letterTemplate = {};

        vm.editLetterTemplate = editLetterTemplate;
        vm.addLetterTemplate = addLetterTemplate;

        function editLetterTemplate(id) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/letter-template-editor/views/letter-template-editorDialog.html',
                size: 'lg',
                controller: 'LetterTemplateEditorDialogController',
                controllerAs: 'ctrl',
                resolve: {
                    letterTemplateEntity: function(LetterTemplate) {
                        return LetterTemplate.get(id).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("Failed to retrieve");
                        });
                    }

                }
            });

        }


        function addLetterTemplate() {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/letter-template-editor/views/letter-template-editorDialog.html',
                size: 'lg',
                controller: 'LetterTemplateEditorDialogController',
                controllerAs: 'ctrl',
                resolve: {
                    letterTemplateEntity: function() {
                        var letterTemplate = {};
                        return letterTemplate;
                    }

                }
            });

        }

    }

})();
;/**
 * This is the Letter Template Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('LetterTemplateEditorDirective')
        .controller('LetterTemplateEditorDialogController', LetterTemplateEditorDialogController);

    LetterTemplateEditorDialogController.$inject = ['letterTemplateEntity', 'LetterTemplate', '$scope', '$uibModalInstance'];

    function LetterTemplateEditorDialogController(letterTemplateEntity, LetterTemplate, $scope, $uibModalInstance) {
        /* jshint validthis:true */
        var vm = this;
        vm.letterTemplate = letterTemplateEntity !== undefined ? letterTemplateEntity : {};

        vm.cancel = cancel;
        vm.save = save;

        var onSaveFinished = function(result) {
            $scope.$emit('letter-template-updated', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        function save() {
            if (vm.letterTemplate.id) {
                LetterTemplate.save(vm.letterTemplate, onSaveFinished);
            } else {
                if (vm.letterTemplate.id !== null) {
                    LetterTemplate.create(vm.letterTemplate, onSaveFinished);
                }
            }
        }
    }

})();
;/**
 * This is the Levels Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('LevelsEditorDirective')
        .controller('LevelsEditorController', LevelsEditorController);

    LevelsEditorController.$inject = ['$log', '$uibModal', '$scope', 'Level'];

    function LevelsEditorController($log, $uibModal, $scope, Level) {
        /* jshint validthis:true */
        var vm = this;
        vm.levels = [];

        vm.loadLevels = loadLevels;
        vm.editLevels = editLevels;
        vm.addLevels = addLevels;

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+code';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }


        function loadLevels() {
            Level.query().then(function(response) {
                vm.levels = response.data;
                $log.info("Loading Levels ");
            }, function(response) {
                $log.error("Failed to load Levels");
            });
        }


        function editLevels(levelId) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/levels-editor/views/levels-editorDialog.html',
                controller: 'LevelsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    levelsEntity: function(Level) {
                        return Level.get(levelId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadLevels();
            });

        }


        function addLevels() {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/levels-editor/views/levels-editorDialog.html',
                controller: 'LevelsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    levelsEntity: function() {
                        var levels = {};
                        return levels;
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadLevels();
            });

        }
    }

})();
;/**
 * This is the Level Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('LevelsEditorDirective')
        .controller('LevelsEditorDialogController', LevelsEditorDialogController);

    LevelsEditorDialogController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModalInstance', 'Level', 'levelsEntity'];

    function LevelsEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, Level, levelsEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.levels = levelsEntity !== undefined ? levelsEntity : {};

        vm.cancel = cancel;
        vm.save = save;

        var onSaveFinished = function(result) {
            $scope.$emit('levels-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        function save() {
            if (vm.levels.id) {
                Level.save(vm.levels, onSaveFinished);
            } else {
                if (vm.levels.id !== null) {
                    Level.create(vm.levels, onSaveFinished);
                }
            }
        }

    }


})();
;angular.module('Lookups').directive('academicYearLookup', function(AcademicYear) {
    return {
        restrict: 'E',
        scope: {
            academicYearId: '=',
        },
        link: function(scope, element) {
            if (scope.academicYearId !== undefined) {
                AcademicYear.get(scope.academicYearId).then(function(response) {
                    scope.academicYear = response.data.description;
                }, function(response) {
                    scope.academicYear = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/academicYear/academic-year.lookup.html',
    };
});
;angular.module('Lookups').directive('addressLookup', function($log, Address) {
    return {
        restrict: 'E',
        scope: {
            addressId: '=?',
        },
        link: function(scope, element) {
            if (scope.addressId !== undefined) {
                Address.get(scope.addressId).then(function(response) {
                    scope.address = response.data;
                }, function(response) {
                    scope.address = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/address/address.lookup.html',
    };
});
;angular.module('Lookups').directive('aimTypeLookup', function(AimType) {
    return {
        restrict: 'E',
        scope: {
            aimTypeId: '=',
        },
        link: function(scope, element) {
            if (scope.aimTypeId !== undefined) {
                AimType.get(scope.aimTypeId).then(function(response) {
                    scope.aimType = response.data.description;
                }, function(response) {
                    scope.aimType = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/aimType/aim-type.lookup.html',
    };
});
;angular.module('Lookups').directive('applicationStatusLookup', function(ApplicationStatus) {
    return {
        restrict: 'E',
        scope: {
            applicationStatusId: '=',
        },
        link: function(scope, element) {
            if (scope.applicationStatusId !== undefined) {
                ApplicationStatus.get(scope.applicationStatusId).then(function(response) {
                    scope.applicationStatus = response.data.description;
                }, function(response) {
                    scope.applicationStatus = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/applicationStatus/application-status.lookup.html',
    };
});
;angular.module('Lookups').directive('attendanceCodeLookup', function(AttendanceCode) {
    return {
        restrict: 'E',
        scope: {
            attendanceCodeId: '=',
        },
        link: function(scope, element) {
            if (scope.attendanceCodeId !== undefined) {
                AttendanceCode.get(scope.attendanceCodeId).then(function(response) {
                    scope.attendanceCode = response.data.description;
                }, function(response) {
                    scope.attendanceCode = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/attendanceCode/attendance-code.lookup.html',
    };
});
;angular.module('Lookups').directive('collegeFundPaidLookup', function(CollegeFundPaid) {
    return {
        restrict: 'E',
        scope: {
            collegeFundPaidId: '=',
        },
        link: function(scope, element) {
            if (scope.collegeFundPaidId !== undefined) {
                CollegeFundPaid.get(scope.collegeFundPaidId).then(function(response) {
                    scope.collegeFundPaid = response.data.collegeFundPaid;
                }, function(response) {
                    scope.collegeFundPaid = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/collegeFundPaid/college-fund-paid.lookup.html',
    };
});
;angular.module('Lookups').directive('completionStatusLookup', function(CompletionStatus) {
    return {
        restrict: 'E',
        scope: {
            completionStatusId: '=',
        },
        link: function(scope, element) {
            if (scope.completionStatusId !== undefined) {
                CompletionStatus.get(scope.completionStatusId).then(function(response) {
                    scope.completionStatus = response.data.description;
                }, function(response) {
                    scope.completionStatus = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/completionStatus/completion-status.lookup.html',
    };
});
;angular.module('Lookups').directive('contactTypeLookup', function(ContactType) {
    return {
        restrict: 'E',
        scope: {
            contactTypeId: '=',
        },
        link: function(scope, element) {
            if (scope.contactTypeId !== undefined) {
                ContactType.get(scope.contactTypeId).then(function(response) {
                    scope.contactType = response.data.description;
                }, function(response) {
                    scope.contactType = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/contactType/contact-type.lookup.html',
    };
});
;angular.module('Lookups').directive('correspondenceTypeLookup', function(CorrespondenceType) {
    return {
        restrict: 'E',
        scope: {
            correspondenceTypeId: '=',
        },
        link: function(scope, element) {
            if (scope.correspondenceTypeId !== undefined) {
                CorrespondenceType.get(scope.correspondenceTypeId).then(function(response) {
                    scope.correspondenceType = response.data.type;
                }, function(response) {
                    scope.correspondenceType = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/correspondenceType/correspondence-type.lookup.html',
    };
});
;angular.module('cid.lookup.course-spec-validity', []).directive('courseSpecValidityLookup', function(CourseSpec) {
    return {
        restrict: 'E',
        scope: {
            class: '@',
            spec: '=',
        },
        link: function(scope, element) {
            var valid = function(spec) {
                CourseSpec.valid(scope.spec).then(function(response) {
                    scope.valid = response.data.valid;
                }, function(response) {
                    scope.valid = false;
                    element.addClass('error');
                });
            };

            if (scope.spec !== undefined) {
                valid(scope.spec);
            }
            scope.$watch('spec', function(newValue, oldValue) {
                valid(scope.spec);
            });
        },
        templateUrl: 'js/directives/lookups/course-spec-validity/course-spec-validity.lookup.html',
    };
});
;angular.module('cid.lookup.course-spec', ['CourseSpecService']).directive('courseSpecLookup', function(CourseSpec) {
    return {
        restrict: 'E',
        scope: {
            class: '@',
            spec: '=',
        },
        link: function(scope, element) {
            var lookup = function(spec) {
                CourseSpec.lookup(scope.spec).then(function(response) {
                    scope.description = response.data.description;
                }, function(response) {
                    scope.description = "**ERROR**";
                    element.addClass('error');
                });
            };

            if (scope.spec !== undefined) {
                lookup(scope.spec);
            }
            scope.$watch('spec', function(newValue, oldValue) {
                lookup(scope.spec);
            });
        },
        template: '{{ description }}',
    };
});
;angular.module('Lookups').directive('departmentLookup', function(Department) {
    return {
        restrict: 'E',
        scope: {
            departmentId: '=',
        },
        link: function(scope, element) {
            if (scope.departmentId !== undefined) {
                Department.get(scope.departmentId).then(function(response) {
                    scope.department = response.data.description;
                }, function(response) {
                    scope.department = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/department/department.lookup.html',
    };
});
;angular.module('Lookups').directive('entryQualificationLookup', function(EntryQualification) {
    return {
        restrict: 'E',
        scope: {
            entryQualificationId: '=',
        },
        link: function(scope, element) {
            if (scope.entryQualificationId !== undefined) {
                EntryQualification.get(scope.entryQualificationId).then(function(response) {
                    scope.entryQualification = response.data.title;
                }, function(response) {
                    scope.entryQualification = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/entryQualification/entry-qualification.lookup.html',
    };
});
;angular.module('Lookups').directive('entryQualificationTypeLookup', function(EntryQualificationType) {
    return {
        restrict: 'E',
        scope: {
            entryQualificationTypeId: '=',
        },
        link: function(scope, element) {
            if (scope.entryQualificationTypeId !== undefined) {
                EntryQualificationType.get(scope.entryQualificationTypeId).then(function(response) {
                    scope.entryQualificationType = response.data.description;
                }, function(response) {
                    scope.entryQualificationType = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/entryQualificationType/entry-qualification-type.lookup.html',
    };
});
;angular.module('Lookups').directive('ethnicityLookup', function(Ethnicity) {
    return {
        restrict: 'E',
        scope: {
            ethnicityId: '=',
        },
        link: function(scope, element) {
            if (scope.ethnicityId !== undefined) {
                Ethnicity.get(scope.ethnicityId).then(function(response) {
                    scope.ethnicity = response.data.description;
                }, function(response) {
                    scope.ethnicity = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/ethnicity/ethnicity.lookup.html',
    };
});
;angular.module('Lookups').directive('examBoardLookup', function(ExamBoard) {
    return {
        restrict: 'E',
        scope: {
            examBoardId: '=',
        },
        link: function(scope, element) {
            if (scope.examBoardId !== undefined) {
                ExamBoard.get(scope.examBoardId).then(function(response) {
                    scope.examBoard = response.data.description;
                }, function(response) {
                    scope.examBoard = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/examBoard/exam-board.lookup.html',
    };
});
;angular.module('Lookups').directive('fundingModelLookup', function(FundingModel) {
    return {
        restrict: 'E',
        scope: {
            fundingModelId: '=',
        },
        link: function(scope, element) {
            if (scope.fundingModelId !== undefined) {
                FundingModel.get(scope.fundingModelId).then(function(response) {
                    scope.fundingModel = response.data.description;
                }, function(response) {
                    scope.fundingModel = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/fundingModel/funding-model.lookup.html',
    };
});
;angular.module('Lookups').directive('genderLookup', function(Gender) {
    return {
        restrict: 'E',
        scope: {
            genderId: '=',
        },
        link: function(scope, element) {
            if (scope.genderId !== undefined) {
                Gender.get(scope.genderId).then(function(response) {
                    scope.gender = response.data.description;
                }, function(response) {
                    scope.gender = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/gender/gender.lookup.html',
    };
});
;angular.module('Lookups').directive('letterTypeLookup', function(LetterType) {
    return {
        restrict: 'E',
        scope: {
            letterTypeId: '=',
        },
        link: function(scope, element) {
            if (scope.letterTypeId !== undefined) {
                LetterType.get(scope.letterTypeId).then(function(response) {
                    scope.letterType = response.data.type;
                }, function(response) {
                    scope.letterType = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/letterType/letter-type.lookup.html',
    };
});
;angular.module('Lookups').directive('levelLookup', function(Level) {
    return {
        restrict: 'E',
        scope: {
            levelId: '=',
        },
        link: function(scope, element) {
            if (scope.levelId !== undefined) {
                Level.get(scope.levelId).then(function(response) {
                    scope.level = response.data.description;
                }, function(response) {
                    scope.level = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/level/level.lookup.html',
    };
});
;angular.module('Lookups').directive('nationalityLookup', function(Nationality) {
    return {
        restrict: 'E',
        scope: {
            nationalityId: '=',
        },
        link: function(scope, element) {
            if (scope.nationalityId !== undefined) {
                Nationality.get(scope.nationalityId).then(function(response) {
                    scope.nationality = response.data.description;
                }, function(response) {
                    scope.nationality = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/nationality/nationality.lookup.html',
    };
});
;angular.module('Lookups').directive('noteTypeLookup', function(NoteType) {
    return {
        restrict: 'E',
        scope: {
            noteTypeId: '=',
        },
        link: function(scope, element) {
            if (scope.noteTypeId !== undefined) {
                NoteType.get(scope.noteTypeId).then(function(response) {
                    scope.noteType = response.data.description;
                }, function(response) {
                    scope.noteType = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/noteType/note-type.lookup.html',
    };
});
;angular.module('Lookups').directive('offerTypeLookup', function(OfferType) {
    return {
        restrict: 'E',
        scope: {
            offerTypeId: '=',
        },
        link: function(scope, element) {
            if (scope.offerTypeId !== undefined) {
                OfferType.get(scope.offerTypeId).then(function(response) {
                    scope.offerType = response.data.description;
                }, function(response) {
                    scope.offerType = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/offerType/offer-type.lookup.html',
    };
});
;angular.module('Lookups').directive('outcomeLookup', function(Outcome) {
    return {
        restrict: 'E',
        scope: {
            outcomeId: '=',
        },
        link: function(scope, element) {
            if (scope.outcomeId !== undefined) {
                Outcome.get(scope.outcomeId).then(function(response) {
                    scope.outcome = response.data.description;
                }, function(response) {
                    scope.outcome = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/outcome/outcome.lookup.html',
    };
});
;angular.module('Lookups').directive('periodLookup', function(Period) {
    return {
        restrict: 'E',
        scope: {
            periodId: '=',
        },
        link: function(scope, element) {
            if (scope.periodId !== undefined) {
                Period.get(scope.periodId).then(function(response) {
                    scope.period = response.data.description;
                }, function(response) {
                    scope.period = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/period/period.lookup.html',
    };
});
;angular.module('Lookups').directive('possibleGradeLookup', function(PossibleGrade) {
    return {
        restrict: 'E',
        scope: {
            possibleGradeId: '=',
        },
        link: function(scope, element) {
            if (scope.possibleGradeId !== undefined) {
                PossibleGrade.get(scope.possibleGradeId).then(function(response) {
                    scope.possibleGrade = response.data.description;
                }, function(response) {
                    scope.possibleGrade = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/possibleGrade/possible-grade.lookup.html',
    };
});
;angular.module('Lookups').directive('priorAttainmentLookup', function(PriorAttainment) {
    return {
        restrict: 'E',
        scope: {
            priorAttainmentId: '=',
        },
        link: function(scope, element) {
            if (scope.priorAttainmentId !== undefined) {
                PriorAttainment.get(scope.priorAttainmentId).then(function(response) {
                    scope.priorAttainment = response.data.description;
                }, function(response) {
                    scope.priorAttainment = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/priorAttainment/prior-attainment.lookup.html',
    };
});
;angular.module('Lookups').directive('programmeTypeLookup', function(ProgrammeType) {
    return {
        restrict: 'E',
        scope: {
            programmeTypeId: '=',
        },
        link: function(scope, element) {
            if (scope.programmeTypeId !== undefined) {
                ProgrammeType.get(scope.programmeTypeId).then(function(response) {
                    scope.programmeType = response.data.description;
                }, function(response) {
                    scope.programmeType = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/programmeType/programme-type.lookup.html',
    };
});
;angular.module('Lookups').directive('restrictedUseIndicatorLookup', function(RestrictedUseIndicator) {
    return {
        restrict: 'E',
        scope: {
            restrictedUseIndicatorId: '=',
        },
        link: function(scope, element) {
            if (scope.restrictedUseIndicatorId !== undefined) {
                RestrictedUseIndicator.get(scope.restrictedUseIndicatorId).then(function(response) {
                    scope.restrictedUseIndicator = response.data.description;
                }, function(response) {
                    scope.restrictedUseIndicator = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/restrictedUseIndicator/restricted-use-indicator.lookup.html',
    };
});
;angular.module('Lookups').directive('roomLookup', function(Room) {
    return {
        restrict: 'E',
        scope: {
            roomId: '=',
        },
        link: function(scope, element) {
            if (scope.roomId !== undefined) {
                Room.get(scope.roomId).then(function(response) {
                    scope.room = response.data.description;
                }, function(response) {
                    scope.room = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/room/room.lookup.html',
    };
});
;angular.module('Lookups').directive('schoolLookup', function(School) {
    return {
        restrict: 'E',
        scope: {
            schoolId: '=',
        },
        link: function(scope, element) {
            if (scope.schoolId !== undefined) {
                School.get(scope.schoolId).then(function(response) {
                    scope.school = response.data.name;
                }, function(response) {
                    scope.school = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/school/school.lookup.html',
    };
});
;angular.module('Lookups').directive('schoolPriorityLookup', function(SchoolPriority) {
    return {
        restrict: 'E',
        scope: {
            schoolPriorityId: '=',
        },
        link: function(scope, element) {
            if (scope.schoolPriorityId !== undefined) {
                SchoolPriority.get(scope.schoolPriorityId).then(function(response) {
                    scope.schoolPriority = response.data.code;
                }, function(response) {
                    scope.schoolPriority = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/schoolPriority/school-priority.lookup.html',
    };
});
;angular.module('Lookups').directive('schoolTypeLookup', function(SchoolType) {
    return {
        restrict: 'E',
        scope: {
            schoolTypeId: '=',
        },
        link: function(scope, element) {
            if (scope.schoolTypeId !== undefined) {
                SchoolType.get(scope.schoolTypeId).then(function(response) {
                    scope.schoolType = response.data.description;
                }, function(response) {
                    scope.schoolType = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/schoolType/school-type.lookup.html',
    };
});
;angular.module('Lookups').directive('specialCategoryLookup', function(SpecialCategory) {
    return {
        restrict: 'E',
        scope: {
            specialCategoryId: '=',
        },
        link: function(scope, element) {
            if (scope.specialCategoryId !== undefined) {
                SpecialCategory.get(scope.specialCategoryId).then(function(response) {
                    scope.specialCategory = response.data.description;
                }, function(response) {
                    scope.specialCategory = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/specialCategory/special-category.lookup.html',
    };
});
;angular.module('Lookups').directive('staffTypeLookup', function(StaffType) {
    return {
        restrict: 'E',
        scope: {
            staffTypeId: '=',
        },
        link: function(scope, element) {
            if (scope.staffTypeId !== undefined) {
                StaffType.get(scope.staffTypeId).then(function(response) {
                    scope.staffType = response.data.description;
                }, function(response) {
                    scope.staffType = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/staffType/staff-type.lookup.html',
    };
});
;angular.module('Lookups').directive('studentTypeLookup', function(StudentType) {
    return {
        restrict: 'E',
        scope: {
            studentTypeId: '=',
        },
        link: function(scope, element) {
            if (scope.studentTypeId !== undefined) {
                StudentType.get(scope.studentTypeId).then(function(response) {
                    scope.studentType = response.data.description;
                }, function(response) {
                    scope.studentType = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/studentType/student-type.lookup.html',
    };
});
;angular.module('Lookups').directive('subjectLookup', function(Subject) {
    return {
        restrict: 'E',
        scope: {
            subjectId: '=',
        },
        link: function(scope, element) {
            if (scope.subjectId !== undefined) {
                Subject.get(scope.subjectId).then(function(response) {
                    scope.subject = response.data.description;
                }, function(response) {
                    scope.subject = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/subject/subject.lookup.html',
    };
});
;angular.module('Lookups').directive('titleLookup', function(Title) {
    return {
        restrict: 'E',
        scope: {
            titleId: '=',
        },
        link: function(scope, element) {
            if (scope.titleId !== undefined) {
                Title.get(scope.titleId).then(function(response) {
                    scope.title = response.data.description;
                }, function(response) {
                    scope.title = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/title/title.lookup.html',
    };
});
;angular.module('Lookups').directive('tutorGroupLookup', function(TutorGroup) {
    return {
        restrict: 'E',
        scope: {
            tutorGroupId: '=',
        },
        link: function(scope, element) {
            if (scope.tutorGroupId !== undefined) {
                TutorGroup.get(scope.tutorGroupId).then(function(response) {
                    scope.tutorGroup = response.data.description;
                }, function(response) {
                    scope.tutorGroup = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/tutorGroup/tutor-group.lookup.html',
    };
});
;angular.module('Lookups').directive('withdrawalReasonLookup', function(WithdrawalReason) {
    return {
        restrict: 'E',
        scope: {
            withdrawalReasonId: '=',
        },
        link: function(scope, element) {
            if (scope.withdrawalReasonId !== undefined) {
                WithdrawalReason.get(scope.withdrawalReasonId).then(function(response) {
                    scope.withdrawalReason = response.data.description;
                }, function(response) {
                    scope.withdrawalReason = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/withdrawalReason/withdrawal-reason.lookup.html',
    };
});
;angular.module('Lookups').directive('yearGroupLookup', function(YearGroup) {
    return {
        restrict: 'E',
        scope: {
            yearGroupId: '=',
        },
        link: function(scope, element) {
            if (scope.yearGroupId !== undefined) {
                YearGroup.get(scope.yearGroupId).then(function(response) {
                    scope.yearGroup = response.data.description;
                }, function(response) {
                    scope.yearGroup = "**ERROR**";
                    element.addClass('error');
                });
            }
        },
        templateUrl: 'js/directives/lookups/yearGroup/year-group.lookup.html',
    };
});
;/**
 * This is the Medical Notes Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('MedicalNotesEditorDirective')
        .controller('MedicalNotesEditorDialogController', MedicalNotesEditorDialogController);


    MedicalNotesEditorDialogController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModalInstance', 'Student', 'studentEntity'];

    function MedicalNotesEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, Student, studentEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.student = studentEntity !== undefined ? studentEntity : {};
        vm.save = save;
        vm.cancel = cancel;


        var onSaveFinished = function(result) {
            $scope.$emit('student-saved', result);
            $uibModalInstance.close(result);
        };

        function save() {
            $log.log('MedicalNotesDialogController::save called');
            $log.info(vm.student);
            if (vm.student.id) {
                Student.save(vm.student, onSaveFinished);
            }
        }

        function cancel() {
            $log.log('MedicalNotesDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        }


    }


})();
;/**
 * This is the Medical Notes Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('MedicalNotesEditorDirective')
        .controller('MedicalNotesEditorController', MedicalNotesEditorController);

    MedicalNotesEditorController.$inject = ['$log', '$scope', '$rootScope', '$uibModal', 'Student'];

    function MedicalNotesEditorController($log, $scope, $rootScope, $uibModal, Student) {
        /* jshint validthis:true */
        var vm = this;
        vm.student = vm.student ? vm.student : {};
        vm.studentId = vm.studentId ? vm.studentId : undefined;
        vm.init = init;
        vm.loadStudent = loadStudent;
        vm.editMedicalNotes = editMedicalNotes;

        $scope.hasData = function() {
            if ($scope.student && $scope.student !== undefined) {
                return true;
            } else {
                return false;
            }
        };


        function init() {
            $log.log('StudentYearDetailsDirectiveController::init called');
            if (vm.student === undefined) {
                vm.loadStudent(vm.studentId);
            } else {
                vm.studentId = vm.student.studentId;
            }
        }

        function loadStudent(studentId) {
            Student.get(studentId).then(function(response) {
                $log.info('II StudentYear Loaded');
                vm.student = response.data;
                $log.info(vm.student);
            }, function(response) {
                $log.error('EE students could not be loaded');
            });
        }

        function editMedicalNotes(studentId) {
            $log.log('MedicalNotesDetailsDirectiveController::editSummary called');
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/medical-notes-editor/views/medical-notes-editor-dialog.html',
                controller: 'MedicalNotesEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    studentEntity: ['Student', function(Student) {
                        return Student.get(vm.studentId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }]
                }
            });
            modalInstance.result.then().finally(function() {
                vm.loadStudent(vm.studentId);
            });
        }

    }
})();
;/**
 * This is the OfferTypes Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('OfferTypesEditorDirective')
        .controller('OfferTypesEditorController', OfferTypesEditorController);

    OfferTypesEditorController.$inject = ['$log', '$uibModal', '$scope', 'OfferType'];

    function OfferTypesEditorController($log, $uibModal, $scope, OfferType) {
        /* jshint validthis:true */
        var vm = this;
        vm.offerTypes = [];

        vm.loadOfferTypes = loadOfferTypes;
        vm.editOfferTypes = editOfferTypes;
        vm.addOfferTypes = addOfferTypes;

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+code';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function loadOfferTypes() {
            OfferType.query().then(function(response) {
                vm.offerTypes = response.data;
                $log.info("Loading Faculty ");
            }, function(response) {
                $log.error("Failed to load Faculties");
            });
        }


        function editOfferTypes(offerTypeId) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/offer-types-editor/views/offer-types-editorDialog.html',
                controller: 'OfferTypesEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    offerTypesEntity: function(OfferType) {
                        return OfferType.get(offerTypeId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadOfferTypes();
            });

        }


        function addOfferTypes() {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/offer-types-editor/views/offer-types-editorDialog.html',
                controller: 'OfferTypesEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    offerTypesEntity: function() {
                        var offerTypes = {};
                        return offerTypes;
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadOfferTypes();
            });

        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

    }

})();
;/**
 * This is the Year Group Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('OfferTypesEditorDirective')
        .controller('OfferTypesEditorDialogController', OfferTypesEditorDialogController);

    OfferTypesEditorDialogController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModalInstance', 'OfferType', 'offerTypesEntity'];

    function OfferTypesEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, OfferType, offerTypesEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.offerTypes = offerTypesEntity !== undefined ? offerTypesEntity : {};

        vm.cancel = cancel;
        vm.save = save;

        var onSaveFinished = function(result) {
            $scope.$emit('offerTypes-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        function save() {
            if (vm.offerTypes.id) {
                OfferType.save(vm.offerTypes, onSaveFinished);
            } else {
                if (vm.offerTypes.id !== null) {
                    OfferType.create(vm.offerTypes, onSaveFinished);
                }
            }
        }

    }

})();
;/**
 * This is the Periods Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('PeriodsEditorDirective')
        .controller('PeriodsEditorController', PeriodsEditorController);

    PeriodsEditorController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModal', 'Period'];

    function PeriodsEditorController($log, $scope, $state, $rootScope, $uibModal, Period) {
        /* jshint validthis:true */
        var vm = this;
        vm.periods = [];
        vm.period = {};
        vm.searchText = '';
        vm.visible = false;

        vm.editPeriods = editPeriods;
        vm.addPeriods = addPeriods;

        vm.applyFilter = applyFilter;
        vm.toggleVisibility = toggleVisibility;
        vm.resetFilters = resetFilters;

        function toggleVisibility() {
            vm.visible = !vm.visible;
        }

        // Apply filters
        $scope.filter = {
            code: '',
            description: '',
            _blockDescription: ''
        };

        function applyFilter() {
            vm.filterParams = {
                code: $scope.filter.code,
                description: $scope.filter.description,
                _blockDescription: $scope.filter._blockDescription
            };
        }

        function resetFilters() {

            vm.filterParams = {
                code: '',
                description: '',
                _blockDescription: ''

            };

            $scope.filter = {
                code: '',
                description: '',
                _blockDescription: ''
            };
        }

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+code';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }


        function editPeriods(periodId) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/periods-editor/views/periods-editorDialog.html',
                controller: 'PeriodsEditorDialogController',
                controllerAs: 'ctrl',
                resolve: {
                    periodsEntity: function(Period) {
                        return Period.get(periodId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("Failed to retrieve");
                        });
                    }
                }
            });
        }

        function addPeriods() {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/periods-editor/views/periods-editorDialog.html',
                controller: 'PeriodsEditorDialogController',
                controllerAs: 'ctrl',
                resolve: {
                    periodsEntity: function() {
                        var periods = {};
                        return periods;
                    }
                }
            });
        }



    }



})();
;/**
 * This is the Periods Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('PeriodsEditorDirective')
        .controller('PeriodsEditorDialogController', PeriodsEditorDialogController);

    PeriodsEditorDialogController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModalInstance', 'Period', 'periodsEntity'];

    function PeriodsEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, Period, periodsEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.periods = periodsEntity !== undefined ? periodsEntity : {};

        vm.cancel = cancel;
        vm.save = save;

        var options = {
            'step': 5
        };

        var onSaveFinished = function(result) {
            $scope.$emit('periods-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $log.log('PeriodsEditorDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        }

        function save() {
            if (vm.periods.id) {
                Period.save(vm.periods, onSaveFinished);
            } else {
                if (vm.periods.id !== null) {
                    Period.create(vm.periods, onSaveFinished);
                }
            }

        }

    }


})();
;/**
 * This is the PersonContactDetails Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */
(function() {
    'use strict';

    angular
        .module('PersonContactDetailsDirective')
        .controller('PersonContactDetailsDirectiveController', PersonContactDetailsDirectiveController);

    PersonContactDetailsDirectiveController.$inject = ['$log', '$scope', '$rootScope', 'Person'];

    function PersonContactDetailsDirectiveController($log, $scope, $rootScope, Person) {
        /* jshint validthis:true */
        var vm = this;
        this.message = '';

        this.init = function() {};

        $scope.hasData = function() {
            if ($scope.person) {
                return true;
            } else {
                return false;
            }
        };

        this.init();


    }

})();
;/**
 * This is the PersonContactDetailsLookupDirective Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */
(function() {
    'use strict';

    angular
        .module('PersonContactDetailsLookupDirective')
        .controller('PersonContactDetailsLookupDirectiveController', PersonContactDetailsLookupDirectiveController);

    PersonContactDetailsLookupDirectiveController.$inject = ['$log', '$scope', '$rootScope', 'Person'];

    function PersonContactDetailsLookupDirectiveController($log, $scope, $rootScope, Person) {
        /* jshint validthis:true */
        var vm = this;
        this.message = '';

        this.init = function() {
            if (vm.person === undefined && vm.personId) {
                $log.log('II Loading person-details directive with a personId');
                vm.message = 'Loading...';
                Person.get(vm.personId).then(function(response) {
                    vm.person = response.data;
                    vm.message = '';
                    $log.log(vm.person);
                }, function(response) {
                    $log.error('EE Failed to retireve the person details for personId: ' + vm.personId);
                });
            }
            if (vm.person && !vm.personId) {
                $log.log('II Loading person-details directive with a person object');
                vm.message = '';
            }
        };

        this.init();
    }

})();
;/**
 * This is the PersonDetailsDirective Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */
(function() {
    'use strict';

    angular
        .module('PersonDetailsDirective')
        .controller('PersonDetailsDirectiveController', PersonDetailsDirectiveController);

    PersonDetailsDirectiveController.$inject = ['$log', '$scope', '$rootScope'];

    function PersonDetailsDirectiveController($log, $scope, $rootScope) {
        /* jshint validthis:true */
        var vm = this;
        this.message = '';

        $scope.hasData = function() {
            if ($scope.person && $scope.person !== undefined) {
                return true;
            } else {
                return false;
            }
        };

    }
})();
;/**
 * This is the PersonContactDetails Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */
(function() {
    'use strict';

    angular
        .module('PersonDetailsLookupDirective')
        .controller('PersonDetailsLookupDirectiveController', PersonDetailsLookupDirectiveController);

    PersonDetailsLookupDirectiveController.$inject = ['$log', '$scope', '$rootScope', 'Person'];

    function PersonDetailsLookupDirectiveController($log, $scope, $rootScope, Person) {
        /* jshint validthis:true */
        var vm = this;
        this.message = '';

        this.init = function() {
            if (vm.person === undefined && vm.personId) {
                $log.log('II Loading person-details directive with a personId');
                vm.message = 'Loading...';
                Person.get(vm.personId).then(function(response) {
                    vm.person = response.data;
                    vm.message = '';
                    $log.log(vm.person);
                }, function(response) {
                    $log.error('EE Failed to retireve the person details for personId: ' + vm.personId);
                });
            }
            if (vm.person && !vm.personId) {
                $log.log('II Loading person-details directive with a person object');
                vm.message = '';
            }
        };

        this.init();
    }

})();
;/**
 * This is the Person Editor Table Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('PersonEditorDirective')
        .controller('PersonEditorController', PersonEditorController);

    PersonEditorController.$inject = ['$log', '$scope', '$rootScope', '$uibModal', 'Person'];

    function PersonEditorController($log, $scope, $rootScope, $uibModal, Person) {
        /* jshint validthis:true */
        var vm = this;
        vm.message = '';
        vm.personId = vm.personId ? vm.personId : undefined;
        vm.person = vm.person ? vm.person : {};

        vm.init = init;
        vm.loadPerson = loadPerson;
        vm.editPerson = editPerson;

        function init() {
            $log.log('PersonDetailsDirectiveController::init called');
            loadPerson(vm.personId);
        }

        function loadPerson(personId) {
            Person.get(personId).then(function(response) {
                $log.info('II Person Loaded');
                vm.person = response.data;
            });
        }

        //update the Person information
        function editPerson(id) {
            $log.log('PersonDetailsDirectiveController::editContact called');
            var personId = id;
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/personEditor/views/personEditorDialog.html',
                controller: 'PersonEditorDialogController',
                controllerAs: 'ctrl',
                backdrop: 'static',
                keyboard: false,
                size: 'lg',
                resolve: {
                    personEntity: function(Person) {
                        return vm.person;
                    }
                }
            });
            modalInstance.result.then().finally(function() {
                vm.loadPerson(vm.person.id);
            });
        }

        $scope.hasData = function() {
            if ($scope.person && $scope.person !== undefined) {
                return true;
            } else {
                return false;
            }
        };
    }

})();
;/**
 * This is the Person Editor Dialog Table Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */
(function() {
    'use strict';
    angular
        .module('PersonEditorDirective')
        .controller('PersonEditorDialogController', PersonEditorDialogController);

    PersonEditorDialogController.$inject = ['$log', '$scope', '$state', '$uibModalInstance', '$uibModal', '$rootScope', 'personEntity', 'Person'];

    function PersonEditorDialogController($log, $scope, $state, $uibModalInstance, $uibModal, $rootScope, personEntity, Person) {
        /* jshint validthis:true */
        var vm = this;

        vm.person = personEntity;
        vm.save = save;
        vm.cancel = cancel;

        var onSaveFinished = function(result) {
            $log.info('II Person Saved - Success');
            $scope.$emit("person-save-success", result);
            $uibModalInstance.close(result);
        };

        var onSaveFailed = function(result) {
            $log.info('II Person Saved - Failed');
            $scope.$emit("person-save-failed", result);
            $uibModalInstance.close(result);
        };

        /**
         * This saves the person and closes that dialog box
         */
        function save() {
            $log.log('PersonDialogController::save called');
            if (vm.person.id) {
                //update the contact information
                Person.save(vm.person, onSaveFinished);
            }
        }

        /**
         * This closes the person editor dialog box without saving 
         */
        function cancel() {
            $log.log('PersonDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        }

    }

})();
;/**
 * This is the PossibleGradeSets Editor Controller
 * 
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 * 
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('PossibleGradeSetsEditorDirective')
        .controller('PossibleGradeSetsEditorController', PossibleGradeSetsEditorController);

    PossibleGradeSetsEditorController.$inject = ['$uibModal', '$log', 'PossibleGradeSet'];

    function PossibleGradeSetsEditorController($uibModal, $log, PossibleGradeSet) {
        /* jshint validthis:true */
        var vm = this;
        vm.possibleGradeSets = [];

        vm.editPossibleGradeSets = editPossibleGradeSets;
        vm.addPossibleGradeSets = addPossibleGradeSets;

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+code';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function editPossibleGradeSets(possibleGradeSetId) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/possible-grade-set-editor/views/possible-grade-sets-editorDialog.html',
                controller: 'PossibleGradeSetsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    possibleGradeSetsEntity: function(PossibleGradeSet) {
                        return PossibleGradeSet.get(possibleGradeSetId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("Failed to retrieve");
                        });
                    },
                    possibleGradesArray: function(PossibleGradeSet) {
                        return PossibleGradeSet.getPossibleGrades(possibleGradeSetId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("Failed to retrieve possible grades");
                        });
                    }
                }
            });
        }


        function addPossibleGradeSets() {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/possible-grade-set-editor/views/possible-grade-sets-editorDialog.html',
                controller: 'PossibleGradeSetsEditorDialogController',
                controllerAs: 'ctrl',
                resolve: {
                    possibleGradeSetsEntity: function() {
                        var possibleGradeSets = {};
                        return possibleGradeSets;
                    }
                }
            });
        }

    }

})();
;/**
 * This is the Possible GradeSets Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('PossibleGradeSetsEditorDirective')
        .controller('PossibleGradeSetsEditorDialogController', PossibleGradeSetsEditorDialogController);

    PossibleGradeSetsEditorDialogController.$inject = ['$uibModal', '$log', '$state', 'PossibleGradeSet', 'possibleGradeSetsEntity', 'possibleGradesArray', '$uibModalInstance', '$scope'];

    function PossibleGradeSetsEditorDialogController($uibModal, $log, state, PossibleGradeSet, possibleGradeSetsEntity, possibleGradesArray, $uibModalInstance, $scope) {
        /* jshint validthis:true */
        var vm = this;
        vm.possibleGradeSets = possibleGradeSetsEntity;
        vm.possibleGrades = possibleGradesArray;

        vm.cancel = cancel;
        vm.save = save;


        var onSaveFinished = function(result) {
            $scope.$emit('possible-grade-sets-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        function save() {
            if (vm.possibleGradeSets.id) {
                PossibleGradeSet.save(vm.possibleGradeSets, onSaveFinished);
            } else {
                if (vm.possibleGradeSets.id !== null) {
                    PossibleGradeSet.create(vm.possibleGradeSets, onSaveFinished);
                }
            }
        }

    }


})();
;/**
 * This is the PossibleGrades Editor Controller
 * 
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 * 
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('PossibleGradesEditorDirective')
        .controller('PossibleGradesEditorController', PossibleGradesEditorController);

    PossibleGradesEditorController.$inject = ['$uibModal', '$log', 'PossibleGrade'];

    function PossibleGradesEditorController($uibModal, $log, PossibleGrade) {
        /* jshint validthis:true */
        var vm = this;
        vm.possibleGrades = [];

        vm.editPossibleGrades = editPossibleGrades;
        vm.addPossibleGrades = addPossibleGrades;

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+code';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function editPossibleGrades(possibleGradeId) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/possible-grades-editor/views/possible-grades-editorDialog.html',
                controller: 'PossibleGradesEditorDialogController',
                controllerAs: 'ctrl',
                resolve: {
                    possibleGradesEntity: function(PossibleGrade) {
                        return PossibleGrade.get(possibleGradeId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("Failed to retrieve");
                        });
                    }
                }
            });
        }


        function addPossibleGrades() {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/possible-grades-editor/views/possible-grades-editorDialog.html',
                controller: 'PossibleGradesEditorDialogController',
                controllerAs: 'ctrl',
                resolve: {
                    possibleGradesEntity: function() {
                        var possibleGrades = {};
                        return possibleGrades;
                    }
                }
            });
        }

    }

})();
;/**
 * This is the Possible Grades Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('PossibleGradesEditorDirective')
        .controller('PossibleGradesEditorDialogController', PossibleGradesEditorDialogController);

    PossibleGradesEditorDialogController.$inject = ['$uibModal', '$log', '$state', '$uibModalInstance', '$scope', 'PossibleGrade', 'possibleGradesEntity'];

    function PossibleGradesEditorDialogController($uibModal, $log, state, $uibModalInstance, $scope, PossibleGrade, possibleGradesEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.possibleGrades = possibleGradesEntity;

        vm.cancel = cancel;
        vm.save = save;


        var onSaveFinished = function(result) {
            $scope.$emit('possible-grades-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        function save() {
            if (vm.possibleGrades.id) {
                PossibleGrade.save(vm.possibleGrades, onSaveFinished);
            } else {
                if (vm.possibleGrades.id !== null) {
                    PossibleGrade.create(vm.possibleGrades, onSaveFinished);
                }
            }
        }

    }


})();
;/**
 * This is the PunctualityMonitorings Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('PunctualityMonitoringsEditorDirective')
        .controller('PunctualityMonitoringsEditorController', PunctualityMonitoringsEditorController);

    PunctualityMonitoringsEditorController.$inject = ['$log', '$uibModal', '$scope', 'PunctualityMonitoring'];

    function PunctualityMonitoringsEditorController($log, $uibModal, $scope, PunctualityMonitoring) {
        /* jshint validthis:true */
        var vm = this;
        vm.punctualityMonitorings = [];

        vm.loadPunctualityMonitorings = loadPunctualityMonitorings;
        vm.editPunctualityMonitorings = editPunctualityMonitorings;
        vm.addPunctualityMonitorings = addPunctualityMonitorings;

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+code';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function loadPunctualityMonitorings() {
            PunctualityMonitoring.query().then(function(response) {
                vm.punctualityMonitorings = response.data;
                $log.info("Loading Faculty ");
            }, function(response) {
                $log.error("Failed to load punctualityMonitorings");
            });
        }


        function editPunctualityMonitorings(punctualityMonitoringId) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/punctuality-monitorings-editor/views/punctuality-monitorings-editorDialog.html',
                controller: 'PunctualityMonitoringsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    punctualityMonitoringsEntity: function(PunctualityMonitoring) {
                        return PunctualityMonitoring.get(punctualityMonitoringId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadPunctualityMonitorings();
            });

        }


        function addPunctualityMonitorings() {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/punctuality-monitorings-editor/views/punctuality-monitorings-editor-addDialog.html',
                controller: 'PunctualityMonitoringsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    punctualityMonitoringsEntity: function() {
                        var punctualityMonitorings = {};
                        return punctualityMonitorings;
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadPunctualityMonitorings();
            });

        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

    }

})();
;/**
 * This is the Year Group Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('PunctualityMonitoringsEditorDirective')
        .controller('PunctualityMonitoringsEditorDialogController', PunctualityMonitoringsEditorDialogController);

    PunctualityMonitoringsEditorDialogController.$inject = ['$log', '$scope', '$state',
        '$rootScope', '$uibModalInstance', 'PunctualityMonitoring', 'punctualityMonitoringsEntity'
    ];

    function PunctualityMonitoringsEditorDialogController($log, $scope, $state, $rootScope,
        $uibModalInstance, PunctualityMonitoring, punctualityMonitoringsEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.punctualityMonitorings = punctualityMonitoringsEntity !== undefined ? punctualityMonitoringsEntity : {};

        vm.cancel = cancel;
        vm.save = save;
        vm.add = add;

        var onSaveFinished = function(result) {
            $scope.$emit('punctuality-monitorings-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        function add() {
            if (vm.punctualityMonitorings.id !== null) {
                PunctualityMonitoring.create(vm.punctualityMonitorings, onSaveFinished);
            }
        }

        function save() {
            if (vm.punctualityMonitorings.id) {
                PunctualityMonitoring.save(vm.punctualityMonitorings, onSaveFinished);
            }

        }

    }

})();
;/**
 * This is the ReferralReasons Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('ReferralReasonsEditorDirective')
        .controller('ReferralReasonsEditorController', ReferralReasonsEditorController);

    ReferralReasonsEditorController.$inject = ['$log', '$uibModal', '$scope', 'ReferralReason'];

    function ReferralReasonsEditorController($log, $uibModal, $scope, ReferralReason) {
        /* jshint validthis:true */
        var vm = this;
        vm.referralReasons = [];

        vm.loadReferralReasons = loadReferralReasons;
        vm.editReferralReasons = editReferralReasons;
        vm.addReferralReasons = addReferralReasons;

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+code';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function loadReferralReasons() {
            ReferralReason.query().then(function(response) {
                vm.referralReasons = response.data;
                $log.info("Loading Faculty ");
            }, function(response) {
                $log.error("Failed to load Faculties");
            });
        }


        function editReferralReasons(referralReasonId) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/referral-reasons-editor/views/referral-reasons-editorDialog.html',
                controller: 'ReferralReasonsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    referralReasonsEntity: function(ReferralReason) {
                        return ReferralReason.get(referralReasonId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadReferralReasons();
            });

        }


        function addReferralReasons() {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/referral-reasons-editor/views/referral-reasons-editor-addDialog.html',
                controller: 'ReferralReasonsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    referralReasonsEntity: function() {
                        var referralReasons = {};
                        return referralReasons;
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadReferralReasons();
            });

        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

    }

})();
;/**
 * This is the Year Group Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('ReferralReasonsEditorDirective')
        .controller('ReferralReasonsEditorDialogController', ReferralReasonsEditorDialogController);

    ReferralReasonsEditorDialogController.$inject = ['$log', '$scope', '$state',
        '$rootScope', '$uibModalInstance', 'ReferralReason', 'referralReasonsEntity'
    ];

    function ReferralReasonsEditorDialogController($log, $scope, $state, $rootScope,
        $uibModalInstance, ReferralReason, referralReasonsEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.referralReasons = referralReasonsEntity !== undefined ? referralReasonsEntity : {};

        vm.cancel = cancel;
        vm.save = save;
        vm.add = add;

        var onSaveFinished = function(result) {
            $scope.$emit('referralReasons-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        function add() {
            if (vm.referralReasons.id !== null) {
                ReferralReason.create(vm.referralReasons, onSaveFinished);
            }
        }

        function save() {
            if (vm.referralReasons.id) {
                ReferralReason.save(vm.referralReasons, onSaveFinished);
            }
        }

    }

})();
;/**
 * This is the Registers Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */



(function() {
    'use strict';

    angular
        .module('RegistersEditorDirective')
        .controller('RegistersEditorController', RegistersEditorController);

    RegistersEditorController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModal', 'MasterRegister'];


    function RegistersEditorController($log, $scope, $state, $rootScope, $uibModal, MasterRegister) {
        /* jshint validthis:true */
        var vm = this;
        vm.registers = [];

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+code';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }


        // Operations
        vm.loadRegisters = loadRegisters;
        vm.editRegister = editRegister;
        vm.addRegister = addRegister;
        vm.toggleVisibility = toggleVisibility;
        vm.applyFilter = applyFilter;


        function loadRegisters(studentId) {
            $log.info('II Loading Registers Data');
            MasterRegister.get(studentId).then(function(response) {
                $log.info('II Registers Loaded');
                vm.registers = response.data;
            }, function(response) {
                $log.error('EE Registers could not be loaded');
            });
        }



        function editRegister(id) {
            $log.log('RegistersEditorController::editRegister called');

            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/registersEditor/views/registersEditorDialog.html',
                controller: 'RegistersEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    registerEntity: function(MasterRegister) {
                        return MasterRegister.getById(id).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });
            // Reload Registers after dialog closed
            modalInstance.result.then().finally(function() {
                vm.loadRegisters(vm.studentId);
            });
        }

        function addRegister(studentId) {
            $log.log('RegistersEditorController::editRegister called');
            //  if (studentId) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/registersEditor/views/registersEditorDialog.html',
                controller: 'RegistersEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    registerEntity: function() {
                        var register = {};
                        register.studentId = studentId;
                        return register;
                    }
                }
            });
            // Reload Registers after dialog closed
            modalInstance.result.then().finally(function() {
                vm.loadRegisters(vm.studentId);
            });
            //        } else {
            //            $log.error('EE No Person ID Specified');
            //        }
        }


        function toggleVisibility() {
            vm.visible = !vm.visible;
        }

        // Apply filters
        $scope.filter = {
            subjectCode: '',
            group: '',
            _sessionPeriod: '',
            attendanceId: ''
        };

        function applyFilter() {
            vm.filterParams = {
                subjectCode: $scope.filter.subjectCode,
                group: $scope.filter.group,
                _sessionPeriod: $scope.filter._sessionPeriod,
                attendanceId: $scope.filter.attendanceId
            };
        }
    }

})();
;/**
 * This is the Registers Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('RegistersEditorDirective')
        .controller('RegistersEditorDialogController', RegistersEditorDialogController);

    function RegistersEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, registerEntity, MasterRegister) {
        /* jshint validthis:true */
        var vm = this;

        vm.register = registerEntity !== undefined ? registerEntity : {};
        vm.save = save;
        vm.cancel = cancel;

        var onSaveFinished = function(result) {
            $scope.$emit('register-saved', result);
            $uibModalInstance.close(result);
        };

        function save() {
            $log.log('RegisterDialogController::save called');
            $log.info(vm.register);
            if (vm.register.id) {
                //update the register information
                MasterRegister.save(vm.register, onSaveFinished);
            } else {
                // Create New Register
                if (vm.register.id !== null) {
                    MasterRegister.create(vm.register, onSaveFinished);
                }
            }
        }

        function cancel() {
            $log.log('RegisterDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        }

    }

})();
;/**
 * This is the Registers Table Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('RegistersTableDirective')
        .controller('RegistersTableController', RegistersTableController);

    RegistersTableController.$inject = ['$scope'];

    function RegistersTableController($scope) {
        /* jshint validthis:true */
        var vm = this;
        vm.toggleVisibility = toggleVisibility;
        vm.applyFilter = applyFilter;

        function toggleVisibility() {
            vm.visible = !vm.visible;
        }

        // Apply filters
        $scope.filter = {
            subjectCode: '',
            group: ''

        };

        function applyFilter() {
            vm.filterParams = {
                subjectCode: $scope.filter.subjectCode,
                group: $scope.filter.group
            };
        }
    }

})();
;/**
 * This is the Report Link Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */



(function() {
    'use strict';

    angular
        .module('ReportLinkDirective')
        .controller('ReportLinkDirectiveController', ReportLinkDirectiveController);

    ReportLinkDirectiveController.$inject = ['$log', '$window', 'GLOBAL', 'APP'];

    function ReportLinkDirectiveController($log, $window, GLOBAL, APP) {
        /* jshint validthis:true */
        var vm = this;
        var DEBUG = GLOBAL.DEBUG;
        var baseUrl = GLOBAL.REPORT_URL;
        var year = APP.getYear();

        vm.reportToolbar = GLOBAL.DEFAULTS.REPORT_TOOLBAR;
        vm.reportUrl = genrerateReportUrl;

        vm.loadReport = loadReport;


        // Private Interface
        function loadReport() {
            var url = genrerateReportUrl();
            if (DEBUG === true) $log.info("II Loading report: " + vm.reportPath + " :: URL " + url);
            $window.open(url);
        }

        function genrerateReportUrl() {
            var defaultProperties = "&rc:toolbar=" + vm.reportToolbar;
            if (vm.reportFormat !== undefined) {
                defaultProperties += "&rs:Format=" + vm.reportFormat;
            }
            if (vm.showParams !== undefined) {
                defaultProperties += "&rc:Parameters=" + vm.showParams;
            }
            var params = '';
            if (vm.reportParams) {
                switch (typeof vm.reportParams) {
                    case "string":
                        var paramArr = vm.reportParams.split('&');
                        angular.forEach(paramArr, function(it) {
                            var arr = it.split('=');
                            params += arr[0] + '=' + encodeURIComponent(arr[1]) + '&';
                        });
                        params = params.length !== 0 ? params.slice(0, -1) : params;
                        break;
                    case "object":
                        params = Object.keys(vm.reportParams).map(function(key) {
                            return key[0].toUpperCase() + key.substring(1) + '=' + encodeURIComponent(vm.reportParams[key]);
                        }).join('&');
                        if (DEBUG === true) $log.info(params);
                        break;
                    default:
                        params = '';
                        break;
                }
            }
            if (params.length !== 0) {
                params = '&' + params;
            }
            var url = baseUrl + '?' + encodeURIComponent(vm.reportPath) + defaultProperties + params;
            if (vm.includeYear) {
                if (vm.includeYear === true) {
                    year = APP.getYear();
                    url = url + '&AcademicYear=' + year.id;
                }
            }
            if (vm.previousYear) {
                if (vm.previousYear === true) {
                    url = url + '&AcademicYear=' + (year.id - 1);
                }
            }
            return url;
        }

    }


})();
;/**
 * This is the ReportingPeriods Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('ReportingPeriodsEditorDirective')
        .controller('ReportingPeriodsEditorController', ReportingPeriodsEditorController);

    ReportingPeriodsEditorController.$inject = ['$log', '$uibModal', '$scope', 'ReportingPeriod'];

    function ReportingPeriodsEditorController($log, $uibModal, $scope, ReportingPeriod) {
        /* jshint validthis:true */
        var vm = this;
        vm.reportingPeriods = [];

        vm.loadReportingPeriods = loadReportingPeriods;
        vm.editReportingPeriods = editReportingPeriods;
        vm.addReportingPeriods = addReportingPeriods;

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+code';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function loadReportingPeriods() {
            ReportingPeriod.getByYear().then(function(response) {
                vm.reportingPeriods = response.data;
                $log.info("Loading Faculty ");
            }, function(response) {
                $log.error("Failed to load Faculties");
            });
        }


        function editReportingPeriods(reportingPeriodId) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/reporting-periods-editor/views/reporting-periods-editorDialog.html',
                controller: 'ReportingPeriodsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    reportingPeriodsEntity: function(ReportingPeriod) {
                        return ReportingPeriod.get(reportingPeriodId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadReportingPeriods();
            });

        }


        function addReportingPeriods() {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/reporting-periods-editor/views/reporting-periods-editorDialog.html',
                controller: 'ReportingPeriodsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    reportingPeriodsEntity: function() {
                        var reportingPeriods = {};
                        return reportingPeriods;
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadReportingPeriods();
            });

        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

    }

})();
;/**
 * This is the Year Group Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('ReportingPeriodsEditorDirective')
        .controller('ReportingPeriodsEditorDialogController', ReportingPeriodsEditorDialogController);

    ReportingPeriodsEditorDialogController.$inject = ['$log', '$scope', '$state',
        '$rootScope', '$uibModalInstance', 'ReportingPeriod', 'reportingPeriodsEntity'
    ];

    function ReportingPeriodsEditorDialogController($log, $scope, $state, $rootScope,
        $uibModalInstance, ReportingPeriod, reportingPeriodsEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.reportingPeriods = reportingPeriodsEntity !== undefined ? reportingPeriodsEntity : {};

        vm.cancel = cancel;
        vm.save = save;

        var onSaveFinished = function(result) {
            $scope.$emit('reportingPeriods-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        function save() {
            if (vm.reportingPeriods.id) {
                ReportingPeriod.save(vm.reportingPeriods, onSaveFinished);
            } else {
                if (vm.reportingPeriods.id !== null) {
                    ReportingPeriod.create(vm.reportingPeriods, onSaveFinished);
                }
            }
        }

    }

})();
;/**
 * This is the Roles Editor Controller
 * 
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 * 
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('RolesEditorDirective')
        .controller('RolesEditorController', RolesEditorController);

    RolesEditorController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModal', 'Role'];

    function RolesEditorController($log, $scope, $state, $rootScope, $uibModal, Role) {
        /* jshint validthis:true */
        var vm = this;

        vm.roles = [];
        vm.role = {};
        vm.searchText = '';
        vm.visible = false;

        vm.loadRoles = loadRoles;
        vm.editRoles = editRoles;
        vm.addRoles = addRoles;

        vm.applyFilter = applyFilter;
        vm.toggleVisibility = toggleVisibility;
        vm.resetFilters = resetFilters;

        function toggleVisibility() {
            vm.visible = !vm.visible;
        }

        // Apply filters
        $scope.filter = {
            roleName: '',
            description: ''
        };

        function applyFilter() {
            vm.filterParams = {
                roleName: $scope.filter.roleName,
                description: $scope.filter.description
            };
        }

        function resetFilters() {

            vm.filterParams = {
                roleName: '',
                description: ''
            };

            $scope.filter = {
                roleName: '',
                description: ''
            };
        }

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+roleName';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }



        function loadRoles() {
            Role.query().then(function(response) {
                vm.roles = response.data;
                $log.info("Loading Exam Results");
            }, function(response) {
                $log.error("Failed to load Results");
            });
        }


        function editRoles(roleId) {
            $log.log("RoleEditorController :: editRoles called");
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/roles-editor/views/roles-editorDialog.html',
                controller: 'RolesEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    roleEntity: function(Role) {
                        return Role.get(roleId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadRoles();
            });

        }


        function addRoles() {
            $log.log("RoleEditorController :: addRoles called");
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/roles-editor/views/roles-editorDialog.html',
                controller: 'RolesEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    roleEntity: function() {
                        var roles = {};
                        return roles;
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadRoles();
            });

        }


    }

})();
;/**
 * This is the Roles Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('RolesEditorDirective')
        .controller('RolesEditorDialogController', RolesEditorDialogController);

    RolesEditorDialogController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModalInstance', 'Role', 'roleEntity'];

    function RolesEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, Role, roleEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.role = roleEntity;

        vm.cancel = cancel;
        vm.save = save;


        var onSaveFinished = function(result) {
            $scope.$emit('role-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $log.log('RolesEditorDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        }

        function save() {
            if (vm.role.id) {
                Role.save(vm.role, onSaveFinished);
            } else {
                if (vm.role.id !== null) {
                    Role.create(vm.role, onSaveFinished);
                }
            }
        }

    }


})();
;/**
 * This is the Room Table Controller definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Controller
 *
 *
 *   */
(function() {
    'use strict';

    angular
        .module('RoomTableDirective')
        .controller('RoomTableDirectiveController', RoomTableDirectiveController);

    RoomTableDirectiveController.$inject = ['$scope', '$http', 'Room'];

    function RoomTableDirectiveController($scope, $http, Room) {
        console.log('RoomTable Controller loaded');
    }
})();
;/**
 * This is the Rooms Editor Controller
 * 
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 * 
 * @type Controller
 */

(function() {
    'use strict';
    angular
        .module('RoomsEditorDirective')
        .controller('RoomsEditorController', RoomsEditorController);

    RoomsEditorController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModal', 'Room'];

    function RoomsEditorController($log, $scope, $state, $rootScope, $uibModal, Room) {
        /* jshint validthis:true */
        var vm = this;

        vm.rooms = [];
        vm.room = {};
        vm.searchText = '';
        vm.visible = false;

        vm.loadRooms = loadRooms;
        vm.editRooms = editRooms;
        vm.addRooms = addRooms;

        vm.applyFilter = applyFilter;
        vm.toggleVisibility = toggleVisibility;
        vm.resetFilters = resetFilters;

        function toggleVisibility() {
            vm.visible = !vm.visible;
        }

        // Apply filters
        $scope.filter = {
            code: '',
            description: ''
        };

        function applyFilter() {
            vm.filterParams = {
                code: $scope.filter.code,
                description: $scope.filter.description
            };
        }

        function resetFilters() {

            vm.filterParams = {
                code: '',
                description: ''
            };

            $scope.filter = {
                code: '',
                description: ''
            };
        }

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+code';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }



        function loadRooms() {
            Room.query().then(function(response) {
                vm.rooms = response.data;
                $log.info("Loading Exam Results");
            }, function(response) {
                $log.error("Failed to load Results");
            });
        }


        function editRooms(roomId) {
            $log.log("RoomEditorController :: editRooms called");
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/roomsEditor/views/rooms-editorDialog.html',
                controller: 'RoomsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    roomEntity: function(Room) {
                        return Room.get(roomId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadRooms();
            });

        }


        function addRooms() {
            $log.log("RoomEditorController :: addRooms called");
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/roomsEditor/views/rooms-editorDialog.html',
                controller: 'RoomsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    roomEntity: function() {
                        var rooms = {};
                        return rooms;
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadRooms();
            });

        }


    }

})();
;/**
 * This is the Rooms Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('RoomsEditorDirective')
        .controller('RoomsEditorDialogController', RoomsEditorDialogController);

    RoomsEditorDialogController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModalInstance', 'Room', 'roomEntity'];

    function RoomsEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, Room, roomEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.room = roomEntity;

        vm.cancel = cancel;
        vm.save = save;


        var onSaveFinished = function(result) {
            $scope.$emit('room-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $log.log('ExamResultsEditorDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        }

        function save() {
            if (vm.room.id) {
                Room.save(vm.room, onSaveFinished);
            } else {
                if (vm.room.id !== null) {
                    Room.create(vm.room, onSaveFinished);
                }
            }
        }

    }


})();
;/**
 * This is the Schools Editor Controller
 * 
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 * 
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('SchoolsEditorDirective')
        .controller('SchoolsEditorController', SchoolsEditorController);

    SchoolsEditorController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModal', 'School'];


    function SchoolsEditorController($log, $scope, $state, $rootScope, $uibModal, School) {
        /* jshint validthis:true */

        var vm = this;
        vm.schools = [];
        vm.school = {};
        vm.searchText = '';
        vm.visible = false;

        vm.editSchools = editSchools;
        vm.addSchools = addSchools;

        vm.applyFilter = applyFilter;
        vm.toggleVisibility = toggleVisibility;
        vm.resetFilters = resetFilters;

        function toggleVisibility() {
            vm.visible = !vm.visible;
        }

        // Apply filters
        $scope.filter = {
            name: '',
            _typeDescription: ''
        };

        function applyFilter() {
            vm.filterParams = {
                name: $scope.filter.name,
                _typeDescription: $scope.filter._typeDescription
            };
        }

        function resetFilters() {

            vm.filterParams = {
                name: '',
                _typeDescription: ''
            };

            $scope.filter = {
                name: '',
                _typeDescription: ''
            };
        }

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+name';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }




        function editSchools(schoolId) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/schools-editor/views/school-editorDialog.html',
                controller: 'SchoolsEditorDialogController',
                controllerAs: 'ctrl',
                resolve: {
                    schoolsEntity: function(School) {
                        return School.get(schoolId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("Failed to retrieve");
                        });
                    }
                }
            });
        }

        function addSchools() {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/schools-editor/views/school-editorDialog.html',
                controller: 'SchoolsEditorDialogController',
                controllerAs: 'ctrl',
                resolve: {
                    schoolsEntity: function() {
                        var schools = {};
                        return schools;
                    }
                }
            });
        }

    }
})();
;/**
 * This is the AcademicYears Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */
(function() {
    'use strict';

    angular
        .module('SchoolsEditorDirective')
        .controller('SchoolsEditorDialogController', SchoolsEditorDialogController);

    SchoolsEditorDialogController.$inject = ['$uibModal', '$log', 'School', 'schoolsEntity', '$uibModalInstance', '$scope'];

    function SchoolsEditorDialogController($uibModal, $log, School, schoolsEntity, $uibModalInstance, $scope) {
        /* jshint validthis:true */
        var vm = this;
        vm.schools = schoolsEntity;

        vm.cancel = cancel;
        vm.save = save;


        var onSaveFinished = function(result) {
            $scope.$emit('schools-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        function save() {
            if (vm.schools.id) {
                School.save(vm.schools, onSaveFinished);
            } else {
                if (vm.schools.id !== null) {
                    School.create(vm.schools, onSaveFinished);
                }
            }

        }

    }

})();
;angular.module('SelectionBoxes').directive('academicYearSelection', function(AcademicYear) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs, controller) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;

        },
        controller: function(AcademicYear) {
            var vm = this;

            this.academicYears = [];

            this.init = function() {
                AcademicYear.query().then(function(response) {
                    vm.academicYears = response.data;
                }, function(err) {
                    alert("Error Retrieving AcademicYears");
                });
            };

            this.init();
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/academicYear/academic-year.selection.html',
    };
});
;angular.module('SelectionBoxes').directive('aimTypeSelection', ['AimType', function(AimType) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(AimType) {
            var vm = this;
            vm.aimTypes = [];

            AimType.query().then(function(response) {
                vm.aimTypes = response.data;
            }, function(err) {
                alert("Error Retrieving AimTypes");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/aimType/aim-type.selection.html',
    };
}]);
;angular.module('SelectionBoxes').directive('applicationStatusSelection', ['ApplicationStatus', function(ApplicationStatus) {

    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(ApplicationStatus) {
            var vm = this;
            vm.applicationStatuses = [];

            ApplicationStatus.query().then(function(response) {
                vm.applicationStatuses = response.data;
            }, function(response) {
                alert("Error Retrieving ApplicationStatuses");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/applicationStatus/application-status.selection.html',
    };
}]);
;angular.module('SelectionBoxes').directive('attendanceCodeSelection', ['AttendanceCode', function(AttendanceCode) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(AttendanceCode) {
            var vm = this;
            vm.attendanceCodes = [];
            AttendanceCode.query().then(function(response) {
                vm.attendanceCodes = response.data;
            }, function(response) {
                alert("Error Retrieving AttendanceCodes");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/attendanceCode/attendance-code.selection.html',
    };
}]);
;angular.module('SelectionBoxes').directive('attendanceMonitoringSelection', ['AttendanceMonitoring', function(AttendanceMonitoring) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(AttendanceMonitoring) {
            var vm = this;
            vm.attendanceMonitorings = [];
            AttendanceMonitoring.query().then(function(response) {
                vm.attendanceMonitorings = response.data;
            }, function(response) {
                alert("Error Retrieving AttendanceMonitorings");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/attendanceMonitoring/attendance-monitoring.selection.html',
    };
}]);
;angular.module('SelectionBoxes').directive('blockSelection', ['Block', function(Block) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(Block) {
            var vm = this;
            vm.blocks = [];
            Block.query().then(function(response) {
                vm.blocks = response.data;
            }, function(response) {
                alert("Error Retrieving Blocks");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/block/block.selection.html',
    };
}]);
;angular.module('SelectionBoxes').directive('centralMonitoringSelection', ['CentralMonitoring', function(CentralMonitoring) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(CentralMonitoring) {
            var vm = this;
            vm.centralMonitorings = [];
            CentralMonitoring.query().then(function(response) {
                vm.centralMonitorings = response.data;
            }, function(response) {
                alert("Error Retrieving CentralMonitorings");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/centralMonitoring/central-monitoring.selection.html',
    };
}]);
;angular.module('SelectionBoxes').directive('collegeFundPaidSelection', ['CollegeFundPaid', function(CollegeFundPaid) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(CollegeFundPaid) {
            var vm = this;
            vm.collegeFundPaids = [];

            CollegeFundPaid.query().then(function(response) {
                vm.collegeFundPaids = response.data;
            }, function(response) {
                alert("Error Retrieving Offer Types");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/collegeFundPaid/college-fund-paid.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('completionStatusSelection', ['CompletionStatus', function(CompletionStatus) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(CompletionStatus) {
            var vm = this;
            vm.completionStatuses = [];
            CompletionStatus.query().then(function(response) {
                vm.completionStatuses = response.data;
            }, function(response) {
                alert("Error Retrieving CompletionStatuses");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/completionStatus/completion-status.selection.html',
    };
}]);
;angular.module('SelectionBoxes').directive('contactTypeSelection', ['ContactType', function(ContactType) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(ContactType) {
            var vm = this;
            vm.contactTypes = [];

            ContactType.query().then(function(response) {
                vm.contactTypes = response.data;
            }, function(response) {
                alert("Error Retrieving Contact Types");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/contactType/contact-type.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('correspondenceTypeSelection', ['CorrespondenceType', function(CorrespondenceType) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(CorrespondenceType) {
            var vm = this;
            vm.correspondenceTypes = [];

            CorrespondenceType.query().then(function(response) {
                vm.correspondenceTypes = response.data;
            }, function(response) {
                alert("Error Retrieving CorrespondenceTypes");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/correspondenceType/correspondence-type.selection.html',
    };
}]);
;angular.module('SelectionBoxes').directive('departmentSelection', ['Department', function(Department) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(Department) {
            var vm = this;
            vm.departments = [];

            Department.query().then(function(response) {
                vm.departments = response.data;
            }, function(response) {
                alert("Error Retrieving Departments");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/department/department.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('destinationSelection', ['Destination', function(AimType) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(Destination) {
            var vm = this;
            vm.destinations = [];

            Destination.query().then(function(response) {
                vm.destinations = response.data;
            }, function(response) {
                alert("Error Retrieving Destination");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/destination/destination.selection.html',
    };
}]);
;angular.module('SelectionBoxes').directive('ediStatusTypeSelection', ['EdiStatusType', function(EdiStatusType) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(EdiStatusType) {
            var vm = this;
            vm.ediStatusTypes = [];

            EdiStatusType.query().then(function(response) {
                vm.ediStatusTypes = response.data;
            }, function(err) {
                alert("Error Retrieving EdiStatusTypes");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/ediStatusType/ediStatusType.selection.html',
    };
}]);
;angular.module('SelectionBoxes').directive('englishConditionOfFundingSelection', ['EnglishConditionOfFunding', function(EnglishConditionOfFunding) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel',
            includeBlank: '=?'
        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(EnglishConditionOfFunding) {
            var vm = this;
            vm.englishConditionOfFundings = [];

            EnglishConditionOfFunding.query().then(function(response) {
                vm.englishConditionOfFundings = response.data;
            }, function(response) {
                alert("Error Retrieving EnglishConditionOfFundings");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/englishConditionOfFunding/english-condition-of-funding.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('entryQualificationSelection', ['EntryQualification', function(EntryQualification) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(EntryQualification) {
            var vm = this;
            vm.entryQualifications = [];

            EntryQualification.query().then(function(response) {
                vm.entryQualifications = response.data;
            }, function(response) {
                alert("Error Retrieving EntryQualifications");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/entryQualification/entry-qualification.selection.html',
    };
}]);
;angular.module('SelectionBoxes').directive('entryQualificationTypeSelection', ['EntryQualificationType', function(EntryQualificationType) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(EntryQualificationType) {
            var vm = this;
            vm.entryQualificationTypes = [];

            EntryQualificationType.query().then(function(response) {
                vm.entryQualificationTypes = response.data;
            }, function(response) {
                alert("Error Retrieving EntryQualificationTypes");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/entryQualificationType/entry-qualification-type.selection.html',
    };
}]);
;angular.module('SelectionBoxes').directive('ethnicitySelection', ['Ethnicity', function(Ethnicity) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(Ethnicity) {
            var vm = this;
            vm.ethnicities = [];
            Ethnicity.query().then(function(response) {
                vm.ethnicities = response.data;
            }, function(response) {
                alert("Error Retrieving Ethnicities");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/ethnicity/ethnicity.selection.html',

    };
}]);
;(function() {
    angular
        .module('SelectionBoxes')
        .directive('examBoardSelection', examBoardSelectionDirective);

    examBoardSelectionDirective.$inject = ['ExamBoard'];

    function examBoardSelectionDirective(ExamBoard) {
        return {
            restrict: 'E',
            scope: {
                id: '@',
                class: '@',
                readonly: '=?',
                ngmodelvar: '=ngModel',
                includeBlank: '=?'
            },
            link: function(scope, element, attrs) {
                element[0].removeAttribute('id');
                element[0].removeAttribute('class');
                element[0].removeAttribute('readonly');
                element[0].disable = scope.readonly;
            },
            controller: function(ExamBoard) {
                var vm = this;
                vm.examBoards = [];

                ExamBoard.query().then(function(response) {
                    vm.examBoards = response.data;
                }, function(response) {
                    alert("Error Retrieving Contact Types");
                });
            },
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/selections/examBoard/exam-board.selection.html',
        };
    }
})();
;angular.module('SelectionBoxes').directive('examComponentSelection', ['Component', function(Component) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(ExamSession) {
            var vm = this;
            vm.rooms = [];

            Component.query().then(function(response) {
                vm.examComponents = response.data;
            }, function(response) {
                alert("Error Retrieving Exam Components");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/examComponent/examComponent.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('examSeriesSelection', ['ExamSeries', function(ExamSeries) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readOnly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('read-only');
            element[0].disable = scope.readOnly;
        },
        controller: function(ExamSeries) {
            var vm = this;
            vm.examSeries = [];

            ExamSeries.query().then(function(response) {
                vm.examSeries = response.data;
            }, function(err) {
                alert("Error Retrieving Exam Series");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/examSeries/exam-series.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('examSessionSelection', ['ExamSession', function(Room) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(ExamSession) {
            var vm = this;
            vm.rooms = [];

            ExamSession.query().then(function(response) {
                vm.examSessions = response.data;
            }, function(response) {
                alert("Error Retrieving Exam Sessions");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/examSession/examSession.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('facultySelection', ['Faculty', function(Faculty) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(Faculty) {
            var vm = this;
            vm.faculties = [];

            Faculty.query().then(function(response) {
                vm.faculties = response.data;
            }, function(response) {
                alert("Error Retrieving Faculties");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/faculty/faculty.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('fundingModelSelection', ['FundingModel', function(FundingModel) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(FundingModel) {
            var vm = this;
            vm.fundingModels = [];
            FundingModel.query().then(function(response) {
                vm.fundingModels = response.data;
            }, function(response) {
                alert("Error Retrieving FundingModels");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/fundingModel/funding-model.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('genderSelection', ['Gender', function(Gender) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(Gender) {
            var vm = this;
            vm.genders = [];

            Gender.query().then(function(response) {
                vm.genders = response.data;
            }, function(response) {
                alert("Error Retrieving Genders");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/gender/gender.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('ilpInterviewTypeSelection', ['ILPInterviewType', function(ILPInterviewType) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(ILPInterviewType) {
            var vm = this;
            vm.iLPInterviewTypes = [];

            ILPInterviewType.query().then(function(response) {
                vm.iLPInterviewTypes = response.data;
            }, function(response) {
                alert("Error Retrieving ILPInterviewTypes");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/ilp-interview-type/ilp-interview-type.selection.html',
    };
}]);
;angular.module('SelectionBoxes').directive('letterTypeSelection', ['LetterType', function(LetterType) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(LetterType) {
            var vm = this;
            vm.letterTypes = [];

            LetterType.query().then(function(response) {
                vm.letterTypes = response.data;
            }, function(response) {
                alert("Error Retrieving LetterTypes");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/letterType/letter-type.selection.html',
    };
}]);
;angular.module('SelectionBoxes').directive('levelSelection', ['Level', function(Level) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(Level) {
            var vm = this;
            vm.levels = [];

            Level.query().then(function(response) {
                vm.levels = response.data;
            }, function(response) {
                alert("Error Retrieving Levels");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/level/level.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('llddHealthProblemSelection', ['LLDDHealthProblem', function(LLDDHealthProblem) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(LLDDHealthProblem) {
            var vm = this;
            vm.lLDDHealthProblems = [];

            LLDDHealthProblem.query().then(function(response) {
                vm.lLDDHealthProblems = response.data;
            }, function(response) {
                alert("Error Retrieving LLDDHealthProblems");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/llddHealthProblem/lldd-health-problem.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('llddHealthProblemCategorySelection', ['LLDDHealthProblemCategory', function(LLDDHealthProblemCategory) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(LLDDHealthProblemCategory) {
            var vm = this;
            vm.lLDDHealthProblemCategories = [];

            LLDDHealthProblemCategory.query().then(function(response) {
                vm.lLDDHealthProblemCategories = response.data;
            }, function(response) {
                alert("Error Retrieving LLDDHealthProblemCategories");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/llddHealthProblemCategory/lldd-health-problem-category.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('mathsConditionOfFundingSelection', ['MathsConditionOfFunding', function(MathsConditionOfFunding) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel',
            includeBlank: '=?'
        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(MathsConditionOfFunding) {
            var vm = this;
            vm.mathsConditionOfFundings = [];


            MathsConditionOfFunding.query().then(function(response) {
                vm.mathsConditionOfFundings = response.data;
            }, function(response) {
                alert("Error Retrieving MathsConditionOfFundings");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/mathsConditionOfFunding/maths-condition-of-funding.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('nationalitySelection', ['Nationality', function(Nationality) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(Nationality) {
            var vm = this;
            vm.nationalities = [];

            Nationality.query().then(function(response) {
                vm.nationalities = response.data;
            }, function(response) {
                alert("Error Retrieving Nationalities");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/nationality/nationality.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('noteTypeSelection', ['NoteType', function(NoteType) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(NoteType) {
            var vm = this;
            vm.noteTypes = [];

            NoteType.query().then(function(response) {
                vm.noteTypes = response.data;
            }, function(response) {
                alert("Error Retrieving Note Types");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/noteType/note-type.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('offerTypeSelection', ['OfferType', function(OfferType) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(OfferType) {
            var vm = this;
            vm.offerTypes = [];

            OfferType.query().then(function(response) {
                vm.offerTypes = response.data;
            }, function(response) {
                alert("Error Retrieving Offer Types");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/offerType/offer-type.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('outcomeSelection', ['Outcome', function(Outcome) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel',
        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(Outcome) {
            var vm = this;
            vm.outcomes = [];

            Outcome.query().then(function(response) {
                vm.outcomes = response.data;
            }, function(response) {
                alert("Error Retrieving Outcomes");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/outcome/outcome.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('periodSelection', ['Period', function(Period) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(Period) {
            var vm = this;
            vm.periods = [];

            Period.query().then(function(response) {
                vm.periods = response.data;
            }, function(response) {
                alert("Error Retrieving Periods");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/period/period.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('possibleGradeSelection', ['PossibleGrade', function(PossibleGrade) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(PossibleGrade) {
            var vm = this;
            vm.possibleGrades = [];

            PossibleGrade.query().then(function(response) {
                vm.possibleGrades = response.data;
            }, function(response) {
                alert("Error Retrieving PossibleGrades");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/possibleGrade/possible-grade.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('possibleGradeSetSelection', ['PossibleGradeSet', function(PossibleGradeSet) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(PossibleGradeSet) {
            var vm = this;
            vm.possibleGradeSets = [];

            PossibleGradeSet.query().then(function(response) {
                vm.possibleGradeSets = response.data;
            }, function(response) {
                alert("Error Retrieving PossibleGradeSets");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/possibleGradeSet/possible-grade-set.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('priorAttainmentSelection', ['PriorAttainment', function(PriorAttainment) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(PriorAttainment) {
            var vm = this;
            vm.priorAttainments = [];

            PriorAttainment.query().then(function(response) {
                vm.priorAttainments = response.data;
            }, function(response) {
                alert("Error Retrieving PriorAttainments");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/priorAttainment/prior-attainment.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('programmeTypeSelection', ['ProgrammeType', function(ProgrammeType) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(ProgrammeType) {
            var vm = this;
            vm.programmeTypes = [];

            ProgrammeType.query().then(function(response) {
                vm.programmeTypes = response.data;
            }, function(response) {
                alert("Error Retrieving Programme Types");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/programmeType/programme-type.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('punctualityMonitoringSelection', ['PunctualityMonitoring', function(PunctualityMonitoring) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(PunctualityMonitoring) {
            var vm = this;
            vm.punctualityMonitorings = [];
            PunctualityMonitoring.query().then(function(response) {
                vm.punctualityMonitorings = response.data;
            }, function(response) {
                alert("Error Retrieving PunctualityMonitorings");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/punctualityMonitoring/punctuality-monitoring.selection.html',
    };
}]);
;angular.module('SelectionBoxes').directive('restrictedUseIndicatorSelection', ['RestrictedUseIndicator', function(RestrictedUseIndicator) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(RestrictedUseIndicator) {
            var vm = this;
            vm.restrictedUseIndicators = [];

            RestrictedUseIndicator.query().then(function(response) {
                vm.restrictedUseIndicators = response.data;
            }, function(response) {
                alert("Error Retrieving RestrictedUseIndicators");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/restrictedUseIndicator/restricted-use-indicator.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('roleSelection', ['Role', function(Role) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(Role) {
            var vm = this;
            vm.roles = [];

            Role.query().then(function(response) {
                vm.roles = response.data;
            }, function(response) {
                alert("Error Retrieving Roles");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/role/role.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('roomSelection', ['Room', function(Room) {
    return {
        restrict: 'E',
        require: 'ngModel',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs, ctrl) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
            scope.updateModel = function(item) {
                ctrl.$setViewValue(item);
            };
        },
        controller: function(Room) {
            var vm = this;
            vm.rooms = [];

            Room.query().then(function(response) {
                vm.rooms = response.data;
            }, function(response) {
                alert("Error Retrieving Rooms");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/room/room.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('roomTypeSelection', ['RoomType', function(RoomType) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(RoomType) {
            var vm = this;
            vm.roomTypes = [];

            RoomType.query().then(function(response) {
                vm.roomTypes = response.data;
            }, function(response) {
                alert("Error Retrieving RoomTypes");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/roomType/roomType.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('schoolSelection', ['School', function(School) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(School) {
            var vm = this;
            vm.schools = [];

            School.query().then(function(response) {
                vm.schools = response.data;
            }, function(response) {
                alert("Error Retrieving School Types");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/school/school.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('schoolPrioritySelection', ['SchoolPriority', function(SchoolPriority) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(SchoolPriority) {
            var vm = this;
            vm.schoolPriorities = [];

            SchoolPriority.query().then(function(response) {
                vm.schoolPriorities = response.data;
            }, function(response) {
                alert("Error Retrieving School Priority");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/schoolPriority/school-priority.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('schoolReportStatusSelection', ['SchoolReportStatus', function(SchoolReportStatus) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(SchoolReportStatus) {
            var vm = this;
            vm.schoolReportStatus = [];

            SchoolReportStatus.query().then(function(response) {
                vm.schoolReportStatus = response.data;
            }, function(response) {
                alert("Error Retrieving  School Report Status");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/schoolReportStatus/school-report-status.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('schoolTypeSelection', function(SchoolType) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function($scope, SchoolType) {
            var vm = this;
            vm.schoolTypes = [];

            SchoolType.query().then(function(response) {
                vm.schoolTypes = response.data;
                $scope.schoolTypes = response.data;
            }, function(err) {
                alert("Error Retrieving School Types");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/schoolType/school-type.selection.html',

    };
});
;angular.module('SelectionBoxes').directive('sourceOfFundingSelection', ['SourceOfFunding', function(SourceOfFunding) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(SourceOfFunding) {
            var vm = this;
            vm.sourceOfFundings = [];
            SourceOfFunding.query().then(function(response) {
                vm.sourceOfFundings = response.data;
            }, function(err) {
                alert("Error Retrieving SourceOfFundings");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/sourceOfFunding/source-of-funding.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('specialCategorySelection', ['SpecialCategory', function(SpecialCategory) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(SpecialCategory) {
            var vm = this;
            vm.specialCategories = [];

            SpecialCategory.query().then(function(response) {
                vm.specialCategories = response.data;
            }, function(err) {
                alert("Error Retrieving special categories");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/specialCategory/special-category.selection.html',

    };
}]);
;/**
 * This directive is used to create a selection box of the staff.
 *
 * @type Directive
 * @example <staff-selection ng-model="ctrl.staffId"></staff-selection>
 */
(function() {
    angular
        .module('SelectionBoxes')
        .directive('staffSelection', staffSelectionDirective);

    staffSelectionDirective.$inject = ['Staff'];

    function staffSelectionDirective(Staff) {
        return {
            restrict: 'E',
            scope: {
                id: '@',
                class: '@',
                readonly: '=?',
                ngmodelvar: '=ngModel',
                includeBlank: '=?'
            },
            link: function(scope, element, attrs) {
                element[0].removeAttribute('id');
                element[0].removeAttribute('class');
                element[0].removeAttribute('readonly');
                element[0].disable = scope.readonly;
            },
            controller: ['$scope', 'Staff', function($scope, Staff) {
                var vm = this;
                this.staff = [];

                Staff.query().then(function(response) {
                    vm.staff = response.data;
                }, function(response) {
                    bootbox.alert("Failed to load staff list");
                });
            }],
            controllerAs: 'ctrl',
            templateUrl: 'js/directives/selections/staff/staff.selection.html'
        };
    }
})();
;angular.module('SelectionBoxes').directive('staffTypeSelection', ['StaffType', function(StaffType) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(StaffType) {
            var vm = this;
            vm.staffTypes = [];

            StaffType.query().then(function(response) {
                vm.staffTypes = response.data;
            }, function(response) {
                alert("Error Retrieving Staff Types");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/staffType/staff-type.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('statusTypeSelection', ['StatusType', function(StatusType) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(StatusType) {
            var vm = this;
            vm.statusTypes = [];

            StatusType.query().then(function(response) {
                vm.statusTypes = response.data;
            }, function(err) {
                alert("Error Retrieving StatusTypes");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/statusType/status-type.selection.html',
    };
}]);
;angular.module('SelectionBoxes').directive('studentRemarkPermissionSelection', ['StudentRemarkPermission', function(StudentRemarkPermission) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(StudentRemarkPermission) {
            var vm = this;
            vm.studentRemarkPermissions = [];

            StudentRemarkPermission.query().then(function(response) {
                vm.studentRemarkPermissions = response.data;
            }, function(response) {
                alert("Error Retrieving StudentRemarkPermissions");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/studentRemarkPermission/student-remark-permission.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('studentTypeSelection', ['StudentType', function(StudentType) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(StudentType) {
            var vm = this;
            vm.studentTypes = [];

            StudentType.query().then(function(response) {
                vm.studentTypes = response.data;
            }, function(response) {
                alert("Error Retrieving Student Types");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/studentType/student-type.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('supportTypeSelection', ['SupportType', function(SupportType) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(SupportType) {
            var vm = this;
            vm.supportTypes = [];

            SupportType.query().then(function(response) {
                vm.supportTypes = response.data;
            }, function(response) {
                alert("Error Retrieving SupportTypes");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/supportType/support-type.selection.html',
    };
}]);
;angular.module('SelectionBoxes').directive('titleSelection', function(Title) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel',
            includeBlank: '=?'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(Title) {
            var vm = this;
            vm.titles = [];

            Title.query().then(function(response) {
                vm.titles = response.data;
            }, function(response) {
                bootbox.alert("Error Retrieving Titles");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/title/title.selection.html',

    };
});
;angular.module('SelectionBoxes').directive('tutorGroupSelection', ['TutorGroup', function(TutorGroup) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(TutorGroup) {
            var vm = this;
            vm.tutorGroups = [];

            TutorGroup.query().then(function(response) {
                vm.tutorGroups = response.data;
            }, function(response) {
                alert("Error Retrieving TutorGroups");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/tutorGroup/tutor-group.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('withdrawalReasonSelection', ['WithdrawalReason', function(WithdrawalReason) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel',
            includeBlank: '=?'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(WithdrawalReason) {
            var vm = this;
            vm.withdrawalReasons = [];

            WithdrawalReason.query().then(function(response) {
                vm.withdrawalReasons = response.data;
            }, function(response) {
                alert("Error Retrieving WithdrawalReasons");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/withdrawalReason/withdrawal-reason.selection.html',

    };
}]);
;angular.module('SelectionBoxes').directive('yearGroupSelection', ['YearGroup', function(YearGroup) {
    return {
        restrict: 'E',
        scope: {
            id: '@',
            class: '@',
            readonly: '=?',
            ngmodelvar: '=ngModel'

        },
        link: function(scope, element, attrs) {
            element[0].removeAttribute('id');
            element[0].removeAttribute('class');
            element[0].removeAttribute('readonly');
            element[0].disable = scope.readonly;
        },
        controller: function(YearGroup) {
            var vm = this;
            vm.yearGroups = [];

            YearGroup.query().then(function(response) {
                vm.yearGroups = response.data;
            }, function(response) {
                alert("Error Retrieving YearGroups");
            });
        },
        controllerAs: 'ctrl',
        templateUrl: 'js/directives/selections/yearGroup/year-group.selection.html',

    };
}]);
;/**
 * This is the Settings Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */



(function() {
    'use strict';

    angular
        .module('SettingsEditorDirective')
        .controller('SettingsEditorController', SettingsEditorController);


    SettingsEditorController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModal', 'Settings'];

    function SettingsEditorController($log, $scope, $state, $rootScope, $uibModal, Settings) {
        /* jshint validthis:true */
        var vm = this;

        vm.settings = [];
        vm.searchText = '';
        vm.visible = false;
        vm.editSettings = editSettings;
        vm.addSettings = addSettings;
        vm.searchText = '';
        vm.visible = false;

        vm.applyFilter = applyFilter;
        vm.toggleVisibility = toggleVisibility;
        vm.resetFilters = resetFilters;

        function toggleVisibility() {
            vm.visible = !vm.visible;
        }

        // Apply filters
        $scope.filter = {
            code: '',
            description: ''
        };

        function applyFilter() {
            vm.filterParams = {
                setting: $scope.filter.setting,
                description: $scope.filter.description
            };
        }

        function resetFilters() {

            vm.filterParams = {
                setting: '',
                description: ''
            };

            $scope.filter = {
                setting: '',
                description: ''
            };
        }

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+setting';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function editSettings(id) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/settings-editor/views/settings-editorDialog.html',
                controller: 'SettingsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    settingsEntity: function(Settings) {
                        return Settings.get(id).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("Failed to retrieve");
                        });
                    }
                }
            });
        }

        function addSettings() {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/settings-editor/views/settings-editorDialog.html',
                controller: 'SettingsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    settingsEntity: function() {
                        var settings = {};
                        return settings;
                    }
                }
            });
        }


    }



})();
;/**
 * This is the Settings Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('SettingsEditorDirective')
        .controller('SettingsEditorDialogController', SettingsEditorDialogController);

    SettingsEditorDialogController.$inject = ['settingsEntity', '$uibModalInstance', '$uibModal', 'Settings', '$scope'];

    function SettingsEditorDialogController(settingsEntity, $uibModalInstance, $uibModal, Settings, $scope) {
        /* jshint validthis:true */
        var vm = this;

        vm.settings = settingsEntity !== undefined ? settingsEntity : {};

        vm.save = save;
        vm.cancel = cancel;


        function onSaveFinished(result) {
            $scope.$emit('settings-saved', result);
            $uibModalInstance.close(result);
        }


        function save() {
            if (vm.settings.id) {
                Settings.save(vm.settings, onSaveFinished);
            } else {
                if (vm.settings.id !== null) {
                    Settings.create(vm.settings, onSaveFinished);
                }
            }
        }

        function cancel() {
            $uibModalInstance.dismiss("cancel");
        }

    }




})();
;/**
 * This is the SpecialCategories Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('SpecialCategoriesEditorDirective')
        .controller('SpecialCategoriesEditorController', SpecialCategoriesEditorController);

    SpecialCategoriesEditorController.$inject = ['$log', '$uibModal', '$scope', 'SpecialCategory'];

    function SpecialCategoriesEditorController($log, $uibModal, $scope, SpecialCategory) {
        /* jshint validthis:true */
        var vm = this;
        vm.specialCategories = [];

        vm.loadSpecialCategories = loadSpecialCategories;
        vm.editSpecialCategories = editSpecialCategories;
        vm.addSpecialCategories = addSpecialCategories;

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+code';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }


        function loadSpecialCategories() {
            SpecialCategory.query().then(function(response) {
                vm.specialCategories = response.data;
                $log.info("Loading SpecialCategories ");
            }, function(response) {
                $log.error("Failed to load SpecialCategories");
            });
        }


        function editSpecialCategories(specialCategoryId) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/special-categories-editor/views/special-categories-editorDialog.html',
                controller: 'SpecialCategoriesEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    specialCategoriesEntity: function(SpecialCategory) {
                        return SpecialCategory.get(specialCategoryId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadSpecialCategories();
            });

        }


        function addSpecialCategories() {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/special-categories-editor/views/special-categories-editorDialog.html',
                controller: 'SpecialCategoriesEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    specialCategoriesEntity: function() {
                        var specialCategories = {};
                        return specialCategories;
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadSpecialCategories();
            });

        }
    }

})();
;/**
 * This is the SpecialCategory Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('SpecialCategoriesEditorDirective')
        .controller('SpecialCategoriesEditorDialogController', SpecialCategoriesEditorDialogController);

    SpecialCategoriesEditorDialogController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModalInstance', 'SpecialCategory', 'specialCategoriesEntity'];

    function SpecialCategoriesEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, SpecialCategory, specialCategoriesEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.specialCategories = specialCategoriesEntity !== undefined ? specialCategoriesEntity : {};

        vm.cancel = cancel;
        vm.save = save;

        var onSaveFinished = function(result) {
            $scope.$emit('special-category-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        function save() {
            if (vm.specialCategories.id) {
                SpecialCategory.save(vm.specialCategories, onSaveFinished);
            } else {
                if (vm.specialCategories.id !== null) {
                    SpecialCategory.create(vm.specialCategories, onSaveFinished);
                }
            }
        }

    }


})();
;/**
 * This is the Staffs Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('StaffsEditorDirective')
        .controller('StaffsEditorController', StaffsEditorController);

    StaffsEditorController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModal', 'Staff'];

    function StaffsEditorController($log, $scope, $state, $rootScope, $uibModal, Staff) {
        /* jshint validthis:true */
        var vm = this;
        if ($scope.staffs) {
            vm.staffs = $scope.staffs;
        } else {
            vm.staffs = [];
        }
        vm.staff = {};

        vm.searchText = '';
        vm.visible = false;

        vm.loadStaffs = loadStaffs;
        vm.editStaffs = editStaffs;
        vm.addStaffs = addStaffs;

        vm.applyFilter = applyFilter;
        vm.toggleVisibility = toggleVisibility;
        vm.resetFilters = resetFilters;

        function toggleVisibility() {
            vm.visible = !vm.visible;
        }

        // Apply filters
        $scope.filter = {
            initials: '',
            knownAs: ''
        };

        function applyFilter() {
            vm.filterParams = {
                initials: $scope.filter.initials,
                knownAs: $scope.filter.knownAs
            };
        }

        function resetFilters() {

            vm.filterParams = {
                initials: '',
                knownAs: ''
            };

            $scope.filter = {
                initials: '',
                knownAs: ''
            };
        }

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+code';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }



        function loadStaffs() {
            Staff.query().then(function(response) {
                vm.staffs = response.data;
                $log.info("Loading Staffs");
            }, function(response) {
                $log.error("Failed to load Staffs");
            });
        }


        function editStaffs(staffId) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/staffs-editor/views/staffs-editorDialog.html',
                controller: 'StaffsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    staffsEntity: function(Staff) {
                        return Staff.get(staffId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadStaffs();
            });

        }


        function addStaffs() {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/staffs-editor/views/staffs-editorDialog.html',
                controller: 'StaffsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    staffsEntity: function() {
                        var staffs = {};
                        return staffs;
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadStaffs();
            });

        }
    }

})();
;/**
 * This is the Staff Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';
    angular
        .module('StaffsEditorDirective')
        .controller('StaffsEditorDialogController', StaffsEditorDialogController);

    StaffsEditorDialogController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModalInstance', 'Staff', 'staffsEntity', 'Person'];

    function StaffsEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, Staff, staffsEntity, Person) {
        /* jshint validthis:true */
        var vm = this;
        vm.staffs = staffsEntity !== undefined ? staffsEntity : {};

        vm.cancel = cancel;
        vm.save = save;
        vm.add = add;

        var onSaveFinished = function(result) {
            $scope.$emit('staffs-saved', result);
            $uibModalInstance.close(result);
        };

        function add() {
            if (vm.staffs.person.roles.id) {
                var roles = vm.staffs.person.roles;
                roles.push({
                    id: roles.id,
                    roleName: roles.roleName
                });
                Person.save(vm.staffs.person).then(function(response) {
                    Person.get(vm.staffs.personId).then(function(response) {
                        vm.staffs.person = response.data;
                    });

                });
            }
        }


        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        function save() {
            if (vm.staffs.id) {
                Staff.save(vm.staffs, onSaveFinished);
            } else {
                if (vm.staffs.id !== null) {
                    Staff.create(vm.staffs, onSaveFinished);
                }
            }
        }

    }


})();
;/**
 * This is the Student Admissions Details Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('StudentAdmissionsDetailsDirective')
        .controller('StudentAdmissionsDetailsDirectiveController', StudentAdmissionsDetailsDirectiveController);

    StudentAdmissionsDetailsDirectiveController.$inject = ['$log', '$scope', '$rootScope', 'Student'];

    function StudentAdmissionsDetailsDirectiveController($log, $scope, $rootScope, Student) {
        var vm = this;

        this.message = '';

        this.studentAdmissions = this.studentAdmissions ? this.studentAdmissions : {};

        this.init = function() {};


        this.hasData = function() {
            if (vm.studentAdmissions) {
                return true;
            } else {
                return false;
            }
        };

        this.init();
    }
})();
;/**
 * This is the College Fund Payment Dialog Controller it is used to control the
 * dialog box used to add and edit a college fund payment.
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */
(function() {
    'use strict';

    angular
        .module('StudentAlternativeUciTableDirective')
        .controller('StudentAlternativeUciEditorDialogController', StudentAlternativeUciEditorDialogController);

    StudentAlternativeUciEditorDialogController.$inject = ['$log', '$scope', '$q', '$uibModalInstance', '$uibModal', '$window', 'studentAlternativeUciEntity', 'StudentAlternativeUci'];

    function StudentAlternativeUciEditorDialogController($log, $scope, $q, $uibModalInstance, $uibModal, $window, studentAlternativeUciEntity, StudentAlternativeUci) {
        /* jshint validthis:true */
        var vm = this;

        // Public Interface
        vm.studentAlternativeUci = studentAlternativeUciEntity !== undefined ? studentAlternativeUciEntity : {};

        vm.examBoardId = vm.studentAlternativeUci.examBoardId;

        this.saveAdd = saveAdd;
        this.saveEdit = saveEdit;
        this.cancel = cancel;

        // Private Interface

        var onSaveFinished = function(result) {
            $scope.$emit('StudentAlternativeUci-saved', result);
            $uibModalInstance.close(result);
        };

        /**
         * This method is used to save the student alternative Uci that is being
         * added in the dialog
         */
        function saveAdd() {
            $log.debug('StudentAlternativeUciEditorDialogController::AddSave called');
            if (vm.studentAlternativeUci.studentId !== null) {
                $log.debug('StudentAlternativeUciEditorDialogController::create');
                StudentAlternativeUci.create(vm.studentAlternativeUci, onSaveFinished);
            }
        }

        /**
         * This methods is used to update the student alternative Uci that is being
         * edited in the dialog
         */
        function saveEdit() {
            $log.debug('StudentAlternativeUciEditorDialogController::EditSave called');
            if (vm.examBoardId !== vm.studentAlternativeUci.examBoardId) {
                $q.all([
                    StudentAlternativeUci.delete(vm.studentAlternativeUci.studentId, vm.examBoardId),
                    StudentAlternativeUci.create(vm.studentAlternativeUci)
                ]).then(function(response) {
                    // Both promises succeed
                    $log.info("II Student Alternative UCI changed successfully");
                    onSaveFinished();
                }, function(response) {
                    // A promise failed
                    $log.info("EE A problem occurred edit the student alternaitve UCI");
                    onSaveFinished();
                });
            } else {
                StudentAlternativeUci.save(vm.studentAlternativeUci, onSaveFinished);
            }
        }


        /**
         * This method is used to cancel the edit operation and close the dialog
         * box.
         */
        function cancel() {
            $log.debug('StudentAlternativeUciEditorDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
;/**
 * This is the Student Alternative Uci Editor Controller
 * 
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 * 
 * @type Controller
 */

(function() {
    'use strict';
    angular
        .module('StudentAlternativeUciTableDirective')
        .controller('StudentAlternativeUciTableController', StudentAlternativeUciTableController);

    StudentAlternativeUciTableController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModal', 'StudentAlternativeUci'];

    function StudentAlternativeUciTableController($log, $scope, $state, $rootScope, $uibModal, StudentAlternativeUci) {
        /* jshint validthis:true */
        var vm = this;
        vm.dialog = {};
        vm.studentId = vm.studentId ? vm.studentId : undefined;
        vm.studentAlternativeUcis = vm.studentAlternativeUcis ? vm.studentAlternativeUcis : [];

        vm.loadStudentAlternativeUci = loadStudentAlternativeUci;
        vm.addStudentAlternativeUci = addStudentAlternativeUci;
        vm.editStudentAlternativeUci = editStudentAlternativeUci;
        vm.deleteAlternativeUci = deleteAlternativeUci;

        /*
         * this.init = function(){ $log.info('II EntryQualifications Editor
         * Initialised'); this.loadStudentAlternativeUci(this.studentId); };
         */
        // Private Interface

        function loadStudentAlternativeUci(studentId) {
            $log.debug('Loading StudentAlternativeUci Table');
            StudentAlternativeUci.getByStudent(studentId).then(function(response) {
                $log.debug('Student Alternative UCI Loaded');
                vm.studentAlternativeUcis = response.data;
            }, function(response) {
                $log.error('Error Student Alternative Ucis could not be loaded');
            });
        }

        function addStudentAlternativeUci(studentId) {
            $log.debug('StudentAlternativeUciTableController: addStudentAlternativeUci called: student Id--' + studentId);
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/student-alternative-uci-table-editor/views/student-alternative-ucis-editor-dialog-add.html',
                controller: 'StudentAlternativeUciEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    studentAlternativeUciEntity: function() {
                        var StudentAlternativeUci = {};
                        StudentAlternativeUci.studentId = studentId;
                        return StudentAlternativeUci;
                    }
                }
            });
            modalInstance.result.then().finally(function() {
                vm.loadStudentAlternativeUci(vm.studentId);
            });


        }


        /**
         * This methods is used to open the edit student alternative uci dialog
         * box
         * 
         * @param studentId
         * @param examBoardId
         */
        function editStudentAlternativeUci(alternativeUci) {

            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/student-alternative-uci-table-editor/views/student-alternative-ucis-editor-dialog-edit.html',
                controller: 'StudentAlternativeUciEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    studentAlternativeUciEntity: function() {
                        /* return StudentAlternativeUci.getByStudentAndExamBoardId(studentId,examBoardId).then(function(response) {
                         return response.data;
                         }, function(response) {
                             alert("failed to retrieve");
                         });*/

                        var StudentAlternativeUci = {};
                        StudentAlternativeUci = alternativeUci;
                        return StudentAlternativeUci;
                    }
                }
            });
            // Reload StudentALternativeUci after dialog closed
            modalInstance.result.then().finally(function() {
                vm.loadStudentAlternativeUci(vm.studentId);
            });
        }

        /**
         * This methods is used to delete the  student alternative uci dialog
         * box
         * 
         * @param studentId
         * @param examBoardId
         */
        function deleteAlternativeUci(studentId, examBoardId) {
            if (studentId, examBoardId) {
                var msg = "Are you sure you want to delete the Alternative UCI?";
                if (window.confirm(msg)) {
                    StudentAlternativeUci.delete(studentId, examBoardId).then(function(response) {
                        $log.info("II StudentAlternativeUci ($studentId)(examBoardId) has been deleted");
                    }, function(response) {
                        $log.info("EE A problem occurred trying to delete StudentAlternativeUci ($studentId)(examBoardId)");
                    }).finally(function() {
                        vm.loadStudentAlternativeUci(vm.studentId);
                    });

                }
            }
        }

    }

})();
;/**
 * This is the StudentConcessionType Table Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('StudentConcessionTypeTableDirective')
        .controller('StudentConcessionTypeTableDirectiveController', StudentConcessionTypeTableDirectiveController);

    StudentConcessionTypeTableDirectiveController.$inject = ['$log', '$scope', '$state', '$rootScope', 'StudentConcessionType'];

    function StudentConcessionTypeTableDirectiveController($log, $scope, $state, $rootScope, StudentConcessionType) {
        var vm = this;

        vm.studentId = $scope.studentId ? $scope.studentId : undefined;
        vm.studentConcessionTypes = vm.studentConcessionTypes ? vm.studentConcessionTypes : [];

        this.init = function() {
            $log.debug('StudentConcessionTypeTableDirectiveController::init called');
        };

        StudentConcessionType.get(vm.studentId).then(function(response) {
            $log.debug(response.data);
            vm.studentConcessionTypes = response.data;
        }, function(response) {
            $log.debug("EE - Failed to retrieve data for StudentConcessionType");
        });


    }


})();
;/**
 * This is the Student Contact Preferences Editor Dialog Controller
 * 
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 * 
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('StudentContactPreferencesEditorDirective')
        .controller('StudentContactPreferencesEditorDialogController', StudentContactPreferencesEditorDialogController);

    StudentContactPreferencesEditorDialogController.$inject = ['$log', '$scope', '$state', '$uibModalInstance', '$uibModal', '$rootScope', 'studentEntity', 'Student'];

    function StudentContactPreferencesEditorDialogController($log, $scope, $state, $uibModalInstance, $uibModal, $rootScope, studentEntity, Student) {
        /* jshint validthis:true */
        var vm = this;

        vm.student = studentEntity !== undefined ? studentEntity : {};
        vm.save = save;
        vm.cancel = cancel;


        var onSaveFinished = function(result) {
            $log.info('II StudentContactPreferences Saved');
            $scope.$emit('studentContactPreferences-saved', result);
            $uibModalInstance.close(result);
        };


        function save() {
            $log.log('StudentContactPreferencesDialogController::save called');
            $log.info(vm.student);
            if (vm.student.id) {
                Student.save(vm.student, onSaveFinished);
            } else {
                return null;
            }
        }


        function cancel() {
            $log.log('StudentContactPreferencesDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        }

    }

})();
;/**
 * This is the Student Contact Preferences Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('StudentContactPreferencesEditorDirective')
        .controller('StudentContactPreferencesEditorController', StudentContactPreferencesEditorController);

    StudentContactPreferencesEditorController.$inject = ['$log', '$scope', '$rootScope', '$uibModal', 'Student'];

    function StudentContactPreferencesEditorController($log, $scope, $rootScope, $uibModal, Student) {
        /* jshint validthis:true */
        var vm = this;

        vm.student = vm.student ? vm.student : {};
        vm.studentId = vm.studentId ? vm.studentId : undefined;

        vm.init = init;
        vm.loadStudent = loadStudent;
        vm.editStudentContactPreference = editStudentContactPreference;

        $scope.hasData = function() {
            if ($scope.student && $scope.student !== undefined) {
                return true;
            } else {
                return false;
            }
        };


        function init() {
            $log.log('StudentYearDetailsDirectiveController::init called');
            if (vm.student === undefined) {
                vm.loadStudent(vm.studentId);
            } else {
                vm.studentId = vm.student.studentId;
            }
        }

        function loadStudent(studentId) {
            Student.get(studentId).then(function(response) {
                $log.info('II StudentYear Loaded');
                vm.student = response.data;
                $log.info(vm.student);
            }, function(response) {
                $log.error('EE students could not be loaded');
            });
        }

        //update the StudentYear information
        function editStudentContactPreference(studentId) {
            $log.log('StudentContactPreferencesDetailsDirectiveController::editContactPreferences called');
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/student-contact-preferences-editor/views/student-contact-preferences-editor-dialog.html',
                controller: 'StudentContactPreferencesEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    studentEntity: ['Student', function(Student) {
                        return Student.get(vm.studentId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }]
                }
            });
            modalInstance.result.then().finally(function() {
                vm.loadStudent(vm.studentId);
            });
        }

    }

})();
;/**
 * This is the StudentDetails Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('StudentDetailsDirective')
        .controller('StudentDetailsDirectiveController', StudentDetailsDirectiveController);

    StudentDetailsDirectiveController.$inject = ['$log', '$scope', '$rootScope', 'Student'];

    function StudentDetailsDirectiveController($log, $scope, $rootScope, Student) {
        /* jshint validthis:true */
        var vm = this;
        this.message = '';

        this.init = function() {};

        $scope.hasData = function() {
            if ($scope.student) {
                return true;
            } else {
                return false;
            }
        };

        this.init();
    }
})();
;/**
 * This is the StudentImage Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('StudentImageDirective')
        .controller('StudentImageDirectiveController', StudentImageDirectiveController);

    StudentImageDirectiveController.$inject = ['$log', '$scope', '$rootScope', 'GLOBAL'];

    function StudentImageDirectiveController($log, $scope, $rootScope, GLOBAL) {
        /* jshint validthis:true */
        var vm = this;

        this.imageUrl = "";

        $rootScope.$on('student-loaded', function() {
            $log.info("event triggered");
            this.loadImageUrl();
        });

        $scope.loadImageUrl = function() {
            if ($scope.studentId !== undefined) {
                this.imageUrl = GLOBAL.STUDENT_IMAGES_URL + $scope.studentId + '.jpg';
            }
            return this.imageUrl;
        };
    }
})();
;/**
 * This is the Entry Qualifications Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('StudentLearningSupportCostsEditorDirective')
        .controller('StudentLearningSupportCostsEditorController', StudentLearningSupportCostsEditorController);

    StudentLearningSupportCostsEditorController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModal', 'LearningSupportCost'];

    function StudentLearningSupportCostsEditorController($log, $scope, $state, $rootScope, $uibModal, LearningSupportCost) {
        /* jshint validthis:true */
        var vm = this;
        vm.dialog = {};
        vm.studentId = vm.studentId ? vm.studentId : undefined;
        vm.studentLearningSupportCosts = vm.studentLearningSupportCosts ? vm.studentLearningSupportCosts : [];
        vm.init = init;
        vm.loadStudentLearningSupportCosts = loadStudentLearningSupportCosts;
        vm.editStudentLearningSupportCost = editStudentLearningSupportCost;
        vm.addStudentLearningSupportCost = addStudentLearningSupportCost;

        function init() {
            $log.info('II EntryQualifications Editor Initialised');
            vm.loadStudentLearningSupportCosts(vm.studentId);
        }

        function loadStudentLearningSupportCosts(studentId) {
            $log.info('II Loading EntryQualifications Data');
            LearningSupportCost.getByStudent(studentId).then(function(response) {
                $log.log('EntryQualificationsEditorController::entryQualifications called');
                vm.studentLearningSupportCosts = response.data;
            }, function(response) {
                $log.error('EE StudentLearningSupportCosts could not be loaded');
            });
        }

        function editStudentLearningSupportCost(studentLearningSupportCostId) {
            $log.log('EntryQualificationsEditorController::editContact called');

            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/student-learning-support-costs-editor/views/student-learning-support-costs-editorDialog.html',
                controller: 'StudentLearningSupportCostsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'sm',
                resolve: {
                    studentLearningSupportCostEntity: function(LearningSupportCost) {
                        return LearningSupportCost.get(studentLearningSupportCostId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });
            // Reload Contacts after dialog closed
            modalInstance.result.then().finally(function() {
                vm.loadStudentLearningSupportCosts(vm.studentId);
            });
        }


        //Create New Entry Qualifications
        function addStudentLearningSupportCost(studentId) {
            $log.log('EntryQualificationsEditorController:: AddEntryQualification called');
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/student-learning-support-costs-editor/views/student-learning-support-costs-editorDialog.html',
                controller: 'StudentLearningSupportCostsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    studentLearningSupportCostEntity: function() {
                        var studentLearningSupportCosts = {};
                        studentLearningSupportCosts.studentId = studentId;
                        return studentLearningSupportCosts;
                    }
                }
            });
            modalInstance.result.then().finally(function() {
                vm.loadStudentLearningSupportCosts(vm.studentId);
            });
        }

    }
})();
;/**
 * This is the Entry Qualifications Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('StudentLearningSupportCostsEditorDirective')
        .controller('StudentLearningSupportCostsEditorDialogController', StudentLearningSupportCostsEditorDialogController);

    StudentLearningSupportCostsEditorDialogController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModalInstance', 'LearningSupportCost', 'studentLearningSupportCostEntity'];

    function StudentLearningSupportCostsEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, LearningSupportCost, studentLearningSupportCostEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.studentLearningSupportCost = studentLearningSupportCostEntity !== undefined ? studentLearningSupportCostEntity : {};
        vm.studentLearningSupportCost.startDate = new Date(vm.studentLearningSupportCost.startDate);
        vm.studentLearningSupportCost.endDate = new Date(vm.studentLearningSupportCost.endDate);
        vm.save = save;
        vm.cancel = cancel;

        var onSaveFinished = function(result) {
            $scope.$emit('entryQualification-saved', result);
            $uibModalInstance.close(result);
        };

        function save() {
            $log.log('EntryQualificationDialogController::save called');
            $log.info(vm.studentLearningSupportCost);
            if (vm.studentLearningSupportCost.id) {
                LearningSupportCost.save(vm.studentLearningSupportCost, onSaveFinished);
            } else {
                if (vm.studentLearningSupportCost.id !== null) {
                    LearningSupportCost.create(vm.studentLearningSupportCost, onSaveFinished);
                }
            }
        }

        function cancel() {
            $log.log('EntryQualificationDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
;/**
 * This is the Student Special LearningSupport Editor Dialog Controller 
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('StudentLearningSupportEditorDirective')
        .controller('StudentLearningSupportEditorDialogController', StudentLearningSupportEditorDialogController);

    StudentLearningSupportEditorDialogController.$inject = ['$log', '$scope', '$state', '$uibModalInstance', '$uibModal', '$rootScope', 'studentLearningSupportEntity', 'StudentLearningSupport'];

    function StudentLearningSupportEditorDialogController($log, $scope, $state, $uibModalInstance, $uibModal, $rootScope, studentLearningSupportEntity, StudentLearningSupport) {
        /* jshint validthis:true */
        var vm = this;

        vm.studentLearningSupport = studentLearningSupportEntity !== undefined ? studentLearningSupportEntity : {};
        vm.save = save;
        vm.cancel = cancel;


        var onSaveFinished = function(result) {
            $log.info('II StudentLearningSupport Saved');
            $scope.$emit('studentLearningSupport-saved', result);
            $uibModalInstance.close(result);
        };

        /**
         * This saves the studentLearningSupport and closes that dialog box
         */
        function save() {
            $log.log('StudentLearningSupportDialogController::save called');
            $log.info(vm.studentLearningSupport);
            if (vm.studentLearningSupport) {
                StudentLearningSupport.save(vm.studentLearningSupport, onSaveFinished);
            } else {
                return null;
            }

        }

        /**
         * This closes the studentLearningSupport editor dialog box without saving 
         */
        function cancel() {
            $log.log('StudentLearningSupportDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
;/**
 * This is the Student Special LearningSupport Editor Controller 
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */



(function() {
    'use strict';

    angular
        .module('StudentLearningSupportEditorDirective')
        .controller('StudentLearningSupportEditorController', StudentLearningSupportEditorController);

    StudentLearningSupportEditorController.$inject = ['$log', '$scope', '$rootScope', '$uibModal', 'StudentLearningSupport'];

    function StudentLearningSupportEditorController($log, $scope, $rootScope, $uibModal, StudentLearningSupport) {
        /* jshint validthis:true */
        var vm = this;
        vm.dialog = {};
        vm.message = '';

        vm.studentId = vm.studentId ? vm.studentId : undefined;
        vm.studentLearningSupport = vm.studentLearningSupport ? vm.studentLearningSupport : {};
        vm.init = init;
        vm.loadStudentLearningSupport = loadStudentLearningSupport;
        vm.editStudentLearningSupport = editStudentLearningSupport;


        function init() {
            $log.log('StudentLearningSupportDetailsDirectiveController::init called');
            vm.loadStudentLearningSupport(vm.studentId);
        }

        function loadStudentLearningSupport(studentId) {
            StudentLearningSupport.get(studentId).then(function(response) {
                $log.info('II StudentLearningSupport Loaded');
                vm.studentLearningSupport = response.data;
            });
        }

        //update the StudentLearningSupport information
        function editStudentLearningSupport(studentId) {
            $log.log('StudentLearningSupportDetailsDirectiveController::editContact called');
            //var studentLearningSupportId = id;
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/student-learning-support-editor/views/student-learning-support-editor-dialog.html',
                controller: 'StudentLearningSupportEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    studentLearningSupportEntity: function(StudentLearningSupport) {
                        return StudentLearningSupport.get(studentId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });
            modalInstance.result.then().finally(function() {
                vm.loadStudentLearningSupport(vm.studentId);
            });
        }

        $scope.hasData = function() {
            if ($scope.studentLearningSupport && $scope.studentLearningSupport !== undefined) {
                return true;
            } else {
                return false;
            }
        };
    }

})();
;/**
 * This is the Entry Qualifications Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('StudentLearningSupportVisitsEditorDirective')
        .controller('StudentLearningSupportVisitsEditorController', StudentLearningSupportVisitsEditorController);

    StudentLearningSupportVisitsEditorController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModal', 'LearningSupportVisit'];

    function StudentLearningSupportVisitsEditorController($log, $scope, $state, $rootScope, $uibModal, LearningSupportVisit) {
        /* jshint validthis:true */
        var vm = this;
        vm.dialog = {};
        vm.studentId = vm.studentId ? vm.studentId : undefined;
        vm.studentLearningSupportVisits = vm.studentLearningSupportVisits ? vm.studentLearningSupportVisits : [];
        vm.init = init;
        vm.loadStudentLearningSupportVisits = loadStudentLearningSupportVisits;
        vm.editStudentLearningSupportVisit = editStudentLearningSupportVisit;
        vm.addStudentLearningSupportVisit = addStudentLearningSupportVisit;

        function init() {
            $log.info('II EntryQualifications Editor Initialised');
            vm.loadStudentLearningSupportVisits(vm.studentId);
        }

        function loadStudentLearningSupportVisits(studentId) {
            $log.info('II Loading EntryQualifications Data');
            LearningSupportVisit.getByStudent(studentId).then(function(response) {
                $log.log('EntryQualificationsEditorController::entryQualifications called');
                vm.studentLearningSupportVisits = response.data;
            }, function(response) {
                $log.error('EE StudentLearningSupportVisits could not be loaded');
            });
        }

        function editStudentLearningSupportVisit(studentLearningSupportVisitId) {
            $log.log('EntryQualificationsEditorController::editContact called');

            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/student-learning-support-visits-editor/views/student-learning-support-visits-editorDialog.html',
                controller: 'StudentLearningSupportVisitsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    studentLearningSupportVisitEntity: function(LearningSupportVisit) {
                        return LearningSupportVisit.get(studentLearningSupportVisitId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });
            // Reload Contacts after dialog closed
            modalInstance.result.then().finally(function() {
                vm.loadStudentLearningSupportVisits(vm.studentId);
            });
        }


        //Create New Entry Qualifications
        function addStudentLearningSupportVisit(studentId) {
            $log.log('EntryQualificationsEditorController:: AddEntryQualification called');
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/student-learning-support-visits-editor/views/student-learning-support-visits-editorDialog.html',
                controller: 'StudentLearningSupportVisitsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    studentLearningSupportVisitEntity: function() {
                        var studentLearningSupportVisits = {};
                        studentLearningSupportVisits.studentId = studentId;
                        return studentLearningSupportVisits;
                    }
                }
            });
            modalInstance.result.then().finally(function() {
                vm.loadStudentLearningSupportVisits(vm.studentId);
            });
        }

    }
})();
;/**
 * This is the Entry Qualifications Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('StudentLearningSupportVisitsEditorDirective')
        .controller('StudentLearningSupportVisitsEditorDialogController', StudentLearningSupportVisitsEditorDialogController);

    StudentLearningSupportVisitsEditorDialogController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModalInstance', 'LearningSupportVisit', 'studentLearningSupportVisitEntity'];

    function StudentLearningSupportVisitsEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, LearningSupportVisit, studentLearningSupportVisitEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.studentLearningSupportVisit = studentLearningSupportVisitEntity !== undefined ? studentLearningSupportVisitEntity : {};
        vm.studentLearningSupportVisit.startDate = new Date(vm.studentLearningSupportVisit.startDate);
        vm.studentLearningSupportVisit.time = new Date(vm.studentLearningSupportVisit.time);
        vm.save = save;
        vm.cancel = cancel;

        var onSaveFinished = function(result) {
            $scope.$emit('entryQualification-saved', result);
            $uibModalInstance.close(result);
        };

        function save() {
            $log.log('EntryQualificationDialogController::save called');
            $log.info(vm.studentLearningSupportVisit);
            if (vm.studentLearningSupportVisit.id) {
                LearningSupportVisit.save(vm.studentLearningSupportVisit, onSaveFinished);
            } else {
                if (vm.studentLearningSupportVisit.id !== null) {
                    LearningSupportVisit.create(vm.studentLearningSupportVisit, onSaveFinished);
                }
            }
        }

        function cancel() {
            $log.log('EntryQualificationDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
;/**
 * This is the StudentOption Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('StudentOptionEditorTableDirective')
        .controller('StudentOptionEditorTableAddDialogController', StudentOptionEditorTableAddDialogController);

    StudentOptionEditorTableAddDialogController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModalInstance', '$uibModal', 'studentId', 'StudentOptionEntry', 'Option'];

    function StudentOptionEditorTableAddDialogController($log, $scope, $state, $rootScope, $uibModalInstance, $uibModal, studentId, StudentOptionEntry, Option) {
        /* jshint validthis:true */
        var vm = this;

        // Private Properties and Methods
        var loading = false;

        var onSaveFinished = function(result) {
            $scope.$emit('option-entires-updated', result);
            $uibModalInstance.close(result);
        };

        function clear() {
            $log.debug('II exam-optionsSearchController :: clear called');
            vm.optionEntryCode = "";
            loading = false;
            vm.visible = false;
            vm.results = [];
        }

        function displayMessage(message) {
            $log.debug('II exam-options-SearchController :: displayMessage called');
            vm.message = message;
        }

        function search() {
            $log.debug('II exam-options-SearchController :: search called');
            loading = true;
            displayMessage("Loading please wait!");
            vm.results = [];
            console.log(vm.optionEntryCode);
            Option.search({
                optionEntryCode: vm.optionEntryCode
            }).then(function(response) {
                loading = false;
                vm.results = response.data;
                if (vm.hasResults()) {
                    vm.showResults();
                }
                displayMessage("");
            });
        }

        function addOptionEntryCode(studentId, examOptionId) {
            $log.debug('student option Edito rController::add called');
            var studentOptionEntry = {
                studentId: studentId,
                examOptionId: examOptionId,
                resit: vm.resit,
                privateStudent: vm.privateStudent,
            };
            if (studentId) {
                StudentOptionEntry.create(studentOptionEntry, onSaveFinished).then(function(response) {
                    $log.info("II Exam Option Successfully added");
                }, function(response) {
                    $log.info("EE Failed to add the Exam Option for the student: " + studentId);
                    displayMessage(response.data.message);
                });
            }

        }

        // Public Properties and Methods
        vm.studentId = studentId !== undefined ? studentId : {};
        vm.optionEntryCode = "";
        vm.results = [];
        vm.visible = false;
        vm.message = "";
        vm.resit = false;
        vm.privateStudent = false;

        vm.clear = clear;
        vm.search = search;
        vm.addOptionEntryCode = addOptionEntryCode;

        vm.executeCallback = function(id) {
            vm.hideResults();
            vm.callback(id);
        };

        vm.hasResults = function() {
            if (vm.results.length !== 0) {
                return true;
            }
            return false;
        };

        vm.isLoading = function() {
            return loading;
        };

        vm.resultsVisible = function() {
            if (vm.hasResults()) {
                return vm.visible;
            }
            return false;
        };

        vm.toggleResults = function() {
            vm.visible = !vm.visible;
        };

        vm.hideResults = function() {
            vm.visible = false;
        };

        vm.showResults = function() {
            vm.visible = true;
        };

        vm.cancel = function() {
            $log.debug('student option editorDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        };
    }
})();
;/**
 * This is the StudentOptions Editor Directive definition.
 *
 * Applied Styles: [Y001, Y002, Y010, Y021, Y023, Y024, Y070, Y072, Y074]*
 *
 *  @type Controller
 *
 *
 *   */
(function() {
    'use strict';
    angular
        .module('StudentOptionEditorTableDirective')
        .controller('StudentOptionEditorTableEditDialogController', StudentOptionEditorTableEditDialogController);

    StudentOptionEditorTableEditDialogController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModalInstance', '$uibModal', 'studentOptionEntryEntity', 'StudentOptionEntry'];

    function StudentOptionEditorTableEditDialogController($log, $scope, $state, $rootScope, $uibModalInstance, $uibModal, studentOptionEntryEntity, StudentOptionEntry) {
        /* jshint validthis:true */
        var vm = this;

        this.studentOptionEntry = studentOptionEntryEntity !== undefined ? studentOptionEntryEntity : {};

        var onSaveFinished = function(result) {
            $scope.$emit('option-entires-updated', result);
            $uibModalInstance.close(result);
        };


        this.save = function() {
            $log.debug('StudentOptionEntryDialogController::save called');
            $log.info(vm.studentOptionEntry);
            if (vm.studentOptionEntry.studentId, vm.studentOptionEntry.examOptionId, vm.studentOptionEntry) {
                //update the studentOptionEntry information
                StudentOptionEntry.save(vm.studentOptionEntry.studentId, vm.studentOptionEntry.examOptionId, vm.studentOptionEntry, onSaveFinished);
            } else {
                // Create New StudentOptionEntry
                StudentOptionEntry.create(vm.studentOptionEntry, onSaveFinished);
            }
        };

        this.cancel = function() {
            $log.debug('StudentOptionEntryDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        };
    }

})();
;/**
 * This is the StudentOption Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('StudentOptionEditorTableDirective')
        .controller('StudentOptionEditorTableController', StudentOptionEditorTableController);

    StudentOptionEditorTableController.$inject = ['$scope', '$log', '$uibModal', 'StudentOptionEntry'];

    function StudentOptionEditorTableController($scope, $log, $uibModal, StudentOptionEntry) {
        /* jshint validthis:true */
        var vm = this;

        vm.studentId = vm.studentId ? vm.studentId : undefined;
        vm.studentOptionEntries = vm.studentOptionEntries ? vm.studentOptionEntries : [];

        vm.getStudentOptionEntries = function(id) {
            StudentOptionEntry.getId(id).then(function(response) {
                vm.studentOptionEntries = response.data;
            });
        };

        var onSaveFinished = function(result) {
            $scope.$emit('option-entires-updated', result);
        };

        vm.loadStudentOptionEntries = function(id) {
            StudentOptionEntry.getId(id).then(function(response) {
                $log.info('II StudentYear Loaded');
                vm.studentOptionEntries = response.data;
                $log.info(vm.studentOptionEntries);
            }, function(response) {
                $log.error('EE students could not be loaded');
            });
        };

        //update the StudentOptionEntries information
        vm.editStudentOptionEntry = function(studentId, examOptionId) {
            $log.debug('StudentOptionEntriesEditorController::editContact called');

            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/student-option-editor-table/views/student-option-editor-edit-dialog.html',
                controller: 'StudentOptionEditorTableEditDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    studentOptionEntryEntity: function(StudentOptionEntry) {
                        return StudentOptionEntry.getByOptionId(studentId, examOptionId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });
        };

        vm.addStudentOptionEntry = function(studentId) {
            $log.debug('StudentOptionEntriesEditorController::addContact called');
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/student-option-editor-table/views/student-option-editor-add-dialog.html',
                controller: 'StudentOptionEditorTableAddDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    studentId: function() {
                        return studentId;
                    }
                }
            });
        };

        this.deleteStudentOptionEntry = function(studentId, examOptionId) {
            $log.debug('StudentOptionEntriesEditorController::deleteStudentOptionEntriesEditorController called');
            if (studentId, examOptionId) {
                var msg = "Are you sure you want to delete this StudentOptionEntry ?";
                if (window.confirm(msg)) {
                    StudentOptionEntry.delete(studentId, examOptionId, onSaveFinished).then(function(response) {
                        $log.info("II StudentOptionEntry ($studentId)($examOptionId) has been deleted");
                    }, function(response) {
                        $log.info("EE A problem occurred trying to delete StudentOptionEntry ($studentId)($examOptionId)");
                    });
                }
            }
        };
        this.markAmendment = function(studentId) {
            $log.debug('StudentOptionEntriesController::markAmendment called');

            if (studentId) {
                var msg = "Are you sure you want to Mark For Ammendment ?";
                if (window.confirm(msg)) {
                    StudentOptionEntry.markExamAmendment(studentId, onSaveFinished).then(function(response) {
                        $log.info("Student $(studentId) has been marked Amendment");
                    });
                }

            }

        };
    }

})();
;/**
 * This is the Student Summary Editor Dialog Controller, it is used to handle the student summary editor dialog data and controls.
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */



(function() {
    'use strict';

    angular
        .module('StudentSummaryEditorDirective')
        .controller('StudentSummaryEditorDialogController', StudentSummaryEditorDialogController);

    StudentSummaryEditorDialogController.$inject = ['$log', '$scope', '$state', '$uibModalInstance', '$uibModal', '$rootScope', 'studentEntity', 'Student'];

    function StudentSummaryEditorDialogController($log, $scope, $state, $uibModalInstance, $uibModal, $rootScope, studentEntity, Student) {
        /* jshint validthis:true */
        var vm = this;
        vm.student = studentEntity !== undefined ? studentEntity : {};
        vm.save = save;
        vm.cancel = cancel;

        var onSaveFinished = function(result) {
            $log.info('II StudentSummary Saved');
            $scope.$emit('studentSummary-saved', result);
            $uibModalInstance.close(result);
        };

        function save() {
            $log.log('StudentSummaryDialogController::save called');
            $log.info(vm.student);
            if (vm.student.id) {
                Student.save(vm.student, onSaveFinished);
            } else {
                return null;
            }
        }

        function cancel() {
            $log.log('StudentSummaryDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        }
    }

})();
;/**
 * This is the StudentSummaryEditorController
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('StudentSummaryEditorDirective')
        .controller('StudentSummaryEditorController', StudentSummaryEditorController);

    StudentSummaryEditorController.$inject = ['$log', '$scope', '$rootScope', '$uibModal', 'Student'];

    function StudentSummaryEditorController($log, $scope, $rootScope, $uibModal, Student) {
        // Public Interface
        /* jshint validthis:true */
        var vm = this;
        vm.student = vm.student ? vm.student : {};
        vm.studentId = vm.studentId ? vm.studentId : undefined;

        // Public Methods
        vm.init = init;
        vm.loadStudent = loadStudent;
        vm.editStudent = editStudent;


        // Private Interface
        function init() {
            $log.log('StudentYearDetailsDirectiveController::init called');
            if (vm.student === undefined) {
                vm.loadStudent(vm.studentId);
            } else {
                vm.studentId = vm.student.studentId;
            }
        }

        function loadStudent(studentId) {
            Student.get(studentId).then(function(response) {
                $log.info('II StudentYear Loaded');
                vm.student = response.data;
                $log.info(vm.student);
            }, function(response) {
                $log.error('EE students could not be loaded');
            });

        }

        //update the StudentYear information
        function editStudent(studentId) {
            $log.log('StudentSummaryDetailsDirectiveController::editSummary called');
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/student-summary-editor/views/student-summary-editor-dialog.html',
                controller: 'StudentSummaryEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    studentEntity: ['Student', function(Student) {
                        return Student.get(vm.studentId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }]
                }
            });
            modalInstance.result.then().finally(function() {
                vm.loadStudent(vm.studentId);
            });
        }


        $scope.hasData = function() {
            if ($scope.student && $scope.student !== undefined) {
                return true;
            } else {
                return false;
            }
        };
    }
})();
;/**
 * This is the StudentTimetable Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('StudentTimetableDirective')
        .controller('StudentTimetableDialogController', StudentTimetableDialogController);

    StudentTimetableDialogController.$inject = ['$log', 'StudentId', 'GLOBAL'];

    function StudentTimetableDialogController($log, StudentId, GLOBAL) {
        /* jshint validthis:true */
        var vm = this;

        this.reportUrl = function() {
            if (StudentId !== undefined) {
                return GLOBAL.REPORT_URL + '?/CID/Timetabling/Timetable+Student+-+Square&rc:Toolbar=false&rs:Command=Render&StudentList=' + StudentId;
            } else {
                return '';
            }
        };
    }
})();
;/**
 * This is the StudentTimetable Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('StudentTimetableDirective')
        .controller('StudentTimetableController', StudentTimetableController);

    StudentTimetableController.$inject = ['$log', '$scope', '$rootScope', '$uibModal', 'GLOBAL'];

    function StudentTimetableController($log, $scope, $rootScope, $uibModal, GLOBAL) {
        /* jshint validthis:true */
        var vm = this;

        this.loadStudentTimetable = function() {
            if (vm.studentId !== undefined) {
                // var modalInstance = $uibModal.open({
                //     templateUrl: 'js/directives/student-timetable/views/student-timetable-dialog.html',
                //     controller: 'StudentTimetableDialogController',
                //             controllerAs: 'ctrl',
                //             size: 'lg',
                //             resolve: {
                //                 StudentId: function () {
                //                     return $scope.studentId;
                //                 }
                //             }
                //         });
            }
        };

        this.studentTimetableUrl = function() {
            if (vm.studentId !== undefined) {
                var url = GLOBAL.REPORT_URL + '?/CID/Timetabling/Timetable+Student+-+Square&rc:Toolbar=false&rs:Command=Render&StudentList=' + vm.studentId;
                return url;
            } else {
                return '';
            }
        };
    }
})();
;/**
 * This is the StudentWithdrawalDialogController, it is used to handle the student withdrawal dialog data and controls.
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */
(function() {
    'use strict';

    angular
        .module('StudentWithdrawalDirective')
        .controller('StudentWithdrawalDialogController', StudentWithdrawalDialogController);

    function StudentWithdrawalDialogController($log, $rootScope, $uibModalInstance, studentYearEntity, Student) {
        // *** Public Interface
        /* jshint validthis:true */
        var vm = this;

        // Data
        vm.studentYear = studentYearEntity ? studentYearEntity : undefined;
        vm.withdrawalRequest = {};

        // Operations
        vm.withdraw = withdrawStudent;
        vm.cancel = cancel;
        vm.formValidation = formValidation;

        init();

        // *** Private Interface

        /**
         * This function initialises the data required for the form
         *
         * @return nothing returned
         */
        function init() {
            vm.withdrawalRequest = {
                studentId: vm.studentYear.studentId,
                yearId: vm.studentYear.yearId,
                destinationId: vm.studentYear.destinationId !== null ? vm.studentYear.destinationId : null,
                withdrawalDate: vm.studentYear.endDate !== null ? vm.studentYear.endDate : null,
                withdrawalResonId: vm.studentYear.withdrawalResonId !== null ? vm.studentYear.withdrawalResonId : null,
                collegeEmployer: vm.studentYear.destinationCollegeEmployer !== null ? vm.studentYear.destinationCollegeEmployer : null,
                courseCareer: vm.studentYear.destinationCourseCareer !== null ? vm.studentYear.destinationCourseCareer : null,
            };
        }

        /**
         * This method is used to withdraw a student for a specified year.
         *
         * @return nothing returned
         */
        function withdrawStudent() {
            if (vm.studentYear && vm.withdrawalRequest) {
                $log.info(vm.withdrawalRequest);
                Student.withdraw(vm.studentYear.studentId, vm.withdrawalRequest).then(function(response) {
                    $log.info(response);
                    onSaveFinished(response.data);
                }, function(response) {
                    $log.info('EE Student Withdrawal - Failed');
                    //                $uibModalInstance.close(result);
                });
            }
        }

        /**
         * This closes the student withdrawl dialog box without saving
         *
         * @return nothing returned
         */
        function cancel() {
            $log.log('StudentWithdrawalDialogController::cancel called');
            $uibModalInstance.dismiss('cancel');
        }

        function formValidation() {
            if (vm.withdrawalRequest.withdrawalDate !== null && vm.withdrawalRequest.destinationId == 95) {
                return false;
            }
            if (vm.withdrawalRequest.withdrawalDate === null && vm.withdrawalRequest.destinationId != 95) {
                return false;
            }
            return true;
        }

        function onSaveFinished(result) {
            $log.info('II Student Withdrawal - Success');
            $rootScope.$emit('student-withdrawn', result);
            $uibModalInstance.close(result);
        }

    }
})();
;/**
 * This is the StudentWithdrawalController, it is used to handle the student withdrawal directive
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */
(function() {
    'use strict';

    angular
        .module('StudentWithdrawalDirective')
        .controller('StudentWithdrawalController', StudentWithdrawalController);

    function StudentWithdrawalController($log, $uibModal, Student) {
        // *** Public Interface
        /* jshint validthis:true */
        var vm = this;

        // Data
        vm.studentId = vm.studentId ? vm.studentId : undefined;
        vm.yearId = vm.yearId ? vm.yearId : undefined;

        // Mehtods
        vm.withdrawStudent = loadWithdrawStudentDialog;

        // *** Private Interface
        var dialogSettings = {
            templateUrl: 'js/directives/student-withdrawal/views/student-withdrawal-dialog.html',
            controller: 'StudentWithdrawalDialogController',
            controllerAs: 'ctrl',
            size: 'lg',
            resolve: {
                studentYearEntity: function(Student) {
                    return Student.studentYears(vm.studentId, vm.yearId).then(function(response) {
                        return response.data;
                    }, function(response) {
                        bootbox.alert("failed to retrieve");
                    });
                }
            }
        };

        function loadWithdrawStudentDialog() {
            $log.log('StudentWithdrawalDialogDirectiveController::editAddress called');
            if (vm.studentId !== undefined && vm.yearId !== undefined) {
                $uibModal.open(dialogSettings);
            }
        }

    }
})();
;/**
 * This is the StudentYearDetailsDirectiveController, it is used to handle the student Year Details Directive Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('StudentYearDetailsDirective')
        .controller('StudentYearDetailsDirectiveController', StudentYearDetailsDirectiveController);

    StudentYearDetailsDirectiveController.$inject = ['$log', '$scope', '$rootScope', 'Student'];

    function StudentYearDetailsDirectiveController($log, $scope, $rootScope, Student) {
        /* jshint validthis:true */
        var vm = this;
        vm.message = '';
        vm.studentYear = vm.studentYear ? vm.studentYear : {};
        vm.init = function() {};
        vm.hasLeft = hasLeft;
        vm.hasData = hasData;

        vm.init();

        function hasLeft() {
            if (vm.studentYear !== null && vm.studentYear !== undefined) {
                if (vm.studentYear.endDate === null) {
                    return false;
                }
            }
            return true;
        }

        function hasData() {
            if (vm.studentYear) {
                return true;
            } else {
                return false;
            }
        }
    }

})();
;/**
 * This is the StudentYearEditorDialogController
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('StudentYearEditorDirective')
        .controller('StudentYearEditorDialogController', StudentYearEditorDialogController);

    StudentYearEditorDialogController.$inject = ['$log', '$scope', '$state', '$uibModalInstance', '$uibModal', '$rootScope', 'studentYearEntity', 'Student'];

    function StudentYearEditorDialogController($log, $scope, $state, $uibModalInstance, $uibModal, $rootScope, studentYearEntity, Student) {
        /* jshint validthis:true */
        //Public Interface
        var vm = this;
        vm.studentYear = studentYearEntity !== undefined ? studentYearEntity : {};
        vm.save = save;
        vm.cancel = cancel;

        var onSaveFinished = function(result) {
            $log.info('II StudentYear Saved');
            $scope.$emit('studentYear-saved', result);
            $uibModalInstance.close(result);
        };

        /**
         * This saves the studentYear and closes that dialog box
         */
        function save() {
            $log.log('StudentYearDialogController::save called');
            $log.info(vm.studentYear);
            if (vm.studentYear.studentId, vm.studentYear.yearId, vm.studentYear) {
                Student.studentYears(vm.studentYear.studentId, vm.studentYear.yearId, vm.studentYear, onSaveFinished);
            } else {
                return null;
            }
        }

        /**
         * This closes the studentYear editor dialog box without saving 
         */
        function cancel() {
            $log.log('StudentYearDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        }
    }

})();
;/**
 * This is the StudentYearEditorController, it is used to handle the student year editor dialog data and controls.
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('StudentYearEditorDirective')
        .controller('StudentYearEditorController', StudentYearEditorController);

    StudentYearEditorController.$inject = ['$log', '$scope', '$rootScope', '$uibModal', 'Student'];

    function StudentYearEditorController($log, $scope, $rootScope, $uibModal, Student) {
        //Public Interface
        /* jshint validthis:true */
        var vm = this;
        vm.studentYear = vm.studentYear ? vm.studentYear : {};
        vm.studentId = vm.studentId ? vm.studentId : undefined;
        vm.yearId = vm.yearId ? vm.yearId : undefined;

        //Operations
        vm.init = init;
        vm.loadStudentYear = loadStudentYear;
        vm.editStudentYear = editStudentYear;


        // Private Interface
        $scope.hasData = function() {
            if ($scope.studentYear && $scope.studentYear !== undefined) {
                return true;
            } else {
                return false;
            }
        };



        function init() {
            $log.log('StudentYearDetailsDirectiveController::init called');
            if (vm.studentYear === undefined) {
                vm.loadStudentYear(vm.studentId, vm.yearId);
            } else {
                vm.studentId = vm.studentYear.studentId;
                vm.yearId = vm.studentYear.yearId;
            }
        }



        function loadStudentYear(studentId, yearId) {
            Student.studentYears(studentId, yearId).then(function(response) {
                $log.info('II StudentYear Loaded');
                vm.studentYear = response.data;
                vm.studentId = vm.studentYear.studentId;
                vm.yearId = vm.studentYear.yearId;
                $log.info(vm.studentYear);
            }, function(response) {
                $log.error('EE students could not be loaded');
            });
        }


        function editStudentYear(studentId, yearId) {
            $log.log('StudentYearDetailsDirectiveController::editContact called');
            vm.yearId = vm.studentYear.yearId;
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/student-year-editor/views/student-year-editor-dialog.html',
                controller: 'StudentYearEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    studentYearEntity: function(Student) {
                        return Student.studentYears(vm.studentId, vm.yearId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });
            modalInstance.result.then().finally(function() {
                vm.loadStudentYear(vm.studentId, vm.yearId);
            });
        }

    }

})();
;/**
 * This is the Student Bursary Details Directive Controller, it is used to handle the student bursary details directive data and controls.
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('StudentBursaryDetailsDirective')
        .controller('StudentBursaryDetailsDirectiveController', StudentBursaryDetailsDirectiveController);

    StudentBursaryDetailsDirectiveController.$inject = ['$scope', '$rootScope', 'Student', 'Logger', 'GLOBAL'];

    function StudentBursaryDetailsDirectiveController($scope, $rootScope, Student, Logger, GLOBAL) {
        /* jshint validthis:true */
        var vm = this;
        var DEBUG = GLOBAL.DEBUG;

        vm.studentBursary = vm.studentBursary ? vm.studentBursary : {};
        vm.studentId = vm.studentBursary ? vm.studentBursary.studentId : null;

        //Operations
        vm.init = init;
        vm.loadStudentBursary = loadStudentBursary;
        vm.hasData = hasData;

        vm.init();

        // Event Listeners
        $rootScope.$on('student-bursary-saved', function() {
            vm.loadStudentBursary(vm.studentBursary.studentId);
        });

        function loadStudentBursary(id) {
            Logger.debug("II Reloading Student Bursary Information");
            if (id) {
                Student.bursary(id).then(function(response) {
                    Logger.debug('II Student Bursary Loaded');
                    vm.studentBursary = response.data;
                });
            }
        }

        function hasData() {
            if (vm.studentBursary) {
                return true;
            } else {
                return false;
            }
        }

        function init() {
            Logger.debug('StudentBursaryDetailsDirectiveController :: init called');
            Logger.debug(vm.studentBursary);
            vm.loadStudentBursary(vm.studentBursary.studentId);
        }
    }

})();
;/**
 * This is the Student Bursary Editor Controller, it is used to handle the student bursary editor controller 
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */



(function() {
    'use strict';

    angular
        .module('StudentBursaryEditorDirective')
        .controller('StudentBursaryEditorController', StudentBursaryEditorController);

    StudentBursaryEditorController.$inject = ['$log', '$scope', '$rootScope', '$uibModal', 'Student'];

    function StudentBursaryEditorController($log, $scope, $rootScope, $uibModal, Student) {
        /* jshint validthis:true */
        var vm = this;
        vm.dialog = {};
        vm.message = '';
        vm.studentBursary = vm.studentBursary ? vm.studentBursary : undefined;

        //Operations
        vm.init = init;
        vm.loadStudentBursary = loadStudentBursary;
        vm.editStudentBursary = editStudentBursary;
        vm.hasData = hasData;

        //Private Interface
        function init() {
            $log.log('StudentBursaryDetailsDirectiveController::init called');
            this.loadStudentBursary(vm.studentBursary.studentId);
        }

        function loadStudentBursary(id) {
            Student.bursary(id).then(function(response) {
                $log.info('II StudentBursary Loaded');
                vm.studentBursary = response.data;
            });
        }

        function editStudentBursary(id) {
            $log.log('StudentBursaryDetailsDirectiveController::editContact called');
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/studentBursaryEditor/views/studentBursaryEditorDialog.html',
                controller: 'StudentBursaryEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    studentBursaryEntity: function(Student) {
                        return Student.bursary(id).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });
            modalInstance.result.then().finally(function() {
                vm.loadStudentBursary(vm.studentBursary.studentId);
            });
        }

        function hasData() {
            if (vm.studentBursary && vm.studentBursary !== undefined) {
                return true;
            } else {
                return false;
            }
        }
    }

})();
;/**
 * This is the Student Bursary Editor Dialog Controller, it is used to handle the student bursary editor dialog controller 
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('StudentBursaryEditorDirective')
        .controller('StudentBursaryEditorDialogController', StudentBursaryEditorDialogController);

    StudentBursaryEditorDialogController.$inject = ['$log', '$scope', '$state', '$uibModalInstance', '$uibModal', '$rootScope', 'studentBursaryEntity', 'StudentBursary'];

    function StudentBursaryEditorDialogController($log, $scope, $state, $uibModalInstance, $uibModal, $rootScope, studentBursaryEntity, StudentBursary) {
        /* jshint validthis:true */
        var vm = this;
        vm.studentBursary = studentBursaryEntity !== undefined ? studentBursaryEntity : {};
        vm.save = save;
        vm.cancel = cancel;


        var onSaveFinished = function(result) {
            $log.info('II Student Bursary Saved');
            $scope.$emit('student-bursary-saved', result);
            $uibModalInstance.close(result);
        };


        /**
         * This saves the studentBursary and closes that dialog box
         */
        function save() {
            $log.log('StudentBursaryDialogController::save called');
            $log.info(vm.studentBursary);
            if (vm.studentBursary) {
                StudentBursary.save(vm.studentBursary, onSaveFinished);
            } else {
                return null;
            }
        }


        /**
         * This closes the studentBursary editor dialog box without saving
         */
        function cancel() {
            $log.log('StudentBursaryDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        }

    }

})();
;/**
 * This is the Student Details Lookup Directive Controller, it is used to handle the student details lookup directive data and controls.
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('StudentDetailsLookupDirective')
        .controller('StudentDetailsLookupDirectiveController', StudentDetailsLookupDirectiveController);

    StudentDetailsLookupDirectiveController.$inject = ['$log', '$scope', '$rootScope', 'Student'];

    function StudentDetailsLookupDirectiveController($log, $scope, $rootScope, Student) {
        /* jshint validthis:true */
        var vm = this;
        vm.message = '';
        vm.init = init;

        function init() {
            if (vm.student === undefined && vm.studentId) {
                $log.log('II Loading student-details directive with a studentId');
                vm.message = 'Loading...';
                Student.get(vm.studentId).then(function(response) {
                    vm.student = response.data;
                    vm.message = '';
                    $log.log(vm.student);
                }, function(response) {
                    $log.error('EE Failed to retireve the student details for studentId: ' + vm.studentId);
                });
            }
            if (!vm.studentId) {
                $log.log('II Loading student-details-lookup requires a student-id attribute');
            }
        }
    }
})();
;/**
 * This is the Entry Qualifications Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('StudentEntryQualificationsEditorDirective')
        .controller('StudentEntryQualificationsEditorController', StudentEntryQualificationsEditorController);

    StudentEntryQualificationsEditorController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModal', 'StudentEntryQualification'];

    function StudentEntryQualificationsEditorController($log, $scope, $state, $rootScope, $uibModal, StudentEntryQualification) {
        /* jshint validthis:true */
        var vm = this;
        vm.dialog = {};
        vm.studentId = vm.studentId ? vm.studentId : undefined;
        vm.studentEntryQualifications = vm.studentEntryQualifications ? vm.studentEntryQualifications : [];
        vm.init = init;
        vm.loadStudentEntryQualifications = loadStudentEntryQualifications;
        vm.editStudentEntryQualification = editStudentEntryQualification;
        vm.deleteStudentEntryQualification = deleteStudentEntryQualification;
        vm.addStudentEntryQualification = addStudentEntryQualification;

        function init() {
            $log.info('II EntryQualifications Editor Initialised');
            vm.loadStudentEntryQualifications(vm.studentId);
        }

        function loadStudentEntryQualifications(studentId) {
            $log.info('II Loading EntryQualifications Data');
            StudentEntryQualification.get(studentId).then(function(response) {
                $log.log('EntryQualificationsEditorController::entryQualifications called');
                vm.studentEntryQualifications = response.data;
            }, function(response) {
                $log.error('EE StudentEntryQualifications could not be loaded');
            });
        }

        function editStudentEntryQualification(studentEntryQualificationId) {
            $log.log('EntryQualificationsEditorController::editContact called');

            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/studentEntryQualificationsEditor/views/studentEntryQualificationsEditorDialog.html',
                controller: 'StudentEntryQualificationsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    studentEntryQualificationEntity: function(StudentEntryQualification) {
                        return StudentEntryQualification.entryQualification(studentEntryQualificationId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });
            // Reload Contacts after dialog closed
            modalInstance.result.then().finally(function() {
                vm.loadStudentEntryQualifications(vm.studentId);
            });
        }

        function deleteStudentEntryQualification(id) {
            $log.log('EntryQualificationsEditorController::deleteEntryQualification called');
            if (id) {
                var msg = "Are you sure you want to delete this EntryQualification?";
                if (window.confirm(msg)) {
                    StudentEntryQualification.delete(id).then(function(response) {
                        $log.info("II EntryQualification ($studentId) has been deleted");
                    }, function(response) {
                        $log.info("EE A problem occurred trying to delete EntryQualification ($studentId)");
                    }).finally(function() {
                        vm.loadStudentEntryQualifications(vm.studentId);
                    });
                }
            }
        }

        //Create New Entry Qualifications
        function addStudentEntryQualification(studentId) {
            $log.log('EntryQualificationsEditorController:: AddEntryQualification called');
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/studentEntryQualificationsEditor/views/studentEntryQualificationsEditorDialog.html',
                controller: 'StudentEntryQualificationsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    studentEntryQualificationEntity: function() {
                        var studentEntryQualifications = {};
                        studentEntryQualifications.studentId = studentId;
                        return studentEntryQualifications;
                    }
                }
            });
            modalInstance.result.then().finally(function() {
                vm.loadStudentEntryQualifications(vm.studentId);
            });
        }

    }
})();
;/**
 * This is the Entry Qualifications Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('StudentEntryQualificationsEditorDirective')
        .controller('StudentEntryQualificationsEditorDialogController', StudentEntryQualificationsEditorDialogController);

    StudentEntryQualificationsEditorDialogController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModalInstance', 'StudentEntryQualification', 'studentEntryQualificationEntity'];

    function StudentEntryQualificationsEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, StudentEntryQualification, studentEntryQualificationEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.studentEntryQualification = studentEntryQualificationEntity !== undefined ? studentEntryQualificationEntity : {};
        vm.studentEntryQualification.date = new Date(vm.studentEntryQualification.date);
        vm.save = save;
        vm.cancel = cancel;

        var onSaveFinished = function(result) {
            $scope.$emit('entryQualification-saved', result);
            $uibModalInstance.close(result);
        };

        function save() {
            $log.log('EntryQualificationDialogController::save called');
            $log.info(vm.studentEntryQualification);
            if (vm.studentEntryQualification.studentEntryQualificationId) {
                StudentEntryQualification.save(vm.studentEntryQualification, onSaveFinished);
            } else {
                if (vm.studentEntryQualification.id !== null) {
                    StudentEntryQualification.create(vm.studentEntryQualification, onSaveFinished);
                }
            }
        }

        function cancel() {
            $log.log('EntryQualificationDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
;/**
 * This is the Student Search Directive Controller, it is used to handle the student search directive data and controls.
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('StudentSearchDirective')
        .controller('StudentSearchController', StudentSearchController);

    StudentSearchController.$inject = ['$log', '$scope', 'StudentSearch'];

    function StudentSearchController($log, $scope, StudentSearch) {
        //Public Interface
        /* jshint validthis:true */
        var vm = this;
        vm.surname = "";
        vm.firstName = "";
        vm.reference = "";
        vm.candidateNo = "";

        vm.loading = false;
        vm.message = "";
        vm.results = [];
        vm.visible = false;

        //Operations
        vm.displayMessage = displayMessage;
        vm.search = search;
        vm.clear = clear;
        vm.executeCallback = executeCallback;
        vm.hasResults = hasResults;
        vm.isLoading = isLoading;
        vm.resultsVisible = resultsVisible;
        vm.toggleResults = toggleResults;
        vm.hideResults = hideResults;
        vm.showResults = showResults;

        //Private Interface
        function displayMessage(message) {
            $log.log('II StudentSearchController :: displayMessage called');
            vm.message = message;
        }

        function search() {
            $log.log('II StudentSearchController :: search called');
            vm.loading = true;
            vm.displayMessage("Loading please wait!");
            vm.results = [];
            StudentSearch.search({
                surname: vm.surname,
                firstName: vm.firstName,
                reference: vm.reference,
                candidateNo: vm.candidateNo
            }).then(function(response) {
                vm.loading = false;
                vm.results = response.data;
                if (vm.hasResults()) {
                    vm.showResults();
                }
                vm.displayMessage("");
            }, function(response) {
                vm.loading = false;
                vm.visible = false;
                vm.displayMessage(response.data.message);
            });
        }

        function clear() {
            $log.log('II StudentSearchController :: clear called');
            vm.surname = "";
            vm.firstName = "";
            vm.reference = "";
            vm.candidateNo = "";
            vm.loading = false;
            vm.visible = false;
            vm.results = [];
        }

        function executeCallback(id) {
            vm.hideResults();
            vm.callback(id);
        }

        function hasResults() {
            if (vm.results.length !== 0) {
                return true;
            }
            return false;
        }

        function isLoading() {
            return vm.loading;
        }

        function resultsVisible() {
            if (vm.hasResults()) {
                return vm.visible;
            }
            return false;
        }

        function toggleResults() {
            vm.visible = !vm.visible;
        }

        function hideResults() {
            vm.visible = false;
        }

        function showResults() {
            vm.visible = true;
        }

    }

})();
;/**
 * This is the StudentSpecialCategoryDetails Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('StudentSpecialCategoryDetailsDirective')
        .controller('StudentSpecialCategoryDetailsDirectiveController', StudentSpecialCategoryDetailsDirectiveController);

    StudentSpecialCategoryDetailsDirectiveController.$inject = ['$log', '$scope', '$rootScope'];

    function StudentSpecialCategoryDetailsDirectiveController($log, $scope, $rootScope) {
        /* jshint validthis:true */
        var vm = this;
        this.message = '';

        $scope.active = -1;

        $scope.hasData = function() {
            if ($scope.specialCategories && $scope.specialCategories !== undefined) {
                return true;
            } else {
                return false;
            }
        };

        $scope.hasSpecialCategories = function() {
            if ($scope.hasData() && $scope.specialCategories.length !== 0) {
                return true;
            } else {
                return false;
            }
        };
    }
})();
;/**
 * This is the Student Special Category Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('StudentSpecialCategoryEditorDirective')
        .controller('StudentSpecialCategoryEditorController', studentSpecialCategoryEditorController);

    studentSpecialCategoryEditorController.$inject = ['$log', '$scope', '$rootScope', '$uibModal', 'Student', 'StudentSpecialCategory', 'GLOBAL'];

    function studentSpecialCategoryEditorController($log, $scope, $rootScope, $uibModal, Student, studentSpecialCategory, GLOBAL) {
        /* jshint validthis:true */
        var vm = this;

        // Public Interface

        vm.studentId = vm.studentId ? vm.studentId : undefined;
        vm.specialCategories = vm.specialCategories ? vm.specialCategories : [];

        vm.loadStudentSpecialCategory = loadStudentSpecialCategory;
        vm.editStudentSpecialCategory = editStudentSpecialCategory;
        vm.addStudentSpecialCategory = addStudentSpecialCategory;
        vm.hasData = hasData;
        vm.hasId = hasId;


        // Private Interface

        function loadStudentSpecialCategory(studentId) {
            Student.specialCategories(studentId).then(function(response) {
                $log.log(response);
                vm.specialCategories = response.data;
            }, function(response) {
                $log.error('EE specialCategory could not be loaded');
            });
        }

        // update the contact information
        function editStudentSpecialCategory(id) {
            $log.log('StudentSpecialCategoryDetailsDirectiveController :: editContact called');
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/studentSpecialCategoryEditor/views/studentSpecialCategoryEditorDialog.html',
                controller: 'StudentSpecialCategoryEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    studentSpecialCategoryEntity: function(StudentSpecialCategory) {
                        return StudentSpecialCategory.get(id).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadStudentSpecialCategory(vm.studentId);
            });
        }

        function addStudentSpecialCategory(studentId) {
            $log.log('StudentSpecialCategoryDetailsDirectiveController :: addStudentSpecialCategory called');
            if (studentId) {
                var modalInstance = $uibModal.open({
                    templateUrl: 'js/directives/studentSpecialCategoryEditor/views/studentSpecialCategoryEditorDialog.html',
                    controller: 'StudentSpecialCategoryEditorDialogController',
                    controllerAs: 'ctrl',
                    size: 'lg',
                    resolve: {
                        studentSpecialCategoryEntity: function() {
                            var studentSpecialCategory = {};
                            studentSpecialCategory.studentId = studentId;
                            return studentSpecialCategory;
                        }
                    }
                });

                modalInstance.result.then().finally(function() {
                    vm.loadStudentSpecialCategory(vm.studentId);
                });
            } else {
                $log.error('EE No Student ID Specified');
            }
        }

        function hasData() {
            if (vm.specialCategories && vm.specialCategories !== undefined) {
                return true;
            } else {
                return false;
            }
        }

        function hasId() {
            if (vm.studentId && vm.studentId !== undefined) {
                return true;
            } else {
                return false;
            }
        }

    }
})();
;/**
 * This is the Student Special Category Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('StudentSpecialCategoryEditorDirective')
        .controller('StudentSpecialCategoryEditorDialogController', studentSpecialCategoryEditorDialogController);

    studentSpecialCategoryEditorDialogController.$inject = ['$log', '$scope', '$state', '$uibModalInstance', '$uibModal', '$rootScope', 'studentSpecialCategoryEntity', 'StudentSpecialCategory'];

    function studentSpecialCategoryEditorDialogController($log, $scope, $state, $uibModalInstance, $uibModal, $rootScope, studentSpecialCategoryEntity, StudentSpecialCategory) {
        /* jshint validthis:true */
        var vm = this;
        vm.specialCategory = studentSpecialCategoryEntity !== undefined ? studentSpecialCategoryEntity : {};

        vm.requestDate = new Date();
        vm.classificationDate = new Date();
        vm.closedDate = new Date();
        vm.save = save;
        vm.cancel = cancel;


        var onSaveFinished = function(result) {
            $scope.$emit('student-special-category-saved', result);
            $uibModalInstance.close(result);
        };

        function save() {
            $log.log('StudentSpecialCategoryDialogController::save called');
            $log.info(vm.specialCategory);
            if (vm.specialCategory.id) {
                //update the contact information
                StudentSpecialCategory.save(vm.specialCategory, onSaveFinished);
            } else {
                if (vm.specialCategory.id !== null) {
                    StudentSpecialCategory.create(vm.specialCategory, onSaveFinished);
                }
            }
        }

        function cancel() {
            $log.log('StudentSpecialCategoryDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        }

    }
})();
;/**
 * This is the StudentWarningDetails Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('StudentWarningDetailsDirective')
        .controller('StudentWarningDetailsDirectiveController', StudentWarningDetailsDirectiveController);

    StudentWarningDetailsDirectiveController.$inject = ['$log', '$scope', '$state', '$rootScope'];

    function StudentWarningDetailsDirectiveController($log, $scope, $state, $rootScope) {
        var vm = this;

        // Controller Methods
        this.init = function() {
            $log.log('StudentWarningDetailsDirectiveController :: init called');
            // this.updateStudentWarnings();
        };

        $scope.hasData = function() {
            if ($scope.studentWarning) {
                return true;
            } else {
                return false;
            }
        };

        this.init();
    }
})();
;/**
 * This is the Student Special Warning Editor Controller 
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */



(function() {
    'use strict';

    angular
        .module('StudentWarningEditorDirective')
        .controller('StudentWarningEditorController', StudentWarningEditorController);

    StudentWarningEditorController.$inject = ['$log', '$scope', '$rootScope', '$uibModal', 'StudentWarning'];

    function StudentWarningEditorController($log, $scope, $rootScope, $uibModal, StudentWarning) {
        /* jshint validthis:true */
        var vm = this;
        vm.dialog = {};
        vm.message = '';

        vm.studentId = vm.studentId ? vm.studentId : undefined;
        vm.studentWarning = vm.studentWarning ? vm.studentWarning : {};
        vm.init = init;
        vm.loadStudentWarning = loadStudentWarning;
        vm.editStudentWarning = editStudentWarning;


        function init() {
            $log.log('StudentWarningDetailsDirectiveController::init called');
            vm.loadStudentWarning(vm.studentId);
        }

        function loadStudentWarning(studentId) {
            StudentWarning.get(studentId).then(function(response) {
                $log.info('II StudentWarning Loaded');
                vm.studentWarning = response.data;
            });
        }

        //update the StudentWarning information
        function editStudentWarning(studentId) {
            $log.log('StudentWarningDetailsDirectiveController::editContact called');
            //var studentWarningId = id;
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/studentWarningEditor/views/studentWarningEditorDialog.html',
                controller: 'StudentWarningEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    studentWarningEntity: function(StudentWarning) {
                        return StudentWarning.get(studentId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });
            modalInstance.result.then().finally(function() {
                vm.loadStudentWarning(vm.studentId);
            });
        }

        $scope.hasData = function() {
            if ($scope.studentWarning && $scope.studentWarning !== undefined) {
                return true;
            } else {
                return false;
            }
        };
    }

})();
;/**
 * This is the Student Special Warning Editor Dialog Controller 
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';
    angular
        .module('StudentWarningEditorDirective')
        .controller('StudentWarningEditorDialogController', StudentWarningEditorDialogController);

    StudentWarningEditorDialogController.$inject = ['$log', '$scope', '$state', '$uibModalInstance', '$uibModal', '$rootScope', 'studentWarningEntity', 'StudentWarning'];

    function StudentWarningEditorDialogController($log, $scope, $state, $uibModalInstance, $uibModal, $rootScope, studentWarningEntity, StudentWarning) {
        /* jshint validthis:true */
        var vm = this;

        vm.studentWarning = studentWarningEntity !== undefined ? studentWarningEntity : {};
        vm.save = save;
        vm.cancel = cancel;


        var onSaveFinished = function(result) {
            $log.info('II StudentWarning Saved');
            $scope.$emit('studentWarning-saved', result);
            $uibModalInstance.close(result);
        };

        /**
         * This saves the studentWarning and closes that dialog box
         */
        function save() {
            $log.log('StudentWarningDialogController::save called');
            $log.info(vm.studentWarning);
            if (vm.studentWarning) {
                StudentWarning.save(vm.studentWarning, onSaveFinished);
            } else {
                return null;
            }

        }

        /**
         * This closes the studentWarning editor dialog box without saving 
         */
        function cancel() {
            $log.log('StudentWarningDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
;/**
 * This is the Subjects Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('SubjectsEditorDirective')
        .controller('SubjectsEditorController', SubjectsEditorController);

    SubjectsEditorController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModal', 'Subject'];

    function SubjectsEditorController($log, $scope, $state, $rootScope, $uibModal, Subject) {
        /* jshint validthis:true */
        var vm = this;
        vm.subjects = [];
        vm.subject = {};
        vm.searchText = '';
        vm.visible = false;

        vm.loadSubjects = loadSubjects;
        vm.editSubjects = editSubjects;
        vm.addSubjects = addSubjects;

        vm.applyFilter = applyFilter;
        vm.toggleVisibility = toggleVisibility;
        vm.resetFilters = resetFilters;

        function toggleVisibility() {
            vm.visible = !vm.visible;
        }

        // Apply filters
        $scope.filter = {
            code: '',
            description: ''
        };

        function applyFilter() {
            vm.filterParams = {
                code: $scope.filter.code,
                description: $scope.filter.description
            };
        }

        function resetFilters() {

            vm.filterParams = {
                code: '',
                description: ''
            };

            $scope.filter = {
                code: '',
                description: ''
            };
        }


        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+code';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function loadSubjects() {
            Subject.query().then(function(response) {
                vm.subjects = response.data;
                $log.info("Loading Faculty ");
            }, function(response) {
                $log.error("Failed to load Faculties");
            });
        }


        function editSubjects(subjectId) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/subjects-editor/views/subjects-editorDialog.html',
                controller: 'SubjectsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    subjectsEntity: function(Subject) {
                        return Subject.get(subjectId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadSubjects();
            });

        }


        function addSubjects() {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/subjects-editor/views/subjects-editorDialog.html',
                controller: 'SubjectsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    subjectsEntity: function() {
                        var subjects = {};
                        return subjects;
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadSubjects();
            });

        }

    }

})();
;/**
 * This is the Subjects Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('SubjectsEditorDirective')
        .controller('SubjectsEditorDialogController', SubjectsEditorDialogController);

    SubjectsEditorDialogController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModalInstance', 'Subject', 'subjectsEntity'];

    function SubjectsEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, Subject, subjectsEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.subjects = subjectsEntity !== undefined ? subjectsEntity : {};

        vm.cancel = cancel;
        vm.save = save;

        var onSaveFinished = function(result) {
            $scope.$emit('subjects-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        function save() {
            if (vm.subjects.id) {
                Subject.save(vm.subjects, onSaveFinished);
            } else {
                if (vm.subjects.id !== null) {
                    Subject.create(vm.subjects, onSaveFinished);
                }
            }
        }

    }


})();
;/**
 * This is the SupportTypes Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('SupportTypesEditorDirective')
        .controller('SupportTypesEditorController', SupportTypesEditorController);

    SupportTypesEditorController.$inject = ['$log', '$uibModal', '$scope', 'SupportType'];

    function SupportTypesEditorController($log, $uibModal, $scope, SupportType) {
        /* jshint validthis:true */
        var vm = this;
        vm.supportTypes = [];

        vm.loadSupportTypes = loadSupportTypes;
        vm.editSupportTypes = editSupportTypes;
        vm.addSupportTypes = addSupportTypes;

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+code';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function loadSupportTypes() {
            SupportType.query().then(function(response) {
                vm.supportTypes = response.data;
                $log.info("Loading Faculty ");
            }, function(response) {
                $log.error("Failed to load Faculties");
            });
        }


        function editSupportTypes(supportTypeId) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/support-types-editor/views/support-types-editorDialog.html',
                controller: 'SupportTypesEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    supportTypesEntity: function(SupportType) {
                        return SupportType.get(supportTypeId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadSupportTypes();
            });

        }


        function addSupportTypes() {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/support-types-editor/views/support-types-editor-addDialog.html',
                controller: 'SupportTypesEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    supportTypesEntity: function() {
                        var supportTypes = {};
                        return supportTypes;
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadSupportTypes();
            });

        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

    }

})();
;/**
 * This is the Year Group Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('SupportTypesEditorDirective')
        .controller('SupportTypesEditorDialogController', SupportTypesEditorDialogController);

    SupportTypesEditorDialogController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModalInstance', 'SupportType', 'supportTypesEntity'];

    function SupportTypesEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, SupportType, supportTypesEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.supportTypes = supportTypesEntity !== undefined ? supportTypesEntity : {};

        vm.cancel = cancel;
        vm.save = save;
        vm.add = add;

        var onSaveFinished = function(result) {
            $scope.$emit('supportTypes-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        function add() {
            if (vm.supportTypes.id !== null) {
                SupportType.create(vm.supportTypes, onSaveFinished);
            }
        }

        function save() {
            if (vm.supportTypes.id) {
                SupportType.save(vm.supportTypes, onSaveFinished);
            }
        }

    }

})();
;/**
 * This is the Student Bursary Editor Dialog Controller, it is used to handle the student bursary editor dialog controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('TextLookupEditorDirective')
        .controller('TextLookupEditorDialogController', TextLookUpEditorDialogController);

    TextLookUpEditorDialogController.$inject = ['$log', '$scope', '$state', '$uibModalInstance', '$uibModal', '$rootScope', 'textLookupEntity', 'TextLookup'];

    function TextLookUpEditorDialogController($log, $scope, $state, $uibModalInstance, $uibModal, $rootScope, textLookupEntity, TextLookup) {
        /* jshint validthis:true */
        var vm = this;
        vm.textLookup = textLookupEntity !== undefined ? textLookupEntity : {};

        vm.save = save;
        vm.cancel = cancel;


        var onSaveFinished = function(result) {
            $scope.$emit('text-lookup-saved', result);
            $uibModalInstance.close(result);
        };


        /**
         * This saves the TextLookup and closes that dialog box
         */
        function save() {
            $log.log('TextLookupDialogController::save called');
            $log.info(vm.textLookup);
            if (vm.textLookup) {
                TextLookup.save(vm.textLookup, onSaveFinished);
            } else {
                return null;
            }
        }


        /**
         * This closes the TextLookup editor dialog box without saving
         */
        function cancel() {
            $log.log('TextLookupDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        }

    }

})();
;/**
 * This is the TextLookup Editor Controller, it is used to handle the TextLookup editor controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */



(function() {
    'use strict';

    angular
        .module('TextLookupEditorDirective')
        .controller('TextLookupEditorController', TextLookupEditorController);

    TextLookupEditorController.$inject = ['$log', '$scope', '$uibModal', 'TextLookup'];

    function TextLookupEditorController($log, $scope, $uibModal, TextLookup) {
        /* jshint validthis:true */
        var vm = this;
        vm.textLookups = [];
        vm.searchText = '';
        vm.visible = false;

        vm.loadTextLookup = loadTextLookup;
        vm.editTextLookup = editTextLookup;

        vm.applyFilter = applyFilter;
        vm.toggleVisibility = toggleVisibility;
        vm.resetFilters = resetFilters;

        function toggleVisibility() {
            vm.visible = !vm.visible;
        }

        // Apply filters
        $scope.filter = {
            name: '',
            text: '',
            description: ''
        };

        function applyFilter() {
            vm.filterParams = {
                name: $scope.filter.name,
                text: $scope.filter.text,
                description: $scope.filter.description
            };
        }

        function resetFilters() {

            vm.filterParams = {
                name: '',
                text: '',
                description: ''
            };

            $scope.filter = {
                name: '',
                text: '',
                description: ''
            };
        }
        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+name';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        //Private Interface

        function loadTextLookup() {
            TextLookup.query().then(function(response) {
                $log.info('II TextLookup Loaded');
                vm.textLookups = response.data;
                $log.info("Loading textLookups ");
            }, function(response) {
                $log.error("Failed to load textLookups");
            });
        }

        function editTextLookup(id) {
            $log.log('TextLookupDetailsDirectiveController::editContact called');
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/text-lookup-editor/views/text-lookup-editor-dialog.html',
                controller: 'TextLookupEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    textLookupEntity: function(TextLookup) {
                        return TextLookup.get(id).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });
            modalInstance.result.then().finally(function() {
                vm.loadTextLookup(vm.textLookup.id);
            });
        }

    }

})();
;/**
 * This is the Tutor Group Remark Permission Table 
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';
    angular
        .module('TutorGroupRemarkPermissionTableDirective')
        .controller('TutorGroupRemarkPermissionTableDirectiveController', TutorGroupRemarkPermissionTableDirectiveController);

    TutorGroupRemarkPermissionTableDirectiveController.$inject = ['$log', '$scope', '$state', '$rootScope', 'StudentYear'];

    function TutorGroupRemarkPermissionTableDirectiveController($log, $scope, $state, $rootScope, StudentYear) {
        /* jshint validthis:true */
        var vm = this;
        vm.remarkPermission = [];

        vm.init = function() {
            $log.log('StudentConcessionTypeTableDirectiveController::init called');
        };
    }

})();
;/**
 * This is the Tutor Groups Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('TutorGroupsEditorDirective')
        .controller('TutorGroupsEditorController', TutorGroupsEditorController);

    TutorGroupsEditorController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModal', 'TutorGroup'];

    function TutorGroupsEditorController($log, $scope, $state, $rootScope, $uibModal, TutorGroup) {
        /* jshint validthis:true */
        var vm = this;
        vm.tutorGroups = [];
        vm.searchText = '';
        vm.visible = false;

        vm.editTutorGroups = editTutorGroups;
        vm.addTutorGroups = addTutorGroups;

        vm.applyFilter = applyFilter;
        vm.toggleVisibility = toggleVisibility;
        vm.resetFilters = resetFilters;

        function toggleVisibility() {
            vm.visible = !vm.visible;
        }

        // Apply filters
        $scope.filter = {
            code: '',
            description: ''
        };

        function applyFilter() {
            vm.filterParams = {
                code: $scope.filter.code,
                description: $scope.filter.description
            };
        }

        function resetFilters() {

            vm.filterParams = {
                code: '',
                description: ''
            };

            $scope.filter = {
                code: '',
                description: ''
            };
        }

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+code';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function editTutorGroups(tutorGroupId) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/tutor-groups-editor/views/tutor-groups-editorDialog.html',
                controller: 'TutorGroupsEditorDialogController',
                controllerAs: 'ctrl',
                resolve: {
                    tutorGroupsEntity: function(TutorGroup) {
                        return TutorGroup.get(tutorGroupId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("Failed to retrieve");
                        });
                    }
                }
            });
        }

        function addTutorGroups() {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/tutor-groups-editor/views/tutor-groups-editorDialog.html',
                controller: 'TutorGroupsEditorDialogController',
                controllerAs: 'ctrl',
                resolve: {
                    tutorGroupsEntity: function() {
                        var tutorGroups = {};
                        return tutorGroups;
                    }
                }
            });
        }


    }

})();
;/**
 * This is the Tutor Groups Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('TutorGroupsEditorDirective')
        .controller('TutorGroupsEditorDialogController', TutorGroupsEditorDialogController);

    TutorGroupsEditorDialogController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModalInstance', 'TutorGroup', 'tutorGroupsEntity'];

    function TutorGroupsEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, TutorGroup, tutorGroupsEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.tutorGroups = tutorGroupsEntity !== undefined ? tutorGroupsEntity : {};

        vm.cancel = cancel;
        vm.save = save;


        var onSaveFinished = function(result) {
            $scope.$emit('tutor-groups-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        function save() {
            if (vm.tutorGroups.id) {
                TutorGroup.save(vm.tutorGroups, onSaveFinished);
            } else {
                if (vm.tutorGroups.id !== null) {
                    TutorGroup.create(vm.tutorGroups, onSaveFinished);
                }
            }
        }

    }


})();
;/**
 * This is the Word Generator Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';
    angular
        .module('WordGeneratorDirective')
        .controller('WordGeneratorDirectiveController', wordGeneratorDirectiveController);

    wordGeneratorDirectiveController.$inject = ['$log', '$scope', '$rootScope', '$http', 'GLOBAL'];

    function wordGeneratorDirectiveController($log, $scope, $rootScope, $http, GLOBAL) {
        /* jshint validthis:true */
        var vm = this;

        vm.studentLetter = studentLetter;
        vm.parentLetter = parentLetter;


        function downloadFile(url, filename) {
            var a = document.createElement("a");
            document.body.appendChild(a);
            a.style = "display: none";

            $http.get(url, {
                responseType: 'arraybuffer'
            }).then(function(reponse) {
                var file = new Blob([reponse.data], {
                    type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
                });
                var fileURL = window.URL.createObjectURL(file);
                a.href = fileURL;
                a.download = filename;
                a.click();
                document.body.removeChild(a);
            });

        }

        function studentLetter(studentId) {
            downloadFile(GLOBAL.API + '/wordGenerator/studentLetter/' + studentId, 'student-letter-' + studentId + '.docx');
        }

        function parentLetter(studentId) {
            downloadFile(GLOBAL.API + '/wordGenerator/parentLetter/' + studentId, 'parent-letter-' + studentId + '.docx');
        }
    }

})();
;/**
 * This is the YearGroups Editor Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular
        .module('YearGroupsEditorDirective')
        .controller('YearGroupsEditorController', YearGroupsEditorController);

    YearGroupsEditorController.$inject = ['$log', '$uibModal', '$scope', 'YearGroup'];

    function YearGroupsEditorController($log, $uibModal, $scope, YearGroup) {
        /* jshint validthis:true */
        var vm = this;
        vm.yearGroups = [];

        vm.loadYearGroups = loadYearGroups;
        vm.editYearGroups = editYearGroups;
        vm.addYearGroups = addYearGroups;

        vm.changeSort = changeSort;
        vm.isSortedAsc = isSortedAsc;
        vm.isSortedDesc = isSortedDesc;

        vm.sortOrder = '+code';

        function changeSort(field) {
            if (vm.sortOrder == '+' + field) {
                vm.sortOrder = '-' + field;
            } else {
                vm.sortOrder = '+' + field;
            }
        }

        function loadYearGroups() {
            YearGroup.query().then(function(response) {
                vm.yearGroups = response.data;
                $log.info("Loading Faculty ");
            }, function(response) {
                $log.error("Failed to load Faculties");
            });
        }


        function editYearGroups(yearGroupId) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/year-groups-editor/views/year-groups-editorDialog.html',
                controller: 'YearGroupsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    yearGroupsEntity: function(YearGroup) {
                        return YearGroup.get(yearGroupId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("failed to retrieve");
                        });
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadYearGroups();
            });

        }


        function addYearGroups() {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/directives/year-groups-editor/views/year-groups-editorDialog.html',
                controller: 'YearGroupsEditorDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    yearGroupsEntity: function() {
                        var yearGroups = {};
                        return yearGroups;
                    }
                }
            });

            modalInstance.result.then().finally(function() {
                vm.loadYearGroups();
            });

        }

        function isSortedAsc(fieldName) {
            if (vm.sortOrder == "+" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

        function isSortedDesc(fieldName) {
            if (vm.sortOrder == "-" + fieldName) {
                return true;
            }
            return false;
            // check if sortOrder is an array and if it contains fieldName
        }

    }

})();
;/**
 * This is the Year Group Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */

(function() {
    'use strict';

    angular.module('YearGroupsEditorDirective')
        .controller('YearGroupsEditorDialogController', YearGroupsEditorDialogController);

    YearGroupsEditorDialogController.$inject = ['$log', '$scope', '$state',
        '$rootScope', '$uibModalInstance', 'YearGroup', 'yearGroupsEntity'
    ];

    function YearGroupsEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, YearGroup, yearGroupsEntity) {
        /* jshint validthis:true */
        var vm = this;
        vm.yearGroups = yearGroupsEntity !== undefined ? yearGroupsEntity : {};

        vm.cancel = cancel;
        vm.save = save;

        var onSaveFinished = function(result) {
            $scope.$emit('yearGroups-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        function save() {
            if (vm.yearGroups.id) {
                YearGroup.save(vm.yearGroups, onSaveFinished);
            } else {
                if (vm.yearGroups.id !== null) {
                    YearGroup.create(vm.yearGroups, onSaveFinished);
                }
            }
        }

    }

})();
;/**
 * This file defines the route configuration for the admissions section of the CID system.
 *
 */
(function() {
    'use strict';

    angular.module('cid.admissions').config(admissionsRoutesConfiguration);

    admissionsRoutesConfiguration.$inject = ['$stateProvider'];

    function admissionsRoutesConfiguration($stateProvider) {
        $stateProvider
            .state('admissions', {
                parent: 'site',
                url: '/admissions',
                data: {
                    roles: ['ROLE_Admissions']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/admissions/views/welcome.html',
                    },
                    "admissions@": {},
                },
            })
            .state('admissions.new', {
                url: '/new',
                data: {
                    roles: ['ROLE_Admissions']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/admissions/views/application-form-new.html',
                    },
                },
            })
            .state('admissions.search', {
                url: '/search',
                data: {
                    roles: ['ROLE_Admissions']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/admissions/views/search.html',
                        controller: 'ApplicationSearchController',
                        controllerAs: 'ctrl'
                    },
                },
            })
            .state('admissions.edit', {
                url: '/edit/{studentId}',
                data: {
                    roles: ['ROLE_Admissions']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/admissions/views/application-form-edit.html',
                    },
                },
                resolve: {
                    application: ['$stateParams', 'ApplicationForm', function($stateParams, ApplicationForm) {
                        return ApplicationForm.get($stateParams.studentId);
                    }]
                }
            })

        ;



    }

})();
;/**
 * The Search Module for finding applicants
 */
angular
    .module('cid.admissions')
    .controller('ApplicationSearchController', ApplicationSearchController);

ApplicationSearchController.$inject = ['$log', '$scope', '$http', 'ApplicationForm'];

function ApplicationSearchController($log, $scope, $http, ApplicationForm) {
    /* jshint validthis:true */
    var vm = this;

    // Public Interface

    vm.searchTerm = '';
    vm.noResults = true;

    vm.loading = false;
    vm.message = "";

    vm.search = search;

    // Private Interface

    /* Event to Search */
    function search(search) {
        $log.debug('II StudentSearchController :: search called');
        vm.loading = true;
        displayMessage("Loading please wait!");
        var url = "http://localhost:9001/api/applications/search/" + search;
        //$http.get(url)
        ApplicationForm.search(search).then(function(response) {
            if (response.data.length !== 0) {
                vm.applicationList = response.data;
                vm.noResults = false;
                displayMessage("");
            } else {
                vm.applicationList = [];
                vm.noResults = true;
                displayMessage(response.message);
            }
        });

    }

    function displayMessage(message) {
        $log.debug('II SearchController :: displayMessage called');
        vm.message = message;
    }

}
;(function() {
    'use strict';

    angular
        .module('cid.course-record-viewer')
        .controller('CourseGroupListController', courseGroupListController);

    courseGroupListController.$inject = ['$log', '$scope', '$rootScope', '$state', 'CourseGroup', 'GLOBAL', 'APP'];

    function courseGroupListController($log, $scope, $rootScope, $state, CourseGroup, GLOBAL, APP) {
        /* jshint validthis:true */
        var vm = this;

        vm.loaded = false;
        vm.courseGroups = [];
        vm.courseGroup = {};
        vm.searchText = '';

        vm.init = init;
        vm.loadCourse = loadCourseGroup;
        vm.loadCourseGroupByYear = loadCourseGroupByYear;
        vm.applyFilter = applyFilter;
        vm.toggleVisibility = toggleVisibility;
        vm.visible = false;
        vm.resetFilters = resetFilters;

        // loads course lists based on year change
        $scope.$on('$destroy', $rootScope.$on("current-year-changed", function(data) {
            vm.loadCourseGroupByYear(APP.getYear());
        }));

        // Apply filters
        $scope.filter = {
            spec: '',
            _yearGroupDescription: '',
            _departmentDescription: ''

        };

        function applyFilter() {
            vm.filterParams = {
                spec: $scope.filter.spec,
                _yearGroupDescription: $scope.filter._yearGroupDescription,
                _departmentDescription: $scope.filter._departmentDescription
            };
        }

        function toggleVisibility() {
            vm.visible = !vm.visible;
        }


        function init() {
            $log.log('CourseGroupListController::init called');
            CourseGroup.getByYear(APP.getYear()).then(function(response) {
                $log.info('II Successfully retrieved CourseGroups');
                vm.courseGroups = response.data;
            }, function(response) {
                $log.error('EE Error retrieving CourseGroups');
            });
        }

        function loadCourseGroup(id) {
            $log.log('CourseGroupListController::loadCourseGroup called');
            CourseGroup.get(id).then(function(response) {
                $log.log('II - Course with ID: ' + id + ' retireved.');
                vm.course = response.data;
                if (response.data) {
                    vm.loaded = true;
                }
                $rootScope.$emit('course.loaded');
            }, function(response) {
                $log.log('EE - An error occurred trying to retireve the course with ID: ' + id);
                alert("Failed to retrieve course with ID: " + id);
            });
        }

        function loadCourseGroupByYear(year) {
            $log.log('CourseGroupListController::loadCourseGroupByYear called');
            CourseGroup.getByYear(year).then(function(response) {
                $log.info('II Successfully retrieved CourseGroupsByYear');
                vm.courseGroups = response.data;
            }, function(response) {
                $log.error('EE Error retrieving CourseGroups');
            });
        }


        // Resets the filter
        function resetFilters() {

            vm.filterParams = {
                spec: '',
                _yearGroupDescription: '',
                _departmentDescription: ''
            };

            $scope.filter = {
                spec: '',
                _yearGroupDescription: '',
                _departmentDescription: ''
            };
        }

        vm.init();
    }

})();
;(function() {
    'use strict';

    angular.module('cid.course-record-viewer').controller(
        'CourseListController', CourseListController);

    CourseListController.$inject = ['$log', '$scope', '$rootScope', '$state', 'courseList', 'Course', 'GLOBAL', 'APP'];

    function CourseListController($log, $scope, $rootScope, $state, courseList, Course, GLOBAL, APP) {
        /* jshint validthis:true */
        var vm = this;
        vm.loaded = false;
        vm.courses = courseList ? courseList.data : [];
        vm.course = {};
        vm.searchText = '';
        vm.visible = false;
        // Public Interface
        vm.init = init;
        vm.loadCourse = loadCourse;
        vm.loadCourseListByYear = loadCourseListByYear;
        vm.applyFilter = applyFilter;
        vm.toggleVisibility = toggleVisibility;
        vm.resetFilters = resetFilters;


        //vm.init();

        function toggleVisibility() {
            vm.visible = !vm.visible;
        }

        // Apply filters
        $scope.filter = {
            spec: '',
            _levelDescription: '',
            _subjectDescription: '',
            _examBoardDescription: '',
            learningAimReference: ''
        };

        function applyFilter() {
            vm.filterParams = {
                spec: $scope.filter.spec,
                _levelDescription: $scope.filter._levelDescription,
                _subjectDescription: $scope.filter._subjectDescription,
                _examBoardDescription: $scope.filter._examBoardDescription,
                learningAimReference: $scope.filter.learningAimReference
            };
        }

        function getCurrentYear() {
            return APP.getYear();
        }

        // loads course lists based on year change
        $scope.$on('$destroy', $rootScope.$on("current-year-changed", function(data) {
            vm.loadCourseListByYear(APP.getYear());
        }));

        function init() {
            $log.log('CourseRecordViewerController::init called');
            vm.loadCourseListByYear(APP.getYear());
        }

        function loadCourse(id) {
            $log.log('CourseRecordViewerController::loadCourse called');
            Course.get(id).then(function(response) {
                    $log.log('II - Course with ID: ' + id + ' retireved.');
                    vm.course = response.data;
                    if (response.data) {
                        vm.loaded = true;
                    }
                    $rootScope.$emit('course.loaded');
                },
                function(response) {
                    $log.log('EE - An error occurred trying to retireve the course with ID: ' + id);
                    alert("Failed to retrieve course with ID: " + id);
                });
        }

        function loadCourseListByYear(year) {
            Course.getByYear(year).then(function(response) {
                $log.info('II Successfully retrieve courses');
                vm.courses = response.data;
            }, function(response) {
                $log.error('EE Failed to retrieve courses from API');
            });
        }

        // Resets the filter
        function resetFilters() {

            vm.filterParams = {
                spec: '',
                _levelDescription: '',
                _subjectDescription: '',
                _examBoardDescription: '',
                learningAimReference: ''
            };

            $scope.filter = {
                spec: '',
                _levelDescription: '',
                _subjectDescription: '',
                _examBoardDescription: '',
                learningAimReference: ''
            };
        }

    }

})();
;/**
 * This is the Course Record Viewer Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {

    'use strict';

    angular
        .module('cid.course-record-viewer')
        .controller('CourseViewerSearchController', courseViewerSearchController)
        .controller('CourseRecordViewerController', courseRecordViewerController);


    courseViewerSearchController.$inject = ['$state'];

    courseRecordViewerController.$inject = ['$log', '$scope', '$rootScope', '$state', '$stateParams', 'courseEntity', 'enrolmentList', 'Course', 'GLOBAL'];


    function courseViewerSearchController($state) {
        /* jshint validthis:true */
        var vm = this;
        vm.loadCourse = loadCourse;

        function loadCourse(id) {
            $state.go('course-record.view', {
                courseId: id
            });
        }

    }

    function courseRecordViewerController($log, $scope, $rootScope, $state, $stateParams, courseEntity, enrolmentList, Course, GLOBAL) {
        /* jshint validthis:true */
        var vm = this;

        // Public Interface

        vm.course = courseEntity ? courseEntity.data : undefined;
        vm.enrolments = enrolmentList ? enrolmentList.data : [];

        // Event Handlers

        $scope.$on('$destroy', $rootScope.$on("current-year-changed", function(data) {
            loadCourseGroups(vm.course.id);
            loadEnrolments(vm.course.id);
        }));

        // Private Interface

        function loadCourse(id) {
            $log.log('CourseRecordViewerController :: loadCourse called');
            Course.get(id).then(function(response) {
                $log.log('II - Course with ID: ' + id + ' retireved.');
                vm.course = response.data;
                loadCourseGroups(id);
                loadEnrolments(id);
            }, function(response) {
                $log.log('EE - An error occurred trying to retireve the course with ID: ' + id);
                alert("Failed to retrieve course with ID: " + id);
            });

        }

        function loadCourseGroups(id) {
            $log.log('II CourseRecordViewerController :: loadCourseGroups called');
            Course.courseGroups(id).then(function(response) {
                $log.log('II - Course Groups for Course with ID: ' + id + ' retrieved.');
                vm.courseGroups = response.data;
                $rootScope.$emit('course.course-groups.loaded');
            });
        }

        function loadEnrolments(id) {
            Course.enrolments(id).then(function(response) {
                vm.enrolments = response.data;
            });
        }

    }

})();
;(function() {
    'use strict';

    angular
        .module('cid.course-record-viewer')
        .config(courseViewerRouteConfiguration);

    courseViewerRouteConfiguration.$inject = ['$stateProvider'];

    function courseViewerRouteConfiguration($stateProvider) {

        $stateProvider
            .state('course-record', {
                parent: 'site',
                url: '/courses',
                data: {
                    roles: ['ROLE_Staff']
                },
                views: {
                    "side-bar@": {
                        templateUrl: 'js/modules/courseRecordViewer/views/side-bar.html'
                    },
                    "content@": {
                        templateUrl: 'js/modules/courseRecordViewer/views/layout.html',
                    },
                    "content.search@": {
                        templateUrl: 'js/modules/courseRecordViewer/views/search.html',
                        controller: 'CourseViewerSearchController',
                        controllerAs: 'ctrl'
                    },
                },
            })
            .state('course-record.course-list', {
                url: '/list',
                views: {
                    "viewer": {
                        templateUrl: 'js/modules/courseRecordViewer/views/course-list.html',
                        controller: 'CourseListController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    courseList: ['Course', function(Course) {
                        return Course.get();
                    }]
                }
            })
            .state('course-record.view', {
                url: '/{courseId}',
                data: {
                    roles: ['ROLE_Staff']
                },
                views: {
                    "viewer": {
                        templateUrl: 'js/modules/courseRecordViewer/views/course-viewer.html',
                        controller: 'CourseRecordViewerController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    courseEntity: ['$stateParams', 'Course', function($stateParams, Course) {
                        return Course.get($stateParams.courseId);
                    }],
                    enrolmentList: ['$stateParams', 'Course', function($stateParams, Course) {
                        return Course.enrolments($stateParams.courseId);
                    }],
                },
            })
            .state('course-record.course-group-list', {
                url: '/groups/list',
                views: {
                    "viewer": {
                        templateUrl: 'js/modules/courseRecordViewer/views/course-group-list.html',
                        controller: 'CourseGroupListController',
                        controllerAs: 'ctrl'
                    },
                },
            })
            .state('course-record.course-group-list.view', {
                url: '/groups/{groupId}',
                views: {
                    "viewer": {
                        template: '<h1>Test</h1>',
                        //				controller: 'CourseGroupListController',
                        //				controllerAs: 'ctrl'
                    },
                },
            })

        ;
    }

})();
;(function() {
    'use strict';

    angular
        .module('cid.data')
        .config(coreDataRouteConfiguration);

    coreDataRouteConfiguration.$inject = ['$stateProvider'];

    function coreDataRouteConfiguration($stateProvider) {
        $stateProvider
            .state('data.admissions', {
                abstract: true,
                url: '/admissions',
                data: {
                    roles: ['ROLE_Core Data']
                },
            })
            .state('data.admissions.application-statuses', {
                url: '/application-statuses',
                data: {
                    roles: ['ROLE_Core Data']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/data/views/application-statuses.html',
                        controller: 'DataController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    dataCollection: ['ApplicationStatus', function(ApplicationStatus) {
                        return ApplicationStatus.query();
                    }]
                }
            })
            .state('data.admissions.schools', {
                url: '/schools',
                data: {
                    roles: ['ROLE_Core Data']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/data/views/schools.html',
                        controller: 'DataController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    dataCollection: ['School', function(School) {
                        return School.query();
                    }]
                }

            })
            .state('data.admissions.offer-types', {
                url: '/offer-types',
                data: {
                    roles: ['ROLE_Core Data']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/data/views/offer-types.html',
                        controller: 'DataController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    dataCollection: ['OfferType', function(OfferType) {
                        return OfferType.query();
                    }]
                }

            })
            .state('data.admissions.entry-qualification-types', {
                url: '/entry-qualification-types',
                data: {
                    roles: ['ROLE_Core Data']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/data/views/entry-qualification-types.html',
                        controller: 'DataController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    dataCollection: ['EntryQualificationType', function(EntryQualificationType) {
                        return EntryQualificationType.query();
                    }]
                }

            })
            .state('data.admissions.entry-qualifications', {
                url: '/entry-qualifications',
                data: {
                    roles: ['ROLE_Core Data']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/data/views/entry-qualifications.html',
                        controller: 'DataController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    dataCollection: ['EntryQualification', function(EntryQualification) {
                        return EntryQualification.query();
                    }]
                }

            });
    }
})();
;(function() {
    'use strict';

    angular
        .module('cid.data')
        .config(coreDataRouteConfiguration);

    coreDataRouteConfiguration.$inject = ['$stateProvider'];

    function coreDataRouteConfiguration($stateProvider) {
        $stateProvider
            .state('data.core', {
                abstract: true,
                url: '/core',
                data: {
                    roles: ['ROLE_Core Data']
                },
            })
            .state({
                name: 'data.core.academic-years',
                url: '/academic-years',
                data: {
                    roles: ['ROLE_Core Data']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/data/views/academic-years.html',
                        controller: 'DataController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    dataCollection: ['AcademicYear', function(AcademicYear) {
                        return AcademicYear.query();
                    }]
                }

            })
            .state({
                name: 'data.core.year-groups',
                url: '/year-groups',
                data: {
                    roles: ['ROLE_Core Data']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/data/views/year-groups.html',
                        controller: 'DataController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    dataCollection: ['YearGroup', function(YearGroup) {
                        return YearGroup.query();
                    }]
                }

            })
            .state({
                name: 'data.core.levels',
                url: '/levels',
                data: {
                    roles: ['ROLE_Core Data']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/data/views/levels.html',
                        controller: 'DataController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    dataCollection: ['Level', function(Level) {
                        return Level.query();
                    }]
                }

            })
            .state({
                name: 'data.core.holidays',
                url: '/holidays',
                data: {
                    roles: ['ROLE_Core Data']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/data/views/holidays.html',
                        controller: 'DataController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    dataCollection: ['Holiday', function(Holiday) {
                        return Holiday.query();
                    }]
                }

            })
            .state({
                name: 'data.core.subjects',
                url: '/subjects',
                data: {
                    roles: ['ROLE_Core Data']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/data/views/subjects.html',
                        controller: 'DataController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    dataCollection: ['Subject', function(Subject) {
                        return Subject.query();
                    }]
                }

            })
            .state({
                name: 'data.core.departments',
                url: '/departments',
                data: {
                    roles: ['ROLE_Core Data']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/data/views/departments.html',
                        controller: 'DataController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    dataCollection: ['Department', function(Department) {
                        return Department.query();
                    }]
                }

            })
            .state({
                name: 'data.core.faculties',
                url: '/faculties',
                data: {
                    roles: ['ROLE_Core Data']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/data/views/faculties.html',
                        controller: 'DataController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    dataCollection: ['Faculty', function(Faculty) {
                        return Faculty.query();
                    }]
                }

            })
            .state({
                name: 'data.core.tutor-groups',
                url: '/tutor-groups',
                data: {
                    roles: ['ROLE_Core Data']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/data/views/tutor-groups.html',
                        controller: 'DataController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    dataCollection: ['TutorGroup', function(TutorGroup) {
                        return TutorGroup.query();
                    }]
                }

            });
    }
})();
;(function() {
    'use strict';

    angular
        .module('cid.data')
        .config(learningSupportDataRouteConfiguration);

    learningSupportDataRouteConfiguration.$inject = ['$stateProvider'];

    function learningSupportDataRouteConfiguration($stateProvider) {
        $stateProvider
            .state('data.learning-support', {
                abstract: true,
                url: '/learning-support',
            })
            .state('data.learning-support.special-categories', {
                url: '/special-categories',
                data: {
                    roles: ['ROLE_Core Data']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/data/views/special-categories.html',
                        controller: 'DataController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    dataCollection: ['SpecialCategory', function(SpecialCategory) {
                        return SpecialCategory.query();
                    }]
                }

            })
            .state('data.learning-support.concession-types', {
                url: '/concession-types',
                data: {
                    roles: ['ROLE_Core Data']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/data/views/concession-types.html',
                        controller: 'DataController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    dataCollection: ['ConcessionType', function(ConcessionType) {
                        return ConcessionType.query();
                    }]
                }

            })
            .state('data.learning-support.support-types', {
                url: '/support-types',
                data: {
                    roles: ['ROLE_Core Data']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/data/views/support-types.html',
                        controller: 'DataController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    dataCollection: ['SupportType', function(SupportType) {
                        return SupportType.query();
                    }]
                }

            })
            .state('data.learning-support.referral-reasons', {
                url: '/referral-reasons',
                data: {
                    roles: ['ROLE_Core Data']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/data/views/referral-reasons.html',
                        controller: 'DataController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    dataCollection: ['ReferralReason', function(ReferralReason) {
                        return ReferralReason.query();
                    }]
                }

            });
    }
})();
;(function() {
    'use strict';

    angular
        .module('cid.data')
        .config(monirotingDataRouteConfiguration);

    monirotingDataRouteConfiguration.$inject = ['$stateProvider'];

    function monirotingDataRouteConfiguration($stateProvider) {
        $stateProvider
            .state('data.monitoring', {
                abstract: true,
                url: '/security',
                data: {
                    roles: ['ROLE_Core Data']
                },
            })
            .state('data.monitoring.attendance-monitorings', {
                url: '/attendance-monitorings',
                data: {
                    roles: ['ROLE_Core Data']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/data/views/attendance-monitorings.html',
                        controller: 'DataController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    dataCollection: ['AttendanceMonitoring', function(AttendanceMonitoring) {
                        return AttendanceMonitoring.query();
                    }]
                }

            })
            .state('data.monitoring.central-monitorings', {
                url: '/central-monitorings',
                data: {
                    roles: ['ROLE_Core Data']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/data/views/central-monitorings.html',
                        controller: 'DataController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    dataCollection: ['CentralMonitoring', function(CentralMonitoring) {
                        return CentralMonitoring.query();
                    }]
                }

            })
            .state('data.monitoring.punctuality-monitorings', {
                url: '/punctuality-monitorings',
                data: {
                    roles: ['ROLE_Core Data']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/data/views/punctuality-monitorings.html',
                        controller: 'DataController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    dataCollection: ['PunctualityMonitoring', function(PunctualityMonitoring) {
                        return PunctualityMonitoring.query();
                    }]
                }

            });
    }
})();
;(function() {
    'use strict';

    angular
        .module('cid.data')
        .config(securityDataRouteConfiguration);

    securityDataRouteConfiguration.$inject = ['$stateProvider'];

    function securityDataRouteConfiguration($stateProvider) {
        $stateProvider
            .state('data.security', {
                abstract: true,
                url: '/security',
                data: {
                    roles: ['ROLE_Core Data']
                },
            })
            .state('data.security.staff', {
                url: '/staffs',
                data: {
                    roles: ['ROLE_Core Data']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/data/views/staff.html',
                        controller: 'DataController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    dataCollection: ['Staff', function(Staff) {
                        return Staff.query();
                    }]
                }

            })

            .state('data.security.roles', {
                url: '/roles',
                data: {
                    roles: ['ROLE_Core Data']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/data/views/roles.html',
                        controller: 'DataController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    dataCollection: ['Role', function(Role) {
                        return Role.query();
                    }]
                }

            });
    }
})();
;(function() {
    'use strict';

    angular
        .module('cid.data')
        .config(systemDataRouteConfiguration);

    systemDataRouteConfiguration.$inject = ['$stateProvider'];

    /**
     * This function is used to define the states in the data.system parent state
     */
    function systemDataRouteConfiguration($stateProvider) {
        $stateProvider
            .state('data.system', {
                abstract: true,
                url: '/system',
            })
            .state('data.system.text-lookups', textLookupState)
            .state('data.system.settings', settingsState)
            .state('data.system.possible-grades', possibleGradesState)
            .state('data.system.possible-grade-sets', possibleGradeSetsState)
            .state('data.system.letter-templates', letterTemplatesState)
            .state('data.system.reporting-periods', reportingPeriods);
    }

    /**
     * This function is used to create a state object that can then be used by the stateProvider to register a state.
     *
     * @param  {String} url                The relative URL to use for the created state.
     * @param  {String} templateUrl        The templateUrl to use for the created state.
     * @param  {function} dataCollectionFn The dataCollection function to use for the created state.
     * @return {Object}                    A state definition object.
     */
    function createState(url, templateUrl, dataCollectionFn) {
        return {
            url: url,
            data: {
                roles: ['ROLE_Core Data']
            },
            views: {
                "content@": {
                    templateUrl: templateUrl,
                    controller: 'DataController',
                    controllerAs: 'ctrl'
                },
            },
            resolve: {
                dataCollection: dataCollectionFn
            }
        };
    }

    var textLookupState = createState('/text-lookups', 'js/modules/data/views/text-lookup.html', ['TextLookup', function(TextLookup) {
        return TextLookup.query();
    }]);

    var settingsState = createState('/settings', 'js/modules/data/views/settings.html', ['Settings', function(Settings) {
        return Settings.query();
    }]);

    var possibleGradesState = createState('/possible-grades', 'js/modules/data/views/possible-grades.html', ['PossibleGrade', function(PossibleGrade) {
        return PossibleGrade.query();
    }]);

    var possibleGradeSetsState = createState('/possible-grade-sets', 'js/modules/data/views/possible-grade-sets.html', ['PossibleGradeSet', function(PossibleGradeSet) {
        return PossibleGradeSet.query();
    }]);

    var letterTemplatesState = createState('/letter-templates', 'js/modules/data/views/letter-template.html', ['LetterTemplate', function(LetterTemplate) {
        return LetterTemplate.query();
    }]);

    var reportingPeriods = createState('/reporting-periods', 'js/modules/data/views/reporting-periods.html', ['ReportingPeriod', function(ReportingPeriod) {
        return ReportingPeriod.query();
    }]);

})();
;(function() {
    'use strict';

    angular
        .module('cid.data')
        .config(timetablingDataRouteConfiguration);

    timetablingDataRouteConfiguration.$inject = ['$stateProvider'];

    function timetablingDataRouteConfiguration($stateProvider) {
        $stateProvider
            .state('data.timetabling', {
                abstract: true,
                url: '/timetabling',
            })
            .state('data.timetabling.periods', {
                url: '/periods',
                data: {
                    roles: ['ROLE_Core Data']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/data/views/periods.html',
                        controller: 'DataController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    dataCollection: ['Period', function(Period) {
                        return Period.query();
                    }]
                }

            })
            .state('data.timetabling.blocks', {
                url: '/blocks',
                data: {
                    roles: ['ROLE_Core Data']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/data/views/blocks.html',
                        controller: 'DataController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    dataCollection: ['Block', function(Block) {
                        return Block.query();
                    }]
                }

            })
            .state('data.timetabling.blocks.edit', {
                url: '/edit/{blockId}',
                data: {
                    roles: ['ROLE_Core Data']
                },
                onEnter: ['$state', '$stateParams', '$log', '$uibModal', 'Block', function($state, $stateParams, $log, $uibModal, Block) {
                    $log.log("BlocksEditorController :: editBlocks called");
                    var modalInstance = $uibModal.open({
                        templateUrl: 'js/directives/blocks-editor/views/blocks-editorDialog.html',
                        controller: 'BlocksEditorDialogController',
                        controllerAs: 'ctrl',
                        size: 'lg',
                        resolve: {
                            blocksEntity: function(Block) {
                                return Block.get($stateParams.blockId).then(function(response) {
                                    return response.data;
                                }, function(response) {
                                    alert("failed to retrieve");
                                });
                            }
                        }
                    }).result.finally(function() {
                        $state.go('^');
                    });

                }]
            })
            .state('data.timetabling.rooms', {
                url: '/rooms',
                data: {
                    roles: ['ROLE_Core Data']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/data/views/rooms.html',
                        controller: 'DataController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    dataCollection: ['Room', function(Room) {
                        return Room.query();
                    }]
                }

            });
    }
})();
;/**
 * This is the main module definition for the site.
 *
 *  Applied Styles: [Y001, Y002, Y010, Y021]
 *
 * @type Module
 */
(function() {
    'use strict';

    angular
        .module('cid.data')
        .controller('DataController', DataController);

    DataController.$inject = ['dataCollection', '$scope', '$rootScope', 'Block', 'Room', 'Period', 'TutorGroup', 'Faculty', 'Department', 'Subject', 'Level', 'YearGroup', 'School', 'Settings', 'LetterTemplate', 'PossibleGrade', 'PossibleGradeSet', 'TextLookup', 'AcademicYear', 'SpecialCategory', 'Holiday', 'AttendanceMonitoring', 'CentralMonitoring', 'PunctualityMonitoring', 'ReferralReason', 'ConcessionType', 'SupportType', 'OfferType', 'EntryQualificationType', 'ReportingPeriod', 'EntryQualification', 'ApplicationStatus', 'Staff', 'Role'];

    function DataController(dataCollection, $scope, $rootScope, Block, Room, Period, TutorGroup, Faculty, Department, Subject, Level, YearGroup, School, Settings, LetterTemplate, PossibleGrade, PossibleGradeSet, TextLookup, AcademicYear, SpecialCategory, Holiday, AttendanceMonitoring, CentralMonitoring, PunctualityMonitoring, ReferralReason, ConcessionType, SupportType, OfferType, EntryQualificationType, ReportingPeriod, EntryQualification, ApplicationStatus, Staff, Role) {
        var vm = this;
        vm.data = dataCollection.data;

        // All the event listeners are destroyed once the functions are called.
        $scope.$on('$destroy', $rootScope.$on('blocks-saved', function(data) {
            loadBlock();
        }));

        $scope.$on('$destroy', $rootScope.$on('letter-template-updated', function(data) {
            loadLetterTemplates();
        }));

        $scope.$on('$destroy', $rootScope.$on('room-saved', function(data) {
            loadRoles();
        }));

        $scope.$on('$destroy', $rootScope.$on('role-saved', function(data) {
            loadRooms();
        }));

        $scope.$on('$destroy', $rootScope.$on('periods-saved', function(data) {
            loadPeriods();
        }));

        $scope.$on('$destroy', $rootScope.$on('tutor-groups-saved', function(data) {
            loadTutorGroups();
        }));

        $scope.$on('$destroy', $rootScope.$on('faculties-saved', function(data) {
            loadFaculity();
        }));

        $scope.$on('$destroy', $rootScope.$on('departments-saved', function(data) {
            loadDepartments();
        }));

        $scope.$on('$destroy', $rootScope.$on('subjects-saved', function(data) {
            loadSubjects();
        }));

        $scope.$on('$destroy', $rootScope.$on('levels-saved', function(data) {
            loadLevels();
        }));

        $scope.$on('$destroy', $rootScope.$on('staffs-saved', function(data) {
            loadStaffs();
        }));

        $scope.$on('$destroy', $rootScope.$on('yearGroups-saved', function(data) {
            loadYearGroups();
        }));

        $scope.$on('$destroy', $rootScope.$on('schools-saved', function(data) {
            loadSchools();
        }));

        $scope.$on("destory", $rootScope.$on('settings-saved', function(data) {
            loadSettings();
        }));

        $scope.$on('$destroy', $rootScope.$on('possible-grades-saved', function(data) {
            loadPossibleGrades();
        }));

        $scope.$on('$destroy', $rootScope.$on('possible-grade-sets-saved', function(data) {
            loadPossibleGradeSets();
        }));

        $scope.$on('$destroy', $rootScope.$on('text-lookup-saved', function(data) {
            loadTextLookup();
        }));

        $scope.$on('$destroy', $rootScope.$on('academic-year-saved', function(data) {
            loadAcademicYear();
        }));

        $scope.$on('$destroy', $rootScope.$on('special-category-saved', function(data) {
            loadSpecialCatogories();
        }));

        $scope.$on('$destroy', $rootScope.$on('holidays-saved', function(data) {
            loadHolidays();
        }));

        $scope.$on('$destroy', $rootScope.$on('attendance-monitorings-saved', function(data) {
            loadAttendanceMonitorings();
        }));

        $scope.$on('$destroy', $rootScope.$on('central-monitorings-saved', function(data) {
            loadCentralMonitorings();
        }));

        $scope.$on('$destroy', $rootScope.$on('punctuality-monitorings-saved', function(data) {
            loadPunctualityMonitorings();
        }));

        $scope.$on('$destroy', $rootScope.$on('referralReasons-saved', function(data) {
            loadReferralReasons();
        }));

        $scope.$on('$destroy', $rootScope.$on('concessionTypes-saved', function(data) {
            loadConcessionTypes();
        }));

        $scope.$on('$destroy', $rootScope.$on('supportTypes-saved', function(data) {
            loadSupportTypes();
        }));

        $scope.$on('$destroy', $rootScope.$on('offerTypes-saved', function(data) {
            loadOfferTypes();
        }));

        $scope.$on('$destroy', $rootScope.$on('entryQualificationTypes-saved', function(data) {
            loadEntryQualificationTypes();
        }));
        $scope.$on('$destroy', $rootScope.$on('entryQualifications-saved', function(data) {
            loadEntryQualifications();
        }));
        $scope.$on('$destroy', $rootScope.$on('reportingPeriods-saved', function(data) {
            loadReportingPeriods();
        }));
        $scope.$on('$destroy', $rootScope.$on('application-statuses-saved', function(data) {
            loadApplicationStatuses();
        }));

        function loadAcademicYear() {
            AcademicYear.query().then(function(response) {
                vm.data = response.data;
                $log.info("Loading AcademicYear");
            }, function(response) {
                $log.error("Failed to load AcademicYears");
            });
        }

        function loadApplicationStatuses() {
            ApplicationStatus.query().then(function(response) {
                vm.data = response.data;
                $log.info("Loading ApplicationStatuses");
            }, function(response) {
                $log.error("Failed to load ApplicationStatuses");
            });
        }

        function loadBlock() {
            Block.query().then(function(response) {
                vm.data = response.data;
                $log.info("Loading Blocks");
            }, function(response) {
                $log.error("Failed to load Blocks");
            });
        }


        function loadRooms() {
            Room.query().then(function(response) {
                vm.data = response.data;
                $log.info("Loading Rooms");
            }, function(response) {
                $log.error("Failed to load ");
            });
        }

        function loadRoles() {
            Role.query().then(function(response) {
                vm.data = response.data;
                $log.info("Loading Roles");
            }, function(response) {
                $log.error("Failed to load ");
            });
        }

        function loadPeriods() {
            Period.query().then(function(response) {
                vm.data = response.data;
                $log.info("Loading Periods");
            }, function(response) {
                $log.error("Failed to load ");
            });
        }

        function loadTutorGroups() {
            TutorGroup.query().then(function(response) {
                vm.data = response.data;
            }, function(response) {
                $log.error("Failed to load ");
            });
        }

        function loadFaculity() {
            Faculty.query().then(function(response) {
                vm.data = response.data;
            }, function(response) {
                $log.error("Failed to load ");
            });
        }

        function loadDepartments() {
            Department.query().then(function(response) {
                vm.data = response.data;
            }, function(response) {
                $log.error("Failed to load ");
            });
        }


        function loadSubjects() {
            Subject.query().then(function(response) {
                vm.data = response.data;
            }, function(response) {
                $log.error("Failed to load ");
            });
        }

        function loadLevels() {
            Level.query().then(function(response) {
                vm.data = response.data;
            }, function(response) {
                $log.error("Failed to load ");
            });
        }

        function loadStaffs() {
            Staff.query().then(function(response) {
                vm.data = response.data;
            }, function(response) {
                $log.error("Failed to load ");
            });
        }

        function loadYearGroups() {
            YearGroup.query().then(function(response) {
                vm.data = response.data;
            }, function(response) {
                $log.error("Failed to load ");
            });
        }

        function loadSchools() {
            School.query().then(function(response) {
                vm.data = response.data;
            }, function(response) {
                $log.error("Failed to load ");
            });
        }

        function loadSettings() {
            Settings.query().then(function(response) {
                vm.data = response.data;
            }, function(response) {
                $log.error("Failed to load");
            });
        }

        function loadLetterTemplates() {
            LetterTemplate.query().then(function(response) {
                vm.data = response.data;
            }, function(response) {
                $log.error("Failed to load");
            });
        }

        function loadPossibleGrades() {
            PossibleGrade.query().then(function(response) {
                vm.data = response.data;
                $log.info("Loading PossibleGrades");
            }, function(response) {
                $log.error("Failed to load ");
            });
        }

        function loadTextLookup() {
            TextLookup.query().then(function(response) {
                vm.data = response.data;
            }, function(response) {
                $log.error("Failed to load ");
            });
        }

        function loadPossibleGradeSets() {
            PossibleGradeSet.query().then(function(response) {
                vm.data = response.data;
                $log.info("Loading PossibleGradeSets");
            }, function(response) {
                $log.error("Failed to load ");
            });
        }

        function loadSpecialCatogories() {
            SpecialCategory.query().then(function(response) {
                vm.data = response.data;
                $log.info("Loading SpecialCategories");
            }, function(response) {
                $log.error("Failed to load ");
            });
        }

        function loadHolidays() {
            Holiday.query().then(function(response) {
                vm.data = response.data;
            }, function(response) {
                $log.error("Failed to load ");
            });
        }

        function loadAttendanceMonitorings() {
            AttendanceMonitoring.query().then(function(response) {
                vm.data = response.data;
            }, function(response) {
                $log.error("Failed to load ");
            });
        }

        function loadCentralMonitorings() {
            CentralMonitoring.query().then(function(response) {
                vm.data = response.data;
            }, function(response) {
                $log.error("Failed to load ");
            });
        }

        function loadPunctualityMonitorings() {
            PunctualityMonitoring.query().then(function(response) {
                vm.data = response.data;
            }, function(response) {
                $log.error("Failed to load ");
            });
        }

        function loadReferralReasons() {
            ReferralReason.query().then(function(response) {
                vm.data = response.data;
            }, function(response) {
                $log.error("Failed to load ");
            });
        }

        function loadConcessionTypes() {
            ConcessionType.query().then(function(response) {
                vm.data = response.data;
            }, function(response) {
                $log.error("Failed to load ");
            });
        }

        function loadSupportTypes() {
            SupportType.query().then(function(response) {
                vm.data = response.data;
            }, function(response) {
                $log.error("Failed to load ");
            });
        }

        function loadOfferTypes() {
            OfferType.query().then(function(response) {
                vm.data = response.data;
            }, function(response) {
                $log.error("Failed to load ");
            });
        }

        function loadEntryQualificationTypes() {
            EntryQualificationType.query().then(function(response) {
                vm.data = response.data;
            }, function(response) {
                $log.error("Failed to load ");
            });
        }

        function loadEntryQualifications() {
            EntryQualification.query().then(function(response) {
                vm.data = response.data;
            }, function(response) {
                $log.error("Failed to load ");
            });
        }

        function loadReportingPeriods() {
            ReportingPeriod.getByYear().then(function(response) {
                vm.data = response.data;
            }, function(response) {
                $log.error("Failed to load ");
            });
        }


    }
}());
;(function() {
    'use strict';

    angular
        .module('cid.data')
        .config(dataRouteConfiguration);

    dataRouteConfiguration.$inject = ['$stateProvider'];

    function dataRouteConfiguration($stateProvider) {
        $stateProvider
            .state('data', {
                abstract: true,
                parent: 'site',
                url: '/data',
            })
            .state('data.reporting-periods', {
                url: '/reporting-periods',
                data: {
                    roles: ['ROLE_Core Data']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/data/views/reporting-periods.html',
                        controller: 'DataController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    dataCollection: ['ReportingPeriod', function(ReportingPeriod) {
                        return ReportingPeriod.getByYear();
                    }]
                }

            })

        ;
    }
})();
;(function() {
    'use strict';

    angular
        .module('ErrorHandler', []);

})();
;/**
 * This is the error handler for the site.
 *
 *  Applied Styles: [Y001, Y002, Y010, Y021]
 *
 * @type Module
 */
(function() {
    'use strict';

    angular
        .module('ErrorHandler')
        .config(['$stateProvider', function($stateProvider) {
            $stateProvider
                .state('error', {
                    parent: 'site',
                    url: '/error',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'partials/error.html'
                        }
                    }
                })
                .state('accessdenied', {
                    parent: 'site',
                    url: '/accessdenied',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'partials/accessdenied.html'
                        }
                    },
                });
        }]);

})();
;(function() {
    angular
        .module('cid.exams.course-exam-details')
        .controller('CourseExamDetailsEditorController', ["$log", "$rootScope", "$scope", "$state", "$uibModalInstance", "entity", "Course",
            function($log, $rootScope, $scope, $state, $uibModalInstance, entity, Course) {
                $log.debug('CourseExamRecordEditorController loaded');

                $scope.init = function() {
                    $scope.currentCourse = entity.data;
                    // Use a local copy of SyllabusCode - this stops the syllabusTable directive from being auto refreshed when typing into the Syllabus Code input box.
                    $scope.syllabusCode = $scope.currentCourse.syllabusCode;

                    $rootScope.courseExamRecordToSave = [];
                    $rootScope.courseExamRecordToSave.courseComponent = [];
                    $rootScope.courseExamRecordToSave.courseOption = [];
                    $rootScope.courseExamRecordToSave.courseSyllabus = [];

                    $rootScope.courseExamRecordSavedCounter = 0;

                    $rootScope.courseExamRecordToDelete = [];
                    $rootScope.courseExamRecordToDelete.courseComponent = [];
                    $rootScope.courseExamRecordToDelete.courseOption = [];
                    $rootScope.courseExamRecordToDelete.courseSyllabus = [];

                    $rootScope.courseExamRecordDeletedCounter = 0;
                };

                function watch(obj, compare, prop, handler, param) {
                    if (obj === compare) {
                        clearInterval(intervalTimer[prop]);
                        handler(param);
                    }
                }

                processElements = function(functionArrayToProcess) {
                    for (i = 0; i < functionArrayToProcess.length; i++) {
                        functionArrayToProcess[i]();
                    }
                };

                $scope.save = function(result) {
                    $log.debug('CourseExamRecordEditorController::save called');

                    Course.save($scope.currentCourse);

                    processElements($rootScope.courseExamRecordToSave.courseSyllabus);
                    processElements($rootScope.courseExamRecordToDelete.courseComponent);
                    processElements($rootScope.courseExamRecordToSave.courseOption);

                    intervalTimer = [];
                    // Watchdog timer to check if ALL courseOptions have been created before courseComponents are created.
                    intervalTimer.save = setInterval(function() {
                        watch($rootScope.courseExamRecordSavedCounter, $rootScope.courseExamRecordToSave.courseOption.length, "save",
                            processElements, $rootScope.courseExamRecordToSave.courseComponent);
                    }, 250);

                    // Watchdog timer to be sure that ALL courseComponents are deleted before any courseOptions.
                    intervalTimer.del = setInterval(function() {
                        watch($rootScope.courseExamRecordDeletedCounter, $rootScope.courseExamRecordToDelete.courseComponent.length, "del",
                            processElements, $rootScope.courseExamRecordToDelete.courseOption);
                    }, 250);

                    processElements($rootScope.courseExamRecordToDelete.courseSyllabus);

                    $uibModalInstance.close();
                };

                $scope.cancel = function() {
                    $uibModalInstance.dismiss('cancel');
                };

                $scope.refresh = function() {
                    $log.debug('CourseExamRecordEditorController::refresh called');
                    $scope.syllabusCode = $scope.currentCourse.syllabusCode;
                };

                $scope.init();
            }
        ]);
}());
;(function() {

    angular.module('cid.exams.course-exam-details').controller('CourseExamDetailsListController', function($log, $scope, $rootScope, $state, Course, GLOBAL) {
        var vm = this;

        // Private Properties and Methods
        this.loaded = false;
        this.courses = [];
        this.course = {};

        $scope.filter = {
            courseSpec: '',
            level: '',
            subject: '',
            examBoard: '',
            exclude: {
                syllabusCode: 'NA',
                learningAimReference: 'CMISC001'
            }
        };

        $rootScope.$on("current-year-changed", function(data) {
            init();
        });

        function init() {
            $log.debug('CourseRecordViewerController::init called');
            Course.query().then(function(response) {
                $log.info('II Successfully retrieved courses');
                vm.courses = response.data;
                applyFilter();
            }, function(response) {
                $log.error('EE Failed to retrieve courses from API');
            });
        }

        function applyFilter() {
            $scope.filterParams = {
                spec: $scope.filter.courseSpec,
                _levelDescription: $scope.filter.level,
                _subjectDescription: $scope.filter.subject,
                _examBoardDescription: $scope.filter.examBoard,
                syllabusCode: '!' + $scope.filter.exclude.syllabusCode,
                learningAimReference: '!' + $scope.filter.exclude.learningAimReference
            };
        }

        function loadCourse(id) {
            $log.debug('CourseRecordViewerController::loadCourse called');
            Course.get(id).then(function(response) {
                $log.debug('II - Course with ID: ' + id + ' retireved.');
                vm.course = response.data;
                if (response) {
                    vm.loaded = true;
                }
                $rootScope.$emit('course.loaded');
            }, function(err) {
                $log.debug('EE - An error occurred trying to retireve the course with ID: ' + id);
                alert("Failed to retrieve course with ID: " + id);
            });
        }

        var courseListStateChangeSuccess = $rootScope.$on('$stateChangeSuccess', function(event, toState, toParams, fromState, fromParams) {
            if (toState.name == 'course-record.course-list') {
                init();
            }
        });

        //    $scope.on('$destroy', function() {
        //    	courseListStateChangeSuccess();
        //    });

        // Public Properties and Methods
        vm.loadCourse = loadCourse;
        vm.applyFilter = applyFilter;

        vm.editExamDetails = function(courseId) {
            $state.go('exams.course-details.edit', {
                id: courseId
            });
        };

        // Initialisation
        init();
    });
}());
;(function() {

    angular.module('cid.exams.course-exam-details').controller('CourseRecordViewerController', function($log, $scope, $rootScope, $state, Course, GLOBAL) {
        var vm = this;

        this.loaded = false;
        this.courses = [];
        this.course = {};

        this.searchText = '';

        this.init = function() {
            $log.debug('CourseRecordViewerController::init called');
            Course.query().then(function(data) {
                $log.info('II Successfully retrieve courses');
                vm.courses = response.data;
            }).error(function(data) {
                $log.error('EE Failed to retrieve courses from API');
            });
        };



        this.loadCourse = function(id) {
            $log.debug('CourseRecordViewerController::loadCourse called');
            Course.get(id).then(function(data) {
                $log.debug('II - Course with ID: ' + id + ' retireved.');
                vm.course = response.data;
                if (data) {
                    vm.loaded = true;
                }
                $rootScope.$emit('course.loaded');
            }).error(function(err) {
                $log.debug('EE - An error occurred trying to retireve the course with ID: ' + id);
                alert("Failed to retrieve course with ID: " + id);
            });
            //alert(id);
        };

        this.init();
    });

}());
;(function() {
    angular
        .module('cid.exams.course-exam-details')
        .config(ExamsCourseDetailsRouteConfiguration);

    ExamsCourseDetailsRouteConfiguration.$inject = ["$stateProvider"];

    function ExamsCourseDetailsRouteConfiguration($stateProvider) {
        var courseDetailsState = {
            name: 'exams.course-details',
            url: '/courses',
            data: {
                roles: ['ROLE_ADMIN', 'ROLE_Exams Officer'],
            },
            views: {
                "content@": {
                    templateUrl: 'js/modules/exams/course-exam-details/views/course-list.html',
                    controller: 'CourseExamDetailsListController',
                    controllerAs: 'ctrl'
                },
            },
        };

        var courseDetailsEditState = {
            name: 'exams.course-details.edit',
            url: '/edit/{id}',
            data: {
                roles: ['ROLE_ADMIN', 'ROLE_Exams Officer'],
            },
            params: {
                uri: {
                    value: ''
                }
            },
            onEnter: function($rootScope, $stateParams, $state, $uibModal, Course) {
                $uibModal.open({
                    templateUrl: 'js/modules/exams/course-exam-details/views/course-exam-detail-edit.html',
                    controller: 'CourseExamDetailsEditorController',
                    controllerAs: 'ctrl',
                    size: 'lg',
                    resolve: {
                        entity: ['$stateParams', 'Course', function($stateParams, Course) {
                            return Course.get($stateParams.id);
                        }]
                    }
                }).result.then().finally(function() {
                    $rootScope.$emit('course-exam-tear-down');
                    $state.go('exams.course-details');
                });
            },
        };

        $stateProvider.state(courseDetailsState);
        $stateProvider.state(courseDetailsEditState);
    }

}());
;/**
 * 
 */

(function() {
    'use strict';

    angular
        .module('cid.exams.base-data-viewer')
        .controller('ExamBaseDataComponentEditDialogController', examBaseDataComponentEditDialogController);

    examBaseDataComponentEditDialogController.$inject = ['$log', '$scope', '$uibModalInstance', 'entity', 'Component', 'OptionComponent'];

    function examBaseDataComponentEditDialogController($log, $scope, $uibModalInstance, entity, Component, OptionComponent) {
        /*jshint validthis: true */
        var vm = this;

        vm.cancel = cancel;
        vm.save = save;
        vm.component = entity.component !== undefined ? entity.component : {};
        vm.component.examSeries = entity.option.syllabusDto.examSeries;

        var onComponentSaveFinished = function(result) {
            if (!vm.component.id) {
                OptionComponent.create({
                    examOption: {
                        examOptionId: entity.option.examOptionId
                    },
                    examComponent: {
                        examComponentId: result.data.id
                    }
                }, onSaveFinished);
            } else {
                onSaveFinished(result);
            }
        };

        var onSaveFinished = function(result) {
            $scope.$emit('exam-component-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $log.log('ExamBaseDataComponentEditDialogController::clear called');
            $scope.$emit('exam-component-saved');
            $uibModalInstance.dismiss('cancel');
        }

        function save() {
            if (vm.component.id) {
                Component.save(vm.component, onComponentSaveFinished);
            } else {
                Component.create(vm.component, onComponentSaveFinished);
            }
        }
    }
})();
;/**
 * 
 */

(function() {
    'use strict';

    angular
        .module('cid.exams.base-data-viewer')
        .controller('ExamBaseDataOptionEditDialogController', examBaseDataOptionEditDialogController);

    examBaseDataOptionEditDialogController.$inject = ['$log', '$scope', '$uibModalInstance', 'entity', 'Option'];

    function examBaseDataOptionEditDialogController($log, $scope, $uibModalInstance, entity, Option) {
        /*jshint validthis: true */
        var vm = this;

        vm.cancel = cancel;
        vm.save = save;
        vm.option = entity.option !== undefined ? entity.option : {};
        vm.option.syllabusDto = entity.syllabus;

        var onSaveFinished = function(result) {
            $scope.$emit('exam-option-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $log.log('ExamBaseDataOptionEditDialogController::clear called');
            $scope.$emit('exam-option-saved');
            $uibModalInstance.dismiss('cancel');
        }

        function save() {
            if (vm.option.examOptionId) {
                Option.save(vm.option, onSaveFinished);
            } else {
                Option.create(vm.option, onSaveFinished);
            }
        }
    }
})();
;/**
 * 
 */
(function() {
    angular
        .module('cid.exams.base-data-viewer')
        .controller('BaseDataStudentViewerController', examBaseDataStudentViewerController);

    examBaseDataStudentViewerController.$inject = ['$scope', '$uibModal', 'entity'];

    function examBaseDataStudentViewerController($scope, $uibModal, entity) {
        console.log("base-data-student-viewer Controller Loaded");
    }
})();
;/**
 * 
 */

(function() {
    angular
        .module('cid.exams.base-data-viewer')
        .controller('ExamBaseDataSyllabusEditDialogController', examBaseDataSyllabusEditDialogController);

    examBaseDataSyllabusEditDialogController.$inject = ['$log', '$scope', '$uibModalInstance', 'entity', 'Syllabus'];

    function examBaseDataSyllabusEditDialogController($log, $scope, $uibModalInstance, entity, Syllabus) {
        var vm = this;

        vm.cancel = cancel;
        vm.save = save;
        vm.syllabus = entity.syllabus !== undefined ? entity.syllabus : {};

        var onSaveFinished = function(result) {
            $scope.$emit('exam-syllabus-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $log.log('ExamBaseDataSyllabusEditDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        }

        function save() {
            if (vm.syllabus.id) {
                Syllabus.save(vm.syllabus, onSaveFinished);
            } else {
                Syllabus.create(vm.syllabus, onSaveFinished);
            }
        }
    }
})();
;/**
 * The ExamSyllabusViewer module for viewing Syllabus basedata for an individual examBoard
 */
(function() {
    //
    angular
        .module('cid.exams.base-data-viewer')
        .controller('BaseDataViewerController', examBaseDataViewerController);

    examBaseDataViewerController.$inject = ['$scope', '$http', '$uibModal', 'entity', 'Syllabus'];

    function examBaseDataViewerController($scope, $http, $uibModal, entity, Syllabus) {
        console.log('base-data-viewer Controller Loaded');
        var vm = this;
        if (entity.data !== undefined) {
            vm.curExamBoard = entity.data.id;
        }
        vm.filterParams = {
            examSeries: {
                examSeries: '',
                examYear: '',
            },
            code: '',
            title: '',
        };

        vm.add = add;
        vm.edit = edit;
        vm.viewStudents = viewStudents;

        //////////////////////////////////////////////////////////////////////////////////////

        function add(syllabusData, optionData, componentData) {
            if (optionData) {
                // It may seem strange that we're calling addComponent if we have optionData, but this is
                // because we're adding a NEW component to the specified option
                addComponent(optionData);
            } else {
                if (syllabusData) {
                    // It may seem strange that we're calling addOption if we have syllabusData, but this is
                    // because we're adding a NEW option to the specified syllabus
                    addOption(syllabusData);
                } else {
                    // No data passed, so we're adding a NEW syllabus.
                    addSyllabus();
                }
            }
        }

        function addComponent(optionData) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/modules/exams/exam-base-data-viewer/views/exam-base-data-component-editDialog.html',
                controller: 'ExamBaseDataComponentEditDialogController',
                controllerAs: 'ctrl',
                resolve: {
                    entity: {
                        option: optionData
                    }
                }
            });
        }

        function addOption(syllabusData) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/modules/exams/exam-base-data-viewer/views/exam-base-data-option-editDialog.html',
                controller: 'ExamBaseDataOptionEditDialogController',
                controllerAs: 'ctrl',
                resolve: {
                    entity: {
                        syllabus: syllabusData
                    }
                }
            });
        }

        function addSyllabus(syllabusData) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/modules/exams/exam-base-data-viewer/views/exam-base-data-syllabus-editDialog.html',
                controller: 'ExamBaseDataSyllabusEditDialogController',
                controllerAs: 'ctrl',
                resolve: {
                    entity: {}
                }
            });
        }

        function edit(syllabusData, optionData, componentData) {
            if (componentData) {
                editComponent(optionData, componentData);
            } else {
                if (optionData) {
                    editOption(syllabusData, optionData);
                } else {
                    if (syllabusData) {
                        editSyllabus(syllabusData);
                    } else {
                        // No data passed, must be an error as we should have data.
                    }
                }
            }
        }

        function editComponent(optionData, componentData) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/modules/exams/exam-base-data-viewer/views/exam-base-data-component-editDialog.html',
                controller: 'ExamBaseDataComponentEditDialogController',
                controllerAs: 'ctrl',
                resolve: {
                    entity: {
                        option: optionData,
                        component: componentData
                    }
                }
            });
        }

        function editOption(syllabusData, optionData) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/modules/exams/exam-base-data-viewer/views/exam-base-data-option-editDialog.html',
                controller: 'ExamBaseDataOptionEditDialogController',
                controllerAs: 'ctrl',
                resolve: {
                    entity: {
                        option: optionData,
                        syllabus: syllabusData
                    }
                }
            });
        }

        function editSyllabus(syllabusData) {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/modules/exams/exam-base-data-viewer/views/exam-base-data-syllabus-editDialog.html',
                controller: 'ExamBaseDataSyllabusEditDialogController',
                controllerAs: 'ctrl',
                resolve: {
                    entity: {
                        syllabus: syllabusData
                    }
                }
            });
        }

        function viewStudents(syllabusData, optionData, componentData) {
            console.log($scope);
            console.log(vm);
            var modalInstance = $uibModal.open({
                templateUrl: 'js/modules/exams/exam-base-data-viewer/views/exam-base-data-student-viewer.html',
                controller: 'BaseDataStudentViewerController',
                controllerAs: 'ctrl',
                resolve: {
                    entity: {
                        //
                    }
                }
            });
        }
    }
})();
;(function() {
    angular
        .module('cid.exams.base-data-viewer')
        .config(examBaseDataViewer);

    examBaseDataViewer.$inject = ['$stateProvider', '$urlRouterProvider'];

    function examBaseDataViewer($stateProvider, $urlRouterProvider) {

        $stateProvider
            .state('exams.exam-base-data-viewer', {
                url: '/basedata',
                data: {
                    roles: ['ROLE_Exams Officer']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/exams/exam-base-data-viewer/views/exam-base-data-viewer-form.html',
                        controller: 'BaseDataViewerController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    entity: function() {
                        return {};
                        //return ExamBoard.query();
                    }
                }
            })

            .state('view-by-id', {
                parent: 'exams.exam-base-data-viewer',
                url: '/{id}',
                views: {
                    "content@": {
                        templateUrl: 'js/modules/exams/exam-base-data-viewer/views/exam-base-data-viewer-form.html',
                        controller: 'BaseDataViewerController',
                        controllerAs: 'ctrl'
                    },
                },
                params: {
                    uri: {
                        value: ''
                    }
                },
                resolve: {
                    entity: ['$stateParams', 'ExamBoard', function($stateParams, ExamBoard) {
                        return ExamBoard.get($stateParams.id);
                    }]
                },
            });

        // more states here.
    }
})();
;/**
 * The ExamBoardEditorDialog module for editing an individual ExamBoard 
 */
(function() {
    'use strict';

    angular
        .module('cid.exams.exam-board-editor')
        .controller('ExamBoardDialogController', examBoardDialogController);

    examBoardDialogController.$inject = ['$log', '$scope', '$state', '$uibModalInstance', 'entity', 'ExamBoard'];

    function examBoardDialogController($log, $scope, $state, $uibModalInstance, entity, ExamBoard) {
        /*jshint validthis: true */
        var vm = this;

        $scope.cancel = cancel;
        $scope.create = create;
        $scope.currentExamBoard = entity.data;
        $scope.msg = '';
        $scope.save = save;

        //////////////////////////////////////////////////////////////////

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        function create() {
            var currentExamBoard = $scope.currentExamBoard;
            $log.debug($scope.currentExamBoard);
            if (currentExamBoard.boardCode !== null) {
                ExamBoard.create($scope.currentExamBoard, onSaveFinished);
            }
        }

        function onSaveFinished(result) {
            $scope.$emit('exam board-saved', result);
            $uibModalInstance.close(result);
        }



        function save() {
            var currentExamBoard = $scope.currentExamBoard;
            $log.debug($scope.currentExamBoard);
            if (currentExamBoard.id !== null && currentExamBoard.id !== undefined) {
                // Update Existing ExamBoard
                ExamBoard.save($scope.currentExamBoard, onSaveFinished);
            }
        }
    }

})();
;/**
 * The ExamBoardEditor module for displaying and editing the list of ExamBoards
 */
(function() {
    'use strict';

    angular
        .module('cid.exams.exam-board-editor')
        .controller('ExamBoardController', examBoardController);

    examBoardController.$inject = ['$log', '$scope', '$state', '$uibModal', 'ExamBoard'];

    function examBoardController($log, $scope, $state, $uibModal, ExamBoard) {
        /*jshint validthis: true */
        var vm = this;
        vm.addExamBoard = addExamBoard;
        vm.editExamBoard = editExamBoard;
        vm.examBoardList = [];
        vm.getPage = getPage;
        vm.loadExamBoards = loadExamBoards;
        vm.pageChanged = pageChanged;
        vm.paginationInfo = {
            pageNumber: 1,
            pageSize: 10,
            sort: 'name',
            order: 'ASC'
        };
        vm.search = search;
        vm.searchTerm = '';
        vm.viewBaseData = viewBaseData;

        vm.loadExamBoards();

        /////////////////////////////////////////////////////

        function addExamBoard() {
            $uibModal.open({
                templateUrl: 'js/modules/exams/exam-board/views/exam-board-form.html',
                controller: 'ExamBoardDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    entity: [function() {
                        return {
                            code: null,
                            description: null
                        };
                    }]
                }
            }).result.then(function(result) {
                $state.go('exams.exam-board', null, {
                    reload: true
                });
            }, function() {
                $state.go('exams.exam-board');
            });
        }

        /**
         *
         */
        function editExamBoard(url) {
            $uibModal.open({
                templateUrl: 'js/modules/exams/exam-board/views/exam-board-edit-form.html',
                controller: 'ExamBoardDialogController',
                controllerAs: 'ctrl',
                size: 'lg',
                resolve: {
                    entity: function(ExamBoard) {
                        return ExamBoard.get(url);
                    }
                }
            }).result.then(function(result) {
                $state.go('exams.exam-board', null, {
                    reload: true
                });
            }, function() {
                $state.go('^');
            });
        }

        /**
         *
         */
        function getPage() {
            $log.debug('Loading page: ' + this.paginationInfo.pageNumber);
            ExamBoard.query({
                page: this.paginationInfo.pageNumber - 1,
                size: this.paginationInfo.pageSize,
                sort: this.paginationInfo.sort + ',' + this.paginationInfo.order
            }, function(data, header) {
                vm.paginationInfo.pageNumber = data.page.number + 1;
                vm.paginationInfo.pageSize = data.page.size;
                vm.paginationInfo.totalItems = data.page.totalElements;
                vm.paginationInfo.totalPages = data.page.totalPages;
                vm.examBoardList = data.examBoardDtos;
            });
        }

        /**
         *
         */
        function loadExamBoards() {
            $log.debug('$scope.loadExamBoards');
            ExamBoard.query().then(function(response) {
                vm.examBoardList = response.data;
            });
        }

        /**
         *
         */
        function pageChanged() {
            $log.debug('Page changed to: ' + this.paginationInfo.pageNumber);
            vm.getPage();
        }

        /**
         * Event to Search
         */
        function search() {
            $log.debug('$scope.search');
            var search = $scope.searchTerm;
            var url = $scope.url;
            if (search.size > 3) {
                var appList = $scope.applicationList;
                $http.get(url).then(function(response) {
                    vm.examBoardList = response;
                });
            }
        }


        /**
         *View Basedata
         */
        function viewBaseData(id) {
            $log.debug('View basedata with id: ' + id);

            $state.go('examBaseDataViewer.viewById', {
                id: id
            });
        }
    }
})();
;(function() {
    'use strict';

    angular
        .module('cid.exams.exam-board-editor')
        .config(examBoardEditor);

    examBoardEditor.$inject = ['$stateProvider', '$urlRouterProvider'];

    function examBoardEditor($stateProvider, $urlRouterProvider) {

        $stateProvider
            .state('data.exam-boards', {
                url: '/exam-boards',
                data: {
                    roles: ['ROLE_Exams Officer', 'ROLE_System Admin']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/exams/exam-board/views/exam-board-list.html',
                        controller: 'ExamBoardController',
                        controllerAs: 'ctrl'
                    },
                },
            })

            .state('new', {
                url: '/new',
                data: {
                    roles: ['ROLE_Exams Officer', 'ROLE_System Admin']
                },
                onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {
                    $uibModal.open({
                        templateUrl: 'js/modules/exams/exam-board/views/exam-board-form.html',
                        controller: 'ExamBoardDialogController',
                        controllerAs: 'ctrl',
                        size: 'lg',
                        resolve: {
                            entity: [function() {
                                return {
                                    code: null,
                                    description: null
                                };
                            }]
                        }
                    }).result.then(function(result) {
                        $state.go('exams.exam-board', null, {
                            reload: true
                        });
                    }, function() {
                        $state.go('exams.exam-board');
                    });
                }]
            })

            .state('edit', {
                url: '/edit/{id}',
                data: {
                    roles: ['ROLE_Exams Officer', 'ROLE_System Admin']
                },
                params: {
                    uri: {
                        value: ''
                    }
                },
                onEnter: function($stateParams, $state, $uibModal) {
                    $uibModal.open({
                        templateUrl: 'js/modules/exams/exam-board/views/exam-board-edit-form.html',
                        controller: 'ExamBoardDialogController',
                        controllerAs: 'ctrl',
                        size: 'lg',
                        resolve: {
                            entity: ['ExamBoard', function(ExamBoard) {
                                return ExamBoard.get($stateParams.id); // Is $stateParams.id right?
                            }]
                        }
                    }).result.then(function(result) {
                        $state.go('exams.exam-board', null, {
                            reload: true
                        });
                    }, function() {
                        $state.go('^');
                    });
                }
            });

        //		.state('examBoards.examBaseData', {
        //			parent: 'site',
        //			url: '/basedata/{id}',
        //			views: {
        //				"@examBaseDataViewer": {
        //					templateUrl: 'js/modules/examBaseDataViewer/views/examBasedataViewer-form2.html',
        //					controller: 'ExamSyllabusViewer',
        //					controllerAs: 'ctrl',
        //				}
        //			}
        //		});
    }
})();
;/**
 * This is the main module definition for the site.
 *
 *  Applied Styles: [Y001, Y002, Y010, Y021]
 *
 * @type Module
 */
(function() {
    'use strict';

    angular
        .module('cid.exams.exam-series')
        .controller('ExamSeriesController', examSeriesController);

    examSeriesController.$inject = ['examSeriesList', '$log', '$scope', '$rootScope', '$uibModal', 'ExamSeries'];

    function examSeriesController(examSeriesList, $log, $scope, $rootScope, $uibModal, ExamSeries) {
        /*jshint validthis: true */
        var vm = this;

        vm.addExamSeries = addExamSeries;
        vm.editExamSeries = editExamSeries;
        vm.examSeriesList = examSeriesList.data;
        vm.getIndex = getIndex;
        vm.initRow = initRow;

        // All the event listeners are destroyed once the functions are called.
        $scope.$on('$destroy', $rootScope.$on('exam-series-saved', function(data) {
            loadExamSeries();
        }));

        $rootScope.$on("current-year-changed", function(data) {
            loadExamSeries();
        });

        function addExamSeries() {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/modules/exams/exam-series/views/exam-series-editorDialog.html',
                controller: 'ExamSeriesEditorDialogController',
                controllerAs: 'ctrl',
                resolve: {
                    examSeriesEntity: function() {
                        var examSeries = {};
                        return examSeries;
                    }
                }
            });
        }

        /*
         * The following 3 functions are designed to store and retrieve the examSeriesId directly as an attribute to/from the DOM element.
         * This appears to be an unfortunate necessity as I have been unable to find an AngularJS way of linking the exmSeriesId from within
         * the exam-series-table directives ng-repeat to the appropriate edit button which is positioned as a transclude.
         */

        function editExamSeries($event) {
            // Retrieve the examSeriesId from the button DOM element.
            var examSeriesId;
            if ($event.target.attributes.examseriesid) {
                examSeriesId = $event.target.attributes.examseriesid.value;
            } else {
                examSeriesId = $event.currentTarget.attributes.examseriesid.value;
            }
            var modalInstance = $uibModal.open({
                templateUrl: 'js/modules/exams/exam-series/views/exam-series-editorDialog.html',
                controller: 'ExamSeriesEditorDialogController',
                controllerAs: 'ctrl',
                resolve: {
                    examSeriesEntity: function(ExamSeries) {
                        return ExamSeries.get(examSeriesId).then(function(response) {
                            return response.data;
                        }, function(response) {
                            alert("Failed to retrieve exam series");
                        });
                    }
                }
            });
        }

        function getIndex(examSeriesId) {
            // Callback function gets the value of the examSeriesId back from the exam-series-table directive.
            // We need to know this so we can make sure pressing the edit button loads details of the correct exam series.
            vm.examSeriesId = examSeriesId;
        }

        function initRow(examSeriesId) {
            // Set the exam series ID as an attribute on to the button DOM element.
            // This HAS to be examseriesid without hyphens so it can be accessed from $event.
            document.getElementById("edit-button").setAttribute("examseriesid", examSeriesId);
            // Tweak the id of the button DOM element to edit-button-xx so that there is only ever one element with id edit-button.
            document.getElementById("edit-button").setAttribute("id", "edit-button-" + examSeriesId);
        }

        function loadExamSeries() {
            ExamSeries.query().then(function(response) {
                vm.examSeriesList = response.data;
                $log.info("Loading ExamSeries");
            }, function(response) {
                $log.error("Failed to load ExamSeries");
            });
        }

    }
}());
;(function() {
    angular
        .module('cid.exams.exam-series')
        .config(examSeriesRouteConfiguration);

    examSeriesRouteConfiguration.$inject = ['$stateProvider'];

    function examSeriesRouteConfiguration($stateProvider) {
        $stateProvider
            .state('data.exam-series', {
                url: '/exam-series',
                data: {
                    roles: ['ROLE_Exams Officer']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/exams/exam-series/views/exam-series.html',
                        controller: 'ExamSeriesController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    examSeriesList: ['ExamSeries', function(ExamSeries) {
                        return ExamSeries.query();
                    }]
                }

            });
    }
})();
;/**
 * This is the Exam Series Editor Dialog Controller
 *
 * Applied Styles: [Y001, Y002, Y010, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */


(function() {
    'use strict';

    angular
        .module('cid.exams.exam-series')
        .controller('ExamSeriesEditorDialogController', examSeriesEditorDialogController);

    examSeriesEditorDialogController.$inject = ['$log', '$scope', '$state', '$rootScope', '$uibModalInstance', 'ExamSeries', 'examSeriesEntity'];

    function examSeriesEditorDialogController($log, $scope, $state, $rootScope, $uibModalInstance, ExamSeries, examSeriesEntity) {
        /*jshint validthis: true */
        var vm = this;
        vm.examSeries = examSeriesEntity !== undefined ? examSeriesEntity : {};

        vm.cancel = cancel;
        vm.save = save;


        var onSaveFinished = function(result) {
            $scope.$emit('exam-series-saved', result);
            $uibModalInstance.close(result);
        };

        function cancel() {
            $log.log('ExamSeriesEditorDialogController::clear called');
            $uibModalInstance.dismiss('cancel');
        }

        function save() {
            if (vm.examSeries.id) {
                ExamSeries.save(vm.examSeries, onSaveFinished);
            } else {
                ExamSeries.create(vm.examSeries, onSaveFinished);
            }
        }

    }

})();
;(function() {
    angular
        .module('cid.exams')
        .config(RouteConfiguration);

    RouteConfiguration.$inject = ['$stateProvider'];

    function RouteConfiguration($stateProvider) {
        var examsRootState = {
            name: 'exams',
            parent: 'site',
            url: '/exams',
            abstract: true,
            data: {
                roles: ['ROLE_Exams Officer']
            },
            views: {
                "content@": {
                    template: '<h1>Exams System</h1>'
                }
            }
        };
        $stateProvider.state(examsRootState);
    }
}());
;/**
 * The ExamSyllabusViewer module for viewing Syllabus basedata for an individual examBoard
 */
(function() {
    angular
        .module('cid.exams.generate-edi')
        .controller('GenerateEdiFileViewerController', GenerateEdiFileViewerController);

    GenerateEdiFileViewerController.$inject = ['examSeriesList', '$scope', '$http', '$uibModal', '$mdDialog', 'ExamSeries', 'EdiDataGenerator'];

    function GenerateEdiFileViewerController(examSeriesList, $scope, $http, $uibModal, $mdDialog, ExamSeries, EdiDataGenerator) {
        var vm = this;

        console.log('GenerateEdiFileViewer Controller Loaded');
        vm.examSeriesList = examSeriesList.data;
        vm.generatedMessage = [];
        vm.generateEdiFiles = generateEdiFiles;
        vm.changeSelected = changeSelected;

        /*************************************************************************/
        /**	Callback function to be called from examSeriesCheckBox directive	**/
        /*************************************************************************/
        function changeSelected(examSeriesListIndex, selected) {
            vm.examSeriesList[examSeriesListIndex].selected = selected;
        }

        /*****************************************************/
        /**	Generate edi files for all selected examSeries	**/
        /*****************************************************/
        function generateEdiFiles(ev) {
            vm.generatedMessage = [];
            for (i = 0; i < vm.examSeriesList.length; i++) {
                if (vm.examSeriesList[i].selected) {
                    var callbackSuccess = processGenerateEdiFileResponse(vm.examSeriesList[i]);
                    var callbackFailure = processGenerateEdiFileError(vm.examSeriesList[i]);
                    EdiDataGenerator.generateEDIFile(
                        vm.examSeriesList[i].examYear,
                        vm.examSeriesList[i].examSeries,
                        vm.examSeriesList[i].examBoard.id).then(callbackSuccess, callbackFailure);
                }
            }
            $mdDialog.show({
                targetEvent: ev,
                clickOutsideToClose: true,
                locals: {
                    generatedMessage: vm.generatedMessage
                },
                controller: function($scope, generatedMessage) {
                    $scope.generatedMessage = generatedMessage;
                    $scope.cancel = function() {
                        $mdDialog.cancel();
                    };
                },
                templateUrl: 'js/modules/exams/generate-edi/views/generate-edi-dialog.html',
            });
        }

        function processGenerateEdiFileResponse(examSeries) {
            return function(data) {
                vm.generatedMessage.push(examSeries.examBoard.description + ", " + examSeries.examSeries + " EDI file generated.");
            };
        }

        function processGenerateEdiFileError(examSeries) {
            return function(data) {
                console.log(examSeries);
                vm.generatedMessage.push("ERROR occurred generating EDI file for " + examSeries.examBoard.description + ", " + examSeries.examSeries);
            };
        }
    }

})();
;(function() {
    angular
        .module('cid.exams.generate-edi')
        .config(generateEdiRouteConfiguration);

    generateEdiRouteConfiguration.$inject = ['$stateProvider', '$urlRouterProvider'];

    function generateEdiRouteConfiguration($stateProvider, $urlRouterProvider) {
        $stateProvider
            .state('exams.generate-edi', {
                url: '/generate-edi',
                views: {
                    "content@": {
                        templateUrl: 'js/modules/exams/generate-edi/views/generate-edi-form.html',
                        controller: 'GenerateEdiFileViewerController',
                        controllerAs: 'ctrl'
                    },
                },
                resolve: {
                    examSeriesList: ['ExamSeries', function(ExamSeries) {
                        return ExamSeries.query();
                    }]
                }
            });
    }

})();
;(function() {
    angular.module('cid.exams.generate-entries').config(['$stateProvider', '$urlRouterProvider', function($stateProvider, $urlRouterProvider) {
        $stateProvider
            .state('exams.generate-entries', {
                url: '/generate-entries',
                views: {
                    "content@": {
                        templateUrl: 'js/modules/exams/generate-entries/views/student-option-entries-creation.html'
                    },
                },
            });

    }]);
})();
;/**
 * The genericViewer module for displaying the details within a JSON file
 */
(function() {
    angular.module('GenericViewer', [
        'ngResource',
        'ui.bootstrap',
    ]).controller('GenericViewerController', function($scope, $uibModalInstance, headerVal, dataSet) {
        console.log('genericViewerController loaded');
        $scope.headerVal = headerVal;
        $scope.dataSet = dataSet;

        $scope.checkObject = function(value) {
            if (typeof value == "object" && value !== null) {
                return true; // Object
            } else {
                return false;
            }
        };

        $scope.checkNotHidden = function(key, value) {
            if (typeof value == "object" || value === null || key.substring(0, 1) == "_") {
                return false; // Hidden - Do not display
            } else {
                return true;
            }
        };

        $scope.cancel = function() {
            $uibModalInstance.dismiss('cancel');
        };
    });
})();
;/**
 *
 */
(function() {
    angular
        .module('cid.exams.import-base-data')
        .controller('ExamImportBaseDataController', function($scope, $http, $uibModal, Syllabus, Option, Component, OptionComponent, ExamBoard, ExamSeries) {
            console.log('ExamImportBaseDataController loaded');
            var vm = this;

            $("#files").change(function(evt) {
                $scope.processImport(evt);
            });
            //		};

            $scope.processImport = function(evt) {
                //		function processImport(evt) {
                var processed = []; // Global variable being watched for changes within
                // callback
                // functions.
                processed.s = false; // s - syllabus - flag to indicate when syllabus
                // file
                // processing has been completed.
                processed.o = false; // o - option - flag to indicate when option file
                // processing has been completed.
                processed.c = false; // c - component - flag to indicate when component
                // file
                // processing has been completed.

                var examSeriesId = 0; // Global variable being watched for change;
                var intervalTimer = {}; // Global variable for setInterval
                var progressStepNo = 0; // Global variable containing the current progress
                // step
                filesChange(evt);
                return;

                function filesChange(evt) {
                    var files = evt.target.files;
                    examSeriesId = 0;
                    intervalTimer = {};
                    progressStepNo = 0;
                    document.getElementById("progress_messages").innerHTML = "";
                    updateProgressMessage("Loading files");

                    if (window.File && window.FileReader && window.FileList && window.Blob) {
                        var exists = [];
                        exists.s = -1; // use -1 as a false indicator, or 0..n as a
                        // valid indicator of array element
                        exists.c = -1;
                        exists.l = -1;
                        exists.o = -1;

                        for (var i = 0, f; f = files[i]; i++) { // jshint ignore:line
                            if (files[i].name.substr(8, 2).toLowerCase() == ".x") {
                                if (exists[files[i].name.substr(0, 1).toLowerCase()] >= 0) {
                                    // error - maybe trying to load multiples? so set flag
                                    // to false and
                                    exists[files[i].name.substr(0, 1).toLowerCase()] = -1;
                                } else {
                                    exists[files[i].name.substr(0, 1).toLowerCase()] = i;
                                }
                            }
                        }


                        if (exists.s >= 0 && exists.c >= 0 && exists.l >= 0 && exists.o >= 0) {
                            var jsonData = {};
                            jsonData.examBoard = {
                                "boardIdentifier": files[exists.s].name.substr(6, 2)
                            };
                            jsonData.examYear = "20" + files[exists.s].name.substr(3, 2);
                            jsonData.examSeries = files[exists.s].name.substr(1, 2).toUpperCase();
                            switch (files[exists.s].name.substr(1, 1).toUpperCase()) {
                                case "9":
                                case "A":
                                case "B":
                                    jsonData.academicYearId = files[exists.s].name.substr(3, 2);

                                    break;
                                default:
                                    jsonData.academicYearId = (Number(files[exists.s].name.substr(3, 2)) - 1);
                            }
                            ExamSeries.create(JSON.stringify(jsonData))
                                .then(function(response) {
                                    examSeriesId = response.id;
                                    if (!examSeriesId) {
                                        alert("Error creating exam Series");
                                        return;
                                    }

                                    readFileContents(files[exists.s]);
                                    intervalTimer.s = setInterval(function() {
                                        watch(processed, "s", readFileContents, files[exists.o]);
                                    }, 250);
                                    intervalTimer.o = setInterval(function() {
                                        watch(processed, "o", readFileContents, files[exists.c]);
                                    }, 250);
                                    intervalTimer.c = setInterval(function() {
                                        watch(processed, "c", readFileContents, files[exists.l]);
                                    }, 250);
                                });
                        } else {
                            alert("Not all necessary files selected or multiple data sets selected.");
                        }
                    } else {
                        alert("The file API's are not fully supported by this browser");
                    }
                }

                function abortRead() {
                    reader.abort();
                }

                function errorHandler(evt) {
                    switch (evt.target.error.code) {
                        case evt.target.error.NOT_FOUND_ERR:
                            alert("File Not Found!");
                            break;
                        case evt.target.error.NOT_READABLE_ERR:
                            alert("File is not readable");
                            break;
                        case evt.target.error.ABORT_ERR:
                            break;
                        default:
                            alert("An error occurred reading this file.");
                    }
                }

                function updateProgressBar(loaded, total) {
                    var percentLoaded = Math.round((loaded / total) * 100);
                    if (percentLoaded <= 100) {
                        progress_bar.style.width = percentLoaded + "%";
                        progress_bar.textContent = percentLoaded + "%";
                    }
                }

                function updateProgress(evt) {
                    if (evt.lengthComputable) {
                        updateProgressBar(evt.loaded, evt.total);
                    }
                }

                function readFileContents(file) {
                    updateOverallProgress("Reading file " + file.name);
                    progress_bar.style.width = "0%";
                    progress_bar.textContent = "0%";

                    var reader = new FileReader();
                    reader.onerror = errorHandler;
                    reader.onprogress = updateProgress;
                    reader.onabort = function(e) {
                        alert("File read cancelled");
                    };
                    reader.onloadstart = function(e) {
                        // document.getElementById("progress_bar").className = "loading";
                    };
                    reader.onload = function(e) {
                        progress_bar.style.width = "100%";
                        progress_bar.textContent = "100%";

                        var contents = e.target.result;
                        switch (file.name.substr(0, 1).toLowerCase()) {
                            case "s":
                                processSyllabus(contents);
                                break;
                            case "o":
                                processOptions(contents);
                                break;
                            case "c":
                                processComponents(contents);
                                break;
                            case "l":
                                processLinks(contents);
                                break;
                        }
                    };
                    reader.readAsText(file);
                }

                function processSyllabus(contents) {
                    var syllabusArray = contents.split("\n");
                    if (!syllabusArray[syllabusArray.length - 1] || 0 === syllabusArray[syllabusArray.length - 1].length) {
                        //Check if the last line is blank, and remove it if it is.
                        //This resolves the discrepancy between exam boards terminating (or not) the final line with CR LF
                        syllabusArray.splice(syllabusArray.length - 1, 1);
                    }

                    var totalRecords = Number(syllabusArray[syllabusArray.length - 2]
                        .substring(7, 14) - 2);
                    var processedCount = 0;

                    updateOverallProgress("Processing Syllabi - " + totalRecords + " records.");
                    updateProgressBar(processedCount, totalRecords);

                    for (var i = 2; i < syllabusArray.length - 2; i++) { // skip first
                        // two and last
                        // two records.
                        var jsonData = {};
                        jsonData.examSeries = {
                            "examSeriesId": examSeriesId
                        };
                        jsonData.code = syllabusArray[i].substring(2, 8).trim();
                        jsonData.title = syllabusArray[i].substring(9, 45).trim();

                        Syllabus.create(JSON.stringify(jsonData))
                            .then(function(response) { // jshint ignore:line
                                processedCount++;
                                updateProgressBar(processedCount, totalRecords);
                                if (processedCount == totalRecords) {
                                    processed.s = true;
                                }
                                if (response.error !== undefined && response.error.status == 400) {
                                    updateProgressMessage(response.error.exception + ":  " + response.error.message);
                                }
                            }); // jshint ignore:line
                    }
                }

                function processOptions(contents) {
                    var optionArray = contents.split("\n");
                    if (!optionArray[optionArray.length - 1] || 0 === optionArray[optionArray.length - 1].length) {
                        //Check if the last line is blank, and remove it if it is.
                        //This resolves the discrepancy between exam boards terminating (or not) the final line with CR LF
                        optionArray.splice(optionArray.length - 1, 1);
                    }

                    var totalRecords = Number(optionArray[optionArray.length - 2].substring(7, 14) - 2);
                    var processedCount = 0;

                    updateOverallProgress("Processing Options - " + totalRecords + " records.");
                    updateProgressBar(processedCount, totalRecords);

                    for (var i = 2; i < optionArray.length - 2; i++) { // skip first two
                        // and last two
                        // records.
                        var jsonData = {};
                        setValue(jsonData, "optionEntryCode", optionArray[i], 2, 8);
                        jsonData.syllabusDto = {
                            "code": optionArray[i].substring(8, 14).trim(),
                            "examSeries": {
                                "examSeriesId": examSeriesId
                            }
                        };
                        if (optionArray[i].substring(14, 21).trim().length && "CB".includes(optionArray[i].substring(21, 22).toUpperCase())) {
                            // Certification examTypes are specified
                            jsonData.examTypeQualificationCert = optionArray[i].substring(14, 18).trim();
                            jsonData.examTypeLevelCert = optionArray[i].substring(18, 21).trim();
                        }
                        if (optionArray[i].substring(22, 29).trim().length && "BU".includes(optionArray[i].substring(21, 22).toUpperCase())) {
                            // Unit examTypes are specified
                            jsonData.examTypeQualificationUnit = optionArray[i].substring(22, 26).trim();
                            jsonData.examTypeLevelUnit = optionArray[i].substring(26, 29).trim();
                        }
                        setValue(jsonData, "process", optionArray[i], 29, 30);
                        setValue(jsonData, "qcaClassificationCode", optionArray[i], 30, 34);
                        setValue(jsonData, "qcaAccreditationNo", optionArray[i], 34, 42);
                        setValue(jsonData, "optionTitle", optionArray[i], 42, 78);
                        jsonData.feeDefined = optionArray[i].substring(78, 79);
                        if (optionArray[i].substring(78, 79) == "Y") {
                            setValue(jsonData, "examinationFee", optionArray[i], 79, 84);
                        }
                        setValue(jsonData, "firstForecastGradeGradeset", optionArray[i], 84, 88);
                        setValue(jsonData, "secondForecastGradeGradeset", optionArray[i], 88, 92);
                        setValue(jsonData, "resultType", optionArray[i], 92, 93);
                        setValue(jsonData, "firstGradeResultGradeset", optionArray[i], 93, 97);
                        setValue(jsonData, "secondGradeResultGradeset", optionArray[i], 97, 101);
                        setValue(jsonData, "endorsementToFirstGradeResultGradeset", optionArray[i], 101, 105);
                        setValue(jsonData, "endorsementToSecondGradeResultGradeset", optionArray[i], 105, 109);
                        setValue(jsonData, "maxMarkUms", optionArray[i], 109, 113);
                        setValue(jsonData, "noOfComponents", optionArray[i], 113, 115);

                        Option.create(JSON.stringify(jsonData))
                            .then(function(response) { // jshint ignore:line
                                processedCount++;
                                updateProgressBar(processedCount, totalRecords);
                                if (processedCount == totalRecords) {
                                    processed.o = true;
                                }
                                if (response.error !== undefined && response.error.status == 400) {
                                    updateProgressMessage(response.error.exception + ":  " + response.error.message);
                                }
                            }); // jshint ignore:line
                    }
                }

                function processComponents(contents) {
                    var componentArray = contents.split("\n");
                    if (!componentArray[componentArray.length - 1] || 0 === componentArray[componentArray.length - 1].length) {
                        //Check if the last line is blank, and remove it if it is.
                        //This resolves the discrepancy between exam boards terminating (or not) the final line with CR LF
                        componentArray.splice(componentArray.length - 1, 1);
                    }

                    var totalRecords = Number(componentArray[componentArray.length - 2].substring(7, 14) - 2);
                    var processedCount = 0;

                    updateOverallProgress("Processing Components - " + totalRecords + " records.");
                    updateProgressBar(processedCount, totalRecords);

                    for (var i = 2; i < componentArray.length - 2; i++) { // skip first
                        // two and last
                        // two records.
                        var jsonData = {};
                        jsonData.examSeries = {
                            "examSeriesId": examSeriesId
                        };
                        jsonData.code = componentArray[i].substring(2, 14).trim();
                        jsonData.title = componentArray[i].substring(14, 50).trim();
                        jsonData.teacherMarks = componentArray[i].substring(50, 51);
                        setValue(jsonData, "maximumMarks", componentArray[i], 51, 54);
                        setValue(jsonData, "componentGradeset", componentArray[i], 54, 58);

                        if (componentArray[i].substring(58, 64).trim().length) {
                            jsonData.dueDate = "20" + componentArray[i].substring(62, 64) + "-" + componentArray[i].substring(60, 62) + "-" + componentArray[i].substring(58, 60);
                        }

                        jsonData.timetabled = componentArray[i].substring(64, 65);
                        if (componentArray[i].substring(65, 71).trim().length) {
                            jsonData.timetableDate = "20" + componentArray[i].substring(69, 71) + "-" + componentArray[i].substring(67, 69) + "-" + componentArray[i].substring(65, 67);
                        }

                        setValue(jsonData, "timetableSession", componentArray[i], 71, 72);
                        setValue(jsonData, "timeAllowed", componentArray[i], 72, 75);

                        Component.create(JSON.stringify(jsonData))
                            .then(function(response) { // jshint ignore:line
                                processedCount++;
                                updateProgressBar(processedCount, totalRecords);
                                if (processedCount == totalRecords) {
                                    processed.c = true;
                                }
                                if (response.error !== undefined && response.error.status == 400) {
                                    updateProgressMessage(response.error.exception + ":  " + response.error.message);
                                }
                            }); // jshint ignore:line
                    }
                }

                function processLinks(contents) {
                    var linkArray = contents.split("\n");
                    if (!linkArray[linkArray.length - 1] || 0 === linkArray[linkArray.length - 1].length) {
                        //Check if the last line is blank, and remove it if it is.
                        //This resolves the discrepancy between exam boards terminating (or not) the final line with CR LF
                        linkArray.splice(linkArray.length - 1, 1);
                    }

                    var totalRecords = Number(linkArray[linkArray.length - 2].substring(7, 14) - 2);
                    var processedCount = 0;

                    updateOverallProgress("Processing Links - " + totalRecords + " records.");
                    updateProgressBar(processedCount, totalRecords);

                    var jsonData = {
                        "examOption": {
                            "syllabus": {
                                "examSeries": {
                                    "examSeriesId": ""
                                }
                            }
                        },
                        "examComponent": {
                            "examSeries": {
                                "examSeriesId": ""
                            }
                        }
                    };
                    jsonData.examOption.syllabus.examSeries.examSeriesId = examSeriesId;
                    jsonData.examComponent.examSeries.examSeriesId = examSeriesId;

                    for (var i = 2; i < linkArray.length - 2; i++) {
                        jsonData.examOption.optionEntryCode = linkArray[i].substring(2, 8).trim();
                        jsonData.examComponent.code = linkArray[i].substring(8, 20).trim();

                        OptionComponent.create(JSON.stringify(jsonData))
                            .then(function(response) { // jshint ignore:line
                                processedCount++;
                                updateProgressBar(processedCount, totalRecords);
                                if (processedCount == totalRecords) {
                                    // processed["l"] = true;
                                    delete intervalTimer.s;
                                    delete intervalTimer.o;
                                    delete intervalTimer.c;
                                    intervalTimer = undefined;

                                    updateOverallProgress("Import complete.");
                                    updateProgressBar(1, 1);
                                }
                                if (response.error !== undefined && response.error.status == 400) {
                                    updateProgressMessage(response.error.exception + ":  " + response.error.message);
                                }
                            }); // jshint ignore:line

                    }
                }

                function setValue(obj, prop, string, start, end) {
                    if (string.substring(start, end).trim().length) {
                        obj[prop] = string.substring(start, end).trim();
                    }
                }

                function watch(obj, prop, handler, param) {
                    if (obj[prop] === true) {
                        clearInterval(intervalTimer[prop]);
                        handler(param);
                    }
                }

                function updateProgressMessage(message) {
                    document.getElementById("progress_messages").innerHTML = document.getElementById("progress_messages").innerHTML + "<BR>" + message;
                }

                function updateOverallProgress(stepName) {
                    progressStepNo = ++progressStepNo;
                    document.getElementById("overall_progress").innerHTML = "Step " + progressStepNo + " of 9";
                    updateProgressMessage(stepName);
                }
            };
        });
})();
;(function() {
    angular.module('cid.exams.import-base-data').config(['$stateProvider', '$urlRouterProvider', function($stateProvider, $urlRouterProvider) {
        $stateProvider
            .state('exams.import-base-data', {
                url: '/importBaseData',
                data: {
                    roles: ['ROLE_Exams Officer']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/exams/import-base-data/views/import-base-data-form.html',
                        controller: 'ExamImportBaseDataController',
                        controllerAs: 'eibdc'
                    },
                },
            });

    }]);
})();
;/**
 * The seatingPlanGenerator
 */
(function() {
    //
    angular.module('cid.exams.seating-plan').controller(
        'SeatingPlanAutoGenerateController', ["$uibModal", "$uibModalInstance", "$state", "$scope", "entity",
            function($uibModal, $uibModalInstance, $state, $scope, entity) {
                var vm = this;
                console.log('SeatingPlanAutoGenerateController Loaded');

                $scope.autoGenerateSeatingPlans = function() {
                    //		            $uibModalInstance.close({
                    //            			fillDirection: $scope.fillDirection,
                    //                    	snake: $scope.snake,
                    //                    	fillRowsNotColumns: $scope.fillRowsNotColumns,
                    //		            });
                    $uibModalInstance.close($scope.assign);
                };

                $scope.cancel = function() {
                    $uibModalInstance.dismiss();
                };

                $scope.init = function() {
                    $scope.numCols = entity.numCols;
                    $scope.numRows = entity.numRows;
                    $scope.columns = [];
                    for (var i = 0; i < entity.numCols; i++) {
                        $scope.columns.push({
                            index: i,
                            column: String.fromCharCode(65 + i)
                        });
                    }
                };

                $scope.init();
            }
        ]);
})();
;/**
 * The seatingPlanGenerator
 */
(function() {
    //
    angular.module('cid.exams.seating-plan').controller(
        'SeatingPlanBulkClearSeatsController', ["$uibModal", "$uibModalInstance", "$state", "$scope", "entity",
            function($uibModal, $uibModalInstance, $state, $scope, entity) {
                var vm = this;

                $scope.bulkClearSeats = bulkClearSeats;
                $scope.cancel = cancel;

                ////////////////////////////

                console.log('SeatingPlanAutoGenerateController Loaded');
                init();

                function bulkClearSeats() {
                    $uibModalInstance.close($scope.assign);
                }

                function cancel() {
                    $uibModalInstance.dismiss();
                }

                function init() {
                    $scope.numCols = entity.numCols;
                    $scope.numRows = entity.numRows;
                    $scope.columns = [];
                    for (var i = 0; i < entity.numCols; i++) {
                        $scope.columns.push({
                            index: i,
                            column: String.fromCharCode(65 + i)
                        });
                    }
                }

            }
        ]);
})();
;/**
 * The seatingPlanGenerator
 */
(function() {
    'use strict';
    //
    angular.module('cid.exams.seating-plan').controller(
        'SeatingPlanCustomExamComponentController', ["$uibModal", "$uibModalInstance", "$state", "$scope", "$q", "ExamBoard", "ExamSeries", "Syllabus", "Component",
            "Option", "OptionComponent", "CourseSyllabus", "CourseComponent", "CourseOption", "StudentOptionEntry", "Course", "entity", "APP",
            function($uibModal, $uibModalInstance, $state, $scope, $q, ExamBoard, ExamSeries, Syllabus, Component, Option, OptionComponent, CourseSyllabus, CourseComponent, CourseOption, StudentOptionEntry, Course, entity, APP) {
                /*jshint validthis: true */
                var vm = this;

                vm.cancel = cancel;

                vm.academicYear = APP.getYear();
                vm.customExam = {
                    examCode: "",
                    examTitle: "",
                    standardSyllabusCode: true,
                    syllabusCode: "INT" + vm.academicYear.id,
                    syllabusTitle: "Internal exams " + vm.academicYear.description,
                    courseId: null,
                    courseCode: "",
                    courseTitle: "Not selected",
                    timeAllowed: "",
                };
                vm.loadCourse = loadCourse;
                vm.save = save;
                vm.timetableDate = null;
                vm.timetableSession = null;

                ////////////////////////////

                console.log('SeatingPlanCustomExamComponentController Loaded');
                init();

                /**
                 * This function closes the window without saving anything.
                 * 
                 * @memberOf ctrl
                 */
                function cancel() {
                    $uibModalInstance.dismiss();
                }

                /**
                 * This function initialises the settings for the window
                 * 
                 * @memberOf ctrl
                 */
                function init() {
                    vm.timetableDate = entity.timetableDate;
                    vm.timetableSession = entity.timetableSession;
                }

                /**
                 * This function looks up a course
                 * 
                 * @memberOf ctrl
                 */
                function loadCourse(id) {
                    console.log('Loading course: ' + id);
                    Course.get(id).then(function(response) {
                        vm.customExam.courseId = response.data.id;
                        vm.customExam.courseCode = response.data.spec;
                        vm.customExam.courseTitle = response.data._levelDescription + ' ' + response.data._subjectDescription;
                    });
                }



                /**
                 * This function loads the selected exam series.
                 * 
                 * @memberOf ctrl
                 */
                function loadExamSeries() {
                    ExamSeries.get(vm.customExam.examSeriesId).then(function(response) {
                        var examSeries = response.data;
                        loadSaveExamSyllabus(examSeries);
                    }, function(response) {
                        // error when querying Exam Series
                        console.error("Error loading Exam Series.");
                        alert("Error loading selected Exam Series. Please contact MIS.");
                    });
                }

                /**
                 * This function check to see if the internal Syllabus for the current academic year exists.
                 * If it doesn't exist, it will attempt to create it.
                 * 
                 * @memberOf ctrl
                 */
                function loadSaveExamSyllabus(examSeries) {
                    var examSyllabus = {
                        examBoardId: examSeries.examBoard.id,
                        syllabusCode: (vm.collapseAdditional ? (vm.customExam.standardSyllabusCode ? vm.customExam.syllabusCode : vm.customExam.examCode) : vm.customExam.syllabusCode),
                        examYear: examSeries.examYear,
                        examSeries: examSeries.examSeries,
                    };
                    Syllabus.query(examSyllabus).then(function(response) {
                        var syllabus = {
                            id: null,
                        };
                        for (var i = 0; i < response.data.length; i++) {
                            if (response.data[i].examSeries.id === examSeries.id) {
                                syllabus = response.data[i];
                                break;
                            }
                        }
                        if (syllabus.id === null) {
                            // syllabus doesn't exist, so create it
                            syllabus = {
                                code: (vm.collapseAdditional ? (vm.customExam.standardSyllabusCode ? vm.customExam.syllabusCode : vm.customExam.examCode) : vm.customExam.syllabusCode),
                                title: (vm.collapseAdditional ? (vm.customExam.standardSyllabusTitle ? vm.customExam.syllabusTitle : vm.customExam.examCode) : vm.customExam.syllabusTitle),
                                examSeries: examSeries,
                            };
                            Syllabus.create(syllabus).then(function(response) {
                                syllabus = response;
                                saveCourseSyllabus(syllabus.id);
                                saveOption(syllabus);
                            }, function(response) {
                                console.log("Error creating Syllabus record");
                                alert("Error creating Syllabus record. Please contact MIS");
                            });
                        } else {
                            // syllabus exists - use it
                            saveCourseSyllabus(syllabus.id);
                            saveOption(syllabus);
                        }
                    }, function(response) {
                        // not found, so create it
                        console.error("Error querying Syllabus table.");
                        alert("Error querying Syllabus table. Please contact MIS.");
                    });
                }

                /**
                 * This function saves the entered details to the database
                 * 
                 * @memberOf ctrl
                 */
                function save() {
                    if (vm.customExam.courseId !== undefined && vm.customExam.courseId) {

                        vm.customExam.examOptionId = $q.defer();

                        // saving prerequesites:
                        // ExamBoard                          ( id: 100; identifier: 00 )
                        //  - ExamSeries                      ( Series: IN; Year: xxxx /academicYear.description/ )
                        //     - Syllabus                     ( code: INTxx /academicYear.id/ ; title: Internal exams xxxx /academicYear.description/)
                        //        - courseSyllabus
                        //        - examOption
                        //           - courseOption
                        //           - studentOptionEntry
                        //           - examComponent
                        //              - courseComponent
                        //              - optionComponent
                        loadExamSeries();

                        $uibModalInstance.close(vm.customExam);
                    } else {
                        alert("Please select a valid course.");
                    }
                }

                /**
                 * This function resolves the deferred examOptionId 
                 * 
                 * @memberOf ctrl
                 */
                function resolveExamOptionId(examOptionIdPromise, examOptionId) {
                    examOptionIdPromise.resolve(examOptionId);
                    return examOptionIdPromise.promise;
                }

                /**
                 * This function saves the course component to the database
                 * 
                 * @memberOf ctrl
                 */
                function saveComponent(examOption) {
                    var examComponent = {
                        code: (vm.collapseAdditional ? vm.customExam.examCode : vm.customExam.componentCode),
                        teacherMarks: "Y",
                        timeAllowed: vm.customExam.timeAllowed,
                        timetableDate: vm.timetableDate,
                        timetableSession: vm.timetableSession,
                        timetabled: "T",
                        title: (vm.collapseAdditional ? vm.customExam.examTitle : vm.customExam.optionTitle),
                        examSeries: examOption.syllabusDto.examSeries,
                    };
                    Component.create(examComponent).then(function(response) {
                        saveCourseComponent(examOption.examOptionId, response.id);
                        saveOptionComponent(examOption.examOptionId, response.id);
                    }, function(response) {
                        console.error("Error creating examComponent record");
                    });
                }

                /**
                 * This function saves the courseComponent record to the database
                 * 
                 * @memberOf ctrl
                 */
                function saveCourseComponent(examOptionId, examComponentId) {
                    var courseComponent = {
                        examComponentId: examComponentId,
                        courseOption: {
                            courseId: vm.customExam.courseId,
                            examOptionId: examOptionId,
                        },
                    };
                    CourseComponent.create(courseComponent).then(function(response) {
                        //
                    }, function(response) {
                        console.error("Error creating courseComponent record");
                    });
                }

                /**
                 * This function saves the course option to the database
                 * 
                 * @memberOf ctrl
                 */
                function saveCourseOption(examOptionId) {
                    //
                    var courseOption = {
                        courseId: vm.customExam.courseId,
                        examOptionId: examOptionId,
                    };
                    CourseOption.create(courseOption).then(function(response) {
                        //
                    }, function(response) {
                        console.error("Error creating courseOption record");
                    });
                }

                /**
                 * This function saves the course syllabus to the database
                 * 
                 * @memberOf ctrl
                 */
                function saveCourseSyllabus(syllabusId) {
                    //
                    var courseSyllabus = {
                        courseId: vm.customExam.courseId,
                        syllabusId: syllabusId,
                    };
                    CourseSyllabus.create(courseSyllabus).then(function(response) {
                        //
                    }, function(response) {
                        console.error("Error creating courseSyllabus record");
                    });
                }

                /**
                 * This function saves the exam option to the database.
                 * 
                 * @memberOf ctrl
                 */
                function saveOption(syllabus) {
                    var examOption = {

                        optionEntryCode: (vm.collapseAdditional ? vm.customExam.examCode : vm.customExam.optionCode),
                        optionTitle: (vm.collapseAdditional ? vm.customExam.examTitle : vm.customExam.optionTitle),
                        syllabusDto: syllabus,
                    };
                    Option.create(examOption).then(function(response) {
                        examOption = response;

                        resolveExamOptionId(vm.customExam.examOptionId, response.examOptionId).then(function(data) {
                            vm.customExam.examOptionId = data;
                        });

                        saveCourseOption(response.examOptionId);
                        saveComponent(response);
                    }, function(response) {
                        console.log("Error creating exam option record.");
                        alert("Error creaing exam option record. Please contact MIS");
                    });
                }

                /**
                 * This function saves the optionComponent record to the database
                 * 
                 * @param examOptionId
                 * @param examComponentId
                 * @returns
                 * 
                 * @memberOf ctrl
                 */
                function saveOptionComponent(examOptionId, examComponentId) {
                    var optionComponent = {
                        examOption: {
                            examOptionId: examOptionId,
                        },
                        examComponent: {
                            examComponentId: examComponentId,
                        },
                    };
                    OptionComponent.create(optionComponent).then(function(response) {
                        //
                    }, function(response) {
                        console.error("Error creating optionComponent");
                    });
                }
            }
        ]);
})();
;(function() {
    angular.module('cid.exams.seating-plan').controller(
        'SeatingPlanCustomExamStudentsComponentController', ["$uibModal", "$uibModalInstance", "$state", "$scope", "entity", "Course", "StudentOptionEntry",
            function($uibModal, $uibModalInstance, $state, $scope, entity, Course, StudentOptionEntry) {
                var vm = this;

                $scope.cancel = cancel;
                $scope.groups = {
                    groupList: [],
                };
                $scope.save = save;

                ////////////////////////////

                console.log('SeatingPlanCustomExamStudentsComponentController Loaded');
                init();

                function cancel() {
                    $uibModalInstance.dismiss();
                }

                /**
                 * This function initialises the settings for the window
                 * 
                 * course group and students list require a numbered array, called $scope.groups.groupList
                 * For fast processing, and quick tracking of previously encountered course groups, we will use an
                 * associative array, groupIndex, which links course group reference to the appropriate 
                 * $scope.groups.groupList element number
                 */
                function init() {
                    Course.enrolments(entity.customExam.courseId).then(function(response) {
                        groupIndex = [];

                        for (var index in response.data) {
                            student = response.data[index];
                            if (student._completionStatus.id === 1) { // Only want to include current students.
                                // Check if course group array element has been created
                                if (groupIndex[student._courseGroupReference] === undefined) {
                                    // Course group array element hasn't been created yet, so create it 
                                    groupIndex[student._courseGroupReference] = $scope.groups.groupList.length;
                                    // Populate details for course group array element
                                    $scope.groups.groupList[groupIndex[student._courseGroupReference]] = {
                                        courseGroupId: student.courseGroupId,
                                        _courseGroupReference: student._courseGroupReference,
                                        _levelDescription: student._levelDescription,
                                        _subjectDescription: student._subjectDescription,
                                        studentList: [{ // Create student array for course group, and add student.
                                            id: student.studentId,
                                        }],
                                    };
                                } else { // Course group array element already exists, so use it, and add student to student array 
                                    $scope.groups.groupList[groupIndex[student._courseGroupReference]].studentList.push({
                                        id: student.studentId,
                                    });
                                }
                            }
                        }
                    }, function(response) {
                        console.log("Error occurred loading course enrolments");
                    });
                }

                /**
                 * This function creates student option entry records for all the selected students
                 */
                function save() {
                    for (var groupIndex in $scope.groups.groupList) {
                        for (var studentIndex in $scope.groups.groupList[groupIndex].studentList) {
                            // Student has been selected if any of Select All, Course group, or student itself has been selected. 
                            if ($scope.groups.groupList[groupIndex]._selected || $scope.groups.groupList[groupIndex].studentList[studentIndex]._selected) {
                                StudentOptionEntry.create({
                                    studentId: $scope.groups.groupList[groupIndex].studentList[studentIndex].id,
                                    examOptionId: entity.customExam.examOptionId,
                                    statusId: 1,
                                    ediStatusId: 8,
                                    resit: 0,
                                    private: 0
                                }).then(function(response) {}, function(response) {});
                            }
                        }
                    }

                    $uibModalInstance.close();
                }
            }
        ]);
})();
;/**
 * The seatingPlanGenerator
 */
(function() {
    //
    angular.module('cid.exams.seating-plan').controller(
        'SeatingPlanGeneratorController', ["$scope", "$uibModal", "$state", "$filter", "Component", "SeatingPlan", "entity",
            function($scope, $uibModal, $state, $filter, Component, SeatingPlan, entity) {
                var vm = this;

                $scope.advancedFilter = advancedFilter;
                $scope.addCustomExamComponent = addCustomExamComponent;
                $scope.autoPopulateSeatingPlan = autoPopulateSeatingPlan;
                $scope.blankStudent = {
                    studentId: null,
                    examComponentId: null,
                    row: null,
                    col: null,
                    label: null,
                };
                $scope.bulkClearSeatsSettings = bulkClearSeatsSettings;
                $scope.cancel = cancel;
                $scope.changeStudentSettings = changeStudentSettings;
                $scope.clearSeat = clearSeat;
                $scope.displayOptions = {
                    roomDescription: true,
                    studentConcessions: true,
                };
                $scope.examComponents = [];
                $scope.examComponentsLoaded = 0;
                $scope.examRoom = null;
                $scope.filterOptions = {
                    hideAssigned: false,
                    showOnlyConcessions: false,
                    showOnlyClashes: false,
                };
                $scope.listCanceled = listCanceled;
                $scope.listDragEnd = listDragEnd;
                $scope.listDragStart = listDragStart;
                $scope.listDrop = listDrop;
                $scope.listFilter = {
                    examComponentId: "",
                    _candidateNo: "",
                    _surname: "",
                    _firstName: "",
                };
                $scope.listMoveTo = listMoveTo;
                $scope.lists = null;
                $scope.numColumns = null;
                $scope.numRows = null;
                $scope.planCanceled = planCanceled;
                $scope.planDrop = planDrop;
                $scope.saveAndCloseExamRoom = saveAndCloseExamRoom;
                $scope.saveExamRoom = saveExamRoom;
                $scope.sortOptions = [{
                        title: 'Exam Component - Candidate No',
                        sortOrder: ['+_examComponentTitle', '+_candidateNo']
                    },
                    {
                        title: 'Exam Component - Surname, First Name',
                        sortOrder: ['+_examComponentTitle', '+_surname', '+_firstName']
                    }
                ];
                $scope.sortOrder = ['+_examComponentTitle', '+_candidateNo'];
                $scope.sourceStudent = null;
                $scope.students = [];
                $scope.studentsLoaded = false;

                // //////////////////////////////////////////////////////////////

                console.log('SeatingPlanGeneratorController Loaded');
                init();

                /**
                 * Advanced filter determines whether to display a student in the student list based on
                 * filtering options such as whether or not the student is assigned a seat, whether or
                 * not they have a concession, or whether or not they have a clash of exams.
                 */
                function advancedFilter(item) {
                    return assignedFilter(item) && concessionsFilter(item) && clashesFilter(item);
                }

                /**
                 * This function opens a dialog window to allow custom or internal
                 * exam Components to be created
                 */
                function addCustomExamComponent() {
                    var modalInstance = $uibModal.open({
                        templateUrl: 'js/modules/exams/seating-plan/views/seating-plan-custom-exam-component.html',
                        controller: 'SeatingPlanCustomExamComponentController',
                        controllerAs: 'ctrl',
                        size: 'lg',
                        backdrop: 'static',
                        keyboard: false,
                        resolve: {
                            entity: function() {
                                return {
                                    timetableDate: $scope.examRoom.examSession.date,
                                    timetableSession: $scope.examRoom.examSession.session,
                                };
                            }
                        },
                    }).result.then(customExamSelectStudents, function(result) {
                        console.log(result);
                    });
                }

                /**
                 * This function filters out students who have been assigned a seat if the hideAssigned flag is set.
                 *
                 * @param {object} item - The student item to test
                 * @return {boolean} true if should be included or false if should be filtered out.
                 */
                function assignedFilter(item) {
                    return (($scope.filterOptions.hideAssigned && item.label === null) || !$scope.filterOptions.hideAssigned);
                }

                /**
                 * This function sets the seat details within the students
                 * array.
                 *
                 * @param {integer}
                 *            The index within the students list.
                 * @param {integer}
                 *            The row that the student is assigned to.
                 * @param {integer}
                 *            The column that the student is assigned to.
                 * @param {integer}
                 *            The exam room id that the student is assigned to.
                 */
                function assignSeatToStudent(index, row, col, examRoomId) {
                    if (row === null || col === null) {
                        $scope.students[index].label = null;
                    } else {
                        $scope.students[index].label = seatLabel(row, col);
                    }
                    $scope.students[index].row = row;
                    $scope.students[index].col = col;
                    $scope.students[index].changed = true;
                    $scope.students[index].examRoomId = examRoomId;
                }

                /**
                 * This function opens the dialog window with the auto populate
                 * settings, before calling the auto populate function.
                 */
                function autoPopulateSeatingPlan() {
                    var modalInstance = $uibModal.open({
                        templateUrl: 'js/modules/exams/seating-plan/views/seating-plan-auto-generate-settings.html',
                        controller: 'SeatingPlanAutoGenerateController',
                        controllerAs: 'ctrl',
                        size: 'lg',
                        resolve: {
                            entity: [function() {
                                return {
                                    numCols: $scope.numColumns,
                                    numRows: $scope.numRows
                                };
                            }]
                        }
                    }).result.then(populateSeats, function() {});
                }

                /**
                 * This function clears all seats within a specified range.
                 *
                 * @param {object}
                 *            The options selected in the settings dialog
                 *            window.
                 */
                function bulkClearSeats(result) {
                    for (r = result.startRow - 1; r <= result.endRow - 1; r++) {
                        for (c = result.startCol.index; c <= result.endCol.index; c++) {
                            if ($scope.lists.rows[r].columns[c].student[0].studentId !== null) {
                                studentIndex = $scope.lists.rows[r].columns[c].student[0].listIndex;
                                $scope.lists.rows[r].columns[c].student[0] = $scope.blankStudent;
                                assignSeatToStudent(studentIndex, null, null, null);
                            }
                        }
                    }
                }

                /**
                 * This function opens a dialog window to allow settings to be
                 * specified for bulk clearing of seats
                 */
                function bulkClearSeatsSettings() {
                    var modalInstance = $uibModal.open({
                        templateUrl: 'js/modules/exams/seating-plan/views/seating-plan-bulk-clear-seats-settings.html',
                        controller: 'SeatingPlanBulkClearSeatsController',
                        controllerAs: 'ctrl',
                        size: 'lg',
                        resolve: {
                            entity: function() {
                                return {
                                    numCols: $scope.numColumns,
                                    numRows: $scope.numRows
                                };
                            }
                        }
                    }).result.then(bulkClearSeats, function() {});
                }

                /**
                 * This function handles the Cancel button being pressed.
                 *
                 * @returns
                 */
                function cancel() {
                    $state.go('^');
                }

                /**
                 * This function opens a dialog window to allow student list
                 * options to be specified (currently empty)
                 */
                function changeStudentSettings() {
                    var modalInstance = $uibModal.open({
                        templateUrl: 'js/modules/exams/seating-plan/views/seating-plan-student-settings.html',
                        controller: 'SeatingPlanStudentSettingsController',
                        controllerAs: 'ctrl',
                        size: 'lg',
                        resolve: {
                            entity: [function() {
                                return {
                                    filterOptions: $scope.filterOptions,
                                    displayOptions: $scope.displayOptions,
                                };
                            }]
                        },
                    }).result.then(function(result) {}, function() {});
                }

                /**
                 * This function filters out students without clashes if the showOnlyClashes flag is set.
                 *
                 * @param {object} item - The student item to test
                 * @return {boolean} true if should be included or false if should be filtered out.
                 */
                function clashesFilter(item) {
                    return (($scope.filterOptions.showOnlyClashes && item._clash) || !$scope.filterOptions.showOnlyClashes);
                }

                /**
                 * This function handles the seating grid 'x' button being
                 * pressed.
                 *
                 * @param st
                 * @returns
                 */
                function clearSeat(st) {
                    console.log('callback function clearSeat() triggered');
                    if (st.student[0].studentId !== null) {
                        // Remove student from seat
                        studentIndex = st.student[0].listIndex;
                        $scope.lists.rows[st.student[0].row].columns[st.student[0].col].student[0] = $scope.blankStudent;
                        assignSeatToStudent(studentIndex, null, null, null);
                    } else {
                        // Disable / enable seat
                        st.blocked = !st.blocked;
                    }
                }

                /**
                 * This function filters out students without concessions if the showOnlyConcessions flag is set.
                 *
                 * @param {object} item - The student item to test
                 * @return {boolean} true if should be included or false if should be filtered out.
                 */
                function concessionsFilter(item) {
                    return (($scope.filterOptions.showOnlyConcessions && item._concessions.length > 0) || !$scope.filterOptions.showOnlyConcessions);
                }

                /**
                 * This function opens a window to allow for selection of students (or groups) to assign to a custom/internal exam
                 */
                function customExamSelectStudents(results) {
                    var modalInstance = $uibModal.open({
                        templateUrl: 'js/modules/exams/seating-plan/views/seating-plan-custom-exam-students-component.html',
                        controller: 'SeatingPlanCustomExamStudentsComponentController',
                        controllerAs: 'ctrl',
                        size: 'lg',
                        backdrop: 'static',
                        keyboard: false,
                        resolve: {
                            entity: function() {
                                return {
                                    customExam: results,
                                };
                            }
                        },
                    }).result.then(function() {
                        // after successfully adding a custom module, and selecting students, then reload the students list.
                        init();
                    });
                }

                /**
                 * This function is used to find the current index of a student
                 * object with the define listIndex. The listIndex value in the
                 * studentItem object within the array is the initial index that
                 * the studentItem had when the array was first populate.
                 *
                 * @param {Integer}
                 *            listIndex The listIndex for the studentItem to
                 *            find
                 * @return {Integer} The indexOf value for the current position
                 *         in the array of students
                 */
                function findStudentIndexWithListIndex(listIndex) {
                    return $scope.students.indexOf($scope.students.find(function(a) {
                        return a.listIndex == listIndex;
                    }));
                }

                /**
                 * This function initialises the students list and the seating
                 * grid.
                 *
                 * @returns
                 */
                function init() {
                    entity.examRoom.then(function(data, header) {
                            $scope.examRoom = data.data;
                            $scope.examRoom.examSession.date = new Date($scope.examRoom.examSession.date);
                            $scope.numRows = $scope.examRoom.rows;
                            $scope.numColumns = $scope.examRoom.cols;
                            $scope.students = [];
                            $scope.lists = {
                                rows: []
                            };
                            for (var i = 0; i < $scope.numRows; i++) {
                                $scope.lists.rows.push({
                                    label: String.fromCharCode(65 + i),
                                    row: i,
                                    columns: []
                                });
                                for (var j = 0; j < $scope.numColumns; j++) {
                                    $scope.lists.rows[i].columns.push({
                                        label: seatLabel(i, j),
                                        row: i,
                                        col: j,
                                        blocked: false,
                                        student: [$scope.blankStudent]
                                    });
                                }
                            }

                            Component.queryByDateAndSession($scope.examRoom.examSession.date, $scope.examRoom.examSession.session).then(loadComponents,
                                function() {
                                    // error
                                });

                        },
                        function() {
                            console.error("ERROR retrieving exam room details");
                        });
                }

                /**
                 * This function is part of the drag and drop functionality.
                 */
                function listCanceled(st, ind, item) {
                    console.log("listCanceled");
                }

                /**
                 * This function is part of the drag and drop functionality (Not
                 * utilised)
                 */
                function listDragEnd(st, ind) {
                    console.log("listDragEnd");
                }

                /**
                 * This function is part of the drag and drop functionality. A
                 * student object is dragged from the student list.
                 */
                function listDragStart(st, student, ind) {
                    console.log("listDragStart");
                    $scope.sourceStudentIndex = findStudentIndexWithListIndex(student.listIndex);
                    $scope.sourceStudent = st[$scope.sourceStudentIndex];
                }


                /**
                 * This function is part of the drag and drop functionality.
                 */
                function listDrop(st, ind, item) {
                    console.log("listDrop");
                    $scope.$apply();
                    return false;
                }

                /**
                 * This function is part of the drag and drop functionality (Not
                 * utilised)
                 */
                function listMoveTo(st, ind) {
                    console.log("listMoveTo");
                }

                /**
                 * This function receives the loaded list of components, and
                 * loads the students for each component.
                 *
                 * @param data
                 * @param header
                 * @returns
                 */
                function loadComponents(data, header) {
                    // success
                    $scope.examComponents = data.data.sort(sortByTitle);
                    $scope.examComponents.forEach(function(examComponentItem, examComponentIndex) {
                        SeatingPlan.queryByExamComponentId(examComponentItem.id).then(function(data, header) {
                                data.data.forEach(function(seatingPlanItem, seatingPlanIndex) {
                                    seatingPlanItem.listIndex = $scope.students.length;
                                    seatingPlanItem.changed = false;
                                    if (seatingPlanItem.row !== null && seatingPlanItem.col !== null && seatingPlanItem.examRoomId === $scope.examRoom.id) {
                                        seatingPlanItem.label = seatLabel(seatingPlanItem.row, seatingPlanItem.col);
                                        $scope.lists.rows[seatingPlanItem.row].columns[seatingPlanItem.col].student[0] = seatingPlanItem;
                                    } else {
                                        seatingPlanItem.label = null;
                                    }
                                    $scope.students.forEach(function(student, stIndex) {
                                        //Check for student already appearing in the list
                                        if (student._candidateNo === seatingPlanItem._candidateNo && student._surname === seatingPlanItem._surname) {
                                            $scope.students[student.listIndex]._clash = true;
                                            seatingPlanItem._clash = true;
                                        }
                                    });
                                    $scope.students.push(seatingPlanItem);
                                });
                                $scope.examComponentsLoaded += 1;
                                if ($scope.examComponentsLoaded == $scope.examComponents.length) {
                                    $scope.studentsLoaded = true;
                                }
                            },
                            function(data, header) {
                                // error
                            });
                    });
                }

                /**
                 * This function is part of the drag and drop functionality (Not
                 * utilised)
                 */
                function planCanceled(student, ind, item) {
                    console.log("planCanceled");
                }

                /**
                 * This function is part of the drag and drop functionality. A
                 * student object is dropped onto the seating grid.
                 */
                function planDrop(student, ind, item) {
                    console.log("planDrop");
                    student.student[0] = $scope.sourceStudent;
                    assignSeatToStudent($scope.sourceStudentIndex, student.row, student.col, $scope.examRoom.id);
                    $scope.$apply();
                    return true;
                }

                /**
                 * This function locates and populates the next available seat
                 * as part of the auto populate functionality.
                 *
                 * @param {object}
                 *            The student object
                 * @param {integer}
                 *            The index of the student (DO NOT USE due to index
                 *            referring to incorrect list index
                 */
                function populateStudentSeat(studentItem, studentIndex) {
                    if (studentItem.row === null && studentItem.col === null) {
                        // Find next (or first) available seat
                        while ($scope.lists.rows[assign.row].columns[assign.col].student[0].studentId !== null || $scope.lists.rows[assign.row].columns[assign.col].blocked) {

                            // New exam and flag for new exam row/col set, so
                            // move to start of next row/col
                            if (previousExamComponentId !== studentItem.examComponentId && assign.newRowColExam) {
                                if (assign.rowsThenCols) {
                                    assign.row = assign.rowStart;
                                } else {
                                    assign.row += assign.rowDir;
                                }
                                if (assign.rowsThenCols) {
                                    assign.col += assign.colDir;
                                } else {
                                    assign.col = assign.colStart;
                                }
                                if (assign.col > assign.colUpperLimit || assign.col < assign.colLowerLimit || assign.row > assign.rowUpperLimit || assign.row < assign.rowLowerLimit) {
                                    return true;
                                }
                            } else {
                                // Primary direction is rows
                                if (assign.rowsThenCols) {
                                    // Reached the end of the column
                                    if (assign.row + assign.rowDir > assign.rowUpperLimit || assign.row + assign.rowDir < assign.rowLowerLimit) {
                                        assign.col += assign.colDir; // Move
                                        // to
                                        // next
                                        // column
                                        if (assign.col > assign.colUpperLimit || assign.col < assign.colLowerLimit) {
                                            return true; // Moved passed last
                                            // column
                                        }

                                        if (assign.snake) { // Change direction
                                            // if we're snaking
                                            assign.rowDir *= -1;
                                        } else {
                                            assign.row = assign.rowStart; // Move
                                            // to
                                            // start
                                            // of
                                            // column
                                        }

                                    } else {
                                        assign.row += assign.rowDir;
                                    }
                                } else {
                                    // Reached the end of the row
                                    if (assign.col + assign.colDir > assign.colUpperLimit || assign.col + assign.colDir < assign.colLowerLimit) {
                                        assign.row += assign.rowDir; // Move
                                        // to
                                        // next
                                        // row
                                        if (assign.row > assign.rowUpperLimit || assign.row < assign.rowLowerLimit) {
                                            return true; // Moved passed last
                                            // row
                                        }

                                        if (assign.snake) {
                                            assign.colDir *= -1; // Change
                                            // direction
                                            // if we're
                                            // snaking
                                        } else {
                                            assign.col = assign.colStart; // Move
                                            // to
                                            // start
                                            // of
                                            // row
                                        }
                                    } else {
                                        assign.col += assign.colDir;
                                    }
                                }
                            }
                        }

                        if ($scope.lists.rows[assign.row].columns[assign.col].student[0].studentId === null) {
                            assignSeatToStudent(findStudentIndexWithListIndex(studentItem.listIndex), assign.row, assign.col, $scope.examRoom.id);
                            $scope.lists.rows[assign.row].columns[assign.col].student[0] = studentItem;
                        }

                        previousExamComponentId = studentItem.examComponentId;
                    }
                }

                /**
                 * This function calculates and sets row and column ranges and
                 * limits, and then auto populates the seating plan for the
                 * filtered list.
                 *
                 * @param {object}
                 *            The data specified within the auto populate
                 *            details box.
                 */
                function populateSeats(result) {
                    var filteredStudents = $filter('orderBy')($filter('filter')($scope.students, $scope.listFilter), $scope.sortOrder);
                    assign = result;
                    assign.numRows = $scope.numRows;
                    assign.rowLowerLimit = result.startRow - 1;
                    assign.rowUpperLimit = result.endRow - 1;
                    assign.numCols = $scope.numColumns;
                    assign.colLowerLimit = result.startCol.index;
                    assign.colUpperLimit = result.endCol.index;

                    switch (assign.fillDirection) {
                        case "up":
                            if (!result.fillRowsNotColumns) {
                                if (result.newRowColExam) {
                                    newRowUpperLimit = Math.ceil((filteredStudents.length + ($scope.examComponents.length * ($scope.numRows - 1))) / $scope.numColumns);
                                } else {
                                    newRowUpperLimit = Math.ceil(filteredStudents.length / $scope.numColumns);
                                }
                                if (newRowUpperLimit < assign.rowUpperLimit) {
                                    assign.rowUpperLimit = newRowUpperLimit;
                                }
                            }
                            assign.rowStart = assign.rowUpperLimit;
                            assign.rowDir = -1;
                            switch (assign.secondaryFillDirection) {
                                case "asc":
                                    assign.colStart = assign.colLowerLimit;
                                    assign.colDir = 1;
                                    break;
                                case "desc":
                                    assign.colStart = assign.colUpperLimit;
                                    assign.colDir = -1;
                                    break;
                            }
                            assign.rowsThenCols = true;
                            break;
                        case "down":
                            if (!result.fillRowsNotColumns) {
                                if (result.newRowColExam) {
                                    newRowUpperLimit = Math.ceil((filteredStudents.length + ($scope.examComponents.length * ($scope.numRows - 1))) / $scope.numColumns);
                                } else {
                                    newRowUpperLimit = Math.ceil(filteredStudents.length / $scope.numColumns);
                                }
                                if (newRowUpperLimit < assign.rowUpperLimit) {
                                    assign.rowUpperLimit = newRowUpperLimit;
                                }
                            }
                            assign.rowStart = assign.rowLowerLimit;
                            assign.rowDir = 1;
                            switch (assign.secondaryFillDirection) {
                                case "asc":
                                    assign.colStart = assign.colLowerLimit;
                                    assign.colDir = 1;
                                    break;
                                case "desc":
                                    assign.colStart = assign.colUpperLimit;
                                    assign.colDir = -1;
                                    break;
                            }
                            assign.rowsThenCols = true;
                            break;
                        case "left":
                            if (result.fillRowsNotColumns) {
                                if (result.newRowColExam) {
                                    newColUpperLimit = Math.ceil((filteredStudents.length + ($scope.examComponents.length * ($scope.numColumns - 1))) / $scope.numRows);
                                } else {
                                    newColUpperLimit = Math.ceil(filteredStudents.length / $scope.numRows);
                                }
                                if (newColUpperLimit < assign.colUpperLimit) {
                                    assign.colUpperLimit = newColUpperLimit;
                                }
                            }
                            assign.colStart = assign.colUpperLimit;
                            assign.colDir = -1;
                            switch (assign.secondaryFillDirection) {
                                case "asc":
                                    assign.rowStart = assign.rowLowerLimit;
                                    assign.rowDir = 1;
                                    break;
                                case "desc":
                                    assign.rowStart = assign.rowUpperLimit;
                                    assign.rowDir = -1;
                                    break;
                            }
                            assign.rowsThenCols = false;
                            break;
                        case "right":
                            if (result.fillRowsNotColumns) {
                                if (result.newRowColExam) {
                                    newColUpperLimit = Math.ceil((filteredStudents.length + ($scope.examComponents.length * ($scope.numColumns - 1))) / $scope.numRows);
                                } else {
                                    newColUpperLimit = Math.ceil(filteredStudents.length / $scope.numRows);
                                }
                                if (newColUpperLimit < assign.colUpperLimit) {
                                    assign.colUpperLimit = newColUpperLimit;
                                }
                            }
                            assign.colStart = assign.colLowerLimit;
                            assign.colDir = 1;
                            switch (assign.secondaryFillDirection) {
                                case "asc":
                                    assign.rowStart = assign.rowLowerLimit;
                                    assign.rowDir = 1;
                                    break;
                                case "desc":
                                    assign.rowStart = assign.rowUpperLimit;
                                    assign.rowDir = -1;
                                    break;
                            }
                            assign.rowsThenCols = false;
                            break;
                    }

                    assign.row = assign.rowStart;
                    assign.col = assign.colStart;
                    previousExamComponentId = filteredStudents[0].examComponentId;

                    filteredStudents.some(populateStudentSeat);
                }

                /**
                 * This function saves changes to student seats, and closes the seatingPlan window.
                 */
                function saveAndCloseExamRoom() {
                    saveExamRoom();
                    $state.go('^');
                }

                /**
                 * This function scans the students list, and updates the
                 * database where a students seating details have been updated.
                 */
                function saveExamRoom() {
                    $scope.students.forEach(function(studentItem, studentIndex) {
                        if (studentItem.changed) {
                            // save - we have no idea whether the object needs
                            // creating or updating.
                            if (studentItem.row !== null && studentItem.col !== null) {
                                SeatingPlan.create(studentItem);
                            } else {
                                SeatingPlan.delete(studentItem);
                            }
                        }
                    });
                }

                /**
                 * This function takes zero indexed row and column and returns
                 * the seat label (A1, B5, D3, etc)
                 *
                 * @param {integer}
                 *            Zero indexed row number
                 * @param {integer}
                 *            Zero indexed column number
                 * @return {String} The displayable seat labal
                 */
                function seatLabel(row, col) {
                    return String.fromCharCode(65 + col) + (row + 1);
                }

                /**
                 * This function is used on the Array.sort() function to sort an
                 * array of objects by their title field
                 *
                 * @param {Object}
                 *            a This is the first object to compare
                 *            (automatically passed in when used with
                 *            Array.sort())
                 * @param {Object}
                 *            b This is the second object to compare
                 *            (automatically passed in when used with
                 *            Array.sort())
                 * @return {Integer} The sort order value
                 */
                function sortByTitle(a, b) {
                    var titleA = a.title.toUpperCase(); // ignore upper and
                    // lowercase
                    var titleB = b.title.toUpperCase(); // ignore upper and
                    // lowercase
                    if (titleA < titleB) {
                        return -1;
                    }
                    if (titleA > titleB) {
                        return 1;
                    }
                    return 0;
                }

                /**
                 *
                 */
                function sortStudentList(a, b) {
                    return a.candidateNo - b.candidateNo;
                }
            }
        ]);
})();
;/**
 * The seatingPlan
 */
(function() {
    //
    angular
        .module('cid.exams.seating-plan')
        .controller('SeatingPlanRoomsDialogController', ["$scope", "$uibModalInstance", "entity", "ExamRoom", "Room",
            function($scope, $uibModalInstance, entity, ExamRoom, Room) {
                var vm = this;

                $scope.cancel = cancel;
                $scope.examRoom = {};
                $scope.rowsAndColsSet = rowsAndColsSet;
                $scope.save = save;
                $scope.setDefaults = setDefaults;
                $scope.setRowColValues = setRowColValues;

                ////////////////////////////

                console.log('SeatingPlanRoomsDialogController Loaded');
                init();

                /**
                 * This procedure discards the dialog window if the cancel button is pressed
                 */
                function cancel() {
                    $uibModalInstance.dismiss('cancel');
                }

                /**
                 * This procedure initialises the Add/Edit seating plan room dialog
                 */
                function init() {
                    if (entity.examRoom === undefined) {
                        $scope.newNotEdit = true;
                    } else {
                        $scope.examRoom = entity.examRoom;
                        $scope.newNotEdit = false;
                    }
                    if (entity.examSession === null) {
                        console.error('Cannot edit exam room without selecting exam session');
                    } else {
                        $scope.examRoom.examSession = entity.examSession;
                    }
                }

                /**
                 * This procedure closes the dialog box once the room has been saved
                 */
                function onSaveFinished(result) {
                    $uibModalInstance.close(result);
                }

                /**
                 * This procedure determines whether the row and column values have been set
                 *
                 * @return {boolean} true if row and column values are specified
                 */
                function rowsAndColsSet() {
                    return !($scope.examRoom.rows !== undefined && $scope.examRoom.rows > 0 && $scope.examRoom.cols !== undefined && $scope.examRoom.cols > 0);
                }

                /**
                 * This function saves the row and column values as defaults to the room table
                 */
                function setDefaults() {
                    $scope.examRoom.room.defaultRows = $scope.examRoom.rows;
                    $scope.examRoom.room.defaultCols = $scope.examRoom.cols;
                    Room.save($scope.examRoom.room);
                }

                /**
                 * This procedure loads room details and sets the data if appropriate
                 */
                function setRowColValues() {
                    ExamRoom.queryByExamSessionIdAndRoomId($scope.examRoom.examSession.id, $scope.examRoom.room.id).then(function(data, header) {
                        if ($scope.newNotEdit) {
                            $scope.examRoom = data.data;
                        }
                    }, function(data, header) {
                        if (!$scope.newNotEdit) {
                            console.error('Error: Could not access details for examRoom being edited, id ' + $scope.examRoom.id);
                        }
                    });

                    Room.get($scope.examRoom.room.id).then(function(data, header) {
                        $scope.examRoom.rows = data.data.defaultRows;
                        $scope.examRoom.cols = data.data.defaultCols;
                        $scope.rowsMsg = "Default: " + data.data.defaultRows;
                        $scope.colsMsg = "Default: " + data.data.defaultCols;
                    }, function() {
                        console.error('Error: Could not access details for room id ' + $scope.examRoom.room.id);
                    });
                }

                /**
                 * This function updates or creates the exam room to the database
                 */
                function save() {
                    if ($scope.newNotEdit) {
                        ExamRoom.create($scope.examRoom, onSaveFinished).then(function(data, header) {}, function(data, header) {});
                    } else {
                        ExamRoom.save($scope.examRoom, onSaveFinished).then(function(data, header) {}, function(data, header) {});
                    }
                }
            }
        ]);
})();
;/**
 * The seatingPlanGenerator
 */
(function() {
    //
    angular.module('cid.exams.seating-plan').controller(
        'SeatingPlanStudentSettingsController', ["$uibModal", "$uibModalInstance", "$state", "$scope", "entity",
            function($uibModal, $uibModalInstance, $state, $scope, entity) {
                var vm = this;

                $scope.cancel = cancel;
                $scope.filterOptions = {};
                $scope.displayOptions = {};
                $scope.save = save;

                ////////////////////////////

                console.log('SeatingPlanStudentSettingsController Loaded');
                init();

                function cancel() {
                    $uibModalInstance.dismiss();
                }

                function init() {
                    $scope.filterOptions = entity.filterOptions;
                    $scope.displayOptions = entity.displayOptions;
                }

                function save() {
                    $uibModalInstance.close($scope.filterOptions);
                }
            }
        ]);
})();
;/**
 * The seatingPlanGenerator
 */
(function() {
    //
    angular.module('cid.exams.seating-plan').controller(
        'SeatingPlanController', ["$uibModal", "$mdDialog", "$state", "$scope", "ExamRoom", "ExamSession", "initExamDate", "initExamSession",
            function($uibModal, $mdDialog, $state, $scope, ExamRoom, ExamSession, initExamDate, initExamSession) {
                var vm = this;

                $scope.session = initExamSession !== null ? initExamSession : 'A';
                $scope.examDate = initExamDate !== null ? new Date(initExamDate) : null;
                $scope.showExamRooms = false;
                $scope.examRoomList = [];

                $scope.addEditRoomEntry = addEditRoomEntry;
                $scope.deleteRoomEntry = deleteRoomEntry;
                $scope.loadComponents = loadComponents;
                $scope.loadRooms = loadRooms;
                $scope.onChange = onChange;


                ////////////////////////////////////////////////////////////////////////

                console.log('SeatingPlanController Loaded');
                init();

                function init() {
                    if ($scope.examDate !== null) {
                        $scope.loadComponents();
                    }
                }

                function addEditRoomEntry(_examSession, _examRoom) {
                    console.log('SeatingPlanController::editRoomEntry called');

                    var modalInstance = $uibModal.open({
                        templateUrl: 'js/modules/exams/seating-plan/views/seating-plan-rooms-form.html',
                        controller: 'SeatingPlanRoomsDialogController',
                        controllerAs: 'ctrl',
                        size: 'lg',
                        resolve: {
                            entity: [function() {
                                return {
                                    examSession: _examSession,
                                    examRoom: _examRoom
                                };
                            }]
                        }
                    }).result.then(function(result) {
                        $scope.loadRooms();
                    }, function() {});
                }

                function deleteRoomEntry(_examSession, _examRoom) {
                    $mdDialog.show({
                        clickOutsideToClose: false,
                        controller: function($scope) {
                            $scope.ok = function() {
                                $mdDialog.hide();
                            };
                            $scope.cancel = function() {
                                $mdDialog.cancel();
                            };
                        },
                        templateUrl: 'js/modules/exams/seating-plan/views/seating-plan-delete-room-confirm.html',
                    }).then(function() {
                        ExamRoom.delete(_examRoom).then(function() {
                            $scope.loadRooms();
                        }, function() {
                            console.log('examRoom deletion failed');
                        });
                    }, function() {});
                }

                function loadComponents() {
                    if ($scope.examDate !== undefined &&
                        $scope.examDate !== null &&
                        $scope.session !== undefined &&
                        $scope.session !== null) {
                        $scope.showExamRooms = true;
                        ExamSession.queryByDateAndSession($scope.examDate, $scope.session).then(function(data, header) {
                            $scope.examSession = data.data;
                        }, function(data, header) { // Error - examSession doesn't exist, so create it
                            $scope.examSession = {};
                            $scope.examSession.date = $scope.examDate;
                            $scope.examSession.session = $scope.session;
                            ExamSession.create($scope.examSession).then(function(data, header) {
                                $scope.examSession.id = data.id;
                            });
                        });
                        $scope.loadRooms();
                    } else {
                        $scope.showExamRooms = false;
                    }
                }

                function loadRooms() {
                    ExamRoom.queryByDateAndSession($scope.examDate, $scope.session).then(function(data, header) {
                        $scope.examRoomList = data.data;
                    });
                }

                function onChange() {
                    var params = {
                        year: "" + $scope.examDate.getFullYear(),
                        month: ("" + ($scope.examDate.getMonth() + 1)).length == 1 ? "0" + ($scope.examDate.getMonth() + 1) : "" + ($scope.examDate.getMonth() + 1),
                        day: ("" + $scope.examDate.getDate()).length == 1 ? "0" + $scope.examDate.getDate() : "" + $scope.examDate.getDate(),
                        session: $scope.session
                    };
                    $state.go('exams.seating-plan.load', params);
                }
            }
        ]);
})();
;(function() {
    angular.module('cid.exams.seating-plan').config(['$stateProvider', '$urlRouterProvider', function($stateProvider, $urlRouterProvider) {
        $stateProvider
            .state('exams.seating-plan', {
                url: '/seating-plan',
                data: {
                    roles: ['ROLE_Exams Officer']
                },
                views: {
                    'content@': {
                        controller: 'SeatingPlanController',
                        controllerAs: 'ctrl',
                        templateUrl: 'js/modules/exams/seating-plan/views/seating-plan.html',
                    },
                },
                resolve: {
                    initExamDate: [function() {
                        return null;
                    }],
                    initExamSession: [function() {
                        return null;
                    }]
                }
            })
            .state('exams.seating-plan.load', {
                url: '/{year}/{month}/{day}/{session}',
                data: {
                    roles: ['ROLE_Exams Officer']
                },
                views: {
                    'content@': {
                        controller: 'SeatingPlanController',
                        controllerAs: 'ctrl',
                        templateUrl: 'js/modules/exams/seating-plan/views/seating-plan.html',
                    },
                },
                resolve: {
                    initExamDate: ['$stateParams', function($stateParams) {
                        var dateStringToParse = $stateParams.year + '-' + $stateParams.month + '-' + $stateParams.day + 'T00:00:00';
                        var examDate = Date.parse(dateStringToParse);
                        return examDate;
                    }],
                    initExamSession: ['$stateParams', function($stateParams) {
                        return $stateParams.session;
                    }]
                }
            })
            .state('exams.seating-plan.generator', {
                url: '/generator/{examRoomId}',
                data: {
                    roles: ['ROLE_Exams Officer']
                },
                views: {
                    'content@': {
                        controller: 'SeatingPlanGeneratorController',
                        controllerAs: 'ctrl',
                        templateUrl: 'js/modules/exams/seating-plan/views/seating-plan-generator.html',

                    },
                },
                resolve: {
                    entity: ['$stateParams', 'ExamRoom', function($stateParams, ExamRoom) {
                        return {
                            examRoom: ExamRoom.get($stateParams.examRoomId)
                        };
                    }]
                },
            });
    }]);
})();
;/**
 * This is the MainSiteDebugController definition that defines how the debug information is displayed.
 *
 * Applied Styles: [Y001, Y002, Y010, Y020, Y022, Y023, Y024, Y031, Y032, Y033, Y034]
 *
 * @type Controller
 */
(function() {
    'use strict';

    angular
        .module('cid.site')
        .controller('MainSiteDebugController', MainSiteDebugController);

    MainSiteDebugController.$inject = ['$scope', '$rootScope', 'Auth', 'Logger', 'GLOBAL', 'APP', 'USER'];

    function MainSiteDebugController($scope, $rootScope, Auth, Logger, GLOBAL, APP, USER) {
        /* jshint validthis:true */
        var vm = this;

        // Public Properties
        vm.info = {};
        vm.currentYear = APP.getYear();
        vm.userGlobals = $rootScope.globals;
        vm.globals = GLOBAL;
        vm.currentUser = Auth.getUser();

        vm.state = stateInformation();

        vm.userSettings = USER.load();

        vm.show = USER.getSetting('debugInfoEnabled');

        vm.visible = isVisible;

        // Public Methods
        vm.toggleShow = toggleShow;

        // Private Interface

        /**
         * This method is used to determine if the debug information panel should be displayed to the user based on the GLOBAL.DEBUG setting
         * and the roles assigned to the user.
         *
         * If the GLOBAL.DEBUG setting is True then the dubug panel will appear for all users.
         * If the current user has the Developer role then the debug panel will appear.
         *
         * @return {Boolean} This returns if the debug panel should appear based on various rules.
         */
        function isVisible() {
            var hasRole = Auth.isAuthorised('ROLE_Developer');
            return GLOBAL.DEBUG === true || hasRole === true;
        }

        function toggleShow() {
            USER.setSetting('debugInfoEnabled', vm.show);
        }

        function getAppYear() {
            return APP.getYear();
        }

        function stateInformation() {
            return {
                toState: APP.getCurrentState(),
                toStateParams: APP.getCurrentStateParams(),
                fromState: APP.getPreviousState(),
                fromStateParams: APP.getPreviousStateParams()
            };
        }

        function getCurrentState() {
            return APP.getCurrentState();
        }

        function getPreviousState() {
            return APP.getPreviousState();
        }

        $rootScope.$watch(getAppYear, function() {
            vm.currentYear = APP.getYear();
        });

        $rootScope.$watchGroup([getCurrentState, getPreviousState], function() {
            vm.state = stateInformation();
        });

    }

})();
;/**
 * This is the main sites login controller. This handles the login form processing.
 *
 * Applied Styles: [Y001, Y002, Y010]
 *
 * @type Controller
 */
(function() {
    'use strict';

    angular
        .module('cid.site')
        .controller('MainSiteLoginController', function($log, $rootScope, $state, Auth) {
            // Public Interface
            /* jshint validthis:true */
            var vm = this;

            vm.credentials = {
                username: '',
                password: ''
            };

            vm.message = '';
            vm.error = false;

            vm.login = login;

            init();

            // Private Interface

            function init() {
                // angular.element(document).ready(function() {
                //     $('input[autofocus]:visible:first').focus();
                // });
            }

            function login() {
                vm.error = false;
                Auth.login(vm.credentials, function(response) {
                    if (response.status == 200) {
                        $state.go('site.home');
                    } else {
                        vm.message = response.data.message;
                        vm.error = true;
                    }
                });
            }

        });

})();
;/**
 * This is the main site navigation controller.
 *
 * Styles Applied: [Y001, Y002, Y010, Y021, Y023, Y024, Y031, Y032, Y033, Y034, Y091]
 *
 * @type Controller
 */
(function() {
    'use strict';

    angular
        .module('cid.site')
        .controller('MainSiteNavigationController', MainSiteNavigationController);

    MainSiteNavigationController.$inject = ['$rootScope', '$state', 'Logger', 'Auth', 'AUTH_EVENTS', 'GLOBAL', 'APP', 'USER'];

    function MainSiteNavigationController($rootScope, $state, Logger, Auth, AUTH_EVENTS, GLOBAL, APP, USER) {
        // Public Interface
        /* jshint validthis:true */
        var vm = this;

        vm.currentYear = APP.getYear();

        vm.getCurrentYear = getCurrentYear;
        vm.setCurrentYear = setCurrentYear;
        vm.logout = logout;
        vm.authenticated = authenticated;
        vm.userHasRole = userHasRole;

        vm.debug = getDebug;
        vm.reportUrl = getReportUrl;

        vm.currentUser = Auth.getUser;

        vm.userSettings = {
            sideBar: $rootScope.sideBar
        };

        init();

        // Private Interface

        function init() {
            Logger.log('II Initialising the Main Site Navigation Controller');
            if (vm.currentUser !== undefined || vm.currentUser !== null) {
                loadStaffData();
            }
        }

        function getCurrentYear() {
            return vm.currentYear;
        }

        function setCurrentYear(year) {
            $rootScope.currentYear = year;
        }

        function loadStaffData(staffId) {
            Logger.info('Loading Staff Data');
        }

        function logout() {
            Logger.log('II Logging Out');
            Auth.logout();
            $state.go('login');
        }

        function authenticated() {
            return Auth.isAuthenticated();
        }

        function userHasRole(role) {
            return Auth.isAuthorised(role);
        }

        function getDebug() {
            return GLOBAL.DEBUG;
        }

        function getReportUrl() {
            return GLOBAL.REPORT_URL;
        }

        function getAppYear() {
            return APP.getYear();
        }

        $rootScope.$watch(getAppYear, function() {
            vm.currentYear = APP.getYear();
        });

        // Register Event Listners
        $rootScope.$on('year-changed', function(data) {
            vm.currentYear = APP.getYear();
        });

        $rootScope.$on(AUTH_EVENTS.loginSuccess, function(data) {
            if (data.staffId !== undefined || data.staffId !== null) {
                loadStaffData(data.staffId);
            }
        });

    }
})();
;(function() {
    'use strict';

    angular
        .module('cid.site')
        .config(mainSiteRouteConfiguration);

    mainSiteRouteConfiguration.$inject = ['$stateProvider', '$urlRouterProvider'];

    function mainSiteRouteConfiguration($stateProvider, $urlRouterProvider) {
        $urlRouterProvider.otherwise('/');

        $stateProvider
            .state('site', {
                data: {
                    roles: ['ROLE_Staff']
                },
                views: {
                    "navigation@": {
                        templateUrl: 'js/modules/site/views/navigation.html',
                        controller: 'MainSiteNavigationController',
                        controllerAs: 'ctrl',
                    },
                    "side-bar-global@": {
                        templateUrl: 'js/modules/site/views/side-bar-global.html',
                        controller: 'MainSiteNavigationController',
                        controllerAs: 'ctrl'
                    },
                    "debug@": {
                        templateUrl: 'js/modules/site/views/debug-info.html',
                        controller: 'MainSiteDebugController',
                        controllerAs: 'ctrl',
                    },
                },
            })
            .state('site.home', {
                url: '/',
                data: {
                    roles: ['ROLE_Staff']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/site/views/home.html',
                        controller: 'MainSiteNavigationController',
                        controllerAs: 'ctrl'
                    },
                },
            })
            .state('site.reports', {
                url: '/reports',
                data: {
                    roles: ['ROLE_Staff']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/site/views/reports.html',
                        controller: 'MainSiteNavigationController',
                        controllerAs: 'ctrl'
                    },
                },
            })
            .state('login', {
                url: '/login',
                views: {
                    "content@": {
                        templateUrl: 'js/modules/site/views/login.html',
                        controller: 'MainSiteLoginController',
                        controllerAs: 'ctrl',
                    }
                }
            });
    }
})();
;/**
 * This file defines the student records module for the CID system.
 */
(function() {
    'use strict';

    angular
        .module('cid.student-record')
        .controller('StudentEditorSearchController', StudentEditorSearchController)
        .controller('StudentEditorController', StudentEditorController);

    StudentEditorSearchController.$inject = ['$state'];
    StudentEditorController.$inject = ['$log', '$scope', '$rootScope', '$state', '$stateParams', 'studentEntity', 'Student', 'Person', 'Address', 'Contact', 'StudentWarning', 'StudentEntryQualification', 'StudentBursary', 'MasterRegister', 'StudentCollegeFundPaid', 'LearningSupportCost', 'LearningSupportVisit', 'GLOBAL', 'APP'];

    function StudentEditorSearchController($state) {
        /* jshint validthis:true */
        var vm = this;

        vm.loadStudent = function(id) {
            $state.go('student-editor.edit', {
                studentId: id
            });
        };

    }

    function StudentEditorController($log, $scope, $rootScope, $state, $stateParams, studentEntity, Student, Person, Address, Contact, StudentWarning, StudentEntryQualification, StudentBursary, MasterRegister, StudentCollegeFundPaid, LearningSupportCost, LearningSupportVisit, GLOBAL, APP) {
        /* jshint validthis:true */
        var vm = this;

        // Controller Properties and Variables
        vm.loaded = false;
        vm.student = studentEntity ? studentEntity.data : {};
        vm.studentAddress = {};
        vm.studentPerson = {};
        vm.studentYear = {};
        vm.studentAdmissions = {};
        vm.contacts = [];
        vm.contact = {};
        vm.enrolments = [];
        vm.studentBursary = {};
        vm.specialCategories = [];
        vm.studentEntryQualifications = [];
        vm.externalResultsArchive = [];
        vm.registers = [];
        vm.studentOverallAttendance = {};
        vm.ilpInterviews = [];
        vm.learningSupport = {};
        vm.collegeFundPayments = [];
        vm.interimReports = [];
        vm.examResults = [];
        vm.studentAlternativeUcis = [];
        vm.studentOptionEntries = [];
        vm.studentCollegeFundPaid = [];
        vm.identificationViolations = [];
        vm.studentLearningSupportCosts = [];
        vm.studentLearningSupportVisits = [];
        vm.warningCodeChanges = [];

        vm.ilpFilter = {};

        vm.currentYear = APP.getYear();

        // Controller Methods
        vm.loadStudent = loadStudent;

        vm.loadStudentYear = loadStudentYear;
        vm.loadContacts = loadContacts;
        vm.loadEnrolments = loadEnrolments;
        vm.loadSpecialCategories = loadSpecialCategories;
        vm.loadRegister = loadRegister;
        vm.loadStudentEntryQualifications = loadStudentEntryQualifications;
        vm.loadBursary = loadBursary;
        vm.loadAdmissions = loadAdmissions;
        vm.loadWarnings = loadWarnings;
        vm.loadOverallAttendance = loadOverallAttendance;
        vm.loadIlpInterviews = loadIlpInterviews;
        vm.loadExternalResultsArchive = loadExternalResultsArchive;
        vm.loadLearningSupport = loadLearningSupport;
        vm.loadCollegeFundPayments = loadCollegeFundPayments;
        vm.loadInterimReports = loadInterimReports;
        vm.loadExamResults = loadExamResults;
        vm.loadAlternativeUcis = loadAlternativeUcis;
        vm.loadOptionEntries = loadOptionEntries;
        vm.loadStudentCollegeFundPaid = loadStudentCollegeFundPaid;
        vm.loadIdentificationViolations = loadIdentificationViolations;
        vm.loadStudentLearningSupportCosts = vm.loadStudentLearningSupportCosts;
        vm.loadStudentLearningSupportVisits = vm.loadStudentLearningSupportVisits;
        vm.loadWarningCodeChanges = vm.loadWarningCodeChanges;

        vm.clear = clear;
        vm.init = init;

        init();

        // Private Interface

        function getAppYear() {
            return APP.getYear();
        }

        $rootScope.$watch(getAppYear, function() {
            vm.currentYear = APP.getYear();
        });

        // Controller Methods
        function init() {
            $log.log('StudentRecordsController::init called');
            if ($stateParams.studentId) {
                loadStudent($stateParams.studentId);
            }
            // Register Event Listners
            $scope.$on('$destroy', $rootScope.$on('student-withdrawn', function(data) {
                vm.loadStudent(vm.student.id);
            }));
            $scope.$on('$destroy', $rootScope.$on('enrolments-saved', function(data) {
                vm.loadEnrolments(vm.student.id);
            }));
            $scope.$on('$destroy', $rootScope.$on('enrolments-updated', function(data) {
                vm.loadEnrolments(vm.student.id);
            }));
            $scope.$on('$destroy', $rootScope.$on('register-saved', function(data) {
                vm.loadRegister(vm.student.id);
            }));
            $scope.$on('$destroy', $rootScope.$on("exam-results-saved", function(data) {
                vm.loadExamResults(vm.student.id);
            }));
            $scope.$on('$destroy', $rootScope.$on("current-year-changed", function(data) {
                loadStudentYear(vm.student.id, APP.getYear().id);
                loadEnrolments(vm.student.id);
                loadInterimReports(vm.student.id);
                loadRegister(vm.student.id);
                loadOptionEntries(vm.student.id);
                loadOverallAttendance(vm.student.id);
            }));
            $scope.$on('$destroy', $rootScope.$on("option-entires-updated", function(data) {
                vm.loadOptionEntries(vm.student.id);
            }));
            $scope.$on('$destroy', $rootScope.$on("fund-paid-updated", function(data) {
                vm.loadStudentCollegeFundPaid(vm.student.id);
            }));
            $scope.$on('$destroy', $rootScope.$on("student-admission-updated", function(data) {
                vm.loadAdmissions(vm.student.id);
            }));
            $scope.$on('$destroy', $rootScope.$on("identification-violation-saved", function(data) {
                vm.loadIdentificationViolations(vm.student.id);
            }));

            if ($stateParams.tab !== undefined && $stateParams.tab !== null) {
                $scope.activeTab = $stateParams.tab;
            }
        }

        function clear() {
            vm.loaded = false;
            vm.student = [];
            vm.studentAddress = {};
            vm.studentPerson = {};
            vm.studentYear = {};
            vm.contacts = [];
            vm.contact = {};
            vm.enrolments = [];
            vm.studentBursary = {};
            vm.specialCategories = [];
            vm.studentAdmissions = {};
            vm.studentEntryQualifications = [];
            vm.externalResultsArchive = [];
            vm.registers = [];
            vm.studentOverallAttendance = {};
            vm.ilpInterviews = [];
            vm.learningSupport = {};
            vm.collegeFundPayments = [];
            vm.interimReports = [];
            vm.examResults = [];
            vm.studentAlternativeUcis = [];
            vm.studentOptionEntries = [];
            vm.identificationViolations = [];
            vm.studentLearningSupportCosts = [];
            vm.studentLearningSupportVisits = [];
            vm.warningCodeChnages = [];
        }

        function loadStudent(id) {
            $log.log('StudentRecordsController::loadStudent called');
            Student.get(id).then(function(response) {
                $log.log('II Student with ID: ' + id + ' retireved.');
                vm.student = response.data;
                if (response.data) {
                    vm.loaded = true;
                    $rootScope.$emit('student.loaded');
                }
                var personId = vm.student.person.id;
                var addressId = vm.student.person.addressId;

                if (addressId) {
                    Address.get(addressId).then(function(response) {
                        vm.studentAddress = response.data;
                        $rootScope.$emit('student.address.loaded');
                    });
                }
                if (personId) {
                    Person.get(personId).then(function(response) {
                        vm.studentPerson = response.data;
                        $rootScope.$emit('student.person.loaded');
                    });
                }
                if (personId) {
                    loadContacts(personId);
                }

            }, function(response) {
                $log.log('EE An error occurred trying to retireve the student with ID: ' + id);
                alert("Failed to retrieve student with ID: " + id);
            });

            loadStudentYear(id, APP.getYear().id);
            loadBursary(id);
            loadAdmissions(id);
            loadEnrolments(id);
            loadStudentEntryQualifications(id);
            loadExternalResultsArchive(id);
            loadWarnings(id);
            loadSpecialCategories(id);
            loadRegister(id);
            loadOverallAttendance(id);
            loadIlpInterviews(id);
            loadLearningSupport(id);
            loadCollegeFundPayments(id);
            loadInterimReports(id);
            loadExamResults(id);
            loadAlternativeUcis(id);
            loadOptionEntries(id);
            loadStudentCollegeFundPaid(id);
            loadIdentificationViolations(id);
            loadStudentLearningSupportCosts(id);
            loadStudentLearningSupportVisits(id);
            loadWarningCodeChanges(id);
        }

        function loadContacts(personId) {
            vm.contacts = [];
            Person.contacts(personId).then(function(response) {
                vm.contacts = response.data;
                $rootScope.$emit('student.contacts.loaded');
            }, function(response, status) {
                $log.error("EE Failed to load perons' contacts for person: " + personId);
            });
        }

        function loadStudentYear(id, yearId) {
            vm.studentYear = {};
            Student.studentYears(id, yearId).then(function(response) {
                vm.studentYear = response.data;
                $rootScope.$emit('student.year.loaded');
            }, function(response) {
                $log.error("EE Failed to load the student's year information for student: " + id);
            });
        }

        function loadAdmissions(id) {
            vm.studentAdmissions = {};
            Student.admissions(id).then(function(response) {
                vm.studentAdmissions = response.data;
                $rootScope.$emit('student.admissions.loaded');
            }, function(response) {
                $log.error("EE Failed to load the student's admissions information for studnet: " + id);
            });
        }


        function loadBursary(id) {
            vm.studentBursary = {};
            Student.bursary(id).then(function(response) {
                vm.studentBursary = response.data;
                $rootScope.$emit('student.bursary.loaded');
            }, function(response) {
                $log.error("EE Failed to load the student's bursary information for studnet: " + id);
            });
        }

        function loadEnrolments(id, year) {
            vm.enrolments = [];
            Student.enrolments(id, year).then(function(response) {
                vm.enrolments = response.data;
                $rootScope.$emit('student.enrolments.loaded');
            }, function(response) {
                $log.error("EE Failed to load the student's enrolments for student: " + id);
            });
        }

        function loadStudentEntryQualifications(id) {
            vm.studentEntryQualifications = [];
            StudentEntryQualification.get(id).then(function(response) {
                vm.studentEntryQualifications = response.data;
                $rootScope.$emit('student.entryQualifications.loaded');
            }, function(response, status) {
                $log.error("EE Failed to load entryQualifications' entryQualifications: " + id);
            });
        }

        function loadWarnings(id) {
            vm.warnings = {};
            Student.warnings(id).then(function(response) {
                vm.warnings = response.data;
                $rootScope.$emit('student-warnings-loaded');
            }, function(response) {
                $rootScope.$emit('student-warnings-load-failed');
                $log.error("EE Failed to load the student's warnings for student: " + id);
            });
        }

        function loadSpecialCategories(id) {
            vm.specialCategories = [];
            Student.specialCategories(id).then(function(response) {
                vm.specialCategories = response.data;
                $rootScope.$emit('student-special-categories-loaded');
            }, function(response) {
                $rootScope.$emit('student-special-categories-load-failed');
                $log.error("EE Failed to load the student's warnings for student: " + id);
            });
        }

        function loadRegister(id) {
            vm.registers = [];
            MasterRegister.get(id).then(function(response) {
                vm.registers = response.data;
                $rootScope.$emit('student.registers.loaded');
            }, function(response, status) {
                $log.error("EE Failed to load registers' registers: " + id);
                vm.registers = [];
            });
        }

        function loadOverallAttendance(id) {
            vm.studentOverallAttendance = {};
            Student.attendance(id).then(function(response) {
                Student.idViolations(id).then(function(response) {
                    vm.identificationViolations = response.data;
                }, function(response) {
                    $log.error("Failed to load student id violations " + id);
                });

                vm.studentOverallAttendance = response.data;
                $rootScope.$emit('student.overall-attendance.loaded');
            }, function(response, status) {
                $log.error("EE Failed to load registers' registers: " + id);
            });
        }

        function loadIlpInterviews(id) {
            vm.ilpInterviews = [];
            Student.ilpInterviews(id).then(function(response) {
                vm.ilpInterviews = response.data;
                $rootScope.$emit('student.ilp-interviews.loaded');
            }, function(response) {
                $log.error("EE Failed to load the student's ILP interviews for student: " + id);
                vm.ilpInterviews = [];
            });
        }

        function loadExternalResultsArchive(id) {
            vm.externalResultsArchive = [];
            Student.externalResultsArchive(id).then(function(response) {
                vm.externalResultsArchive = response.data;
                $rootScope.$emit('student.external-results-archive.loaded');
            }, function(response) {
                $log.error("EE Failed to load the student's external results archive for student: " + id);
            });
        }

        function loadLearningSupport(id) {
            vm.learningSupport = {};
            Student.learningSupport(id).then(function(response) {
                vm.learningSupport = response.data;
                $rootScope.$emit('student.learning-support.loaded');
            }, function(response) {
                $log.error("EE Failed to load the student's learning support data for student: " + id);
            });
        }

        function loadCollegeFundPayments(id) {
            vm.collegeFundPayments = [];
            Student.collegeFundPayments(id).then(function(response) {
                vm.collegeFundPayments = response.data;
                $rootScope.$emit('student.college-fund-payments.loaded');
            }, function(response) {
                $log.error("EE Failed to load the student's college fund payments for student: " + id);
            });
        }

        function loadInterimReports(id) {
            vm.interimReports = [];
            Student.interimReports(id).then(function(response) {
                vm.interimReports = response.data;
                $rootScope.$emit('student.interim-reports.loaded');
            }, function(response) {
                $log.error("EE Failed to load the student interim reports for student: " + id);
            });
        }

        function loadExamResults(id) {
            vm.examResults = [];
            Student.results(id).then(function(response) {
                vm.examResults = response.data;
                $rootScope.$emit('student.exam-results.loaded');
            }, function(response) {
                $log.error("EE Failed to load the student's exam results for student: " + id);
            });
        }

        function loadAlternativeUcis(id) {
            Student.studentAlternativeUci(id).then(function(response) {
                vm.studentAlternativeUcis = response.data;
                $rootScope.$emit('student.alternative-ucis.loaded');
            }, function(response) {
                $log.error("Failed to load the student's alternative Ucis for student: " + id);
            });
        }

        function loadOptionEntries(id) {
            Student.optionEntries(id).then(function(response) {
                vm.studentOptionEntries = response.data;
            }, function(response) {
                $log.error("Failed to load student option entries" + id);
            });
        }

        function loadStudentCollegeFundPaid(id) {
            StudentCollegeFundPaid.get(id).then(function(response) {
                vm.studentCollegeFundPaid = response.data;
            }, function(response) {
                $log.error("Failed to load student college fund paid" + id);
            });
        }

        function loadIdentificationViolations(id) {
            vm.identificationViolations = [];
            Student.idViolations(id).then(function(response) {
                vm.identificationViolations = response.data;
            }, function(response) {
                $log.error("Failed to load student id violations " + id);
            });
        }

        function loadStudentLearningSupportCosts(id) {
            vm.studentLearningSupportCosts = [];
            LearningSupportCost.getByStudent(id).then(function(response) {
                vm.studentLearningSupportCosts = response.data;
                $rootScope.$emit('student.learningSupportCosts.loaded');
            }, function(response, status) {
                $log.error("EE Failed to load learningSupportCosts' learningSupportCosts: " + id);
            });
        }

        function loadStudentLearningSupportVisits(id) {
            vm.studentLearningSupportVisits = [];
            LearningSupportVisit.getByStudent(id).then(function(response) {
                vm.studentLearningSupportVisits = response.data;
                $rootScope.$emit('student.learningSupportVisits.loaded');
            }, function(response, status) {
                $log.error("EE Failed to load learningSupportVisits' learningSupportVisits: " + id);
            });
        }

        function loadWarningCodeChanges(id) {
            vm.warningCodeChanges = [];
            StudentWarning.getStudentWarning(id).then(function(response) {
                vm.warningCodeChanges = response.data;
                $rootScope.$emit('student.warningCodeChanges.loaded');
            }, function(response, status) {
                $log.error("EE Failed to load warningCodeChanges' warningCodeChanges: " + id);
            });
        }

    }

})();
;/**
 * This file defines the route configuration for the student records section of the CID system.
 *
 */
(function() {
    'use strict';

    angular.module('cid.student-record').config(studentRecordRouteConfiguration);

    studentRecordRouteConfiguration.$inject = ['$stateProvider'];

    function studentRecordRouteConfiguration($stateProvider) {
        $stateProvider
            .state('student-editor', {
                parent: 'site',
                url: '/student-record',
                data: {
                    roles: ['ROLE_Staff', 'ROLE_Office Administration', 'ROLE_Core Data']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/studentEditor/views/layout.html',
                    },
                    "content.search@": {
                        templateUrl: 'js/modules/studentEditor/views/search.html',
                        controller: 'StudentEditorSearchController',
                        controllerAs: 'ctrl'
                    },
                },
            })
            .state('student-editor.edit', {
                url: '/{studentId}?tab',
                views: {
                    "student-editor": {
                        templateUrl: 'js/modules/studentEditor/views/studentRecord.html',
                        controller: 'StudentEditorController',
                        controllerAs: 'ctrl',
                    },
                },
                resolve: {
                    studentEntity: ['$stateParams', 'Student', function($stateParams, Student) {
                        return Student.get($stateParams.studentId);
                    }]
                }
            })
            .state('student-editor.edit.bursary', {
                url: '/{studentId}/edit-bursary',
                onEnter: function($log, $stateParams, $state, $uibModal, Student) {
                    $log.log("II - Trying to EDIT BURSARY");
                    $uibModal.open({
                        templateUrl: 'js/modules/studentEditor/views/dialogs/studentBursaryEditorDialog.html',
                        controller: function($log, $scope, $state, $uibModalInstance, $uibModal, $rootScope, studentBursaryEntity, StudentBursary) {
                            var vm = this;

                            this.studentBursary = studentBursaryEntity !== undefined ? studentBursaryEntity : {};

                            var onSaveFinished = function(result) {
                                $log.info('II Student Bursary Saved');
                                $scope.$emit('student-bursary-saved', result);
                                $uibModalInstance.close(result);
                            };

                            /**
                             * This saves the studentBursary and closes that dialog box
                             */
                            this.save = function() {
                                $log.log('StudentBursaryDialogController::save called');
                                $log.info(vm.studentBursary);
                                if (vm.studentBursary) {
                                    StudentBursary.save(vm.studentBursary, onSaveFinished);
                                } else {
                                    return null;
                                }

                            };

                            /**
                             * This closes the studentBursary editor dialog box without saving
                             */
                            this.cancel = function() {
                                $log.log('StudentBursaryDialogController::clear called');
                                $uibModalInstance.dismiss('cancel');
                            };

                        },
                        controllerAs: 'ctrl',
                        size: 'lg',
                        resolve: {
                            studentBursaryEntity: function(Student) {
                                return Student.bursary($stateParams.studentId).then(function(response) {
                                    return response.data;
                                }, function(response) {
                                    alert("failed to retrieve");
                                });
                            }
                        },
                    });
                },
            });
    }

})();
;/**
 * This is the main site navigation controller.
 *
 * Styles Applied: [Y001, Y002, Y010, Y021, Y023, Y024, Y031, Y032, Y033, Y034, Y091]
 *
 * @type Controller
 */
(function() {
    'use strict';

    angular
        .module("StudentEmailer")
        .controller("StudentEmailerController", StudentEmailerController);


    StudentEmailerController.$inject = ['$log', '$http', 'Student', 'StudentCourseSearch', 'currentStudentList'];

    function StudentEmailerController($log, $http, Student, StudentCourseSearch, currentStudentList) {
        var vm = this;

        this.filters = {
            courseGroupMask: '%',
            studentTypeMask: '%',
            tutorGroupMask: '%',
            includeWithdrawn: false
        };

        this.editorOptions = {

        };

        this.studentList = currentStudentList.data;

        this.selected = [];

        this.includeStudents = true;
        this.includeParents = true;

        this.emailSubject = "Default Subject";
        this.emailMessage = null;

        this.init = function() {
            $log.info("II Initialising the Student Emailer");
        };

        this.init();

        this.sendEmail = function() {
            if (this.selected.length !== 0 && this.emailMessage !== null) {
                bootbox.confirm("You are about to send an email to " + this.selected.length + " students and their parents. Are you sure?", function(result) {
                    $log.info(result);
                    if (result) {
                        var email = {
                            studentIds: vm.selected,
                            includeStudents: vm.includeStudents,
                            includeParents: vm.includeParents,
                            emailSubject: vm.emailSubject,
                            emailMessage: vm.emailMessage
                        };
                        $log.info(email);
                        $http.post('http://localhost:9999/email/bulk', email).then(function(response) {
                            $log.info(response);
                        });
                    } else {

                    }
                });
            } else {
                var errorMessage = "";
                if (this.selected.length === 0) errorMessage += 'No students selected! <br/>';
                if (this.emailSubject === null) errorMessage += 'No subject entered! <br/>';
                if (this.emailMessage === null) errorMessage += 'No message entered! <br/>';
                bootbox.alert(errorMessage);
            }
        };

        this.applyFilter = function() {
            StudentCourseSearch.search(vm.filters).then(function(response) {
                $log.info(response);
                vm.studentList = response.data;
            });
        };

    }

})();
;(function() {
    'use strict';

    angular
        .module('StudentEmailer')
        .config(studentEmailerRouteConfiguration);

    studentEmailerRouteConfiguration.$inject = ['$stateProvider'];

    function studentEmailerRouteConfiguration($stateProvider) {

        $stateProvider
            .state('emailer', {
                parent: 'site',
                url: '/emailer',
                data: {
                    roles: ['ROLE_Staff']
                },
                views: {
                    "content@": {
                        templateUrl: 'js/modules/studentEmailer/views/emailer.html',
                        controller: 'StudentEmailerController',
                        controllerAs: 'ctrl',
                    },
                },
                resolve: {
                    currentStudentList: function(StudentCourseSearch) {
                        return StudentCourseSearch.query();
                    }
                }
            });
    }
})();
;(function() {

    angular
        .module('cid.tests')
        .controller('TestAdmissionsController', testAdmissionsController);

    testAdmissionsController.$inject = ['$log', 'StudentCollegeFundPaid'];

    function testAdmissionsController($log, StudentCollegeFundPaid) {

        var vm = this;
        vm.studentId = '160008';
        vm.studentCollegeFundPaid = "";

        vm.init = init;

        function init() {
            StudentCollegeFundPaid.get(vm.studentId).then(function(response) {
                vm.studentCollegeFundPaid = response.data;
            });
        }



        vm.init();
    }

})();
;angular.module('cid.tests').controller('TestEnrolmentCheckerController', function($log, $scope, $http) {
    var vm = this;

    this.ttCheck = {
        specs: [
            'L-MAH',
            'L-BIH',
            'L-CHH',
            'L-PSH'
        ],
        status: 'PENDING',
        options: []
    };

    this.page = 1;
    this.size = 10;
    this.totalItems = 0;

    this.getTotalItems = function() {
        if (this.ttCheck.options) {
            return this.ttCheck.options.size;
        } else {
            return 0;
        }
    };

    this.init = function() {
        $log.log('II TestEnrolmentCheckerController::loadAddress called');
    };

    this.check = function() {
        vm.ttCheck.options = [];
        vm.totalItems = 0;

        $http.post('api/enrolmentChecker', vm.ttCheck.specs).then(function(response) {
            vm.ttCheck.options = response.data;
            vm.totalItems = response.data.length;
            $log.log(vm.ttCheck);
        }, function(response) {
            vm.ttCheck.options = [];
            $log.log(vm.ttCheck);
        });
    };

    this.requestCount = function() {
        return vm.ttCheck.specs.length;
    };

    this.addRequest = function(request) {
        vm.ttCheck.specs.push(request);
    };

    this.removeRequest = function(request) {
        vm.ttCheck.specs.splice(vm.ttCheck.specs.indexOf(request), 1);
    };

    this.selectOption = function(option) {
        $log.info(option);
    };

    this.next = function() {
        this.page++;
    };

    this.previous = function() {
        this.page--;
    };

    this.init();
});
;angular.module('cid.tests').controller('TestAddressController', function($log, $scope, Address) {
    var vm = this;

    this.addressId = 1;

    this.address = {};

    this.init = function() {
        $log.log('AddressRecordsController::loadAddress called');
        this.getAddress();
    };

    this.getAddress = function(id) {
        var lookupAddressId;
        if (id) {
            lookupAddressId = id;
        } else {
            lookupAddressId = this.addressId;
        }
        $log.log('Getting Address: ' + lookupAddressId);
        Address.get(vm.addressId).then(function(response) {
            vm.address = response.data;
        }, function(response) {
            $log.log("EE - Failed to retrieve data for address");
        });
    };

    this.init();
});
;angular.module('cid.tests').controller('TestContactsController', function($log, $scope, Person, Contact) {
    var vm = this;

    this.contacts = [];
    this.personId = 1;

    this.init = function() {
        $log.log('ContactRecordsController::loadStudent called');
        this.getContacts();
    };

    this.getContacts = function(id) {
        $log.log(vm.contact);
        var lookupId;
        if (id) {
            lookupId = id;
        } else {
            lookupId = this.personId;
        }
        Person.contacts(vm.personId).then(function(response) {
            $log.log(response.data);
            vm.contacts = response.data;
        }, function(response) {
            $log.log("EE - Failed to retrieve data for contact");
        });

    };


    this.init();
});
;angular.module('cid.tests').controller('TestCorrespondencesController', function($log, $scope, Correspondence) {
    var vm = this;


    this.correspondences = [];
    this.studentId = 161163;


    this.init = function() {
        $log.log('CorrespondenceRecordsController::loadCorrespondence called');
        this.getCorrespondences();
    };

    this.getCorrespondences = function(id) {
        var lookupCorrespondenceId;
        if (id) {
            lookupCorrespondenceId = id;
        } else {
            lookupCorrespondenceId = this.studentId;
        }

        Correspondence.get(vm.studentId).then(function(response) {
            $log.log(response.data);
            vm.correspondences = response.data;
        }, function(response) {
            $log.log("EE - Failed to retrieve data for correspondence");
        });
    };

    this.init();
});
;angular.module('cid.tests').controller('TestDetailsController', function($log, $scope, Person, Student) {
    var vm = this;
    this.personId = 10002;
    this.studentId = 160001;

    this.person = {};
    this.student = {};

    this.init = function() {
        Person.get(vm.personId).then(function(response) {
            vm.person = response.data;
            $log.log("II Data Loaded");
        }, function(response) {
            $log.log("EE - Failed to retrieve data for person");
        });
        Student.get(vm.studentId).then(function(response) {
            vm.student = response.data;
            $log.log("II Data Loaded");
        }, function(response) {
            $log.log("EE - Failed to retrieve data for student");
        });
    };

    this.init();

});
;angular.module('cid.tests').controller('TestExternalResultsArchiveController', function($log, $scope, ExternalResultsArchive) {
    var vm = this;

    this.externalResultsArchive = [];

    this.studentId = 131168;

    this.init = function() {
        $log.log('ExternalResultsArchiveRecordsController::loadExternalResultsArchive called');
        this.getExternalResultsArchive();
    };

    this.getExternalResultsArchive = function(id) {
        var lookupExternalResultsArchiveId;
        if (id) {
            lookupExternalResultsArchiveId = id;
        } else {
            lookupExternalResultsArchiveId = this.studentId;
        }
        $log.log('Getting ExternalResultsArchive: ' + lookupExternalResultsArchiveId);
        ExternalResultsArchive.get(vm.studentId).then(function(response) {
            vm.externalResultsArchive = response.data;
        }, function(response) {
            $log.log("EE - Failed to retrieve data for externalResultsArchive");
        });
    };

    this.init();
});
;angular.module('cid.tests').controller('TestILPInterviewsController', function($log, $scope, ILPInterview) {
    var vm = this;


    this.ilpInterviews = [];
    this.studentId = 131168;


    this.init = function() {
        $log.log('ILPInterviewRecordsController::loadILPInterview called');
        this.getILPInterviews();
    };

    this.getILPInterviews = function(id) {
        var lookupILPInterviewId;
        if (id) {
            lookupILPInterviewId = id;
        } else {
            lookupILPInterviewId = this.studentId;
        }

        ILPInterview.get(vm.studentId).then(function(response) {
            $log.log(response.data);
            vm.ilpInterviews = response.data;
        }, function(response) {
            $log.log("EE - Failed to retrieve data for iLPInterview");
        });
    };

    this.init();
});
;angular.module('cid.tests').controller('TestSearchesController', function($log, $scope, Student) {
    var vm = this;

    this.loaded = false;
    this.student = {};

    this.init = function() {
        $log.log('StudentRecordsController::init called');
    };

    this.loadStudent = function(id) {
        $log.log('StudentRecordsController::loadStudent called');
        Student.get(id).then(function(response) {
            $log.log('II - Student with ID: ' + id + ' retireved.');
            vm.student = response.data;
        }, function(response) {
            $log.log('EE - An error occurred trying to retireve the student with ID: ' + id);
            alert("Failed to retrieve student with ID: " + id);
        });
        //alert(id);
    };

    this.init();

});
;angular.module('cid.tests').controller('TestOtherController', function($log, $scope, $state, Person, Student) {
    var vm = this;
    this.personId = 10002;
    this.studentId = 160001;

    this.person = {};
    this.student = {};

    $scope.reportParamsObj = {
        studentId: this.studentId
    };

    this.init = function() {
        Person.get(vm.personId).then(function(response) {
            vm.person = response.data;
            $log.log("II Person Data Loaded");
        }, function(response) {
            $log.log("EE - Failed to retrieve data for person");
        });
        Student.get(vm.studentId).then(function(response) {
            vm.student = response.data;
            $log.log("II Student Data Loaded");
        }, function(response) {
            $log.log("EE - Failed to retrieve data for student");
        });
    };

    this.gotoStudent = function(id) {
        $state.go('student-viewer.view', {
            studentId: id
        });
    };

    this.init();

});
;angular.module('cid.tests').controller('TestPersonController', function($log, $scope, Person) {
    var vm = this;

    this.personId = 1;

    this.person = {};

    this.init = function() {
        $log.log('PersonRecordsController::loadPerson called');
        this.getPerson();
    };

    this.getPerson = function(id) {
        var lookupPersonId = id ? id : this.personId;
        // if (id) {
        // 	lookupPersonId = id;
        // } else {
        // 	lookupPersonId = this.personId;
        // }
        $log.log('Getting Person: ' + lookupPersonId);
        Person.get(vm.personId).then(function(response) {
            vm.person = response.data;
        }, function(response) {
            $log.log("EE - Failed to retrieve data for person");
        });
    };

    this.init();
});
;angular.module('cid.tests').controller('TestRegistersController', function($log, $scope, MasterRegister) {
    var vm = this;


    this.registers = [];
    this.studentId = 160001;


    this.init = function() {
        $log.log('RegisterRecordsController::loadRegister called');
        this.getRegisters();
    };

    this.getRegisters = function(id) {
        var lookupRegisterId;
        if (id) {
            lookupRegisterId = id;
        } else {
            lookupRegisterId = this.studentId;
        }

        MasterRegister.get(vm.studentId).then(function(response) {
            $log.log(response.data);
            vm.registers = response.data;
        }, function(response) {
            $log.log("EE - Failed to retrieve data for register");
        });
    };

    this.init();
});
;angular.module('cid.tests').controller('TestLookupsController', function($log, $scope, Student) {
    var vm = this;

    this.loaded = false;
    this.student = {};

    this.init = function() {
        $log.log('StudentRecordsController::init called');
    };

    this.loadStudent = function(id) {
        $log.log('StudentRecordsController::loadStudent called');
        Student.get(id).then(function(response) {
            $log.log('II - Student with ID: ' + id + ' retireved.');
            vm.student = response.data;
        }, function(response) {
            $log.log('EE - An error occurred trying to retireve the student with ID: ' + id);
            alert("Failed to retrieve student with ID: " + id);
        });
        //alert(id);
    };

    this.init();

});
;angular.module('cid.tests').controller('TestStudentAdmissionsController', function($log, $scope, Student) {
    var vm = this;

    this.studentAdmissions = {};

    this.studentId = 131168;

    this.yearId = 16;

    this.init = function() {
        $log.log('StudentAdmissionsRecordsController::loadStudentAdmissions called');
        this.getStudentAdmissions();
    };

    this.getStudentAdmissions = function(id) {
        var lookupStudentAdmissionsId;
        if (id) {
            lookupStudentAdmissionsId = id;
        } else {
            lookupStudentAdmissionsId = this.studentId;
        }
        $log.log('Getting StudentAdmissions: ' + lookupStudentAdmissionsId);
        Student.admissions(this.studentId).then(function(response) {
            vm.studentAdmissions = response.data;

            $log.info(vm.student);
        });
    };

    this.init();
});
;angular.module('cid.tests').controller('TestStudentBursaryController', function($log, $scope, StudentBursary) {
    var vm = this;

    this.studentBursary = {};

    this.studentId = 131168;

    this.init = function() {
        $log.log('StudentBursaryRecordsController::loadStudentBursary called');
        this.getStudentBursary();
    };

    this.getStudentBursary = function(id) {
        var lookupStudentBursaryId;
        if (id) {
            lookupStudentBursaryId = id;
        } else {
            lookupStudentBursaryId = this.studentId;
        }
        $log.log('Getting StudentBursary: ' + lookupStudentBursaryId);
        StudentBursary.get(vm.studentId).then(function(response) {
            vm.studentBursary = response.data;
        }, function(response) {
            $log.log("EE - Failed to retrieve data for studentBursary");
        });
    };

    this.init();
});
;angular.module('cid.tests').controller('TestStudentCollegeFundPaymentController', function($log, $scope, CollegeFundPayment) {
    var vm = this;

    this.collegeFundPayment = [];

    this.studentId = 131168;

    this.init = function() {
        $log.log('StudentCollegeFundPaymentRecordsController::loadStudentCollegeFundPayment called');
        this.getStudentCollegeFundPayment();
    };

    this.getStudentCollegeFundPayment = function(id) {
        var lookupStudentCollegeFundPaymentId;
        if (id) {
            lookupStudentCollegeFundPaymentId = id;
        } else {
            lookupStudentCollegeFundPaymentId = this.studentId;
        }
        $log.log('Getting StudentCollegeFundPayment: ' + lookupStudentCollegeFundPaymentId);
        CollegeFundPayment.getByStudent(vm.studentId).then(function(response) {
            vm.collegeFundPayment = response.data;
        }, function(response) {
            $log.log("EE - Failed to retrieve data for studentCollegeFundPayment");
        });
    };

    this.init();
});
;angular.module('cid.tests').controller('TestStudentContactPreferencesController', function($log, $scope, Student) {
    var vm = this;

    this.student = {};

    this.studentId = 131168;


    this.init = function() {
        $log.log('StudentRecordsController::loadStudent called');
        this.getStudent();
    };

    this.getStudent = function(id) {
        var lookupStudentId;
        if (id) {
            lookupStudentId = id;
        } else {
            lookupStudentId = this.studentId;
        }
        $log.log('Getting Student: ' + lookupStudentId);
        Student.get(this.studentId).then(function(response) {
            vm.student = response.data;

            $log.info(vm.student);
        });
    };

    this.init();
});
;angular.module('cid.tests').controller('TestStudentEntryQualificationsController', function($log, $scope, StudentEntryQualification) {
    var vm = this;

    this.entryQualifications = [];
    this.studentId = 150985;

    this.init = function() {
        $log.log('StudentEntryQualificationRecordsController::loadStudentEntryQualification called');
        this.getStudentEntryQualifications();
    };

    this.getStudentEntryQualifications = function(id) {
        $log.log(vm.entryQualification);
        var lookupId;
        if (id) {
            lookupId = id;
        } else {
            lookupId = this.studentId;
        }
        StudentEntryQualification.get(vm.studentId).then(function(response) {
            $log.log(response.data);
            vm.entryQualifications = response.data;
        }, function(response) {
            $log.error("EE Failed to load entryQualifications' entryQualifications: ");
        });
    };

    this.init();
});
;angular.module('cid.tests').controller('TestStudentInterimReportController', function($log, $scope, StudentInterimReport) {
    var vm = this;

    this.studentInterimReports = [];
    this.studentId = 131168;

    this.init = function() {
        $log.log('StudentInterimReportRecordsController::loadStudentInterimReport called');
        this.getStudentInterimReports();
    };

    this.getStudentInterimReports = function(id) {
        $log.log(vm.studentInterimReport);
        var lookupId;
        if (id) {
            lookupId = id;
        } else {
            lookupId = this.studentId;
        }
        StudentInterimReport.get(vm.studentId).then(function(response) {
            $log.log(response.data);
            vm.studentInterimReports = response.data;
        }, function(response) {
            $log.error("EE Failed to load interimReports' interimReports: ");
        });
    };

    this.init();
});
;angular.module('cid.tests').controller('TestStudentLearningSupportController', function($log, $scope, StudentLearningSupport) {
    var vm = this;

    this.studentLearningSupport = {};
    this.studentId = 140147;

    this.init = function() {
        $log.log('StudentLearningSupportRecordsController::loadStudentLearningSupport called');
        this.getStudentLearningSupports();
    };

    this.getStudentLearningSupports = function(id) {
        $log.log(vm.studentLearningSupport);
        var lookupId;
        if (id) {
            lookupId = id;
        } else {
            lookupId = this.studentId;
        }
        StudentLearningSupport.get(vm.studentId).then(function(response) {
            $log.log(response.data);
            vm.studentLearningSupport = response.data;
        }, function(response) {
            $log.error("EE Failed to load interimReports' interimReports: ");
        });
    };

    this.init();
});
;angular.module('cid.tests').controller('TestStudentMedicalNotesController', function($log, $scope, Student) {
    var vm = this;

    this.student = {};

    this.studentId = 131168;


    this.init = function() {
        $log.log('StudentMedicalNotesController::loadStudent called');
        this.getStudent();
    };

    this.getStudent = function(id) {
        var lookupStudentId;
        if (id) {
            lookupStudentId = id;
        } else {
            lookupStudentId = this.studentId;
        }
        $log.log('Getting Student: ' + lookupStudentId);
        Student.get(this.studentId).then(function(response) {
            vm.student = response.data;

            $log.info(vm.student);
        });
    };

    this.init();
});
;angular.module('cid.tests').controller('TestStudentOverallAttendanceController', function($log, $scope, StudentOverallAttendance) {
    var vm = this;

    this.studentOverallAttendance = {};

    this.studentId = 160005;

    this.init = function() {
        $log.log('StudentOverallAttendanceRecordsController::loadStudentOverallAttendance called');
        this.getStudentOverallAttendance();
    };

    this.getStudentOverallAttendance = function(id) {
        vm.studentOverallAttendance = {};

        var lookupStudentOverallAttendanceId;

        if (id) {
            lookupStudentOverallAttendanceId = id;
        } else {
            lookupStudentOverallAttendanceId = this.studentId;
        }

        $log.log('Getting StudentOverallAttendance: ' + lookupStudentOverallAttendanceId);

        StudentOverallAttendance.get(vm.studentId).then(function(response) {
            vm.studentOverallAttendance = response.data;
        }, function(response) {
            $log.log("EE - Failed to retrieve data for studentOverallAttendance");
        });
    };

    this.init();
});
;angular.module('cid.tests').controller('TestStudentSpecialCategoryController', function($log, $scope, StudentSpecialCategory) {
    var vm = this;


    this.studentSpecialCategories = [];
    this.studentId = 131168;


    this.init = function() {
        $log.log('StudentSpecialCategoryRecordsController::loadStudentSpecialCategory called');
        this.getStudentSpecialCategory();
    };

    this.getStudentSpecialCategory = function(id) {
        var lookupStudentSpecialCategoryId;
        if (id) {
            lookupStudentSpecialCategoryId = id;
        } else {
            lookupStudentSpecialCategoryId = this.studentId;
        }

        StudentSpecialCategory.getForm(vm.studentId).then(function(response) {
            $log.log(response.data);
            vm.studentSpecialCategories = response.data;
        }, function(response) {
            $log.log("EE - Failed to retrieve data for register");
        });
    };

    this.init();
});
;angular.module('cid.tests').controller('TestStudentSummaryController', function($log, $scope, Student) {
    var vm = this;

    this.student = {};

    this.studentId = 131168;


    this.init = function() {
        $log.log('StudentRecordsController::loadStudent called');
        this.getStudent();
    };

    this.getStudent = function(id) {
        var lookupStudentId;
        if (id) {
            lookupStudentId = id;
        } else {
            lookupStudentId = this.studentId;
        }
        $log.log('Getting Student: ' + lookupStudentId);
        Student.get(this.studentId).then(function(response) {
            vm.student = response.data;

            $log.info(vm.student);
        });
    };

    this.init();
});
;angular.module('cid.tests').controller('TestStudentWarningController', function($log, $scope, StudentWarning) {
    var vm = this;

    this.studentWarning = {};

    this.studentId = 131168;

    this.init = function() {
        $log.log('StudentWarningRecordsController::loadStudentWarning called');
        this.getStudentWarning();
    };

    this.getStudentWarning = function(id) {
        var lookupStudentWarningId;
        if (id) {
            lookupStudentWarningId = id;
        } else {
            lookupStudentWarningId = this.studentId;
        }
        $log.log('Getting StudentWarning: ' + lookupStudentWarningId);
        StudentWarning.get(vm.studentId).then(function(response) {
            vm.studentWarning = response.data;
        }, function(response) {
            $log.log("EE - Failed to retrieve data for studentWarning");
        });
    };

    this.init();
});
;angular.module('cid.tests').controller('TestStudentYearController', function($log, $scope, Student) {
    var vm = this;

    this.studentYear = {};

    this.studentId = 131168;

    this.yearId = 16;

    this.init = function() {
        $log.log('StudentYearRecordsController::loadStudentYear called');
        this.getStudentYear();
    };

    this.getStudentYear = function(id) {
        var lookupStudentYearId;
        if (id) {
            lookupStudentYearId = id;
        } else {
            lookupStudentYearId = this.studentId;
        }
        $log.log('Getting StudentYear: ' + lookupStudentYearId);
        Student.studentYears(this.studentId, this.yearId).then(function(response) {
            vm.studentYear = response.data;

            $log.info(vm.student);
        });
    };

    this.init();
});
;angular.module('cid.tests').controller('TestTablesController', function($log, $scope, $rootScope, Student, TextLookup) {
    var vm = this;

    this.studentId = 160902;

    this.student = {};
    this.enrolments = [];
    this.results = [];
    vm.optionEntries = [];
    vm.textLookups = [];

    this.init = function() {
        this.getEnrolments();
        this.getTextLookups();
    };

    $rootScope.$on('exam-results-saved', function(data) {
        vm.getEnrolments(vm.student.id);
    });

    this.getEnrolments = function() {
        Student.get(vm.studentId).then(function(response) {
            vm.student = response.data;
            vm.enrolments = response.data.enrolments;

            $log.log("II Data Loaded");
        }, function(response) {
            $log.log("EE - Failed to retrieve data for person");
        });


        Student.results(vm.studentId).then(function(response) {
            vm.results = response.data;

            $log.log("II Data Loaded");
        }, function(response) {
            $log.log("EE - Failed to retrieve data for person");
        });

        Student.optionEntries(vm.studentId).then(function(response) {
            vm.optionEntries = response.data;
        }, function(response) {
            $log.log("Error");
        });


    };


    this.getTextLookups = function() {
        TextLookup.query().then(function(response) {
            vm.textLookups = response.data;
        }, function(response) {
            $log.log("EE - Failed to retrieve data for person");
        });

    };

    this.init();

});
;angular.module('cid.tests').controller('TestTutorGroupRemarkPermissionsController', function($log, $scope, StudentYear) {
    var vm = this;


    this.remarkPermission = [];

    this.tutorGroupId = 4;


    this.init = function() {
        $log.log('TutorGroupRemarkPermissionRecordsController::loadTutorGroupRemarkPermission called');
        this.getTutorGroupRemarkPermissions();
    };

    this.getTutorGroupRemarkPermissions = function(id) {
        var lookupId;
        if (id) {
            lookupId = id;
        } else {
            lookupId = this.tutorGroupId;
        }

        StudentYear.get(vm.tutorGroupId).then(function(response) {
            $log.log(response.data);
            vm.remarkPermission = response.data;
        }, function(response) {
            $log.log("EE - Failed to retrieve data for tutorGroupRemarkPermission");
        });
    };

    this.init();
});
;angular.module('cid.tests').controller('TestWordGeneratorController', function($log, $scope) {
    var vm = this;

});
;(function() {

    angular
        .module('cid.tests')
        .config(['$stateProvider', '$urlRouterProvider', function($stateProvider, $urlRouterProvider) {

            $stateProvider
                .state('test', {
                    parent: 'site',
                    url: '/test',
                    data: {
                        roles: []
                    },
                    views: {
                        "@side-bar": {
                            templateUrl: 'js/modules/tests/views/menu.html',
                        },
                    },
                })
                .state('test.lookups', {
                    url: '/lookups',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/lookups.html',
                        },
                    },
                })
                .state('test.address', {
                    url: '/address',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/address.html',
                            controller: 'TestAddressController',
                            controllerAs: 'ctrl'
                        },
                    },
                })
                .state('test.selections', {
                    url: '/selections',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/selections.html',
                        },
                    },
                })
                .state('test.searches', {
                    url: '/searches',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/searches.html',
                            controller: 'TestSearchesController',
                            controllerAs: 'ctrl'
                        },
                    },
                })
                .state('test.details', {
                    url: '/details',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/details.html',
                            controller: 'TestDetailsController',
                            controllerAs: 'ctrl'
                        },
                    },
                })
                .state('test.tables', {
                    url: '/tables',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/tables.html',
                            controller: 'TestTablesController',
                            controllerAs: 'ctrl'
                        },
                    },
                })
                .state('test.studentEntryQualification', {
                    url: '/studentEntryQualifications',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/studentEntryQualification.html',
                            controller: 'TestStudentEntryQualificationsController',
                            controllerAs: 'ctrl'
                        },
                    },
                })
                .state('test.contacts', {
                    url: '/contacts',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/contacts.html',
                            controller: 'TestContactsController',
                            controllerAs: 'ctrl'
                        },
                    },
                })
                .state('test.registers', {
                    url: '/registers',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/registers.html',
                            controller: 'TestRegistersController',
                            controllerAs: 'ctrl'
                        },
                    },
                })
                .state('test.correspondences', {
                    url: '/correspondences',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/correspondences.html',
                            controller: 'TestCorrespondencesController',
                            controllerAs: 'ctrl'
                        },
                    },
                })
                .state('test.iLPInterviews', {
                    url: '/iLPInterviews',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/iLPInterviews.html',
                            controller: 'TestILPInterviewsController',
                            controllerAs: 'ctrl'
                        },
                    },
                })
                .state('test.enrolmentChecker', {
                    url: '/enrol',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/enrolmentChecker.html',
                            controller: 'TestEnrolmentCheckerController',
                            controllerAs: 'ctrl'
                        },
                    },
                })
                .state('test.studentSpecialCategory', {
                    url: '/studentSpecialCategory',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/studentSpecialCategory.html',
                            controller: 'TestStudentSpecialCategoryController',
                            controllerAs: 'ctrl'
                        },
                    },
                })
                .state('test.studentWarning', {
                    url: '/studentWarning',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/studentWarning.html',
                            controller: 'TestStudentWarningController',
                            controllerAs: 'ctrl'
                        },
                    },
                })
                .state('test.studentBursary', {
                    url: '/studentBursary',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/studentBursary.html',
                            controller: 'TestStudentBursaryController',
                            controllerAs: 'ctrl'
                        },
                    },
                })
                .state('test.studentOverallAttendance', {
                    url: '/studentOverallAttendance',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/studentOverallAttendance.html',
                            controller: 'TestStudentOverallAttendanceController',
                            controllerAs: 'ctrl'
                        },
                    },
                })
                .state('test.studentYear', {
                    url: '/studentYear',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/studentYear.html',
                            controller: 'TestStudentYearController',
                            controllerAs: 'ctrl'
                        },
                    },
                })
                .state('test.studentAdmissions', {
                    url: '/studentAdmissions',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/studentAdmissions.html',
                            controller: 'TestStudentAdmissionsController',
                            controllerAs: 'ctrl'
                        },
                    },
                })
                .state('test.studentCollegeFundPayment', {
                    url: '/studentCollegeFundPayment',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/studentCollegeFundPayment.html',
                            controller: 'TestStudentCollegeFundPaymentController',
                            controllerAs: 'ctrl'
                        },
                    },
                })
                .state('test.person', {
                    url: '/person',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/person.html',
                            controller: 'TestPersonController',
                            controllerAs: 'ctrl'
                        },
                    },
                })
                .state('test.studentSummary', {
                    url: '/studentSummary',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/studentSummary.html',
                            controller: 'TestStudentSummaryController',
                            controllerAs: 'ctrl'
                        },
                    },
                })
                .state('test.studentMedicalNotes', {
                    url: '/studentMedicalNotes',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/studentMedicalNotes.html',
                            controller: 'TestStudentMedicalNotesController',
                            controllerAs: 'ctrl'
                        },
                    },
                })
                .state('test.studentContactPreferences', {
                    url: '/studentContactPreferences',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/studentContactPreferences.html',
                            controller: 'TestStudentContactPreferencesController',
                            controllerAs: 'ctrl'
                        },
                    },
                })
                .state('test.studentInterimReport', {
                    url: '/studentInterimReport',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/studentInterimReport.html',
                            controller: 'TestStudentInterimReportController',
                            controllerAs: 'ctrl'
                        },
                    },
                })
                .state('test.studentLearningSupport', {
                    url: '/studentLearningSupport',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/studentLearningSupport.html',
                            controller: 'TestStudentLearningSupportController',
                            controllerAs: 'ctrl'
                        },
                    },
                })
                .state('test.externalResultsArchive', {
                    url: '/externalResultsArchive',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/externalResultsArchive.html',
                            controller: 'TestExternalResultsArchiveController',
                            controllerAs: 'ctrl'
                        },
                    },
                })
                .state('test.wordGenerator', {
                    url: '/wordGenerator',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/wordGenerator.html',
                            controller: 'TestWordGeneratorController',
                            controllerAs: 'ctrl'
                        },
                    },
                })
                .state('test.tutorGroupRemarkPermissions', {
                    url: '/tutorGroupRemarkPermissions',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/tutorGroupRemarkPermissions.html',
                            controller: 'TestTutorGroupRemarkPermissionsController',
                            controllerAs: 'ctrl'
                        },
                    },
                })
                .state('test.other', {
                    url: '/other',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/other.html',
                            controller: 'TestOtherController',
                            controllerAs: 'ctrl'
                        },
                    },
                })
                .state('test.admissions', {
                    url: '/admissions',
                    data: {
                        roles: []
                    },
                    views: {
                        "content@": {
                            templateUrl: 'js/modules/tests/views/admissions.html',
                            controller: 'TestAdmissionsController',
                            controllerAs: 'ctrl'
                        },
                    },
                });
        }]);

}());
;angular.module("cid").run(["$templateCache", function($templateCache) {
  $templateCache.put("js/directives/academic-years-editor/views/academic-years-editor-addDialog.html",
    "<form name=academicYearsEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add AcademicYear</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">AcademicYear ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=id ng-model=ctrl.academicYears.id></div></div><div class=form-group ng-show=true><label for=code class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Code</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=code ng-model=ctrl.academicYears.code></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" name=description ng-model=ctrl.academicYears.description></div></div><div class=form-group><label for=startDate class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Start Date</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div class=input-group><input class=form-control ng-init=\"academicYearStartDatePicker = false\" uib-datepicker-popup=dd/MM/yyyy is-open=academicYearStartDatePicker ng-model=ctrl.academicYears.startDate> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"academicYearStartDatePicker = !academicYearStartDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div><div class=form-group><label for=endDate class=\"col-xs-4 col-sm-4 col-md-4 control-label\">End Date</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div class=input-group><input class=form-control ng-init=\"academicYearEndDatePicker = false\" uib-datepicker-popup=dd/MM/yyyy is-open=academicYearEndDatePicker ng-model=ctrl.academicYears.endDate> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"academicYearEndDatePicker = !academicYearEndDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.add()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/academic-years-editor/views/academic-years-editor.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-click=\"ctrl.changeSort('id')\" ng-show=\"showID || showAll\">ID <span ng-show=\"ctrl.isSortedAsc('id')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('id')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('code')\">Code <span ng-show=\"ctrl.isSortedAsc('code')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('code')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('description')\">Description <span ng-show=\"ctrl.isSortedAsc('description')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('description')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('startDate')\">Start Date <span ng-show=\"ctrl.isSortedAsc('startDate')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('startDate')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('EndDate')\">End Date <span ng-show=\"ctrl.isSortedAsc('EndDate')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('EndDate')\">&#x25B2;</span></th></thead><tbody><tr ng-repeat=\"academicYear in academicYears | orderBy : ctrl.sortOrder\"><td ng-show=\"showID || showAll\">{{ academicYear.id }}</td><td>{{ academicYear.code }}</td><td>{{ academicYear.description }}</td><td>{{ academicYear.startDate | date:'dd/MM/yyyy' }}</td><td>{{ academicYear.endDate | date:'dd/MM/yyyy' }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editAcademicYears(academicYear.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addAcademicYears()><span class=\"glyphicon glyphicon-pencil\"></span> Add</button>");
  $templateCache.put("js/directives/academic-years-editor/views/academic-years-editorDialog.html",
    "<form id=academicYearsEditForm name=academicYearsEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Edit AcademicYear</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">AcademicYear ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=id readonly ng-model=ctrl.academicYears.id></div></div><div class=form-group ng-show=true><label for=code class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Code</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=id ng-model=ctrl.academicYears.code></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.academicYears.description></div></div><div class=form-group><label for=startDate class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Start Date</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><div class=input-group><input class=form-control ng-init=\"academicYearStartDatePicker = false\" uib-datepicker-popup=dd/MM/yyyy is-open=academicYearStartDatePicker ng-model=ctrl.academicYears.startDate> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"academicYearStartDatePicker = !academicYearStartDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div><div class=form-group><label for=endDate class=\"col-xs-4 col-sm-4 col-md-4 control-label\">End Date</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><div class=input-group><input class=form-control ng-init=\"academicYearEndDatePicker = false\" uib-datepicker-popup=dd/MM/yyyy is-open=academicYearEndDatePicker ng-model=ctrl.academicYears.endDate> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"academicYearEndDatePicker = !academicYearEndDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/address-details/address-details.html",
    "<div class=address-details ng-show=\"address !== undefined || address !== null\"><div>{{ address.line1 }}</div><div>{{ address.line2 }}</div><div>{{ address.line3 }}</div><div>{{ address.line4 }}</div><div>{{ address.line5 }}</div><div>{{ address.town }}</div><div>{{ address.county }}</div><div>{{ address.postcode }}</div></div><div class=error ng-hide=\"address !== undefined || address !== null\">Address Details: No Data Provided</div>");
  $templateCache.put("js/directives/address-editor/views/addressEditor.html",
    "<div><address-details address=ctrl.address></address-details><div><button type=button ng-show=\"ctrl.addressId !== undefined\" ng-click=ctrl.editAddress(ctrl.addressId) class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> Edit Address</button></div></div>");
  $templateCache.put("js/directives/address-editor/views/addressEditorDialog.html",
    "<form id=addressEditForm name=addressEditForm role=form novalidate ng-submit=ctrl.save() show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title>Edit Address</h4></div><div class=modal-body><div class=row><div class=form-group><label for=line1 class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Line1:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=line1 class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.address.line1 required></div></div><div class=form-group><label for=line2 class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Line2:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=line2 class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.address.line2></div></div><div class=form-group><label for=line3 class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Line3:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=line3 class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.address.line3></div></div><div class=form-group><label for=line4 class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Line4:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=line4 class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.address.line4></div></div><div class=form-group><label for=line5 class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Line5:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=line5 class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.address.line5></div></div><div class=form-group><label for=town class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Town:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=town class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.address.town></div></div><div class=form-group><label for=county class=\"col-xs-4 col-sm-4 col-md-4 control-label\">County:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=county class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.address.county></div></div><div class=form-group><label for=postcode class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Postcode:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=postcode class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.address.postcode required></div></div></div><div class=row><div class=\"col-xs-3 col-sm-3 col-md-3 col-md-offset-4\"><button type=button class=\"btn btn-primary\" ng-click=ctrl.postcodeLookup(ctrl.address.postcode)>Lookup</button></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=submit class=\"btn btn-primary\" ng-disabled=\"addressEditForm.$invalid || addressEditForm.$submitted\"><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/address-editor/views/addressEditorPostcodeLookupDialog.html",
    "<form id=addressEditorPostcodeLookupForm class=form><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.clear()>&times;</button><h4 class=modal-title id=myToDoLabel>Address List</h4></div><div class=modal-body><div class=row><div class=form-group><label class=\"col-md-12 control-label\" for=pl-address-list>Address:</label><div class=col-md-12><select class=form-control id=\"{{ id }}\" ng-model=ctrl.selectedPostcodeId size=20><option ng-repeat=\"i in ctrl.postcode\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.streetAddress }} - {{ i.place }}</option></select></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.clear()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=submit class=\"btn btn-primary\" ng-click=ctrl.selectAddress()><span class=\"glyphicon glyphicon-save\"></span> Select</button></div></form>");
  $templateCache.put("js/directives/address-editor/views/display.html",
    "<div class=address-editor-display><div ng-show=ctrl.address.line1>{{ ctrl.address.line1 }}</div><div ng-show=ctrl.address.line2>{{ ctrl.address.line2 }}</div><div ng-show=ctrl.address.line3>{{ ctrl.address.line3 }}</div><div ng-show=ctrl.address.line4>{{ ctrl.address.line4 }}</div><div ng-show=ctrl.address.postcode>{{ ctrl.address.postcode }}</div></div>");
  $templateCache.put("js/directives/admissions/admission-details/admission-details.html",
    "<div class=\"admission-details container-fluid\"><div class=row><div class=\"col-sm-5 col-md-3\">Year Applied:</div><div class=\"col-sm-7 col-md-3\">{{ studentAdmissions.yearApplied.description | notSet}}</div><div class=\"col-sm-5 col-md-3\">Application Received:</div><div class=\"col-sm-7 col-md-3\">{{ studentAdmissions.received | date :'dd/MM/yyyy' | notSet}}</div></div></div>");
  $templateCache.put("js/directives/admissions/data-sharing-option/views/data-sharing-option-details.html",
    "<button type=button class=\"btn btn-sm btn-primary\" ng-click=ctrl.editDataSharingOption(dataSharingOption.studentId)><span class=\"glyphicon glyphicon-pencil\"></span> Edit Student Data Options</button>");
  $templateCache.put("js/directives/admissions/data-sharing-option/views/data-sharing-option-editorDialog.html",
    "<form id=dataSharingOptionEditForm name=dataSharingOptionEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Edit Data Sharing Options</h4></div><div class=modal-body><div class=row><div class=form-group><label for=contactByEmail class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Contact By Email:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=amount type=checkbox name=contactByEmail ng-model=ctrl.dataSharingOption.contactByEmail class=\"form-control text ui-widget-content ui-corner-all\"></div></div><div class=form-group><label for=contactByPhone class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Contact By Phone:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=contactByPhone type=checkbox name=contactByPhone ng-model=ctrl.dataSharingOption.contactByPhone class=\"form-control text ui-widget-content ui-corner-all\"></div></div><div class=form-group><label for=contactByPost class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Contact By Post:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=contactByPost type=checkbox name=contactByPost ng-model=ctrl.dataSharingOption.contactByPost class=\"form-control text ui-widget-content ui-corner-all\"></div></div><div class=form-group><label for=lrsOptOut class=\"col-xs-4 col-sm-4 col-md-4 control-label\">LRS Opt Out:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=contactByPost type=checkbox name=lrsOptOut ng-model=ctrl.dataSharingOption.lrsOptOut class=\"form-control text ui-widget-content ui-corner-all\"></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/admissions/induction-details/induction-details.html",
    "<div class=\"induction-details container-fluid\"><div class=row><div class=\"col-sm-5 col-md-3\">Cannot Attend Introduction Day:</div><div class=\"col-sm-7 col-md-3\">{{ studentAdmissions.cannotAttendIntroDay | yesNo}}</div><div class=\"col-sm-5 col-md-3\">Cannot Attend Induction Day:</div><div class=\"col-sm-7 col-md-3\">{{ studentAdmissions.cannotAttendInductionDay | yesNo }}</div><div class=\"col-sm-5 col-md-3\">Date of Induction:</div><div class=\"col-sm-7 col-md-3\">{{ studentAdmissions.inductionDate | date:'dd/MM/yyyy' | notSet }}</div><div class=\"col-sm-5 col-md-3\">Enrolment Interview Date:</div><div class=\"col-sm-7 col-md-3\">{{studentAdmissions.enrolmentInterviewDate | date:'dd/MM/yyyy' | notSet }}</div><div class=\"col-sm-5 col-md-3\">Enrolment Interview Time:</div><div class=\"col-sm-7 col-md-3\">{{ studentAdmissions.enrolmentInterviewTime | date:'dd/MM/yyyy' | notSet }}</div></div></div>");
  $templateCache.put("js/directives/admissions/interviewer-details/interviewer-details.html",
    "<div class=\"interviewer-details container-fluid\"><div class=row><div class=\"col-sm-5 col-md-3\">Interviewer:</div><div class=\"col-sm-7 col-md-3\">{{ studentAdmissions._interviewerName | notSet}}</div><div class=\"col-sm-5 col-md-3\">Interview Date:</div><div class=\"col-sm-7 col-md-3\">{{ studentAdmissions.interviewDate | date:'dd/MM/yyyy' | notSet }}</div></div></div>");
  $templateCache.put("js/directives/admissions/previous-school-details/previous-school-details.html",
    "<div class=\"previous-school-details container-fluid\"><div class=row><div class=\"col-sm-5 col-md-3\">Reference Requested:</div><div class=\"col-sm-7 col-md-3\">{{ studentAdmissions.refRequested | date:'dd/MM/yyyy' | notSet}}</div><div class=\"col-sm-5 col-md-3\">Reference Received:</div><div class=\"col-sm-7 col-md-3\">{{ studentAdmissions.refReceived | date:'dd/MM/yyyy' | notSet }}</div><div class=\"col-sm-5 col-md-3\">Report Requested:</div><div class=\"col-sm-7 col-md-3\">{{ studentAdmissions.schoolReportRequested | date:'dd/MM/yyyy' | notSet }}</div><div class=\"col-sm-5 col-md-3\">Report Received:</div><div class=\"col-sm-7 col-md-3\">{{studentAdmissions.schoolReportReceived | date:'dd/MM/yyyy' | notSet }}</div><div class=\"col-sm-5 col-md-3\">School Report Status:</div><div class=\"col-sm-7 col-md-3\">{{ studentAdmissions._schoolReportStatusDescription | notSet }}</div><div class=\"col-sm-5 col-md-3\">Blue Card Date:</div><div class=\"col-sm-7 col-md-3\">{{ studentAdmissions.blueCard | date: 'dd/MM/yyyy' | notSet }}</div></div></div>");
  $templateCache.put("js/directives/admissions/student-admission-editor/views/student-admission-editor.html",
    "<button type=button class=\"btn btn-sm btn-primary\" ng-click=ctrl.editStudentAdmission(studentAdmission.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit Student Admission</button>");
  $templateCache.put("js/directives/admissions/student-admission-editor/views/student-admission-editorDialog.html",
    "<form id=studentAdmissionEditForm name=studentAdmissionEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Edit Student Admission</h4></div><div class=modal-body><div class=row><h4 class=modal-header>Previous School Information</h4><div class=form-group><label for=refRequested class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Reference Requested</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div class=input-group><input class=form-control name=refRequested uib-datepicker-popup=dd/MM/yyyy is-open=refRequested ng-model=ctrl.studentAdmission.refRequested> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"refRequested = !refRequested\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div><div class=form-group><label for=refReceived class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Reference Received</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div class=input-group><input id=field_id class=form-control is-open=refReceived uib-datepicker-popup=dd/MM/yyyy name=refReceived ng-model=ctrl.studentAdmission.refReceived> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"refReceived = !refReceived\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div><div class=form-group><label for=schoolReportRequested class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Report Requested:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div class=input-group><input id=schoolReportRequested class=form-control is-open=schoolReportRequested uib-datepicker-popup=dd/MM/yyyy name=refReceived ng-model=ctrl.studentAdmission.schoolReportRequested> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"schoolReportRequested = !schoolReportRequested\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div><div class=form-group><label for=schoolReportReceived class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Report Received:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div class=input-group><input id=schoolReportReceived class=form-control is-open=schoolReportReceived uib-datepicker-popup=dd/MM/yyyy name=refReceived ng-model=ctrl.studentAdmission.schoolReportReceived> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"schoolReportReceived = !schoolReportReceived\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div><div class=form-group><label for=blueCard class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Blue Card Date:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div class=input-group><input id=blueCard class=form-control is-open=blueCard uib-datepicker-popup=dd/MM/yyyy name=blueCard ng-model=ctrl.studentAdmission.blueCard> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"blueCard = !blueCard\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Report Status</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><school-report-status-selection id=schoolReportStatus class=form-control readonly ng-model=ctrl.studentAdmission.schoolReportStatusId></school-report-status-selection></div></div></div></div><div class=modal-body><div class=row><h4 class=modal-header>Interviewer Details:</h4><div class=form-group class=\"col-xs-4 col-sm-4 col-md-4 control-label\"><label for=interviewDate class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Interview Date:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div class=input-group><input id=interviewDate class=form-control is-open=interviewDate uib-datepicker-popup=dd/MM/yyyy name=id ng-model=ctrl.studentAdmission.interviewDate> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"interviewDate=! interviewDate\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Interviewer</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><staff-selection id=interviewerId readonly class=form-control include-blank=true ng-model=ctrl.studentAdmission.interviewerId></staff-selection></div></div></div></div><div class=modal-body><div class=row><h4 class=modal-header>Introductory Day/Choices Day/Enrolment Interview Details</h4><div class=form-group><label for=refRequested class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Cannot Attend Introduction Day:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox class=form-control name=cannotAttendIntroDay ng-model=ctrl.studentAdmission.cannotAttendIntroDay></div></div><div class=form-group><label for=refReceived class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Cannot Attend Induction Day:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox class=form-control name=cannotAttendInductionDay ng-model=ctrl.studentAdmission.cannotAttendInductionDay></div></div><div class=form-group><label for=schoolReportRequested class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Date of Induction:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div class=input-group><input id=inductionDate class=form-control is-open=inductionDate uib-datepicker-popup=dd/MM/yyyy name=inductionDate ng-model=ctrl.studentAdmission.inductionDate> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"inductionDate=! inductionDate\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div><div class=form-group><label for=schoolReportReceived class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Enrolment Interview Date:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div class=input-group><input id=enrolmentInterviewDate class=form-control is-open=enrolmentInterviewDate uib-datepicker-popup=dd/MM/yyyy name=enrolmentInterviewDate ng-model=ctrl.studentAdmission.enrolmentInterviewDate> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"enrolmentInterviewDate=! enrolmentInterviewDate\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></div></form>");
  $templateCache.put("js/directives/admissions/student-college-fund-paid/views/student-college-fund-paid-editorDialog.html",
    "<form id=facultiesEditForm name=facultiesEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Edit College Fund Paid</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=collegeFund class=\"col-xs-4 col-sm-4 col-md-4 control-label\">College Fund</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><college-fund-paid-selection id=collegeFund class=form-control ng-model=ctrl.studentCollegeFundPaid.collegeFundId></college-fund-paid-selection></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Years Paid:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=description class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.studentCollegeFundPaid.collegeFundPaidYears></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/admissions/student-college-fund-paid/views/student-college-fund-paid.html",
    "<div class=\"col-md-4 col-sm-4 col-xs-4\">College Fund Paid : {{studentCollegeFundPaid._collegeFundDescription}}</div><div class=\"col-md-4 col-sm-4 col-xs-4\">Years Paid For : {{studentCollegeFundPaid.collegeFundPaidYears}}</div><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editCollegeFundPaid(studentCollegeFundPaid.studentId)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button>");
  $templateCache.put("js/directives/application-statuses-editor/views/application-statuses-editor.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-click=\"ctrl.changeSort('code')\">Code <span ng-show=\"ctrl.isSortedAsc('code')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('code')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('description')\">Description <span ng-show=\"ctrl.isSortedAsc('description')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('description')\">&#x25B2;</span></th></thead><tbody><tr ng-repeat=\"applicationStatus in applicationStatuses | orderBy : ctrl.sortOrder\"><td>{{ applicationStatus.code }}</td><td>{{ applicationStatus.description }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editApplicationStatuses(applicationStatus.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addApplicationStatuses()><span class=\"glyphicon glyphicon-pencil\"></span> Add</button>");
  $templateCache.put("js/directives/application-statuses-editor/views/application-statuses-editorDialog.html",
    "<form id=applicationStatussEditForm name=applicationStatusesEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add/Edit ApplicationStatus</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">ApplicationStatus ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=id readonly ng-model=ctrl.applicationStatuses.id></div></div><div class=form-group ng-show=true><label for=code class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Code</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=code ng-model=ctrl.applicationStatuses.code></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" name=description ng-model=ctrl.applicationStatuses.description></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/attendance-monitorings-editor/views/attendance-monitorings-editor-addDialog.html",
    "<form id=attendanceMonitoringsEditForm name=attendanceMonitoringsEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add Attendance Monitoring</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Attendance Monitoring ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=id class=form-control name=id ng-model=ctrl.attendanceMonitorings.id></div></div><div class=form-group ng-show=true><label for=code class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Code</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=code class=form-control name=code ng-model=ctrl.attendanceMonitorings.code></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=description class=\"form-control text ui-widget-content ui-corner-all\" name=description ng-model=ctrl.attendanceMonitorings.description></div></div><div class=form-group ng-show=true><label for=warningColour class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Warning Colour:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=warningColour class=\"form-control text ui-widget-content ui-corner-all\" name=warningColour ng-model=ctrl.attendanceMonitorings.warningColour></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.add()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/attendance-monitorings-editor/views/attendance-monitorings-editor.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-click=\"ctrl.changeSort('id')\">Attendance Monitoring Id <span ng-show=\"ctrl.isSortedAsc('id')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('id')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('code')\">Code <span ng-show=\"ctrl.isSortedAsc('code')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('code')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('description')\">Description <span ng-show=\"ctrl.isSortedAsc('description')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('description')\">&#x25B2;</span></th><th>Warning Colour</th></thead><tbody><tr ng-repeat=\"attendanceMonitoring in attendanceMonitorings |  orderBy:ctrl.sortOrder \"><td>{{ attendanceMonitoring.id }}</td><td>{{ attendanceMonitoring.code }}</td><td>{{ attendanceMonitoring.description }}</td><td>{{ attendanceMonitoring.warningColour }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editAttendanceMonitorings(attendanceMonitoring.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addAttendanceMonitorings()><span class=\"glyphicon glyphicon-pencil\"></span> Add</button>");
  $templateCache.put("js/directives/attendance-monitorings-editor/views/attendance-monitorings-editorDialog.html",
    "<form id=attendanceMonitoringsEditForm name=attendanceMonitoringsEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Edit Attendance Monitoring</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Attendance Monitoring ID</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input class=form-control name=id readonly ng-model=ctrl.attendanceMonitorings.id></div></div><div class=form-group ng-show=true><label for=code class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Code</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input class=form-control name=code ng-model=ctrl.attendanceMonitorings.code></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description:</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" name=description ng-model=ctrl.attendanceMonitorings.description></div></div><div class=form-group ng-show=true><label for=warningColour class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Warning Colour:</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" name=warningColour ng-model=ctrl.attendanceMonitorings.warningColour></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/blocks-editor/views/blocks-editor.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-click=\"ctrl.changeSort('code')\">Code <span ng-show=\"ctrl.isSortedAsc('code')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('code')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('description')\">Description <span ng-show=\"ctrl.isSortedAsc('description')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('description')\">&#x25B2;</span></th><th>HTML color</th></thead><tbody><tr ng-repeat=\"block in blocks | orderBy : ctrl.sortOrder\"><td>{{ block.code }}</td><td>{{ block.description }}</td><td>{{ block.htmlColour }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editBlocks(block.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addBlocks()><span class=\"glyphicon glyphicon-pencil\"></span> Add</button>");
  $templateCache.put("js/directives/blocks-editor/views/blocks-editorDialog.html",
    "<form id=blocksEditForm name=blocksEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add/Edit Block</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=code class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Code:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=id ng-model=ctrl.blocks.code></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" name=description ng-model=ctrl.blocks.description></div></div><div class=form-group ng-show=true><label for=htmlColour class=\"col-xs-4 col-sm-4 col-md-4 control-label\">HTML Colour:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" name=htmlColour ng-model=ctrl.blocks.htmlColour></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/central-monitorings-editor/views/central-monitorings-editor-addDialog.html",
    "<form id=centralMonitoringsEditForm name=centralMonitoringsEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add Central Monitoring</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Central Monitoring ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=id ng-model=ctrl.centralMonitorings.id></div></div><div class=form-group ng-show=true><label for=code class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Code</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=id ng-model=ctrl.centralMonitorings.code></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.centralMonitorings.description></div></div><div class=form-group ng-show=true><label for=warningColour class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Warning Colour:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.centralMonitorings.warningColour></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.add()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/central-monitorings-editor/views/central-monitorings-editor.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-click=\"ctrl.changeSort('id')\">Id <span ng-show=\"ctrl.isSortedAsc('id')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('id')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('code')\">Code <span ng-show=\"ctrl.isSortedAsc('code')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('code')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('description')\">Description <span ng-show=\"ctrl.isSortedAsc('description')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('description')\">&#x25B2;</span></th><th>Warning Colour</th></thead><tbody><tr ng-repeat=\"centralMonitoring in centralMonitorings |  orderBy:ctrl.sortOrder \"><td>{{ centralMonitoring.id }}</td><td>{{ centralMonitoring.code }}</td><td>{{ centralMonitoring.description }}</td><td>{{ centralMonitoring.warningColour }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editCentralMonitorings(centralMonitoring.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addCentralMonitorings()><span class=\"glyphicon glyphicon-pencil\"></span> Add</button>");
  $templateCache.put("js/directives/central-monitorings-editor/views/central-monitorings-editorDialog.html",
    "<form id=centralMonitoringsEditForm name=centralMonitoringsEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Edit Central Monitoring</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Central Monitoring ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=id readonly ng-model=ctrl.centralMonitorings.id></div></div><div class=form-group ng-show=true><label for=code class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Code</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=code ng-model=ctrl.centralMonitorings.code></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" name=description ng-model=ctrl.centralMonitorings.description></div></div><div class=form-group ng-show=true><label for=warningColour class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Warning Colour:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" name=warningColour ng-model=ctrl.centralMonitorings.warningColour></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/college-fund-payment-details/college-fund-payment-details.html",
    "<div class=\"college-fund-payment-details container-fluid\"><div class=row><table class=\"table table-responsive table-hover\"><thead><th ng-show=\"showAll || showStudent\">StudentId</th><th>Payment Date</th><th>Amount</th><th>Cheque Date</th><th>Payee</th><th>GiftAid</th><th>Cash</th></thead><tbody><tr ng-repeat=\"collegeFundPayment in collegeFundPayment | orderBy:['-paymentDate']\"><td ng-show=\"showAll || showStudent\">{{ collegeFundPayment.studentId }}</td><td>{{ collegeFundPayment.paymentDate | date:'dd/MM/yyyy'}}</td><td>{{ collegeFundPayment.amount }}</td><td>{{ collegeFundPayment.chequeDate | date:'dd/MM/yyyy' }}</td><td>{{ collegeFundPayment.payee }}</td><td>{{ collegeFundPayment.giftAid | yesNo }}</td><td>{{ collegeFundPayment.cash | yesNo }}</td></tr></tbody></table></div></div>");
  $templateCache.put("js/directives/college-fund-payment-editor/views/college-fund-payment-editor-dialog.html",
    "<form id=collegeFundPaymentEditForm name=collegeFundPaymentEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Create or edit a CollegeFundPayment</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=false><label for=id>Student ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=id readonly ng-model=ctrl.collegeFundPayment.studentId></div></div><div class=form-group><label for=paymentDate class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Payment Date</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div class=input-group><input class=form-control ng-init=\"paymentDatePicker = false\" uib-datepicker-popup=dd/MM/yyyy is-open=paymentDatePicker ng-model=ctrl.collegeFundPayment.paymentDate> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"paymentDatePicker = !paymentDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div><div class=form-group><label for=amount class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Amount</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" name=amount ng-model=ctrl.collegeFundPayment.amount></div></div><div class=form-group><label for=chequeDate class=\"col-xs-4 col-sm-4 col-md-4 control-label\">ChequeDate</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div class=input-group><input class=form-control ng-init=\"chequeDatePicker = false\" uib-datepicker-popup=dd/MM/yyyy is-open=chequeDatePicker ng-model=ctrl.collegeFundPayment.chequeDate> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"chequeDatePicker = !chequeDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div><div class=form-group><label for=payee class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Payee</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" name=payee ng-model=ctrl.collegeFundPayment.payee></div></div><div class=form-group><label for=giftAid class=\"col-xs-4 col-sm-4 col-md-4 control-label\">GiftAid</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox class=\"form-control text ui-widget-content ui-corner-all\" name=giftAid ng-model=ctrl.collegeFundPayment.giftAid></div></div><div class=form-group><label for=cash class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Cash</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox class=\"form-control text ui-widget-content ui-corner-all\" name=cash ng-model=ctrl.collegeFundPayment.cash></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-disabled=\"collegeFundPaymentEditForm.$invalid || collegeFundPaymentEditForm.$submitted\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/college-fund-payment-editor/views/college-fund-payment-editor.html",
    "<div class=\"college-fund-payment-details container-fluid\"><div class=row><table class=\"table table-responsive table-hover\"><thead><th ng-show=\"showAll || showStudent\">StudentId</th><th>Payment Date</th><th>Amount</th><th>Cheque Date</th><th>Payee</th><th>GiftAid</th><th>Cash</th><th>Actions</th></thead><tbody><tr ng-repeat=\"collegeFundPayment in ctrl.collegeFundPayment\"><td ng-show=\"showAll || showStudent\">{{ concession.studentId }}</td><td>{{ collegeFundPayment.paymentDate | date:'dd/MM/yyyy' }}</td><td>{{ collegeFundPayment.amount }}</td><td>{{ collegeFundPayment.chequeDate | date:'dd/MM/yyyy' }}</td><td>{{ collegeFundPayment.payee }}</td><td>{{ collegeFundPayment.giftAid | yesNo }}</td><td>{{ collegeFundPayment.cash | yesNo }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editCollegeFundPayment(collegeFundPayment.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary\" ng-click=ctrl.addCollegeFundPayment(ctrl.studentId)>Add</button></div></div>");
  $templateCache.put("js/directives/concession-types-editor/views/concession-types-editor-addDialog.html",
    "<form id=concessionTypesEditForm name=concessionTypesEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add ConcessionType</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">ConcessionType ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=id ng-model=ctrl.concessionTypes.id></div></div><div class=form-group ng-show=true><label for=code class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Code</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=code ng-model=ctrl.concessionTypes.code></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" name=description ng-model=ctrl.concessionTypes.description></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.add()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/concession-types-editor/views/concession-types-editor.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-click=\"ctrl.changeSort('id')\">ConcessionType Id <span ng-show=\"ctrl.isSortedAsc('id')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('id')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('code')\">Code <span ng-show=\"ctrl.isSortedAsc('code')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('code')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('description')\">Description <span ng-show=\"ctrl.isSortedAsc('description')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('description')\">&#x25B2;</span></th></thead><tbody><tr ng-repeat=\"concessionType in concessionTypes |  orderBy:ctrl.sortOrder \"><td>{{ concessionType.id }}</td><td>{{ concessionType.code }}</td><td>{{ concessionType.description }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editConcessionTypes(concessionType.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addConcessionTypes()><span class=\"glyphicon glyphicon-pencil\"></span> Add</button>");
  $templateCache.put("js/directives/concession-types-editor/views/concession-types-editorDialog.html",
    "<form id=concessionTypesEditForm name=concessionTypesEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Edit ConcessionType</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">ConcessionType ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=id readonly ng-model=ctrl.concessionTypes.id></div></div><div class=form-group ng-show=true><label for=code class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Code</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=code ng-model=ctrl.concessionTypes.code></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" name=description ng-model=ctrl.concessionTypes.description></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/contacts-editor/views/contactEditorDialog.html",
    "<form id=contactEditForm name=contactEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Create or edit a Contact</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=false><label for=personId>Person ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=personId readonly ng-model=ctrl.contact.personId></div></div><div class=form-group ng-show=false><label for=contactId>Contact ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=contactId readonly ng-model=ctrl.contact.contactId></div></div><div class=form-group><label for=contactType class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Relation:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><contact-type-selection id=contactType class=form-control ng-model=ctrl.contact.contactTypeId required></contact-type-selection><span class=validation-error ng-show=contactEditForm.contactType.$error.required>Mandatory Field</span></div></div><div class=form-group><label for=title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Title:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><title-selection id=title class=form-control ng-model=ctrl.contact.contact.titleId></title-selection></div></div><div class=form-group><label for=firstName class=\"col-xs-4 col-sm-4 col-md-4 control-label\">First Name</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=firstName class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.contact.contact.firstName ng-pattern=\"/^[a-zA-Z\\s\\`'-.,()]*$/\"> <span class=validation-error ng-show=contactEditForm.firstName.$error.pattern>Only characters, (a-z)(`'-.,()) are allowed</span></div></div><div class=form-group><label for=surname class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Surname</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input minlength=2 name=surname class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.contact.contact.surname required ng-pattern=\"/^[a-zA-Z\\s\\`'-.,()]*$/\"><span class=validation-error ng-show=contactEditForm.surname.$error.pattern>Only characters, (a-z)(`'-.,()) are allowed</span></div></div><div class=form-group><label for=home class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Home</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=home class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.contact.contact.home ng-pattern=\"/^[\\d+ ]*$/\"><span class=validation-error ng-show=contactEditForm.home.$error.pattern>Please enter valid phone number</span></div></div><div class=form-group><label for=mobile class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Mobile</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=mobile class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.contact.contact.mobile ng-pattern=\"/^[\\d+ ]*$/\"><span class=validation-error ng-show=contactEditForm.mobile.$error.pattern>Please enter valid phone number</span></div></div><div class=form-group><label for=work class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Work</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=work class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.contact.contact.work ng-pattern=\"/^[\\d+ ]*$/\"><span class=validation-error ng-show=contactEditForm.work.$error.pattern>Please enter valid phone number</span></div></div><div class=form-group><label for=email class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Email</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=email class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.contact.contact.email ng-pattern=/^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/ ><span class=validation-error ng-show=contactEditForm.email.$error.pattern>Please enter valid email address</span></div></div><div class=form-group><label for=contactable class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Contactable</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.contact.contactable></div></div><div class=form-group><label for=preferred class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Preferred</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.contact.preferred></div></div><div class=form-group><label for=address-editor class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Address</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><address-editor address-id=ctrl.contact.contact.addressId ng-show=ctrl.contact.contact.addressId address=ctrl.contact.contact.address></address-editor></div></div><div class=form-group><div class=\"col-xs-12 col-sm-12 col-sm-12 col-md-12\"><button type=button class=\"btn btn-sm btn-primary\" ng-show=\"ctrl.contact.personId !== undefined\" ng-hide=ctrl.contact.contact.addressId ng-click=ctrl.addAddress(ctrl.personId)><span class=\"glyphicon glyphicon-plus\"></span>Add Address</button> <button type=button class=\"btn btn-sm btn-primary\" ng-show=\"ctrl.contact.contact.addressId !== undefined\" ng-hide=\"ctrl.contact.contact.addressId === undefined\" ng-click=ctrl.deleteAddress()><span class=\"glyphicon glyphicon-remove\"></span>Remove Address</button></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-disabled=\"contactEditForm.$invalid || contactEditForm.$submitted\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/contacts-editor/views/contactsEditor.html",
    "<div class=\"form-group col-md-12 col-sm-12\"><table class=\"table table-responsive table-hover\"><thead><th>Contact Type</th><th>Title</th><th>First Name</th><th>Surname</th><th>Home</th><th>Mobile</th><th>Work</th><th>Email</th><th>Address</th><th>Contactable</th><th>Preferred</th><th>Actions</th></thead><tbody><tr ng-repeat=\"contact in ctrl.contacts\"><td>{{ contact._contactTypeDescription }}</td><td>{{ contact.contact._titleDescription }}</td><td>{{ contact.contact.firstName }}</td><td>{{ contact.contact.surname }}</td><td>{{ contact.contact.home | telNo }}</td><td>{{ contact.contact.mobile | telNo }}</td><td>{{ contact.contact.work | telNo }}</td><td>{{ contact.contact.email }}</td><td><address-details address=contact.contact.address ng-show=contact.contact.addressId></address-details></td><td>{{ contact.contactable | yesNo }}</td><td>{{ contact.preferred | yesNo }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editContact(contact.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button> <button type=button class=\"btn btn-danger btn-sm\" ng-click=ctrl.deleteContact(contact.id)><span class=\"glyphicon glyphicon-trash\"></span> Delete</button></td></tr></tbody></table><button type=button class=\"btn btn-primary\" ng-show=\"ctrl.personId !== undefined\" ng-click=ctrl.addContact(ctrl.personId)>Add Contact</button></div>");
  $templateCache.put("js/directives/contacts-table/contactsTable.html",
    "<div class=\"form-group col-md-12 col-sm-12\"><table class=\"table table-responsive table-hover\"><thead><th>Contact Type</th><th>Title</th><th>First Name</th><th>Surname</th><th>Home</th><th>Mobile</th><th>Email</th><th>Address</th><th>Contactable</th><th>Preferred</th></thead><tbody><tr ng-repeat=\"contact in contacts\"><td>{{ contact._contactTypeDescription }}</td><td>{{ contact.contact._titleDescription }}</td><td>{{ contact.contact.firstName }}</td><td>{{ contact.contact.surname }}</td><td>{{ contact.contact.home | telNo }}</td><td>{{ contact.contact.mobile | telNo }}</td><td>{{ contact.contact.email }}</td><td><address-details address=contact.contact.address ng-show=contact.contact.addressId></address-details></td><td>{{ contact.contactable | yesNo }}</td><td>{{ contact.preferred | yesNo }}</td></tr></tbody></table></div>");
  $templateCache.put("js/directives/correspondences-table/correspondencesTable.html",
    "<div class=\"form-group col-md-12 col-sm-12\"><table class=\"table table-responsive table-hover\"><thead><th ng-show=showAll>Admission Number</th><th ng-show=showAll>CourseId</th><th>CourseGroupSpec</th><th>CourseGroupDescription</th><th>Correspondence</th><th>MessageTitle</th><th>Date</th><th>From</th><th>To</th><th ng-show=showAll>LetterId</th><th ng-show=showAll>StaffAdvised</th><th>CorrespondenceType</th><th>ProducedBy</th><th>PrivateEntry</th><th ng-show=showAll>ProcessStage</th><th ng-show=showAll>AttachmentsSent</th></thead><tbody><tr ng-repeat=\"correspondence in correspondences\"><td ng-show=showAll>{{ correspondence.studentId }}</td><td ng-show=showAll>{{ correspondence.courseId }}</td><td>{{ correspondence._courseGroupSpec }}</td><td>{{ correspondence._courseGroupDescription }}</td><td>{{ correspondence.correspondence }}</td><td>{{ correspondence.title }}</td><td>{{ correspondence.date | date:'dd/MM/yyyy' }}</td><td>{{ correspondence.from }}</td><td>{{ correspondence.to }}</td><td ng-show=showAll>{{ correspondence.letterId }}</td><td ng-show=showAll>{{ correspondence.staffAdvised }}</td><td>{{ correspondence._type }}</td><td>{{ correspondence.producedBy }}</td><td>{{ correspondence.privateEntry | yesNo }}</td><td ng-show=showAll>{{ correspondence.processStage }}</td><td ng-show=showAll>{{ correspondence.attachmentsSent }}</td></tr></tbody></table></div>");
  $templateCache.put("js/directives/course-details/course-details.html",
    "<div class=course-details><div class=row><div class=\"col-md-4 col-sm-6 col-xs-12\"><div>Course Code: {{ course.spec }}</div><div>Level: {{ course._levelDescription }}</div><div>Subject: {{ course._subjectDescription }}</div></div><div class=\"col-md-4 col-sm-6 col-xs-12\"><div>Learning Aim Reference: {{ course.learningAimReference }}</div><div>Exam Board: {{ course._examBoardDescription }}</div><div>Syllabus Code: {{ course.syllabusCode }}</div></div><div class=\"col-md-4 col-sm-6 col-xs-12\"><div>Valid From Year: {{ course._validFromCode | notSet }}</div><div>Valid To Year: {{ course._validToCode | notSet }}</div></div></div></div>");
  $templateCache.put("js/directives/course-groups-table/course-groups-table.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-show=\"ctrl.showAll || ctrl.showId\">Course Group Id</th><th ng-show=\"ctrl.showAll || ctrl.showId\">Course Id</th><th ng-show=\"ctrl.showAll || ctrl.showYear\">Year</th><th ng-show=\"ctrl.showAll || ctrl.showYearGroup\">Year Group</th><th ng-click=\"ctrl.changeSort('spec')\">Class Code <span class=\"glyphicon glyphicon-sort-by-attributes\" ng-show=\"ctrl.isSortedAsc('spec')\"></span> <span class=\"glyphicon glyphicon-sort-by-attributes-alt\" ng-show=\"ctrl.isSortedDesc('spec')\"></span></th><th ng-click=\"ctrl.changeSort('_departmentDescription')\">Department <span class=\"glyphicon glyphicon-sort-by-attributes\" ng-show=\"ctrl.isSortedAsc('_departmentDescription')\"></span> <span class=\"glyphicon glyphicon-sort-by-attributes-alt\" ng-show=\"ctrl.isSortedDesc('_departmentDescription')\"></span></th><th>Start Date</th><th>End Date</th><th ng-show=ctrl.includeReports>Reports</th></thead><tbody><tr ng-repeat=\"courseGroup in ctrl.courseGroups | orderBy:ctrl.sortOrder | filter: ctrl.filterParams\"><td ng-show=\"ctrl.showAll || ctrl.showId\">{{ courseGroup.id }}</td><td ng-show=\"ctrl.showAll || ctrl.showId\">{{ courseGroup.courseId }}</td><td ng-show=\"ctrl.showAll || ctrl.showYear\">{{ courseGroup._yearDescription }}</td><td ng-show=\"ctrl.showAll || ctrl.showYearGroup\">{{ courseGroup._yearGroupDescription }}</td><td>{{ courseGroup.spec }}</td><td>{{ courseGroup._departmentDescription }}</td><td>{{ courseGroup.startDate | date:'dd/MM/yyyy' }}</td><td>{{ courseGroup.endDate | date:'dd/MM/yyyy' }}</td><td ng-show=ctrl.includeReports><report-link class=\"btn btn-sm btn-default\" report-path=\"'/CID/Students/Class Lists/Class List with Various Information'\" report-params=\"'CourseGroupMask='+courseGroup.spec\" include-year=true>Class List</report-link><div class=btn-group><button class=\"btn btn-sm btn-default dropdown-toggle\" type=button id=reports-menu data-toggle=dropdown aria-haspopup=true aria-expanded=true>Reports <span class=caret></span></button><ul class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=reports-menu><li><report-link report-path=\"'/CID/Students/Class Lists/Class List with Photos'\" report-format=\"'PDF'\" report-params=\"'AcademicYear=' + courseGroup.yearId + '&CourseGroupMask=' + courseGroup.spec\">Class List with Photos</report-link></li><li><report-link report-path=\"'/CID/Students/Class Lists/Class List - Mark Sheet'\" report-toolbar=true report-params=\"'CourseGroupMask='+courseGroup.spec\">Mark Sheet</report-link></li><li><report-link report-path=\"'/CID/Timetabling/Timetable Student - Column'\" report-params=\"'CourseGroupMask='+courseGroup.spec\" include-year=true>Student Timetable - Column</report-link></li><li><report-link report-path=\"'/CID/Attendance Monitoring/Register between Dates'\" report-params=\"'CourseGroupMask='+courseGroup.spec\" include-year=true>Register between Dates</report-link></li></ul></div></td></tr><tr ng-show=\"ctrl.courseGroups.size() == 0\"><td row-span=3>No Results</td></tr></tbody></table>");
  $templateCache.put("js/directives/course-search/courseSearch.html",
    "<div class=\"search-box course-search\"><div class=search-form><form class=form-inline><div class=form-group><label for=name>Search Course:</label><input id=name class=\"form-control input-sm\" ng-model=ctrl.searchText></div><button name=search class=\"btn btn-sm btn-primary\" ng-click=ctrl.search()>Search</button> <button id=toggle-course-results class=\"btn btn-sm btn-info\" type=button ng-click=ctrl.toggleResults() ng-disabled=!ctrl.hasResults()>Show/Hide Results</button></form></div><div class=message>{{ ctrl.message }}</div><div class=search-results ng-show=ctrl.hasResults()><div id=course-results class=collapsable ng-show=ctrl.resultsVisible()><h4>Search Results</h4><table class=\"table table-responsive table-bordered table-hover table-condensed\"><thead><th ng-click=\"ctrl.changeSort('spec')\">Spec <span ng-show=\"ctrl.isSortedAsc('spec')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('spec')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('description')\">Course <span ng-show=\"ctrl.isSortedAsc('description')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('description')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('_validFromDescription')\">Vaild From <span ng-show=\"ctrl.isSortedAsc('_validFromDescription')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('_validFromDescription')\">&#x25B2;</span></th><th>Valid To</th><th>Notes</th></thead><tbody><tr ng-repeat=\"result in ctrl.results | orderBy:ctrl.sortOrder track by $index\"><td><a ng-click=\"ctrl.executeCallback({id: result.courseId})\">{{ result.spec }}</a></td><td>{{ result.description }}</td><td>{{ result._validFromDescription }}</td><td>{{ result._validToDescription }}</td><td><span class=\"glyphicon glyphicon-info-sign\" uib-tooltip={{result.notes}} ng-show=\"result.notes !== null\"></span></td></tr><tr ng-show=!ctrl.hasResults()><td colspan=2>No Results</td></tr></tbody></table></div></div></div>");
  $templateCache.put("js/directives/courses-table/courses-table.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-show=\"showAll || showId\" ng-click=\"ctrl.changeSort('id')\">Course Id <span class=\"glyphicon glyphicon-sort-by-attributes\" ng-show=\"ctrl.isSortedAsc('id')\"></span> <span class=\"glyphicon glyphicon-sort-by-attributes-alt\" ng-show=\"ctrl.isSortedDesc('id')\"></span></th><th ng-click=\"ctrl.changeSort('spec')\">Spec <span class=\"glyphicon glyphicon-sort-by-attributes\" ng-show=\"ctrl.isSortedAsc('spec')\"></span> <span class=\"glyphicon glyphicon-sort-by-attributes-alt\" ng-show=\"ctrl.isSortedDesc('spec')\"></span></th><th ng-click=\"ctrl.changeSort('_levelDescription')\">Level <span class=\"glyphicon glyphicon-sort-by-attributes\" ng-show=\"ctrl.isSortedAsc('_levelDescription')\"></span> <span class=\"glyphicon glyphicon-sort-by-attributes-alt\" ng-show=\"ctrl.isSortedDesc('_levelDescription')\"></span></th><th iui-resize=\"{width: 0.5}\" ng-click=\"ctrl.changeSort('_subjectDescription')\">Subject <span class=\"glyphicon glyphicon-sort-by-attributes\" ng-show=\"ctrl.isSortedAsc('_subjectDescription')\"></span> <span class=\"glyphicon glyphicon-sort-by-attributes-alt\" ng-show=\"ctrl.isSortedDesc('_subjectDescription')\"></span></th><th ng-show=\"showAll || showExamBoard\" ng-click=\"ctrl.changeSort('_examBoardDescription')\">Exam Board <span class=\"glyphicon glyphicon-sort-by-attributes\" ng-show=\"ctrl.isSortedAsc('_examBoardDescription')\"></span> <span class=\"glyphicon glyphicon-sort-by-attributes-alt\" ng-show=\"ctrl.isSortedDesc('_examBoardDescription')\"></span></th><th ng-show=\"showAll || showYear\">Valid From</th><th ng-show=\"showAll || showYear\">Valid To</th><th ng-show=\"showAll || showDetails\">QAN</th><th ng-show=showReports>Reports</th></thead><tbody><tr ng-repeat=\"course in courses | orderBy:ctrl.sortOrder | filter : filterParams\"><td ng-show=\"showAll || showId\">{{ course.id }}</td><td><a href=# ui-sref=course-record.view({courseId:course.id})>{{ course.spec }}</a></td><td>{{ course._levelDescription }}</td><td>{{ course._subjectDescription }}</td><td ng-show=\"showAll || showExamBoard\">{{ course._examBoardDescription | notSet }}</td><td ng-show=\"showAll || showYear\">{{ course._validFromCode | notSet }}</td><td ng-show=\"showAll || showYear\">{{ course._validToCode | notSet }}</td><td ng-show=\"showAll || showDetails\">{{ course.learningAimReference | notSet }}</td><td ng-show=showReports><div class=btn-group><button class=\"btn btn-sm btn-default dropdown-toggle\" type=button id=reports-menu data-toggle=dropdown aria-haspopup=true aria-expanded=true>Reports <span class=caret></span></button><ul class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=reports-menu><li><report-link report-path=\"'/CID/TimeTabling/Timetable Course - Column'\" include-year=true report-params=\"'CourseGroupMask=%'+course.spec +'%'\">Timetables Course Column</report-link></li><li><report-link report-path=\"'/CID/TimeTabling/Timetable Course - Square'\" report-params=\"'CourseSpec='+course.spec\">Timetables Course - Square</report-link></li><li><report-link report-path=\"'/CID/Attendance Monitoring/Register between Dates'\" report-params=\"'CourseGroupMask=%'+course.spec+'%'\" include-year=true>Register between Dates</report-link></li></ul></div></td></tr><tr ng-show=\"courses.size() == 0\"><td row-span=0>No Results</td></tr></tbody></table>");
  $templateCache.put("js/directives/current-year-selector/current-year-selector.html",
    "<div class=form-group><label>Year:</label><academic-year-selection class=form-control readonly ng-model=ctrl.currentYear.id></academic-year-selection></div>");
  $templateCache.put("js/directives/departments-editor/views/departments-editor.html",
    "<div class=row><div class=\"col-md-2 col-md-offset-10\"><button type=button class=\"btn btn-sm btn-primary\" ng-click=ctrl.toggleVisibility()>Filters <span class=\"glyphicon glyphicon-chevron-right\" ng-hide=ctrl.visible></span> <span class=\"glyphicon glyphicon-chevron-down\" ng-show=ctrl.visible></span></button> <button ng-show=ctrl.visible class=\"btn btn-sm btn-info\" type=button ng-click=ctrl.resetFilters()>Reset Filters</button></div></div><div class=\"faculty-filters row\" ng-show=ctrl.visible><div class=\"form-group col-sm-12 col-md-3 row\"><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" name=description ng-model=filter.description ng-change=ctrl.applyFilter()></div></div><div class=\"form-group col-sm-12 col-md-3 row\"><label for=facultyDescription class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Faculty</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" name=facultyDescription ng-model=filter._facultyDescription ng-change=ctrl.applyFilter()></div></div></div><table class=\"table table-responsive table-hover\"><thead><th ng-click=\"ctrl.changeSort('description')\">Description <span ng-show=\"ctrl.isSortedAsc('description')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('description')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('_facultyDescription')\">Faculty <span ng-show=\"ctrl.isSortedAsc('_facultyDescription')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('_facultyDescription')\">&#x25B2;</span></th><th>HOD</th><th>HOD2</th><th>Academic</th></thead><tbody><tr ng-repeat=\"department in departments | orderBy: ctrl.sortOrder | filter: ctrl.filterParams \"><td>{{ department.description }}</td><td>{{department._facultyDescription}}</td><td>{{ department.hodId}} - {{ department._hodName}}</td><td>{{ department.hod2Id}} - {{ department._hod2Name}}</td><td>{{ department.academic | yesNo }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editDepartments(department.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addDepartments()><span class=\"glyphicon glyphicon-pencil\"></span> Add</button>");
  $templateCache.put("js/directives/departments-editor/views/departments-editorDialog.html",
    "<form id=departmentsEditForm name=departmentsEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add/Edit Department</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Department ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=id readonly ng-model=ctrl.departments.id></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=id ng-model=ctrl.departments.description></div></div><div class=form-group ng-show=true><label for=facultyId class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Faculty</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><faculty-selection class=form-control include-blank=true id=faculty readonly ng-model=ctrl.departments.facultyId></faculty-selection></div></div><div class=form-group ng-show=true><label for=hodId class=\"col-xs-4 col-sm-4 col-md-4 control-label\">HOD</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><staff-selection class=form-control include-blank=true id=hod readonly ng-model=ctrl.departments.hodId></staff-selection></div></div><div class=form-group ng-show=true><label for=hod2Id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">HOD2</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><staff-selection class=form-control include-blank=true id=hod readonly ng-model=ctrl.departments.hod2Id></staff-selection></div></div><div class=form-group ng-show=true><label for=academic class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Academic</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox class=form-control name=academic ng-model=ctrl.departments.academic></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/enrolment-manager/views/enrolment-manager-button.html",
    "<button class=\"btn btn-primary\" ng-click=ctrl.editEnrolments()>Edit Enrolments</button>");
  $templateCache.put("js/directives/enrolment-manager/views/enrolment-manager-dialog.html",
    "<div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title>Edit Enrolments <span ng-show=ctrl.student>for {{ ctrl.student.person.firstName }}</span></h4></div><div class=modal-body><div class=row><div class=col-md-8><ul class=list-unstyled><li class=row ng-repeat=\"(i, spec) in ctrl.ttCheck.specs track by $index\"><div class=col-md-6><div class=input-group><input id=spec{{$index}} class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.ttCheck.specs[i]><course-spec-validity-lookup class=input-group-addon spec=spec></course-spec-validity-lookup><div class=input-group-addon ng-click=ctrl.removeRequest(spec)><span class=\"glyphicon glyphicon-remove\"></span></div></div></div><course-spec-lookup class=col-md-6 spec=spec></course-spec-lookup></li></ul></div><div class=col-md-4><div>New Request:<div class=input-group><input class=form-control ng-model=ctrl.newRequest ng-keypress=\"($event.which === 13)?ctrl.addRequest(ctrl.newRequest):0\"> <span class=input-group-btn><button class=form-control class=\"btn btn-sm\" ng-click=ctrl.addRequest(ctrl.newRequest)>Add Request</button></span></div></div><div>Programme Size: {{ ctrl.requestCount() }}</div><div>Change Date:<div class=input-group><input class=form-control ng-init=\"changeDatePicker = false\" uib-datepicker-popup=dd/MM/yyyy is-open=changeDatePicker ng-model=ctrl.changeDate> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"changeDatePicker = !changeDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div><div><h4>Validate Programme</h4><button class=\"btn btn-sm btn-primary\" ng-disable=ctrl.loading ng-click=ctrl.check()>Check</button></div></div></div><div class=row><div class=col-md-12 ng-hide=ctrl.loading><uib-pagination ng-show=\"ctrl.totalItems > 0\" total-items=ctrl.totalItems items-per-page=ctrl.size ng-model=ctrl.page max-size=8 boundary-links=true class=pagination-sm></uib-pagination><table class=\"table table-responsive table-stripped\"><thead><th ng-repeat=\"request in ctrl.ttCheck.specs track by $index\">Class {{ $index + 1 }}</th><th>Actions</th></thead><tbody><tr ng-repeat=\"option in ctrl.ttCheck.options\"><td ng-repeat=\"wc in option.courseGroups\">{{ wc.spec }} ({{ wc.currentStudents }})</td><td><button class=\"btn btn-sm btn-success\" ng-click=ctrl.selectOption(option)>Select</button></td></tr></tbody></table></div><div class=col-md-12 ng-show=ctrl.loading>Checking for working combinations. Please wait ...</div></div></div><div class=modal-footer><button type=button class=\"btn btn-warning\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button></div>");
  $templateCache.put("js/directives/enrolments-editor/views/courseChange.html",
    "<div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>{{ ctrl.dialogTitle }}</h4></div><div class=modal-body><course-search on-select=ctrl.selectCourse(course)></course-search><form>Date of Change: <input type=date ng-model=ctrl.dateOfChange></form><div class=debug ng-show=false>{{ ctrl.enrolment }}</div></div><div class=modal-footer><button type=button class=\"btn btn-warning\" aria-hidden=true ng-click=ctrl.cancel()>Cancel</button></div>");
  $templateCache.put("js/directives/enrolments-editor/views/enrolmentEditorDialog.html",
    "<form id=enrolmentEditForm name=enrolmentEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Edit a Enrolment</h4></div><div class=modal-body><div class=row><div class=\"form-group col-sm-12 col-md-6 row\"><label for=field_id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Enrolment ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\">{{ ctrl.enrolment.enrolmentId }}</div></div><div class=\"form-group col-sm-12 col-md-6 row\"><label for=field_courseGroupSpec class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Course Group Spec</label><div class=\"col-xs-8 col-sm-8 col-md-8\">{{ ctrl.enrolment._courseGroupReference }}</div></div></div><div class=row><div class=\"form-group col-sm-12 col-md-6 row\"><label for=field_date class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Start Date</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div class=input-group><input class=form-control ng-init=\"enrolmentStartDatePicker = false\" uib-datepicker-popup=dd/MM/yyyy is-open=enrolmentStartDatePicker ng-model=ctrl.enrolment.startDate> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"enrolmentStartDatePicker = !enrolmentStartDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div><div class=\"form-group col-sm-12 col-md-6 row\"><label for=field_date class=\"col-xs-4 col-sm-4 col-md-4 control-label\">End Date</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div class=input-group><input class=form-control ng-init=\"enrolmentEndDatePicker = false\" uib-datepicker-popup=dd/MM/yyyy is-open=enrolmentEndDatePicker ng-model=ctrl.enrolment.endDate> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"enrolmentEndDatePicker = !enrolmentEndDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div></div><div class=row><div class=\"form-group col-sm-12 col-md-12 row\"><label for=title class=\"col-xs-4 col-sm-4 col-md-2 control-label\">Withdrawal Reason:</label><div class=\"col-xs-8 col-sm-8 col-md-10\"><withdrawal-reason-selection id=withdrawalReason class=form-control include-blank=true ng-model=ctrl.enrolment.withdrawalReasonId></withdrawal-reason-selection></div></div><div class=\"form-group col-sm-12 col-md-12 row\"><label for=title class=\"col-xs-4 col-sm-4 col-md-2 control-label\">Central Monitoring:</label><div class=\"col-xs-8 col-sm-8 col-md-10\"><central-monitoring-selection id=centralMonitoring class=form-control include-blank=true ng-model=ctrl.enrolment.centralMonitoringId></central-monitoring-selection></div></div></div><div class=row><hr></div><h4 class=\"row modal-title\">ILR Fields</h4><div class=row><div class=\"form-group col-sm-12 col-md-6 row\"><label for=preferred class=\"col-xs-4 col-sm-4 col-md-4 control-label\">ILR Returns</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=ilr type=checkbox class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.enrolment.ilr></div></div><div class=\"form-group col-sm-12 col-md-6 row\"><label for=aimType class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Aim Type:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><aim-type-selection id=aimType class=form-control ng-model=ctrl.enrolment.aimTypeId></aim-type-selection></div></div></div><div class=row><div class=\"form-group col-sm-12 col-md-6 row\"><label for=field_date class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Qualification Start Date</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div class=input-group><input class=form-control ng-init=\"qualificationStartDatePicker = false\" uib-datepicker-popup=dd/MM/yyyy is-open=qualificationStartDatePicker ng-model=ctrl.enrolment.qualificationStartDate> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"qualificationStartDatePicker = !qualificationStartDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div><div class=\"form-group col-sm-12 col-md-6 row\"><label for=field_date class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Planned End Date</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div class=input-group><input class=form-control ng-init=\"plannedEndDatePicker = false\" uib-datepicker-popup=dd/MM/yyyy is-open=plannedEndDatePicker ng-model=ctrl.enrolment.plannedEndDate> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"plannedEndDatePicker = !plannedEndDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div></div><div class=row><div class=\"form-group col-sm-12 col-md-6 row\"><label for=completionStatus class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Completion Status:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><completion-status-selection id=completionStatus class=form-control ng-model=ctrl.enrolment.completionStatusId></completion-status-selection></div></div><div class=\"form-group col-sm-12 col-md-6 row\"><label for=outcome class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Outcome:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><outcome-selection id=outcome class=form-control ng-model=ctrl.enrolment.outcomeId></outcome-selection></div></div></div><div class=row><div class=\"form-group col-sm-12 col-md-6 row\"><label for=grade class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Grade</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input ng-model=ctrl.enrolment.grade class=\"form-control text ui-widget-content ui-corner-all\"></div></div></div><div class=row><div class=\"form-group col-sm-12 col-md-6 row\"><label for=plh class=\"col-xs-4 col-sm-4 col-md-4 control-label\" uib-tooltip=\"Planned Learning Hours\">PLH</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input ng-model=ctrl.enrolment.plh class=\"form-control text ui-widget-content ui-corner-all\"></div></div><div class=\"form-group col-sm-12 col-md-6 row\"><label for=peeph class=\"col-xs-4 col-sm-4 col-md-4 control-label\" uib-tooltip=\"Planned Employablility, Enrichment and Pastoral Hours\">PEEPH</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input ng-model=ctrl.enrolment.peeph class=\"form-control text ui-widget-content ui-corner-all\"></div></div></div><div class=row><div class=\"form-group col-sm-12 col-md-6 row\"><label for=fundingModel class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Funding Model:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><funding-model-selection id=fundingModel class=form-control include-blank=true ng-model=ctrl.enrolment.fundingModelId></funding-model-selection></div></div><div class=\"form-group col-sm-12 col-md-6 row\"><label for=title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Source of Funding:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><source-of-funding-selection id=sourceOfFunding class=form-control include-blank=true ng-model=ctrl.enrolment.sourceOfFundingId></source-of-funding-selection></div></div></div><div class=row><div class=\"form-group col-sm-12 col-md-12 row\"><label for=notes class=\"col-xs-4 col-sm-4 col-md-2 control-label\" uib-tooltip=Notes>Notes:</label><div class=\"col-xs-8 col-sm-8 col-md-10\"><textarea class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.enrolment.notes></textarea></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-disabled=\"enrolmentEditForm.$invalid || enrolmentEditForm.$submitted\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/enrolments-editor/views/groupChange.html",
    "<div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>{{ ctrl.dialogTitle }}</h4></div><div class=modal-body>List of available Course Groups:<ul><li ng-repeat=\"courseGroup in ctrl.courseGroupOptions\">{{ courseGroup.spec }} <button class=\"btn btn-default btn-sm\" ng-click=ctrl.selectCourseGroup(courseGroup) ng-hide=\"courseGroup.id == ctrl.enrolment.courseGroupId\">Select</button> <span class=bg-warning ng-show=\"courseGroup.spec == ctrl.enrolment._courseGroupReference\">(Current Group)</span></li></ul><form>Date of Change: <input type=date ng-model=ctrl.dateOfChange></form><div class=debug ng-show=false>{{ ctrl.enrolment }}</div></div><div class=modal-footer><button type=button class=\"btn btn-warning\" aria-hidden=true ng-click=ctrl.cancel()>Cancel</button></div>");
  $templateCache.put("js/directives/enrolments-editor/views/list.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-show=\"showAll || showId\">Enrolment Id</th><th ng-show=\"showAll || showStudent\">Student</th><th ng-show=\"showAll || showYear\">Year</th><th>Course</th><th>Class Code</th><th>Start Date</th><th>End Date</th><th ng-show=showAll>Aim Type</th><th ng-show=\"showAll || showStatus\">Completion Status</th><th ng-show=\"showAll || showOutcome\">Outcome</th><th>Grade</th><th ng-show=\"showAll || showMonitoring\">Entry Status</th><th>Actions</th></thead><tbody><tr ng-repeat=\"enrolment in ctrl.enrolments | orderBy : ['-endDate', '+_courseReference', '-startDate']\"><td ng-show=\"showAll || showId\">{{ enrolment.enrolmentId }}</td><td ng-show=\"showAll || showStudent\">{{ enrolment.studentId }}</td><td ng-show=\"showAll || showYear\">{{ enrolment._academicYearCode }}</td><td>{{ enrolment._courseReference }} - {{ enrolment._levelDescription }} {{ enrolment._subjectDescription }}</td><td>{{ enrolment._courseGroupReference }}</td><td>{{ enrolment.startDate | date:'dd/MM/yyyy' }}</td><td>{{ enrolment.endDate | date:'dd/MM/yyyy' }}</td><td ng-show=showAll>{{ enrolment._aimType.shortDescription }}</td><td ng-show=\"showAll || showStatus\">{{ enrolment._completionStatus.shortDescription }}</td><td ng-show=\"showAll || showOutcome\">{{ enrolment._outcome.shortDescription }}</td><td>{{ enrolment.grade }}</td><td ng-show=\"showAll || showMonitoring\">{{ enrolment._centralMonitoring.description }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editEnrolment(enrolment.enrolmentId)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button> <button class=\"btn btn-default btn-sm\" ng-click=ctrl.withdraw(enrolment) ng-hide=\"enrolment.endDate !== null\" data-toggle=tooltip data-placement=top title=Withdraw>WD</button></td></tr><tr ng-show=\"enrolments.size() == 0\"><td row-span=5>No Results</td></tr></tbody></table>");
  $templateCache.put("js/directives/enrolments-editor/views/withdraw.html",
    "<div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>{{ ctrl.dialogTitle }}</h4></div><div class=modal-body><form><div class=row><div class=col-md-12>Withdraw Student from Course: {{ ctrl.enrolment._courseGroupReference }}</div><div class=form-group><label for=withdrawalDate class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Date of Withdrawal:</label><div class=\"input-group col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input id=withdrawalDate class=form-control name=withdrawalDate ng-model=ctrl.withdrawalDate ng-init=\"withdrawalDatePicker = false\" uib-datepicker-popup=dd/MM/yyyy is-open=withdrawalDatePicker> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"withdrawalDatePicker = !withdrawalDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div><div class=form-group><label for=withdrawalReason class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Withdrawal Reason:</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><withdrawal-reason-selection id=withdrawalReason class=form-control include-blank=true ng-model=ctrl.withdrawalReasonId></withdrawal-reason-selection></div></div></div><div class=row><div class=debug ng-show=ctrl.DEBUG>{{ ctrl.enrolment }}</div></div></form></div><div class=modal-footer><button type=button class=\"btn btn-warning\" aria-hidden=true ng-click=ctrl.cancel()>Cancel</button> <button type=button class=\"btn btn-primary\" aria-hidden=true ng-click=ctrl.save()>Save</button></div>");
  $templateCache.put("js/directives/enrolments-table/enrolmentsTable.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-show=\"showAll || showId\">Enrolment Id</th><th ng-show=\"showAll || showYear\">Year</th><th ng-show=\"showAll || showStudent\">Student ID</th><th ng-show=\"showAll || showStudent\">Student Name</th><th>Course</th><th>Class Code</th><th>Start Date</th><th>End Date</th><th ng-show=showAll>Aim Type</th><th ng-show=\"showAll || showStatus\">Completion Status</th><th ng-show=showAll>Outcome</th><th>Grade</th><th ng-show=\"showAll || showMonitoring\">Entry Status</th></thead><tbody><tr ng-repeat=\"enrolment in enrolments | orderBy:['-endDate', '+startDate']\"><td ng-show=\"showAll || showId\">{{ enrolment.enrolmentId }}</td><td ng-show=\"showAll || showYear\">{{ enrolment._academicYearCode }}</td><td ng-show=\"showAll || showStudent\">{{ enrolment.studentId }}</td><td ng-show=\"showAll || showStudent\">{{ enrolment.student.person.surname }}, {{ enrolment.student.person.preferredName != null ? enrolment.student.person.preferredName : enrolment.student.person.firstName }}</td><td>{{ enrolment._courseReference }} - {{ enrolment._levelDescription }} {{ enrolment._subjectDescription }}</td><td>{{ enrolment._courseGroupReference }}</td><td>{{ enrolment.startDate | date:'dd/MM/yyyy' }}</td><td>{{ enrolment.endDate | date:'dd/MM/yyyy' }}</td><td ng-show=showAll>{{ enrolment._aimType.shortDescription }}</td><td ng-show=\"showAll || showStatus\">{{ enrolment._completionStatus.shortDescription }}</td><td ng-show=showAll>{{ enrolment._outcome.shortDescription }}</td><td>{{ enrolment.grade }}</td><td ng-show=\"showAll || showMonitoring\">{{ enrolment._centralMonitoring.description }}</td></tr><tr ng-show=\"enrolments.size() == 0\"><td row-span=5>No Results</td></tr></tbody></table>");
  $templateCache.put("js/directives/entry-qualification-types-editor/views/entry-qualification-types-editor.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-click=\"ctrl.changeSort('description')\">Description <span ng-show=\"ctrl.isSortedAsc('description')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('description')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('code')\">Code <span ng-show=\"ctrl.isSortedAsc('code')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('code')\">&#x25B2;</span></th></thead><tbody><tr ng-repeat=\"entryQualificationType in entryQualificationTypes |  orderBy:ctrl.sortOrder \"><td>{{ entryQualificationType.description }}</td><td>{{ entryQualificationType.code }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editEntryQualificationTypes(entryQualificationType.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addEntryQualificationTypes()><span class=\"glyphicon glyphicon-pencil\"></span> Add</button>");
  $templateCache.put("js/directives/entry-qualification-types-editor/views/entry-qualification-types-editorDialog.html",
    "<form id=entryQualificationTypesEditForm name=entryQualificationTypesEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add/Edit Entry Qualification Type</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Entry Qualification Type ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=id readonly ng-model=ctrl.entryQualificationTypes.id></div></div><div class=form-group ng-show=true><label for=code class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Code</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=id ng-model=ctrl.entryQualificationTypes.code></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.entryQualificationTypes.description></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/entry-qualifications-editor/views/entry-qualifications-editor.html",
    "<div class=row><div class=\"col-md-2 col-md-offset-10\"><button type=button class=\"btn btn-sm btn-primary\" ng-click=ctrl.toggleVisibility()>Filters <span class=\"glyphicon glyphicon-chevron-right\" ng-hide=ctrl.visible></span> <span class=\"glyphicon glyphicon-chevron-down\" ng-show=ctrl.visible></span></button> <button ng-show=ctrl.visible class=\"btn btn-sm btn-info\" type=button ng-click=ctrl.resetFilters()>Reset Filters</button></div></div><div class=\"periods-filters row\" ng-show=ctrl.visible><div class=\"form-group col-sm-12 col-md-3 row\"><label for=period class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Entry Qualification Type</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input ng-model=filter._entryQualificationTypeDescription class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div><div class=\"form-group col-sm-12 col-md-3 row\"><label for=title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Title</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input ng-model=filter.title class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div></div><table class=\"table table-hover\"><thead><th>Entry Qualification Type</th><th ng-click=\"ctrl.changeSort('title')\">Title <span ng-show=\"ctrl.isSortedAsc('title')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('title')\">&#x25B2;</span></th><th>Short Course</th><th ng-click=\"ctrl.changeSort('dataMatchCode')\">Data Match Code <span ng-show=\"ctrl.isSortedAsc('dataMatchCode')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('dataMatchCode')\">&#x25B2;</span></th><th>WebLinkCode</th><th>BasicList</th></thead><tbody><tr ng-repeat=\"entryQualification in entryQualifications |  orderBy:ctrl.sortOrder  | filter: ctrl.filterParams\"><td>{{ entryQualification._entryQualificationTypeDescription }}</td><td>{{ entryQualification.title }}</td><td>{{ entryQualification.shortCourse | yesNo }}</td><td>{{ entryQualification.dataMatchCode }}</td><td>{{ entryQualification.webLinkCode }}</td><td>{{ entryQualification.basicList | yesNo }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editEntryQualifications(entryQualification.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addEntryQualifications()><span class=\"glyphicon glyphicon-pencil\"></span> Add</button>");
  $templateCache.put("js/directives/entry-qualifications-editor/views/entry-qualifications-editorDialog.html",
    "<form id=entryQualificationsEditForm name=entryQualificationsEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add/Edit EntryQualification</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Entry Qualification ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=id readonly ng-model=ctrl.entryQualifications.id></div></div><div class=form-group ng-show=true><label for=dataMatchCode class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Data Match Code</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=dataMatchCode ng-model=ctrl.entryQualifications.dataMatchCode></div></div><div class=form-group ng-show=true><label for=title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Title</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=title ng-model=ctrl.entryQualifications.title></div></div><div class=form-group ng-show=true><label for=basicList class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Basic List:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.entryQualifications.basicList></div></div><div class=form-group ng-show=true><label for=shortCourse class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Short Course:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.entryQualifications.shortCourse></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/exam-results-editor/views/exam-results-editor.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-show=\"showAll || showStudent\">Student</th><th ng-show=\"showAll || showYear\">Year</th><th>Candidate No</th><th ng-show=\"showAll || showBoard\">Board Identifier</th><th ng-show=\"showAll || showBoard\">Board Name</th><th ng-show=\"showAll || showSeries\">Exam Series</th><th ng-show=\"showAll || showSeries\">Exam Year</th><th>Code</th><th>Exam Option</th><th>Score</th><th>Grade</th></thead><tbody><tr ng-repeat=\"result in results | orderBy:['-_academicYearCode','-examYear','-examSeries','+_boardName']\"><td ng-show=\"showAll || showStudent\">{{ result.studentId }}</td><td ng-show=\"showAll || showYear\">{{ result._academicYearCode }}</td><td>{{ result.candidateNo }}</td><td ng-show=\"showAll || showBoard\">{{ result.boardIdentifier }}</td><td ng-show=\"showAll || showBoard\">{{ result._boardName }}</td><td ng-show=\"showAll || showSeries\">{{ result.examSeries }}</td><td ng-show=\"showAll || showSeries\">{{ result.examYear }}</td><td>{{ result.resultCode }}</td><td>{{ result._examOptionTitle }}</td><td>{{ result.score }}</td><td>{{ result.grade}}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editExamResults(result.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table>");
  $templateCache.put("js/directives/exam-results-editor/views/exam-results-editorDialog.html",
    "<form id=examResultsEditForm name=examResultsEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Edit Exam Result - {{ctrl.examResults.studentId}}</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=candidateNo class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Candidate No:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=id readonly ng-model=ctrl.examResults.candidateNo></div></div><div class=form-group ng-show=true><label for=boardIdentifier class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Board Identifier:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" name=boardIdentifier readonly ng-model=ctrl.examResults.boardIdentifier></div></div><div class=form-group><label for=resultCode class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Result Code</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" name=resultCode readonly ng-model=ctrl.examResults.resultCode></div></div><div class=form-group><label for=examSeries class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Exam Series</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" name=examSeries readonly ng-model=ctrl.examResults.examSeries></div></div><div class=form-group><label for=examYear class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Exam Year</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" name=examYear readonly ng-model=ctrl.examResults.examYear></div></div><div class=form-group><label for=score class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Score:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" name=score ng-model=ctrl.examResults.score></div></div><div class=form-group><label for=grade class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Grade:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" name=grade ng-model=ctrl.examResults.grade></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/exam-results-table/exam-results-table.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-show=\"showAll || showStudent\">Student</th><th ng-show=\"showAll || showYear\">Year</th><th>Candidate No</th><th ng-show=\"showAll || showBoard\">Board Identifier</th><th ng-show=\"showAll || showBoard\">Board Name</th><th ng-show=\"showAll || showSeries\">Exam Series</th><th ng-show=\"showAll || showSeries\">Exam Year</th><th>Code</th><th>Exam Option</th><th>Score</th><th>Grade</th></thead><tbody><tr ng-repeat=\"result in results | orderBy:['-_academicYearCode','-examYear','-examSeries','+_boardName']\"><td ng-show=\"showAll || showStudent\">{{ result.studentId }}</td><td ng-show=\"showAll || showYear\">{{ result._academicYearCode }}</td><td>{{ result.candidateNo }}</td><td ng-show=\"showAll || showBoard\">{{ result.boardIdentifier }}</td><td ng-show=\"showAll || showBoard\">{{ result._boardName }}</td><td ng-show=\"showAll || showSeries\">{{ result.examSeries }}</td><td ng-show=\"showAll || showSeries\">{{ result.examYear }}</td><td>{{ result.resultCode }}</td><td>{{ result._examOptionTitle }}</td><td>{{ result.score }}</td><td>{{ result.grade }}</td></tr><tr ng-show=\"results.size() == 0\"><td row-span=5>No Results</td></tr></tbody></table>");
  $templateCache.put("js/directives/exams/base-data-edit-buttons/views/base-data-edit-buttons.html",
    "<div ng-init=ctrl.init()><button id=add-button ng-show=ctrl.visible class=\"btn btn-primary btn-sm\" ng-click=ctrl.addCallback() uib-tooltip=\"{{ ctrl.addTooltip }}\"><span class=\"glyphicon glyphicon-pencil\"></span> Add</button> <button id=edit-button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editCallback() uib-tooltip=\"{{ ctrl.editTooltip }}\"><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></div>");
  $templateCache.put("js/directives/exams/checkBox/checkBox.html",
    "<td><div><input type=checkbox ng-model=examComponentCheckBox ng-click=callChangeSelected()></div></td>");
  $templateCache.put("js/directives/exams/componentTable/componentTable.html",
    "<table class=\"table table-responsive\"><tbody><tr ng-repeat=\"component in componentList\" class=ng-cloak><td>{{component.code}}</td><td>{{component.title}}</td><td><ng-transclude></ng-transclude></td></tr></tbody></table>");
  $templateCache.put("js/directives/exams/course-enrolment-table/courseEnrolmentTable.html",
    "<table class=table><tbody><tr ng-repeat=\"student in group.studentList\"><td>{{ student.id }}</td><td>{{ student.person.firstName }}</td><td>{{ student.person.surname }}</td><td><input type=checkbox ng-model=student._selected></td></tr></tbody></table>");
  $templateCache.put("js/directives/exams/courseExam/courseExam.html",
    "<td><div><input type=checkbox ng-model=courseExamCheckBox ng-click=checkBoxChanged()></div></td>");
  $templateCache.put("js/directives/exams/exam-course-table/views/exam-course-table.html",
    "<div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=cancel()>&times;</button><h3 class=modal-title>Select Custom/Internal Exam Students</h3></div><div class=modal-body><table class=table><tbody><tr><td colspan=4>Select All</td><td><input type=checkbox ng-model=groups._selected indeterminate-checkbox child-list=groups.groupList property=_selected></td></tr><tr ng-repeat-start=\"group in groups.groupList\" class=ng-cloak><td><div ng-init=\"group._expanded=false\"><expand visible expandable=true expanded=group._expanded></expand></div></td><td>{{ group._courseGroupReference }}</td><td>{{ group._levelDescription }}</td><td>{{ group._subjectDescription }}</td><td></td><td><input type=checkbox ng-model=group._selected indeterminate-checkbox child-list=group.studentList property=_selected></td></tr><tr ng-if=group._expanded ng-repeat-end><td colspan=5><course-enrolment-table group=group></course-enrolment-table></td></tr></tbody></table></div><div class=modal-footer><button class=\"btn btn-primary\" type=button ng-click=save()>Save</button> <button class=\"btn btn-warning\" type=button ng-click=cancel()>Cancel</button></div>");
  $templateCache.put("js/directives/exams/exam-series-table/views/exam-series-table.html",
    "<table id=examSeriesTable class=table><thead><tr><th>Board Identifier</th><th>Board Code</th><th>Board Name</th><th>Description</th><th>Year</th><th>Series</th><th>Actions</th></tr></thead><tbody><tr ng-repeat=\"examSeries in examSeriesList | filter:ctrl.filterParams\" class=ng-cloak ng-init=ctrl.callGetIndex(examSeries)><td>{{ examSeries.examBoard.boardIdentifier }}</td><td>{{ examSeries.examBoard.boardCode }}</td><td>{{ examSeries.examBoard.name }}</td><td>{{ examSeries.examBoard.description }}</td><td>{{ examSeries.examYear }}</td><td>{{ examSeries.examSeries }}</td><td><ng-transclude></ng-transclude></td></tr></tbody></table>");
  $templateCache.put("js/directives/exams/examBoardTable/examBoardTable.html",
    "<div><table id=examBoardTable class=table><thead><tr><th>Board Identifier</th><th>Board Code</th><th>Board Name</th><th>Description</th><th>Telephone No</th><th>Actions</th></tr></thead><tbody><tr ng-repeat=\"examBoard in examBoardList\" class=ng-cloak><td>{{ examBoard.boardIdentifier }}</td><td>{{ examBoard.boardCode }}</td><td>{{ examBoard.boardName }}</td><td>{{ examBoard.description }}</td><td>{{ examBoard.telephoneNo }}</td><td><ng-transclude></ng-transclude></td></tr></tbody></table></div>");
  $templateCache.put("js/directives/exams/examSeriesCheckBox/examSeriesCheckBox.html",
    "<td><div><input type=checkbox ng-model=examSeriesCheckBox ng-click=callChangeSelected()></div></td>");
  $templateCache.put("js/directives/exams/lookups/examSession/examSession.lookup.html",
    "<span>{{ examSession }}</span>");
  $templateCache.put("js/directives/exams/lookups/room/room.lookup.html",
    "<span>{{ room }}</span>");
  $templateCache.put("js/directives/exams/optionTable/optionTable.html",
    "<table class=\"table table-responsive\" ng-init=\"ctrl.getOptionsForSyllabus($index, syllabus.syllabusId)\"><tbody><tr ng-repeat-start=\"option in ctrl.optionList\" class=ng-cloak ng-init=\"option._expanded = false\"><td><div ng-init=\"option._expanded = false\"><expand visible expandable=expandable expanded=option._expanded></expand></div></td><td>{{ option.optionEntryCode }}</td><td>{{ option.optionTitle }}</td><td><ng-transclude></ng-transclude></td></tr><tr ng-if=\"option._expanded || expandable == false\" ng-repeat-end=\"\"><td colspan=4><table class=\"table table-responsive\"><tbody><tr ng-repeat=\"component in option.examComponentsDto\" class=ng-cloak><td>{{component.code}}</td><td>{{component.title}}</td><td><ng-transclude></ng-transclude></td></tr></tbody></table></td></tr></tbody></table>");
  $templateCache.put("js/directives/exams/seatingPlanSeat/seatingPlanSeat.html",
    "<div><div><button type=button class=close aria-hidden=true ng-click=callback(student) uib-tooltip-template=\"'/js/directives/exams/seatingPlanSeat/seatingPlanSeatCloseButtonTooltip.html'\" tooltip-placement=left>&times;</button><div layout=row><div class=\"col-sm-2 col-md-2 col-lg-2\">{{student.label}}</div><div class=\"col-sm-6-col-md-6 col-lg-6\">{{student.student[0]._candidateNo}}</div></div><div layout=row><div class=\"col-sm-6 col-md-6 col-lg-6\" ng-show=student.student[0]._surname>{{student.student[0]._surname + ', ' + student.student[0]._firstName}}</div><div class=\"col-sm-6-col-md-6 col-lg-6\">{{student.student[0]._examComponentCode}}</div></div></div></div>");
  $templateCache.put("js/directives/exams/seatingPlanSeat/seatingPlanSeatCloseButtonTooltip.html",
    "<div><div ng-switch=student.student[0].studentId><div ng-switch-when=null><div ng-switch=student.blocked><div ng-switch-when=true><p>Unblock seat</p></div><div ng-switch-default><p>Block out seat</p></div></div></div><div ng-switch-default><p>Remove student from seat</p></div></div></div>");
  $templateCache.put("js/directives/exams/seatingPlanStudent/seatingPlanStudent.html",
    "<div layout=row><div class=col-sm-4><p layout=row>{{student._candidateNo}}</p><p layout=row>{{student._surname}}</p><p layout=row>{{student._firstName}}</p></div><div class=col-sm-8><div layout=row>{{student._examComponentCode}}</div><div layout=row>{{student._examComponentTitle | limitTo: 12}}</div><div ng-if=\"student.examRoomId != null\" layout=row><div class=col-sm-3>{{student._examRoomRoomCode}}</div><div class=col-sm-6 ng-if=\"displayOptions.roomDescription === true\">{{student._examRoomRoomDescription | limitTo: 6}}</div><div class=col-sm-3>{{student.label}}</div></div></div></div><div layout=row ng-show=\"student._concessions.length > 0 && displayOptions.studentConcessions === true\"><div class=col-sm-12><div ng-repeat=\"concession in student._concessions\"><p>{{concession._concessionDescription}}</p></div></div></div>");
  $templateCache.put("js/directives/exams/studentExamTable/studentExamTable.html",
    "<table class=\"table table-responsive\"><tbody><tr ng-repeat=\"student in studentList\" class=ng-cloak><td>{{student.studentId}}</td><td><ng-transclude></ng-transclude></td></tr></tbody></table>");
  $templateCache.put("js/directives/exams/syllabus-table/views/syllabus-table.html",
    "<div><table id=basedataTable class=table><thead><tr><th></th><th>Exam Year</th><th>Exam Series</th><th colspan=2>Exam Board</th><th ng-if=ctrl.pageable ng-click=\"ctrl.setSort('code');\"><a href>Code <span ng-show=\"ctrl.paginationInfo.sort=='code'\"><span ng-show=!ctrl.orderReverse class=\"glyphicon glyphicon-triangle-top\"></span> <span ng-show=ctrl.orderReverse class=\"glyphicon glyphicon-triangle-bottom\"></span></span></a></th><th ng-if=ctrl.pageable ng-click=\"ctrl.setSort('title');\"><a href>Title <span ng-show=\"ctrl.paginationInfo.sort=='title'\"><span ng-show=!ctrl.orderReverse class=\"glyphicon glyphicon-triangle-top\"></span> <span ng-show=ctrl.orderReverse class=\"glyphicon glyphicon-triangle-bottom\"></span></span></a></th><th></th></tr></thead><tbody><tr ng-repeat-start=\"syllabus in ctrl.syllabusList\n" +
    "            | filter:filterParams\n" +
    "            | orderBy:ctrl.paginationInfo.order\n" +
    "            | limitTo:ctrl.paginationInfo.pageSize:ctrl.paginationInfo.startItem\" class=ng-cloak><td><div ng-init=\"syllabus._expanded = false\"><expand visible expandable=ctrl.expandable expanded=syllabus._expanded></expand></div></td><td>{{ syllabus.examSeries.examYear }}</td><td>{{ syllabus.examSeries.examSeries }}</td><td>{{ syllabus.examSeries.examBoard.boardIdentifier }}</td><td>{{ syllabus.examSeries.examBoard.description }}</td><td ng-show=syllabus.code>{{ syllabus.code }}</td><td ng-show=syllabus.title>{{ syllabus.title }}</td><td><ng-transclude></ng-transclude></td></tr><tr ng-if=\"(syllabus._expanded) || (ctrl.expandable == false)\" ng-repeat-end=\"\"><td colspan=8><option-table syllabus-id=syllabus.id expandable=ctrl.expandable><ng-transclude></ng-transclude></option-table></td></tr></tbody></table><div ng-if=(ctrl.pageable)><div class=\"col-xs-8 col-sm-8 col-md-8\"><ul uib-pagination boundary-links=true boundary-link-numbers=true force-ellipses=false direction-links=false rotate=true items-per-page=ctrl.paginationInfo.pageSize max-size=ctrl.paginationInfo.maxSize total-items=ctrl.paginationInfo.totalItems ng-model=ctrl.paginationInfo.pageNumber ng-change=ctrl.pageChanged() class=pagination-sm></ul></div><div class=\"col-xs-4 col-sm-4 col-md-4\"><label for=num-items-per-page class=\"col-xs-5 col-sm-5 col-md-5 control-label\">Syllabi per page</label><div class=\"col-xs-2 col-sm-2 col-md-2\"><select id=num-items-per-page class=\"form-control ui-widget-content ui-corner-all\" ng-model=ctrl.paginationInfo.pageSize ng-change=ctrl.pageChanged()><option ng-value=10>10</option><option ng-value=25>25</option><option ng-value=40>40</option></select></div></div></div></div>");
  $templateCache.put("js/directives/expand/expand.html",
    "<div ng-if=\"visible > 0\"><button ng-if=\"expanded && expandable\" ng-click=collapse() class=\"btn btn-default btn-sm\"><span class=\"glyphicon glyphicon-minus\"></span></button> <button ng-if=\"!expanded && expandable\" ng-click=expand() class=\"btn btn-default btn-sm\"><span class=\"glyphicon glyphicon-plus\"></span></button></div>");
  $templateCache.put("js/directives/external-results-archive-table/external-results-archive-table.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-show=\"showAll || showStudent\">Student</th><th>Course Spec</th><th>Level</th><th>Subject</th><th>Syllabus</th><th>Grade</th><th>Mark</th><th>Max Mark</th><th>Date Achieved</th></thead><tbody><tr ng-repeat=\"externalResult in externalResultsArchive | orderBy:['-dateAchieved']\"><td ng-show=\"showAll || showStudent\">{{ externalResult.studentId }}</td><td>{{ externalResult.courseSpec }}</td><td>{{ externalResult.levelDescription}}</td><td>{{ externalResult.subjectDescription }}</td><td>{{ externalResult.syllabus }}</td><td>{{ externalResult.grade }}</td><td>{{ externalResult.mark }}</td><td>{{ externalResult.maxMark }}</td><td>{{ externalResult.dateAchieved | date:'dd/MM/yyyy' }}</td></tr></tbody></table>");
  $templateCache.put("js/directives/faculties-editor/views/faculties-editor.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-click=\"ctrl.changeSort('code')\">Code <span ng-show=\"ctrl.isSortedAsc('code')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('code')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('description')\">Description <span ng-show=\"ctrl.isSortedAsc('description')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('description')\">&#x25B2;</span></th><th class=text-center><span uib-tooltip=\"Head Of Faculty\">HoF</span></th><th class=text-center><span uib-tooltip=\"Pastoral Director\">PD</span></th><th class=text-center><span uib-tooltip=\"Associate Pastoral Director\">APD</span></th><th class=text-center><span uib-tooltip=\"Director of Learning\">DoL</span></th><th class=text-center><span uib-tooltip=\"Associate Director of Learning\">ADoL</span></th><th>Valid From</th><th>Valid To</th></thead><tbody><tr ng-repeat=\"faculty in faculties | orderBy : ctrl.sortOrder\"><td>{{ faculty.code }}</td><td>{{ faculty.description }}</td><td class=text-center><span uib-tooltip={{faculty._hofName}}>{{ faculty._hofInitials }}</span></td><td class=text-center><span uib-tooltip={{faculty._pdName}}>{{ faculty._pdInitials }}</span></td><td class=text-center><span uib-tooltip={{faculty._apdName}}>{{ faculty._apdInitials }}</span></td><td class=text-center><span uib-tooltip={{faculty._dolName}}>{{ faculty._dolInitials }}</span></td><td class=text-center><span uib-tooltip={{faculty._adolName}}>{{ faculty._adolInitials }}</span></td><td>{{ faculty.validFrom | date:'dd/MM/yyyy'}}</td><td>{{ faculty.validTo | date:'dd/MM/yyyy'}}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editFaculties(faculty.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addFaculties()><span class=\"glyphicon glyphicon-pencil\"></span> Add</button>");
  $templateCache.put("js/directives/faculties-editor/views/faculties-editorDialog.html",
    "<form id=facultiesEditForm name=facultiesEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add/Edit Faculty</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Faculty ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=id readonly ng-model=ctrl.faculties.id></div></div><div class=form-group ng-show=true><label for=code class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Code</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=id ng-model=ctrl.faculties.code></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.faculties.description></div></div><div class=form-group ng-show=true><label for=validFrom class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Valid From:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div class=input-group><input class=form-control ng-init=\"validFrom = false\" uib-datepicker-popup=dd/MM/yyyy is-open=validFrom ng-model=ctrl.faculties.validFrom> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"validFrom = !validFrom\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div><div class=form-group ng-show=true><label for=validTo class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Valid To:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div class=input-group><input class=form-control ng-init=\"validTo = false\" uib-datepicker-popup=dd/MM/yyyy is-open=validTo ng-model=ctrl.faculties.validTo> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"validTo = !validTo\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Head Of Faculty</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><staff-selection id=hofId class=form-control include-blank=true ng-model=ctrl.faculties.hofId readonly></staff-selection></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Pastoral Director</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><staff-selection id=pdId class=form-control include-blank=true ng-model=ctrl.faculties.pdId readonly></staff-selection></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Associate Pastoral Director</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><staff-selection id=apdId class=form-control include-blank=true ng-model=ctrl.faculties.apdId readonly></staff-selection></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Director of Learning</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><staff-selection id=dolId class=form-control include-blank=true ng-model=ctrl.faculties.dolId readonly></staff-selection></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Associate Director of Learning</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><staff-selection id=adolId class=form-control include-blank=true ng-model=ctrl.faculties.adolId readonly></staff-selection></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/holidays-editor/views/holidays-editor.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-click=\"ctrl.changeSort('description')\">Description <span ng-show=\"ctrl.isSortedAsc('description')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('description')\">&#x25B2;</span></th><th>Start Date</th><th>End Date</th><th>Half Term</th></thead><tbody><tr ng-repeat=\"holiday in holidays | orderBy : ctrl.sortOrder\"><td>{{ holiday.description }}</td><td>{{ holiday.startDate | date:'dd/MM/yyyy'}}</td><td>{{ holiday.endDate | date:'dd/MM/yyyy'}}</td><td>{{ holiday.halfTerm | yesNo }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editHolidays(holiday.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addHolidays()><span class=\"glyphicon glyphicon-pencil\"></span> Add</button>");
  $templateCache.put("js/directives/holidays-editor/views/holidays-editorDialog.html",
    "<form id=holidaysEditForm name=holidaysEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add/Edit Holiday</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Holiday ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=id readonly ng-model=ctrl.holidays.id></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.holidays.description></div></div><div class=form-group><label for=startDate class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Start Date</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div class=input-group><input class=form-control ng-init=\"holidayStartDatePicker = false\" uib-datepicker-popup=dd/MM/yyyy is-open=holidayStartDatePicker ng-model=ctrl.holidays.startDate> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"holidayStartDatePicker = !holidayStartDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div><div class=form-group><label for=endDate class=\"col-xs-4 col-sm-4 col-md-4 control-label\">End Date</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div class=input-group><input class=form-control ng-init=\"holidayEndDatePicker = false\" uib-datepicker-popup=dd/MM/yyyy is-open=holidayEndDatePicker ng-model=ctrl.holidays.endDate> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"holidayEndDatePicker = !holidayEndDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div><div class=form-group><label for=halfTerm class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Half Term</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.holidays.halfTerm></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/identification-violation-editor/views/identification-violation-editor-dialog.html",
    "<form id=identificationViolationEditForm name=identificationViolationEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add/Edit Subject</h4></div><div class=modal-body><div class=row><div class=form-group><label for=date class=\"col-xs-4 control-label\">Date</label><div class=col-xs-8><div class=input-group><input id=date class=form-control is-open=date uib-datepicker-popup=dd/MM/yyyy name=date ng-model=ctrl.identificationViolation.date> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"date = !date\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div><div class=form-group><label for=returned class=\"col-xs-4 control-label\">Returned:</label><div class=col-xs-8><input type=checkbox class=\"form-control text ui-widget-content ui-corner-all\" name=returned ng-model=ctrl.identificationViolation.returned></div></div><div class=form-group><label for=lost class=\"col-xs-4 control-label\">ID Lost:</label><div class=col-xs-8><input type=checkbox class=\"form-control text ui-widget-content ui-corner-all\" name=lost ng-model=ctrl.identificationViolation.lost></div></div><div class=form-group><label for=printed class=\"col-xs-4 control-label\">Printed:</label><div class=col-xs-8><input type=checkbox class=\"form-control text ui-widget-content ui-corner-all\" name=printed ng-model=ctrl.identificationViolation.printed></div></div><div class=form-group><label for=id_number class=\"col-xs-4 control-label\">ID Number:</label><div class=col-xs-8><input class=\"form-control text ui-widget-content ui-corner-all\" name=id_number ng-model=ctrl.identificationViolation.id_number></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/identification-violation-editor/views/identification-violation-editor.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-click=\"ctrl.changeSort('studentId')\">Student ID <span ng-show=\"ctrl.isSortedAsc('studentId')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('studentId')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('date')\">Date <span ng-show=\"ctrl.isSortedAsc('date')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('date')\">&#x25B2;</span></th><th class=text-center>Returned</th><th class=text-center>ID Lost</th><th class=text-center>Printed</th><th class=text-center>ID Number</th><th>Actions</th></thead><tbody><tr ng-repeat=\"idViolation in identificationViolations | orderBy : ctrl.sortOrder\"><td>{{ idViolation.studentId }}</td><td>{{ idViolation.date | date:'dd/MM/yyyy' }}</td><td class=text-center>{{ idViolation.returned | yesNo }}</td><td class=text-center>{{ idViolation.lost | yesNo }}</td><td class=text-center>{{ idViolation.printed | yesNo }}</td><td class=text-center>{{ idViolation.id_number }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editIdentificationViolation(idViolation.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button> <button type=button class=\"btn btn-danger btn-sm\" ng-click=ctrl.deleteIdentificationViolation(idViolation.id)><span class=\"glyphicon glyphicon-trash\"></span> Delete</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addIdentificationViolation()><span class=\"glyphicon glyphicon-pencil\"></span> Add</button>");
  $templateCache.put("js/directives/ilpInterviewsTable/ilpInterviewsTable.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-show=showAll>Student ID</th><th>Interview Type</th><th ng-show=\"showAll || showCourse\">Course Spec</th><th ng-show=\"showAll || showCourse\">Course</th><th ng-show=\"showAll || showCourseGroup\">Course Group Spec</th><th>Discussion</th><th ng-show=\"showAll || showTargets\">Target</th><th ng-show=\"showAll || showTargets\">Deadline</th><th ng-show=\"showAll || showStaff\">Staff</th><th>Interview Date</th><th ng-show=showAll>Interview Time</th><th ng-show=\"showAll || showLip\">Refer Lip</th><th ng-show=\"showAll || showLip\">LIP Refer Date</th><th ng-show=\"showAll || showLetterHome\">Letter Home</th></thead><tbody><tr ng-repeat=\"ilpInterview in ilpInterviews | orderBy:'-interviewDate' | filter:interviewFilter\"><td ng-show=showAll>{{ ilpInterview.studentId }}</td><td>{{ ilpInterview._ilpInterviewTypeDescription}}</td><td ng-show=\"showAll || showCourse\">{{ ilpInterview._courseSpec }}</td><td ng-show=\"showAll || showCourse\">{{ ilpInterview._courseDescription }}</td><td ng-show=\"showAll || showCourseGroup\">{{ ilpInterview._courseGroupSpec }}</td><td>{{ ilpInterview.discussion }}</td><td ng-show=\"showAll || showTargets\">{{ ilpInterview.target }}</td><td ng-show=\"showAll || showTargets\">{{ ilpInterview.targetByWhen | notSet }}</td><td ng-show=\"showAll || showStaff\">{{ ilpInterview._staffName }}</td><td>{{ ilpInterview.interviewDate | date:'dd/MM/yyyy' }}</td><td ng-show=showAll>{{ ilpInterview.interviewTime }}</td><td ng-show=\"showAll || showLip\">{{ ilpInterview.referLip }}</td><td ng-show=\"showAll || showLip\">{{ ilpInterview.lipReferDate | date:'dd/MM/yyyy' }}</td><td ng-show=\"showAll || showLetterHome\">{{ ilpInterview._letterSentHome | yesNo }}</td></tr></tbody></table>");
  $templateCache.put("js/directives/letter-template-editor/views/letter-template-editor.html",
    "<table class=\"table table-responsive table-hover\"><thead><th>Name</th><th>Description</th><th>Template Text</th><th>In Use</th></thead><tbody><tr ng-repeat=\"letterTemplate in letterTemplates\"><td>{{ letterTemplate.name }}</td><td>{{ letterTemplate.description }}</td><td>{{ letterTemplate.templateText }}</td><td>{{ letterTemplate.inUse | yesNo}}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editLetterTemplate(letterTemplate.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addLetterTemplate()><span class=\"glyphicon glyphicon-pencil\"></span> Add</button>");
  $templateCache.put("js/directives/letter-template-editor/views/letter-template-editorDialog.html",
    "<form id=letterTemplateEditForm name=letterTemplateEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Edit Letter Template</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=name class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Name</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=name class=form-control name=id ng-model=ctrl.letterTemplate.name></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=description class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.letterTemplate.description></div></div><div class=form-group><label for=templateText class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Template Text</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><textarea id=templateText type=text class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.letterTemplate.templateText ckeditor></textarea></div></div><div class=form-group><label for=inUse class=\"col-xs-4 col-sm-4 col-md-4 control-label\">In Use</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=inUse type=checkbox class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.letterTemplate.inUse></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/levels-editor/views/levels-editor.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-click=\"ctrl.changeSort('code')\">Code <span ng-show=\"ctrl.isSortedAsc('code')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('code')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('description')\">Description <span ng-show=\"ctrl.isSortedAsc('description')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('description')\">&#x25B2;</span></th></thead><tbody><tr ng-repeat=\"level in levels | orderBy : ctrl.sortOrder\"><td>{{ level.code }}</td><td>{{ level.description }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editLevels(level.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addLevels()><span class=\"glyphicon glyphicon-pencil\"></span> Add</button>");
  $templateCache.put("js/directives/levels-editor/views/levels-editorDialog.html",
    "<form id=levelsEditForm name=levelsEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add/Edit Level</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Level ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=id class=form-control name=id readonly ng-model=ctrl.levels.id></div></div><div class=form-group ng-show=true><label for=code class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Code</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=code class=form-control name=id ng-model=ctrl.levels.code></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=description class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.levels.description></div></div><div class=form-group ng-show=true><label for=possibleGradeSet class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Possible Grade Set</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><possible-grade-set-selection id=possibleGradeSet class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.levels.possibleGradeSetId></possible-grade-set-selection></div></div><div class=form-group ng-show=true><label for=progressionTo class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Progression To:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><select id=progressionTo class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.levels.progressionTo><option value=\"\">NULL</option><option ng-selected=ctrl.levels.progressionTo ng-value=\"{{ ctrl.levels.progressionTo }}\" value=\"{{ ctrl.levels.progressionTo }}\">{{ ctrl.levels.progressionTo }}</option></select></div></div><div class=form-group ng-show=true><label for=alisQualCode class=\"col-xs-4 col-sm-4 col-md-4 control-label\">ALIS Qualification Code:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=alisQualCode class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.levels.alisQualCode></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/lookups/academicYear/academic-year.lookup.html",
    "<span>{{ academicYear }}</span>");
  $templateCache.put("js/directives/lookups/address/address.lookup.html",
    "<div class=address-details><div><div>{{ address.line1 }}</div><div>{{ address.line2 }}</div><div>{{ address.line3 }}</div><div>{{ address.line4 }}</div><div>{{ address.postcode }}</div></div></div>");
  $templateCache.put("js/directives/lookups/aimType/aim-type.lookup.html",
    "<span>{{ aimType }}</span>");
  $templateCache.put("js/directives/lookups/applicationStatus/application-status.lookup.html",
    "<span>{{ applicationStatus }}</span>");
  $templateCache.put("js/directives/lookups/attendanceCode/attendance-code.lookup.html",
    "<span>{{ attendanceCode }}</span>");
  $templateCache.put("js/directives/lookups/collegeFundPaid/college-fund-paid.lookup.html",
    "<span>{{ collegeFundPaid }}</span>");
  $templateCache.put("js/directives/lookups/completionStatus/completion-status.lookup.html",
    "<span>{{ completionStatus }}</span>");
  $templateCache.put("js/directives/lookups/contactType/contact-type.lookup.html",
    "<span>{{ contactType }}</span>");
  $templateCache.put("js/directives/lookups/correspondenceType/correspondence-type.lookup.html",
    "<span>{{ correspondenceType }}</span>");
  $templateCache.put("js/directives/lookups/course-spec-validity/course-spec-validity.lookup.html",
    "<span class=\"glyphicon glyphicon-ok alert-success\" ng-show=valid>Valid</span> <span class=\"glyphicon glyphicon-remove alert-danger\" ng-hide=valid>Invalid</span>");
  $templateCache.put("js/directives/lookups/department/department.lookup.html",
    "<span>{{ department }}</span>");
  $templateCache.put("js/directives/lookups/entryQualification/entry-qualification.lookup.html",
    "<span>{{ entryQualification }}</span>");
  $templateCache.put("js/directives/lookups/entryQualificationType/entry-qualification-type.lookup.html",
    "<span>{{ entryQualificationType }}</span>");
  $templateCache.put("js/directives/lookups/ethnicity/ethnicity.lookup.html",
    "<span>{{ ethnicity }}</span>");
  $templateCache.put("js/directives/lookups/examBoard/exam-board.lookup.html",
    "<span>{{ examBoard }}</span>");
  $templateCache.put("js/directives/lookups/fundingModel/funding-model.lookup.html",
    "<span>{{ fundingModel }}</span>");
  $templateCache.put("js/directives/lookups/gender/gender.lookup.html",
    "<span>{{ gender }}</span>");
  $templateCache.put("js/directives/lookups/letterType/letter-type.lookup.html",
    "<span>{{ letterType }}</span>");
  $templateCache.put("js/directives/lookups/level/level.lookup.html",
    "<span>{{ level }}</span>");
  $templateCache.put("js/directives/lookups/nationality/nationality.lookup.html",
    "<span>{{ nationality }}</span>");
  $templateCache.put("js/directives/lookups/noteType/note-type.lookup.html",
    "<span>{{ noteType }}</span>");
  $templateCache.put("js/directives/lookups/offerType/offer-type.lookup.html",
    "<span>{{ offerType }}</span>");
  $templateCache.put("js/directives/lookups/outcome/outcome.lookup.html",
    "<span>{{ outcome }}</span>");
  $templateCache.put("js/directives/lookups/period/period.lookup.html",
    "<span>{{ period }}</span>");
  $templateCache.put("js/directives/lookups/possibleGrade/possible-grade.lookup.html",
    "<span>{{ possibleGrade }}</span>");
  $templateCache.put("js/directives/lookups/priorAttainment/prior-attainment.lookup.html",
    "<span>{{ priorAttainment }}</span>");
  $templateCache.put("js/directives/lookups/programmeType/programme-type.lookup.html",
    "<span>{{ programmeType }}</span>");
  $templateCache.put("js/directives/lookups/restrictedUseIndicator/restricted-use-indicator.lookup.html",
    "<span>{{ restrictedUseIndicator }}</span>");
  $templateCache.put("js/directives/lookups/room/room.lookup.html",
    "<span>{{ room }}</span>");
  $templateCache.put("js/directives/lookups/school/school.lookup.html",
    "<span>{{ school }}</span>");
  $templateCache.put("js/directives/lookups/schoolPriority/school-priority.lookup.html",
    "<span>{{ schoolPriority }}</span>");
  $templateCache.put("js/directives/lookups/schoolType/school-type.lookup.html",
    "<span>{{ schoolType }}</span>");
  $templateCache.put("js/directives/lookups/specialCategory/special-category.lookup.html",
    "<span>{{ specialCategory }}</span>");
  $templateCache.put("js/directives/lookups/staffType/staff-type.lookup.html",
    "<span>{{ staffType }}</span>");
  $templateCache.put("js/directives/lookups/studentType/student-type.lookup.html",
    "<span>{{ studentType }}</span>");
  $templateCache.put("js/directives/lookups/subject/subject.lookup.html",
    "<span>{{ subject }}</span>");
  $templateCache.put("js/directives/lookups/title/title.lookup.html",
    "<span>{{ title }}</span>");
  $templateCache.put("js/directives/lookups/tutorGroup/tutor-group.lookup.html",
    "<span>{{ tutorGroup }}</span>");
  $templateCache.put("js/directives/lookups/withdrawalReason/withdrawal-reason.lookup.html",
    "<span>{{ withdrawalReason }}</span>");
  $templateCache.put("js/directives/lookups/yearGroup/year-group.lookup.html",
    "<span>{{ yearGroup }}</span>");
  $templateCache.put("js/directives/medical-notes-details/medical-notes-details.html",
    "<div class=student-medical-notes><div class=row><div class=\"col-md-5 col-sm-5 col-xs-5\">Medical Notes:</div><div class=\"col-md-7 col-sm-7 col-xs-7\">{{ student.medicalNote | blank }}</div></div></div>");
  $templateCache.put("js/directives/medical-notes-editor/views/medical-notes-editor-dialog.html",
    "<form id=medicalNotesEditForm name=medicalNotesEditForm role=form novalidate ng-submit=ctrl.save() show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title>Edit Medical Notes</h4></div><div class=modal-body><div class=row><div class=form-group><label for=field_medicalNotes class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Medical Notes:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><textarea type=text name=medicalNotes id=medicalNotes ng-model=ctrl.student.medicalNote class=\"form-control text ui-widget-content ui-corner-all\" rows=2 cols=30></textarea></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=submit class=\"btn btn-primary\" ng-disabled=\"addressEditForm.$invalid || addressEditForm.$submitted\"><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/medical-notes-editor/views/medical-notes-editor.html",
    "<div><medical-notes-details student=ctrl.student></medical-notes-details><div><button type=button ng-click=ctrl.editMedicalNotes(ctrl.studentId) class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> Edit Medical Notes</button></div></div>");
  $templateCache.put("js/directives/offer-types-editor/views/offer-types-editor.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-click=\"ctrl.changeSort('code')\">Code <span ng-show=\"ctrl.isSortedAsc('code')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('code')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('description')\">Description <span ng-show=\"ctrl.isSortedAsc('description')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('description')\">&#x25B2;</span></th></thead><tbody><tr ng-repeat=\"offerType in offerTypes |  orderBy:ctrl.sortOrder \"><td>{{ offerType.code }}</td><td>{{ offerType.description }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editOfferTypes(offerType.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addOfferTypes()><span class=\"glyphicon glyphicon-pencil\"></span> Add</button>");
  $templateCache.put("js/directives/offer-types-editor/views/offer-types-editorDialog.html",
    "<form id=offerTypesEditForm name=offerTypesEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add/Edit OfferType</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">OfferType ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=id readonly ng-model=ctrl.offerTypes.id></div></div><div class=form-group ng-show=true><label for=code class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Code</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=code ng-model=ctrl.offerTypes.code></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" name=description ng-model=ctrl.offerTypes.description></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/option-entries/option-entries.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-show=showBoard>Exam Board</th><th ng-show=showOption>Exam</th><th>Status</th><th>Edi Status</th></thead><tbody><tr ng-hide=showAllEntries ng-repeat=\"optionEntry in optionEntries | filter:{_statusTypeDescription: 'Live'}\"><td ng-show=showBoard>{{ optionEntry._examBoard.boardIdentifier }} - {{ optionEntry._examBoard.description }}</td><td ng-show=showOption>{{ optionEntry._optionEntryCode }} - {{ optionEntry._optionTitle }}</td><td>{{ optionEntry._statusTypeDescription }}</td><td>{{ optionEntry._ediStatusTypeDescription }}</td></tr><tr ng-show=showAllEntries ng-repeat=\"optionEntry in optionEntries\"><td ng-show=showBoard>{{ optionEntry._examBoard.boardIdentifier }} - {{ optionEntry._examBoard.description }}</td><td ng-show=showOption>{{ optionEntry._optionEntryCode }} - {{ optionEntry._optionTitle }}</td><td>{{ optionEntry._statusTypeDescription }}</td><td>{{ optionEntry._ediStatusTypeDescription }}</td></tr></tbody></table>");
  $templateCache.put("js/directives/periods-editor/views/periods-editor.html",
    "<div class=row><div class=\"col-md-2 col-md-offset-10\"><button type=button class=\"btn btn-sm btn-primary\" ng-click=ctrl.toggleVisibility()>Filters <span class=\"glyphicon glyphicon-chevron-right\" ng-hide=ctrl.visible></span> <span class=\"glyphicon glyphicon-chevron-down\" ng-show=ctrl.visible></span></button> <button ng-show=ctrl.visible class=\"btn btn-sm btn-info\" type=button ng-click=ctrl.resetFilters()>Reset Filters</button></div></div><div class=\"periods-filters row\" ng-show=ctrl.visible><div class=\"form-group col-sm-12 col-md-3 row\"><label for=period class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Code</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input ng-model=filter.code class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div><div class=\"form-group col-sm-12 col-md-3 row\"><label for=title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input ng-model=filter.description class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div><div class=\"form-group col-sm-12 col-md-3 row\"><label for=block class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Block</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input ng-model=filter._blockDescription class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div></div><table class=\"table table-responsive table-hover\"><thead><th ng-click=\"ctrl.changeSort('code')\">Code <span ng-show=\"ctrl.isSortedAsc('code')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('code')\">&#x25B2;</span></th><th>Description</th><th ng-click=\"ctrl.changeSort('_blockDescription')\">Block <span ng-show=\"ctrl.isSortedAsc('_blockDescription')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('_blockDescription')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('startTime')\">Start Time <span ng-show=\"ctrl.isSortedAsc('startTime')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('startTime')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('endTime')\">End Time <span ng-show=\"ctrl.isSortedAsc('endTime')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('endTime')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('day')\">Day <span ng-show=\"ctrl.isSortedAsc('day')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('day')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('dayPeriod')\">Day Period <span ng-show=\"ctrl.isSortedAsc('dayPeriod')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('dayPeriod')\">&#x25B2;</span></th></thead><tbody><tr ng-repeat=\"period in periods | orderBy:ctrl.sortOrder | filter: ctrl.filterParams \"><td>{{period.code}}</td><td>{{period.description}}</td><td>{{period._blockDescription}}</td><td>{{period.startTime |date:'HH:mm'}}</td><td>{{period.endTime |date:'HH:mm'}}</td><td>{{period.day}}</td><td>{{period.dayPeriod}}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editPeriods(period.id)><span class=\"glyphicon glyphicon-pencil\"></span>Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addPeriods()><span class=\"glyphicon glyphicon-pencil\"></span>Add</button>");
  $templateCache.put("js/directives/periods-editor/views/periods-editorDialog.html",
    "<form name=periodsEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title>Add/Edit Period</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=code class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Code</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=id ng-model=ctrl.periods.code></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.periods.description></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Block</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><block-selection class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.periods.blockId readonly></block-selection></div></div><div class=form-group ng-show=true><label for=startTime class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Start Time</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div uib-timepicker ng-model=ctrl.periods.startTime></div></div></div><div class=form-group ng-show=true><label for=endTime class=\"col-xs-4 col-sm-4 col-md-4 control-label\">End Time</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div uib-timepicker ng-model=ctrl.periods.endTime></div></div></div><div class=form-group ng-show=true><label for=day class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Day</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.periods.day></div></div><div class=form-group ng-show=true><label for=dayPeriod class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Day Period</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.periods.dayPeriod></div></div><div class=form-group ng-show=true><label for=boxNo class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Box Number</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.periods.boxNo></div></div><div class=form-group ng-show=true><label for=cristalPeriod class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Cristal Period</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.periods.cristalPeriod></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=\"button \" class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/personContactDetails/personContactDetails.html",
    "<div class=person-contact-details><div ng-show=person.home>Home: {{ person.home | telNo }}</div><div ng-show=person.mobile>Mobile: {{ person.mobile | telNo }}</div><div ng-show=person.work>Work: {{ person.work | telNo }}</div><div ng-show=person.email>EMail: {{ person.email }}</div><div ng-transclude></div><div class=error ng-hide=hasData()>Person Contact Details: No Data Provided</div></div>");
  $templateCache.put("js/directives/personContactDetails/personContactDetailsFormatted.html",
    "<div class=person-contact-details><div class=row ng-show=\"hasData() && person.home\"><div class=col-xs-4>Home:</div><div class=col-xs-8>{{ person.home | telNo }}</div></div><div class=row ng-show=\"hasData() && person.mobile\"><div class=col-xs-4>Mobile:</div><div class=col-xs-8>{{ person.mobile | telNo }}</div></div><div class=row ng-show=\"hasData() && person.work\"><div class=col-xs-4>Work:</div><div class=col-xs-8>{{ person.work | telNo }}</div></div><div class=row ng-show=\"hasData() && person.email\"><div class=col-xs-4>EMail (personal):</div><div class=col-xs-8>{{ person.email }}</div></div><div class=error ng-hide=hasData()>Person Contact Details: No Data Provided</div></div>");
  $templateCache.put("js/directives/personContactDetailsLookup/personContactDetailsLookup.html",
    "<person-contact-details person=ctrl.person></person-contact-details>");
  $templateCache.put("js/directives/personDetails/personDetails.html",
    "<div class=person-details><div ng-show=hasData()><div>Surname: {{ person.surname }}</div><div>First Name: {{ person.firstName }}</div><div ng-show=\"showAll || showDob\">DoB: {{ person.dob | date:'dd/MM/yyyy' }}</div><div ng-show=\"showAll || showGender\">Gender: {{ person._genderCode }}</div><div ng-transclude></div></div><div class=error ng-hide=hasData()>Person Details: No Data Provided</div></div>");
  $templateCache.put("js/directives/personDetails/personDetailsFormatted.html",
    "<div class=\"person-details container-fluid\"><div class=row ng-show=\"hasData() && person.titleId\"><div class=col-xs-4>Title:</div><div class=col-xs-8>{{ person._titleDescription }}</div></div><div class=row ng-show=hasData()><div class=col-xs-4>Surname:</div><div class=col-xs-8>{{ person.surname }}</div></div><div class=row ng-show=hasData()><div class=col-xs-4>Legal Surname:</div><div class=col-xs-8>{{ person.legalSurname }}</div></div><div class=row ng-show=hasData()><div class=col-xs-4>First Name:</div><div class=col-xs-8>{{ person.firstName }}</div></div><div class=row ng-show=\"hasData() && person.middleNames\"><div class=col-xs-4>Middle Names:</div><div class=col-xs-8>{{ person.middleNames }}</div></div><div class=row ng-show=\"hasData() && person.preferredName\"><div class=col-xs-4>Preferred Name:</div><div class=col-xs-8>{{ person.preferredName }}</div></div><div class=row ng-show=\"hasData() && person.previousSurname\"><div class=col-xs-4>Previous Surname:</div><div class=col-xs-8>{{ person.previousSurname }}</div></div><div class=row ng-show=\"hasData() && (showAll || showDob) && person.dob\"><div class=col-xs-4>DoB:</div><div class=col-xs-8>{{ person.dob | date:'dd/MM/yyyy' }}</div></div><div class=row ng-show=\"hasData() && (showAll || showGender) && person._genderCode\"><div class=col-xs-4>Gender:</div><div class=col-xs-8>{{ person._genderCode }}</div></div><div class=row ng-show=\"hasData() && (showAll || showTelephoneNos)\"><div class=col-xs-4>Home:</div><div class=col-xs-8>{{ person.home | telNo }}</div></div><div class=row ng-show=\"hasData() && (showAll || showTelephoneNos) && person.mobile\"><div class=col-xs-4>Mobile:</div><div class=col-xs-8>{{ person.mobile | telNo }}</div></div><div class=row ng-show=\"hasData() && (showAll || showTelephoneNos) && person.work\"><div class=col-xs-4>Work:</div><div class=col-xs-8>{{ person.work | telNo }}</div></div><div class=row ng-show=\"hasData() && (showAll || showEmail) && person.email\"><div class=col-xs-4>EMail (personal):</div><div class=col-xs-8>{{ person.email }}</div></div><div class=error ng-hide=hasData()>Person Details: No Data Provided</div></div>");
  $templateCache.put("js/directives/personDetailsLookup/personDetailsLookup.html",
    "<person-details person=ctrl.person show-dob=showDob show-gender=showGender show-all=showAll></person-details>");
  $templateCache.put("js/directives/personEditor/views/personEditor.html",
    "<button type=button ng-click=ctrl.editPerson(person.id) class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> Edit Person</button>");
  $templateCache.put("js/directives/personEditor/views/personEditorDialog.html",
    "<form id=personEditForm name=personEditForm role=form novalidate ng-submit=ctrl.save() show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title>Edit Person</h4></div><div class=modal-body><div class=row><div class=form-group><label for=title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Title:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><title-selection id=title class=form-control include-blank=true ng-model=ctrl.person.titleId></title-selection></div></div><div class=form-group><label for=field_title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">First Name:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=firstName id=firstName ng-model=ctrl.person.firstName class=\"form-control text ui-widget-content ui-corner-all\" required ng-pattern=\"/^[a-zA-Z\\s\\`'-.,()]*$/\"> <span class=validation-error ng-show=personEditForm.firstName.$error.pattern>Only characters, (a-z)(`'-.,()) are allowed</span></div></div><div class=form-group><label for=field_title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Surname:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=surname id=field_surname ng-model=ctrl.person.surname class=\"form-control text ui-widget-content ui-corner-all\" ng-pattern=\"/^[a-zA-Z\\s\\`'-.,()]*$/\"> <span class=validation-error ng-show=personEditForm.surname.$error.pattern>Only characters, (a-z)(`'-.,()) are allowed</span></div></div><div class=form-group><label for=field_title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Legal Surname:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=legalSurname id=field_legalSurname ng-model=ctrl.person.legalSurname class=\"form-control text ui-widget-content ui-corner-all\" ng-pattern=\"/^[a-zA-Z\\s\\`'-.,()]*$/\"> <span class=validation-error ng-show=personEditForm.legalSurname.$error.pattern>Only characters, (a-z)(`'-.,()) are allowed</span></div></div><div class=form-group><label for=field_title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Middle Names:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=middleName id=field_middleNames ng-model=ctrl.person.middleNames class=\"form-control text ui-widget-content ui-corner-all\" ng-pattern=\"/^[a-zA-Z\\s\\`'-.,()]*$/\"> <span class=validation-error ng-show=personEditForm.middleName.$error.pattern>Only characters, (a-z)(`'-.,()) are allowed</span></div></div><div class=form-group><label for=field_title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Preferred Name:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=preferredName id=field_preferredName ng-model=ctrl.person.preferredName class=\"form-control text ui-widget-content ui-corner-all\" ng-pattern=\"/^[a-zA-Z\\s\\`'-.,()]*$/\"> <span class=validation-error ng-show=personEditForm.preferredName.$error.pattern>Only characters, (a-z)(`'-.,()) are allowed</span></div></div><div class=form-group><label for=field_title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Previous Surname:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=previousSurname id=field_previousSurname ng-model=ctrl.person.previousSurname class=\"form-control text ui-widget-content ui-corner-all\" ng-pattern=\"/^[a-zA-Z\\s\\`'-.,()]*$/\"> <span class=validation-error ng-show=personEditForm.previousSurname.$error.pattern>Only characters, (a-z)(`'-.,()) are allowed</span></div></div><div class=form-group><label for=dob class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Date of Birth:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div class=input-group><input name=dob class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.person.dob ng-init=\"dobDatepicker = false\" is-open=dobDatepicker uib-datepicker-popup=dd/MM/yyyy> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"dobDatepicker = !dobDatepicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div><div class=form-group><label for=gender class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Gender:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><gender-selection id=gender class=form-control ng-model=ctrl.person.genderId></gender-selection></div></div><div class=form-group><label for=field_title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Home:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=home id=field_home ng-model=ctrl.person.home class=\"form-control text ui-widget-content ui-corner-all\" ng-pattern=\"/^[\\d+ ]*$/\"> <span class=validation-error ng-show=personEditForm.home.$error.pattern>Please enter valid phone number</span></div></div><div class=form-group><label for=field_title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Mobile:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=mobile id=field_mobile ng-model=ctrl.person.mobile class=\"form-control text ui-widget-content ui-corner-all\" ng-pattern=\"/^[\\d+ ]*$/\"> <span class=validation-error ng-show=personEditForm.mobile.$error.pattern>Please enter valid phone number</span></div></div><div class=form-group><label for=field_work class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Work:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=work id=fieldfield_title_work ng-model=ctrl.person.work class=\"form-control text ui-widget-content ui-corner-all\" ng-pattern=\"/^[\\d+ ]*$/\"> <span class=validation-error ng-show=personEditForm.work.$error.pattern>Please enter valid phone number</span></div></div><div class=form-group><label for=field_title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Email:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=email id=field_email ng-model=ctrl.person.email class=\"form-control text ui-widget-content ui-corner-all\" ng-pattern=/^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/ > <span class=validation-error ng-show=personEditForm.email.$error.pattern>Please enter valid email address</span></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=submit class=\"btn btn-primary\" ng-disabled=\"personEditForm.$invalid || personEditForm.$submitted\"><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/possible-grade-set-editor/views/possible-grade-sets-editor.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-click=\"ctrl.changeSort('code')\">Code <span ng-show=\"ctrl.isSortedAsc('code')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('code')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('description')\">Description <span ng-show=\"ctrl.isSortedAsc('description')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('description')\">&#x25B2;</span></th></thead><tbody><tr></tr><tr ng-repeat=\"possibleGradeSet in possibleGradeSets | orderBy:ctrl.sortOrder\"><td>{{ possibleGradeSet.code }}</td><td>{{ possibleGradeSet.description }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editPossibleGradeSets(possibleGradeSet.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addPossibleGradeSets()><span class=\"glyphicon glyphicon-pencil\"></span> Add</button>");
  $templateCache.put("js/directives/possible-grade-set-editor/views/possible-grade-sets-editorDialog.html",
    "<form id=possibleGradeSetsEditForm name=possibleGradeSetsEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add/Edit PossibleGradeSet</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Possible grade set ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=id class=form-control name=id readonly ng-model=ctrl.possibleGradeSets.id></div></div><div class=form-group><label for=code class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Code:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=code class=form-control name=code ng-model=ctrl.possibleGradeSets.code></div></div><div class=form-group><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=description class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.possibleGradeSets.description></div></div></div><div class=row><div class=\"col-xs-8 col-sm-8 col-md-8\"><possible-grades-editor possible-grades=ctrl.possibleGrades></possible-grades-editor></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/possible-grades-editor/views/possible-grades-editor.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-click=\"ctrl.changeSort('code')\">Code <span ng-show=\"ctrl.isSortedAsc('code')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('code')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('description')\">Description <span ng-show=\"ctrl.isSortedAsc('description')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('description')\">&#x25B2;</span></th><th>Grade</th><th>UCAS Points</th></thead><tbody><tr ng-repeat=\"possibleGrade in possibleGrades | orderBy:ctrl.sortOrder\"><td>{{ possibleGrade._possibleGradeSet.code }}</td><td>{{ possibleGrade._possibleGradeSet.description }}</td><td>{{ possibleGrade.grade }}</td><td>{{ possibleGrade.ucasPoints}}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editPossibleGrades(possibleGrade.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addPossibleGrades()><span class=\"glyphicon glyphicon-pencil\"></span> Add</button>");
  $templateCache.put("js/directives/possible-grades-editor/views/possible-grades-editorDialog.html",
    "<form id=possibleGradesEditForm name=possibleGradesEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add/Edit PossibleGrade</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Possible Grade ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=id class=form-control name=id readonly ng-model=ctrl.possibleGrades.id></div></div><div class=form-group><label for=possibleGradeSet class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Possible Grade Set:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><possible-grade-set-selection id=possibleGradeSet class=form-control ng-model=ctrl.possibleGrades.gradeSetId></possible-grade-set-selection></div></div><div class=form-group><label for=code class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Code:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=code class=form-control name=code ng-model=ctrl.possibleGrades.code></div></div><div class=form-group><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=description class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.possibleGrades.description></div></div><div class=form-group><label for=grade class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Grade:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=grade class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.possibleGrades.grade></div></div><div class=form-group><label for=ucasPoints class=\"col-xs-4 col-sm-4 col-md-4 control-label\">UCAS Points</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=ucasPoints class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.possibleGrades.ucasPoints></div></div><div class=form-group ng-show=true><label for=useForKeyAssessment class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Key Assessment Grade</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=useForKeyAssessment type=checkbox class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.possibleGrades.useForKeyAssessment></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/punctuality-monitorings-editor/views/punctuality-monitorings-editor-addDialog.html",
    "<form id=punctualityMonitoringsEditForm name=punctualityMonitoringsEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add Punctuality Monitoring</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Punctuality Monitoring ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=id class=form-control name=id ng-model=ctrl.punctualityMonitorings.id></div></div><div class=form-group ng-show=true><label for=code class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Code</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=code class=form-control name=id ng-model=ctrl.punctualityMonitorings.code></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=description class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.punctualityMonitorings.description></div></div><div class=form-group ng-show=true><label for=warningColour class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Warning Colour:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=warningColour class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.punctualityMonitorings.warningColour></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.add()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/punctuality-monitorings-editor/views/punctuality-monitorings-editor.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-click=\"ctrl.changeSort('id')\">Id <span ng-show=\"ctrl.isSortedAsc('id')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('id')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('code')\">Code <span ng-show=\"ctrl.isSortedAsc('code')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('code')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('description')\">Description <span ng-show=\"ctrl.isSortedAsc('description')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('description')\">&#x25B2;</span></th><th>Warning Colour</th></thead><tbody><tr ng-repeat=\"punctualityMonitoring in punctualityMonitorings |  orderBy:ctrl.sortOrder \"><td>{{ punctualityMonitoring.id }}</td><td>{{ punctualityMonitoring.code }}</td><td>{{ punctualityMonitoring.description }}</td><td>{{ punctualityMonitoring.warningColour }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editPunctualityMonitorings(punctualityMonitoring.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addPunctualityMonitorings()><span class=\"glyphicon glyphicon-pencil\"></span> Add</button>");
  $templateCache.put("js/directives/punctuality-monitorings-editor/views/punctuality-monitorings-editorDialog.html",
    "<form id=punctualityMonitoringsEditForm name=punctualityMonitoringsEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Edit Punctuality Monitoring</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Punctuality Monitoring ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=id class=form-control name=id readonly ng-model=ctrl.punctualityMonitorings.id></div></div><div class=form-group ng-show=true><label for=code class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Code</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=code class=form-control name=id ng-model=ctrl.punctualityMonitorings.code></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=description class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.punctualityMonitorings.description></div></div><div class=form-group ng-show=true><label for=warningColour class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Warning Colour:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=warningColour class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.punctualityMonitorings.warningColour></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/referral-reasons-editor/views/referral-reasons-editor-addDialog.html",
    "<form id=referralReasonsEditForm name=referralReasonsEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add ReferralReason</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">ReferralReason ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=id class=form-control name=id ng-model=ctrl.referralReasons.id></div></div><div class=form-group ng-show=true><label for=reason class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Reason</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=reason class=form-control name=reason ng-model=ctrl.referralReasons.reason></div></div><div class=\"form-group col-sm-12 col-md-6\"><label for=llddHealthProblemCategoryId class=\"col-xs-4 col-sm-4 col-md-4 control-label\">LLDD Health Problem Category</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><lldd-health-problem-category-selection id=llddHealthProblemCategoryId class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.referralReasons.llddHealthProblemCategoryId></lldd-health-problem-category-selection></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.add()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/referral-reasons-editor/views/referral-reasons-editor.html",
    "<table class=\"table table-responsive table-hover\"><thead><th>Id</th><th>reason</th><th>LLDD Health Problem CategoryId</th></thead><tbody><tr ng-repeat=\"referralReason in referralReasons |  orderBy:ctrl.sortOrder \"><td>{{ referralReason.id }}</td><td>{{ referralReason.reason }}</td><td>{{ referralReason._llddHealthProblemCategoryDescription }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editReferralReasons(referralReason.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addReferralReasons()><span class=\"glyphicon glyphicon-pencil\"></span> Add</button>");
  $templateCache.put("js/directives/referral-reasons-editor/views/referral-reasons-editorDialog.html",
    "<form id=referralReasonsEditForm name=referralReasonsEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Edit ReferralReason</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">ReferralReason ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=id class=form-control name=id readonly ng-model=ctrl.referralReasons.id></div></div><div class=form-group ng-show=true><label for=reason class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Reason</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=reason class=form-control name=reason ng-model=ctrl.referralReasons.reason></div></div><div class=\"form-group col-sm-12 col-md-6\"><label for=llddHealthProblemCategoryId class=\"col-xs-4 col-sm-4 col-md-4 control-label\">LLDD Health Problem Category</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><lldd-health-problem-category-selection id=llddHealthProblemCategoryId class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.referralReasons.llddHealthProblemCategoryId></lldd-health-problem-category-selection></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/registersEditor/views/registersEditor.html",
    "<div class=\"form-group col-md-12 col-sm-12\"><table class=\"table table-responsive table-hover\"><div class=\"col-md-2 col-md-offset-10\"><button type=button class=\"btn btn-sm btn-primary\" ng-click=ctrl.toggleVisibility()>Filters <span class=\"glyphicon glyphicon-chevron-right\" ng-hide=ctrl.visible></span> <span class=\"glyphicon glyphicon-chevron-down\" ng-show=ctrl.visible></span></button></div><div ng-show=ctrl.visible><div class=\"form-group col-sm-12 col-md-3 row\"><label for=subjectCode class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Subject Code</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input ng-model=filter.subjectCode class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div><div class=\"form-group col-sm-12 col-md-3 row\"><label for=group class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Group</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input ng-model=filter.group class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div><div class=\"form-group col-sm-12 col-md-3 row\"><label for=attendance class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Attendance</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><attendance-code-selection id=attendanceId class=form-control ng-model=filter.attendanceId ng-click=ctrl.applyFilter()></attendance-code-selection></div></div><div class=\"form-group col-sm-12 col-md-3 row\"><label for=sessionPeriod class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Session Period</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input ng-model=filter._sessionPeriod class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div></div><thead><th ng-show=\"showAll || showStudentRef\">Student Ref</th><th ng-show=\"showAll || showSessionRef\">Session Ref</th><th ng-click=\"ctrl.changeSort('subjectCode')\">Subject Code <span ng-show=\"ctrl.isSortedAsc('subjectCode')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('subjectCode')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('group')\">Group <span ng-show=\"ctrl.isSortedAsc('group')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('group')\">&#x25B2;</span></th><th>Attendance</th><th ng-click=\"ctrl.changeSort('_sessionDate')\">Session Date <span ng-show=\"ctrl.isSortedAsc('_sessionDate')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('_sessionDate')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('_sessionPeriod')\">Session Period <span ng-show=\"ctrl.isSortedAsc('_sessionPeriod')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('_sessionPeriod')\">&#x25B2;</span></th><th>Actions</th></thead><tbody><tr ng-repeat=\"register in ctrl.registers | orderBy : ctrl.sortOrder | filter: ctrl.filterParams | filter:dateFilter | limitTo : -100 |orderBy:['-sessionRef']\" ng-style=\"{ 'background-color': '{{register._attendance.htmlColour }}'}\"><td ng-show=\"showAll || showStudentRef\">{{ register.studentId }}</td><td ng-show=\"showAll || showSessionRef\">{{ register.sessionRef }}</td><td>{{ register.subjectCode }}</td><td>{{ register.group }}</td><td>{{ register._attendance.description }}</td><td>{{ register._sessionDate | date:'dd/MM/yyyy' }}</td><td>{{ register._sessionPeriod }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editRegister(register.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table></div>");
  $templateCache.put("js/directives/registersEditor/views/registersEditorDialog.html",
    "<form id=registerEditForm name=registerEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=clear()>&times;</button><h4 class=modal-title id=myToDoLabel>Edit a Register Mark</h4></div><div class=modal-body><div class=row><div class=\"form-group hidden\"><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Student ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=studentId id=field_id readonly ng-model=ctrl.register.studentId></div></div><div class=form-group><label for=field_title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Session Ref</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=field_sessionRef name=sessionRef class=\"form-control text ui-widget-content ui-corner-all\" readonly ng-model=ctrl.register.sessionRef></div></div><div class=form-group><label for=field_title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Subject Code</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=field_subjectCode name=subjectCode class=\"form-control text ui-widget-content ui-corner-all\" readonly ng-model=ctrl.register.subjectCode></div></div><div class=form-group><label for=field_title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Group</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=field_group name=group class=\"form-control text ui-widget-content ui-corner-all\" readonly ng-model=ctrl.register.group></div></div><div class=form-group><label for=field_title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Attendance code:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><attendance-code-selection id=attendanceCode class=form-control ng-model=ctrl.register.attendanceId required></attendance-code-selection></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-disabled=\"registerEditForm.$invalid || registerEditForm.$submitted\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/registersTable/registersTable.html",
    "<div class=\"form-group col-md-12 col-sm-12\"><table class=\"table table-responsive table-hover\"><div class=\"col-md-2 col-md-offset-10\"><button type=button class=\"btn btn-sm btn-primary\" ng-click=ctrl.toggleVisibility()>Filters <span class=\"glyphicon glyphicon-chevron-right\" ng-hide=ctrl.visible></span> <span class=\"glyphicon glyphicon-chevron-down\" ng-show=ctrl.visible></span></button></div><div ng-show=ctrl.visible><div class=\"form-group col-sm-12 col-md-3 row\"><label for=subject class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Subject Code</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input ng-model=filter.subjectCode class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div><div class=\"form-group col-sm-12 col-md-3 row\"><label for=subject class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Group</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input ng-model=filter.group class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div><thead><th ng-show=\"showAll || showStudentRef\">Student Ref</th><th ng-show=\"showAll || showSessionRef\">Session Ref</th><th>Subject Code</th><th>Group</th><th>Attendance</th><th>Session Date</th><th class=text-center>Session Period</th></thead><tbody><tr ng-repeat=\"register in registers | orderBy:['-sessionRef'] | filter: ctrl.filterParams\" ng-style=\"{ 'background-color': '{{register._attendance.htmlColour }}'}\"><td ng-show=\"showAll || showStudentRef\">{{ register.studentId }}</td><td ng-show=\"showAll || showSessionRef\">{{ register.sessionRef }}</td><td>{{ register.subjectCode }}</td><td>{{ register.group }}</td><td>{{ register._attendance.description }}</td><td>{{ register._sessionDate | date:'EEE dd/MM/yyyy' }}</td><td class=text-center>{{ register._sessionPeriod }}</td></tr></tbody></div></table></div>");
  $templateCache.put("js/directives/report-link/report-link.html",
    "<a class=\"{{ ctrl.class }}\" target=_blank ng-click=ctrl.loadReport()><ng-transclude></ng-transclude></a>");
  $templateCache.put("js/directives/reporting-periods-editor/views/reporting-periods-editor.html",
    "<table class=\"table table-hover\"><thead><th>Id</th><th>AcademicYear</th><th ng-click=\"ctrl.changeSort('name')\">Name <span ng-show=\"ctrl.isSortedAsc('name')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('name')\">&#x25B2;</span></th><th>StartDate</th><th>EndDate</th></thead><tbody><tr ng-repeat=\"reportingPeriod in reportingPeriods |  orderBy:ctrl.sortOrder \"><td>{{ reportingPeriod.id}}</td><td>{{ reportingPeriod.academicYearId }}</td><td>{{ reportingPeriod.name }}</td><td>{{ reportingPeriod.startDate | date:'dd/MM/yyyy' }}</td><td>{{ reportingPeriod.endDate | date:'dd/MM/yyyy' }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editReportingPeriods(reportingPeriod.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addReportingPeriods()><span class=\"glyphicon glyphicon-pencil\"></span> Add</button>");
  $templateCache.put("js/directives/reporting-periods-editor/views/reporting-periods-editorDialog.html",
    "<form id=reportingPeriodsEditForm name=reportingPeriodsEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add/Edit Reporting Period</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">ReportingPeriod ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=id class=form-control name=id readonly ng-model=ctrl.reportingPeriods.id></div></div><div class=form-group ng-show=true><label for=name class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Name</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=name class=form-control name=id ng-model=ctrl.reportingPeriods.name></div></div><div class=form-group ng-show=true><label for=academicYearId class=\"col-xs-4 col-sm-4 col-md-4 control-label\">AcademicYear</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><academic-year-selection id=academicYearId class=form-control include-blank=true readonly ng-model=ctrl.reportingPeriods.academicYearId></academic-year-selection></div></div><div class=form-group><label for=startDate class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Start Date</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div class=input-group><input class=form-control ng-init=\"reportingPeriodStartDatePicker = false\" uib-datepicker-popup=dd/MM/yyyy is-open=reportingPeriodStartDatePicker ng-model=ctrl.reportingPeriods.startDate> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"reportingPeriodStartDatePicker = !reportingPeriodStartDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div><div class=form-group><label for=endDate class=\"col-xs-4 col-sm-4 col-md-4 control-label\">End Date</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div class=input-group><input class=form-control ng-init=\"reportingPeriodEndDatePicker = false\" uib-datepicker-popup=dd/MM/yyyy is-open=reportingPeriodEndDatePicker ng-model=ctrl.reportingPeriods.endDate> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"reportingPeriodEndDatePicker = !reportingPeriodEndDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/roles-editor/views/roles-editor.html",
    "<table class=\"table table-responsive table-hover\"><thead><th>Id</th><th>Role Name</th></thead><tbody><tr></tr><tr ng-repeat=\"role in roles\"><td>{{ role.id }}</td><td>{{ role.roleName }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editRoles(role.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addRoles()><span class=\"glyphicon glyphicon-pencil\"></span> Add</button>");
  $templateCache.put("js/directives/roles-editor/views/roles-editorDialog.html",
    "<form id=rolesEditForm name=rolesEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add/Edit Role</h4></div><div class=modal-body><div class=row><div class=form-group><label for=roleName class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Role Name:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=roleName class=form-control name=roleName ng-model=ctrl.role.roleName></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/roomTable/roomTable.html",
    "<table class=\"table table-responsive\"><tbody><tr ng-repeat=\"room in roomList\" class=ng-cloak><td>{{room.code}}</td><td>{{room.description}}</td><td>{{room.defaultRows}}</td><td>{{room.defaultCols}}</td><td><ng-transclude></ng-transclude></td></tr></tbody></table>");
  $templateCache.put("js/directives/roomsEditor/views/rooms-editor.html",
    "<div class=row><div class=\"col-md-2 col-md-offset-10\"><button type=button class=\"btn btn-sm btn-primary\" ng-click=ctrl.toggleVisibility()>Filters <span class=\"glyphicon glyphicon-chevron-right\" ng-hide=ctrl.visible></span> <span class=\"glyphicon glyphicon-chevron-down\" ng-show=ctrl.visible></span></button> <button ng-show=ctrl.visible class=\"btn btn-sm btn-info\" type=button ng-click=ctrl.resetFilters()>Reset Filters</button></div></div><div class=\"rooms-filters row\" ng-show=ctrl.visible><div class=\"form-group col-sm-12 col-md-3 row\"><label for=title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Code</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input ng-model=filter.code class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div><div class=\"form-group col-sm-12 col-md-3 row\"><label for=title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input ng-model=filter.description class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div></div><table class=\"table table-responsive table-hover\"><thead><th ng-click=\"ctrl.changeSort('code')\">Code <span ng-show=\"ctrl.isSortedAsc('code')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('code')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('description')\">Description <span ng-show=\"ctrl.isSortedAsc('description')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('description')\">&#x25B2;</span></th><th>Room Type</th><th>Capacity</th></thead><tbody><tr></tr><tr ng-repeat=\"room in rooms | orderBy : ctrl.sortOrder | filter: ctrl.filterParams\"><td>{{ room.code }}</td><td>{{ room.description }}</td><td>{{room._roomTypeDescription}}</td><td>{{ room.capacity }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editRooms(room.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addRooms()><span class=\"glyphicon glyphicon-pencil\"></span> Add</button>");
  $templateCache.put("js/directives/roomsEditor/views/rooms-editorDialog.html",
    "<form id=roomsEditForm name=roomsEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add/Edit Room</h4></div><div class=modal-body><div class=row><div class=form-group><label for=code class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Code:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=code class=form-control name=code ng-model=ctrl.room.code></div></div><div class=form-group><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=description class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.room.description></div></div><div class=form-group><label for=roomType class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Room Type</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><room-type-selection class=form-control include-blank=true ng-model=ctrl.room.roomTypeId></room-type-selection></div></div><div class=form-group><label for=capacity class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Capacity</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=capacity class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.room.capacity></div></div><div class=form-group><label for=defaultRows class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Default Rows</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=defaultRows class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.room.defaultRows></div></div><div class=form-group><label for=defaultCols class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Default Cols</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=defaultCols class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.room.defaultCols></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/schools-editor/views/school-editor.html",
    "<div class=row><div class=\"col-md-2 col-md-offset-10\"><button type=button class=\"btn btn-sm btn-primary\" ng-click=ctrl.toggleVisibility()>Filters <span class=\"glyphicon glyphicon-chevron-right\" ng-hide=ctrl.visible></span> <span class=\"glyphicon glyphicon-chevron-down\" ng-show=ctrl.visible></span></button> <button ng-show=ctrl.visible class=\"btn btn-sm btn-info\" type=button ng-click=ctrl.resetFilters()>Reset Filters</button></div></div><div class=\"periods-filters row\" ng-show=ctrl.visible><div class=\"form-group col-sm-12 col-md-3 row\"><label for=name class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Name</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input ng-model=filter.name class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div><div class=\"form-group col-sm-12 col-md-3 row\"><label for=title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Type</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input ng-model=filter._typeDescription class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div></div><table class=\"table table-responsive table-hover\"><thead><th ng-click=\"ctrl.changeSort('name')\">Name <span ng-show=\"ctrl.isSortedAsc('name')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('name')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('_typeDescription')\">Type <span ng-show=\"ctrl.isSortedAsc('_typeDescription')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('_typeDescription')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('_priorityCode')\">Priority <span ng-show=\"ctrl.isSortedAsc('_priorityCode')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('_priorityCode')\">&#x25B2;</span></th><th>Address</th><th>Telephone</th><th>Head</th><th>Contact Name</th><th>URN</th></thead><tbody><tr ng-repeat=\"school in schools |orderBy : ctrl.sortOrder | filter: ctrl.filterParams \"><td>{{school.name}}</td><td>{{school._typeDescription}}</td><td>{{school._priorityCode}}</td><td>{{school.line1}}<br>{{school.line2}}<br>{{school.line3}}<br>{{school.postcode}}</td><td>{{school.telephone}}</td><td>{{school.headTitle}} {{school.headFirstName}} {{school.headSurname}}</td><td>{{school.contactTitle}} {{school.contactFirstName}} {{school.contactSurname}}</td><td>{{school.urn}}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editSchools(school.id)><span class=\"glyphicon glyphicon-pencil\"></span>Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addSchools()><span class=\"glyphicon glyphicon-pencil\"></span>Add</button>");
  $templateCache.put("js/directives/schools-editor/views/school-editorDialog.html",
    "<form id=schoolsEditForm name=schoolsEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add/Edit School</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">School ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=id class=form-control name=id readonly ng-model=ctrl.schools.id></div></div><div class=form-group ng-show=true><label for=name class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Name</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=name class=form-control name=name ng-model=ctrl.schools.name></div></div><div class=form-group ng-show=true><label for=type class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Type</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><school-type-selection class=form-control include-blank=true id=schooLType readonly ng-model=ctrl.schools.typeId></school-type-selection></div></div><div class=form-group ng-show=true><label for=priority class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Priority</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><school-priority-selection class=form-control include-blank=true id=schoolPriority readonly ng-model=ctrl.schools.priorityId></school-priority-selection></div></div><div><label for=priority>&nbsp;&nbsp;&nbsp;Address:</label></div><div class=form-group ng-show=true><label for=line1 class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Line 1</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=line1 class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.schools.line1></div></div><div class=form-group ng-show=true><label for=line2 class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Line 2</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=line2 class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.schools.line2></div></div><div class=form-group ng-show=true><label for=line3 class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Line 3</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=line3 class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.schools.line3></div></div><div class=form-group ng-show=true><label for=postcode class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Postcode</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=postcode class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.schools.postcode></div></div><div class=form-group ng-show=true><label for=telephone class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Telephone</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=startTime class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.schools.telephone></div></div><div>&nbsp;</div><div class=form-group ng-show=true><label for=headtitle class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Head Title</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=headTitle class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.schools.headTitle></div></div><div class=form-group ng-show=true><label for=headFirstName class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Head FirstName</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=headFirstName class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.schools.headFirstName></div></div><div class=form-group ng-show=true><label for=headFirstName class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Head Surname</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=headFirstName class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.schools.headSurname></div></div><div class=form-group ng-show=true><label for=headFirstName class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Contact Title</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=headFirstName class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.schools.contactTitle></div></div><div class=form-group ng-show=true><label for=headFirstName class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Contact FirstName</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=contactFirstName class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.schools.contactFirstName></div></div><div class=form-group ng-show=true><label for=headFirstName class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Contact Surname</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=contactSurName class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.schools.contactSurname></div></div><div class=form-group ng-show=true><label for=urn class=\"col-xs-4 col-sm-4 col-md-4 control-label\">URN</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=urn class=form-control name=urn ng-model=ctrl.schools.urn></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/selections/academicYear/academic-year.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.academicYears\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.code }} - {{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/aimType/aim-type.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.aimTypes\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.code }} - {{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/applicationStatus/application-status.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.applicationStatuses\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/attendanceCode/attendance-code.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option value=\"\">-- Select Attendance --</option><option ng-repeat=\"i in ctrl.attendanceCodes | orderBy: 'description'\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/attendanceMonitoring/attendance-monitoring.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.attendanceMonitorings\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.code }} - {{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/block/block.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.blocks\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/centralMonitoring/central-monitoring.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.centralMonitorings\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/collegeFundPaid/college-fund-paid.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.collegeFundPaids\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.collegeFundPaid }}</option></select>");
  $templateCache.put("js/directives/selections/completionStatus/completion-status.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.completionStatuses\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.code }} - {{ i.shortDescription }}</option></select>");
  $templateCache.put("js/directives/selections/contactType/contact-type.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.contactTypes\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/correspondenceType/correspondence-type.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.correspondenceTypes\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.type }}</option></select>");
  $templateCache.put("js/directives/selections/department/department.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.departments\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/destination/destination.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.destinations | orderBy:['+type','+code']\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.type }} {{ i.code }} - {{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/ediStatusType/ediStatusType.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.ediStatusTypes\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.code }} - {{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/englishConditionOfFunding/english-condition-of-funding.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option value=\"\" ng-show=includeBlank>-- none --</option><option ng-repeat=\"i in ctrl.englishConditionOfFundings\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/entryQualification/entry-qualification.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.entryQualifications\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i._entryQualificationTypeDescription }} - {{ i.title }}</option></select>");
  $templateCache.put("js/directives/selections/entryQualificationType/entry-qualification-type.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.entryQualificationTypes\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.code }} - {{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/ethnicity/ethnicity.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.ethnicities\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/examBoard/exam-board.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.examBoards\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.name }}</option></select>");
  $templateCache.put("js/directives/selections/examComponent/examComponent.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.examComponents\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/examSeries/exam-series.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readOnly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.examSeries\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.examSeries }} - {{ i.examYear }} ({{ i.examBoard.description }})</option></select>");
  $templateCache.put("js/directives/selections/examSession/examSession.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.examSessions\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/faculty/faculty.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.faculties\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/fundingModel/funding-model.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.fundingModels\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.code }} - {{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/gender/gender.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.genders\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/ilp-interview-type/ilp-interview-type.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option value=\"\">-- Select Interview Type --</option><option ng-repeat=\"i in ctrl.iLPInterviewTypes\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.type }}</option></select>");
  $templateCache.put("js/directives/selections/letterType/letter-type.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.letterTypes\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.type }}</option></select>");
  $templateCache.put("js/directives/selections/level/level.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.levels\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.code }} - {{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/llddHealthProblem/lldd-health-problem.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.lLDDHealthProblems\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.id }} - {{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/llddHealthProblemCategory/lldd-health-problem-category.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.lLDDHealthProblemCategories\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.id }} - {{ i.shortDescription }}</option></select>");
  $templateCache.put("js/directives/selections/mathsConditionOfFunding/maths-condition-of-funding.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option value=\"\" ng-show=includeBlank>-- none --</option><option ng-repeat=\"i in ctrl.mathsConditionOfFundings\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/nationality/nationality.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.nationalities\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.name }} - {{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/noteType/note-type.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.noteTypes\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.code }} - {{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/offerType/offer-type.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.offerTypes\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/outcome/outcome.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.outcomes\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.code }} - {{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/period/period.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.periods\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.code }} - {{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/possibleGrade/possible-grade.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.possibleGrades\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/possibleGradeSet/possible-grade-set.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.possibleGradeSets\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/priorAttainment/prior-attainment.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.priorAttainments\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.code }} - {{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/programmeType/programme-type.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.programmeTypes\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.code }} - {{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/punctualityMonitoring/punctuality-monitoring.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.punctualityMonitorings\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.code }} - {{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/restrictedUseIndicator/restricted-use-indicator.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.restrictedUseIndicators\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.code }} - {{ i.shortDescription }}</option></select>");
  $templateCache.put("js/directives/selections/role/role.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.roles\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.roleName }}</option></select>");
  $templateCache.put("js/directives/selections/room/room.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar ng-change=updateModel(ngmodelvar)><option ng-repeat=\"i in ctrl.rooms | orderBy:['+code','+description']\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{i.code}} - {{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/roomType/roomType.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.roomTypes\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{i.code}} - {{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/school/school.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.schools | orderBy:['name']\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.name }}</option></select>");
  $templateCache.put("js/directives/selections/schoolPriority/school-priority.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.schoolPriorities\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.code }}</option></select>");
  $templateCache.put("js/directives/selections/schoolReportStatus/school-report-status.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.schoolReportStatus\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.code }} - {{i.description}}</option></select>");
  $templateCache.put("js/directives/selections/schoolType/school-type.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.schoolTypes\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.code }} - {{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/sourceOfFunding/source-of-funding.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.sourceOfFundings\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.code }} - {{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/specialCategory/special-category.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.specialCategories\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.code }} - {{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/staff/staff.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readOnly ng-model=ngmodelvar><option value=\"\" ng-show=includeBlank>-- none --</option><option ng-repeat=\"i in ctrl.staff\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.initials }} - {{ i.person.surname }}, {{ i.person.firstName }}</option><option value=\"\" ng-show=\"ctrl.staff.length == 0\">-- Loading Data --</option></select>");
  $templateCache.put("js/directives/selections/staffType/staff-type.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.staffTypes\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.code }} - {{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/statusType/status-type.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.statusTypes\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.code }} - {{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/studentRemarkPermission/student-remark-permission.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.studentRemarkPermissions\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/studentType/student-type.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.studentTypes\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.code }} - {{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/supportType/support-type.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.supportTypes\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.support }}</option></select>");
  $templateCache.put("js/directives/selections/title/title.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option value=\"\" ng-show=includeBlank>-- none --</option><option ng-repeat=\"i in ctrl.titles\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/tutorGroup/tutor-group.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.tutorGroups| orderBy:['+code'] | filter:{inUse: 'true'} \" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.code }} - {{ i.description }}</option></select>");
  $templateCache.put("js/directives/selections/withdrawalReason/withdrawal-reason.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option value=\"\" ng-show=includeBlank>-- none --</option><option ng-repeat=\"i in ctrl.withdrawalReasons\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.code }} - {{ i.shortDescription }}</option></select>");
  $templateCache.put("js/directives/selections/yearGroup/year-group.selection.html",
    "<select id=\"{{ id }}\" class={{class}} ng-disabled=readonly ng-model=ngmodelvar><option ng-repeat=\"i in ctrl.yearGroups\" ng-selected=\"ngmodelvar == i.id\" ng-value=\"{{ i.id }}\" value=\"{{ i.id }}\">{{ i.code }} - {{ i.description }}</option></select>");
  $templateCache.put("js/directives/settings-editor/views/setting-editor.html",
    "<div class=row><div class=\"col-md-2 col-md-offset-10\"><button type=button class=\"btn btn-sm btn-primary\" ng-click=ctrl.toggleVisibility()>Filters <span class=\"glyphicon glyphicon-chevron-right\" ng-hide=ctrl.visible></span> <span class=\"glyphicon glyphicon-chevron-down\" ng-show=ctrl.visible></span></button> <button ng-show=ctrl.visible class=\"btn btn-sm btn-info\" type=button ng-click=ctrl.resetFilters()>Reset Filters</button></div></div><div class=\"periods-filters row\" ng-show=ctrl.visible><div class=\"form-group col-sm-12 col-md-3 row\"><label for=period class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Setting</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input ng-model=filter.setting class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div><div class=\"form-group col-sm-12 col-md-3 row\"><label for=title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input ng-model=filter.description class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div></div><table class=\"table table-responsive table-hover\"><thead><th ng-click=\"ctrl.changeSort('setting')\">Setting <span ng-show=\"ctrl.isSortedAsc('setting')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('setting')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('value')\">Value <span ng-show=\"ctrl.isSortedAsc('value')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('value')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('description')\">Description <span ng-show=\"ctrl.isSortedAsc('description')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('description')\">&#x25B2;</span></th></thead><tbody><tr ng-repeat=\"setting in settings|orderBy : ctrl.sortOrder | filter: ctrl.filterParams \"><td>{{ setting.setting }}</td><td>{{ setting.value }}</td><td>{{ setting.description }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editSettings(setting.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addSettings()><span class=\"glyphicon glyphicon-pencil\"></span> Add</button>");
  $templateCache.put("js/directives/settings-editor/views/settings-editorDialog.html",
    "<form id=settingsEditForm name=settingsEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add/Edit Setting</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=code class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Setting:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=code class=form-control name=id ng-model=ctrl.settings.setting></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Value:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=description class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.settings.value></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=htmlColour class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.settings.description></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/special-categories-editor/views/special-categories-editor.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-click=\"ctrl.changeSort('code')\">Code <span ng-show=\"ctrl.isSortedAsc('code')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('code')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('description')\">Description <span ng-show=\"ctrl.isSortedAsc('description')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('description')\">&#x25B2;</span></th></thead><tbody><tr ng-repeat=\"specialCategory in specialCategories | orderBy : ctrl.sortOrder\"><td>{{ specialCategory.code }}</td><td>{{ specialCategory.description }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editSpecialCategories(specialCategory.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addSpecialCategories()><span class=\"glyphicon glyphicon-pencil\"></span> Add</button>");
  $templateCache.put("js/directives/special-categories-editor/views/special-categories-editorDialog.html",
    "<form id=specialCategoriesEditForm name=specialCategoriesEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add/Edit SpecialCategory</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">SpecialCategory ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=id class=form-control name=id readonly ng-model=ctrl.specialCategories.id></div></div><div class=form-group ng-show=true><label for=code class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Code</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=code class=form-control name=id ng-model=ctrl.specialCategories.code></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=description class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.specialCategories.description></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/staffs-editor/views/staffs-editor.html",
    "<div class=row><div class=\"col-md-2 col-md-offset-10\"><button type=button class=\"btn btn-sm btn-primary\" ng-click=ctrl.toggleVisibility()>Filters <span class=\"glyphicon glyphicon-chevron-right\" ng-hide=ctrl.visible></span> <span class=\"glyphicon glyphicon-chevron-down\" ng-show=ctrl.visible></span></button> <button ng-show=ctrl.visible class=\"btn btn-sm btn-info\" type=button ng-click=ctrl.resetFilters()>Reset Filters</button></div></div><div class=\"rooms-filters row\" ng-show=ctrl.visible><div class=\"form-group col-sm-12 col-md-3 row\"><label for=initials class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Initials</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input ng-model=filter.initials class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div><div class=\"form-group col-sm-12 col-md-3 row\"><label for=knownAs class=\"col-xs-4 col-sm-4 col-md-4 control-label\">knownAs</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input ng-model=filter.knownAs class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div></div><table class=\"table table-responsive table-hover\"><thead><th ng-click=\"ctrl.changeSort('person.firstName')\">FirstName <span ng-show=\"ctrl.isSortedAsc('person.firstName')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('person.firstName')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('person.surname')\">Surname <span ng-show=\"ctrl.isSortedAsc('person.surname')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('person.surname')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('initials')\">Initials <span ng-show=\"ctrl.isSortedAsc('initials')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('initials')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('knownAs')\">KnownAs <span ng-show=\"ctrl.isSortedAsc('knownAs')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('knownAs')\">&#x25B2;</span></th><th>Network Login</th><th ng-click=\"ctrl.changeSort('startDate')\">Start Date <span ng-show=\"ctrl.isSortedAsc('startDate')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('startDate')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('endDate')\">End Date <span ng-show=\"ctrl.isSortedAsc('endDate')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('endDate')\">&#x25B2;</span></th></thead><tbody><tr ng-repeat=\"staff in ctrl.staffs | orderBy : ctrl.sortOrder| filter: ctrl.filterParams\"><td>{{ staff.person.firstName }}</td><td>{{ staff.person.surname }}</td><td>{{ staff.initials }}</td><td>{{ staff.knownAs }}</td><td>{{ staff.networkLogin }}</td><td>{{ staff.startDate | date:'dd/MM/yyyy' }}</td><td>{{ staff.endDate | date:'dd/MM/yyyy' }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editStaffs(staff.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table>");
  $templateCache.put("js/directives/staffs-editor/views/staffs-editorDialog.html",
    "<form id=staffsEditForm name=staffsEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add/Edit Staff</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Staff ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=id class=form-control name=id readonly ng-model=ctrl.staffs.id></div></div><div class=form-group ng-show=true><label for=initials class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Initials</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=initials class=form-control name=initials ng-model=ctrl.staffs.initials></div></div><div class=form-group ng-show=true><label for=code class=\"col-xs-4 col-sm-4 col-md-4 control-label\">KnownAs</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=code class=form-control name=id ng-model=ctrl.staffs.knownAs></div></div><div class=form-group ng-show=true><label for=networkLogin class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Network Login</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=networkLogin class=form-control name=networkLogin ng-model=ctrl.staffs.networkLogin></div></div></div></div><table class=\"table table-bordered\"><thead><th>Roles</th></thead><tbody><tr ng-repeat=\"s in ctrl.staffs.person.roles\"><td>{{ s.roleName }}</td></tr></tbody></table><div class=form-group><label for=role class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Add Roles:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><role-selection id=role class=form-control ng-model=ctrl.staffs.person.roles.id></role-selection></div></div><button type=button class=\"btn btn-primary\" ng-click=ctrl.add()><span class=\"glyphicon glyphicon-save\"></span> Add</button><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/student-admissions-details/student-admissions-details.html",
    "<div class=student-admissions-details><h4>Application Details</h4><admission-details student-admissions=ctrl.studentAdmissions></admission-details><h4>Previous School Information</h4><previous-school-details student-admissions=ctrl.studentAdmissions></previous-school-details><h4>Initial Interview Details</h4><interviewer-details student-admissions=ctrl.studentAdmissions></interviewer-details><h4>Introductory Day/Choices Day/Enrolment Interview Details</h4><induction-details student-admissions=ctrl.studentAdmissions></induction-details><h4>Notes</h4><div class=\"admission-notes container-fluid\"><div class=row><div class=\"col-xs-5 col-md-3\">Admission Notes:</div><div class=\"col-xs-7 col-md-9\">{{ ctrl.studentAdmissions.admissionsNotes}}</div></div></div><div class=\"admission-editor container-fluid\"><div class=row><student-admission-editor student-admission=ctrl.studentAdmissions></student-admission-editor></div></div></div>");
  $templateCache.put("js/directives/student-alternative-uci-table-editor/views/student-alternative-uci-table.html",
    "<div><table class=\"table table-responsive table-hover\"><thead><th>Exam Board Identifier</th><th>Exam Board Name</th><th>Exam Board Description</th><th>Alternative UCI</th></thead><tbody><tr ng-repeat=\"alternativeUci in ctrl.studentAlternativeUcis\"><td>{{alternativeUci._examBoardIdentifier}}</td><td>{{alternativeUci._examBoardName}}</td><td>{{alternativeUci._examBoardDescription}}</td><td>{{alternativeUci.alternativeUci}}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editStudentAlternativeUci(alternativeUci)>Edit</button> <button type=button class=\"btn btn-danger btn-sm\" ng-click=ctrl.deleteAlternativeUci(alternativeUci.studentId,alternativeUci.examBoardId)>Delete</button></td></tr></tbody></table><button type=button class=\"btn btn-primary\" ng-click=ctrl.addStudentAlternativeUci(ctrl.studentId)>Add</button></div>");
  $templateCache.put("js/directives/student-alternative-uci-table-editor/views/student-alternative-ucis-editor-dialog-add.html",
    "<form id=studentAlternativeUciEditForm name=studentAlternativeUciEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add/Edit StudentAlternativeUci</h4></div><div class=modal-body><div class=row><div class=form-group><label for=examBoard class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Exam Board:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><exam-board-selection id=examBoard class=form-control ng-model=ctrl.studentAlternativeUci.examBoardId></exam-board-selection></div></div><div class=form-group><label for=alternativeUci class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Alternative Uci</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=alternativeUci class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.studentAlternativeUci.alternativeUci></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.saveAdd()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/student-alternative-uci-table-editor/views/student-alternative-ucis-editor-dialog-edit.html",
    "<form id=studentAlternativeUciEditForm name=studentAlternativeUciEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add/Edit StudentAlternativeUci</h4></div><div class=modal-body><div class=row><div class=form-group><label for=examBoard class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Exam Board:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><exam-board-selection id=examBoard class=form-control ng-model=ctrl.studentAlternativeUci.examBoardId></exam-board-selection></div></div><div class=form-group><label for=alternativeUci class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Alternative Uci</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=alternativeUci class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.studentAlternativeUci.alternativeUci></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.saveEdit()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/student-concession-type-table/student-concession-type-table.html",
    "<div class=\"col-sm-12 col-md-4\"><table class=\"table table-hover\"><thead><th ng-show=showAll>Admission Number</th><th>Concession</th><th>Extra Time Percentage</th></thead><tbody><tr ng-repeat=\"studentConcessionType in ctrl.studentConcessionTypes\"><td ng-show=showAll>{{ studentConcessionType.studentId }}</td><td>{{ studentConcessionType._concessionDescription }}</td><td>{{ studentConcessionType.extraTimePercentage }}</td></tr></tbody></table></div>");
  $templateCache.put("js/directives/student-contact-preferences-editor/views/student-contact-preferences-editor-dialog.html",
    "<form id=studentSummaryEditForm name=studentContactPreferenceEditForm role=form novalidate ng-submit=ctrl.save() show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title>Edit Student Contact Preferences</h4></div><div class=modal-body><div class=row><div class=form-group><label for=restrictedUseIndicator class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Restricted Use Indicator:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><restricted-use-indicator-selection class=form-control include-blank=true ng-model=ctrl.student.restrictedUseIndicatorId></restricted-use-indicator-selection></div></div><div class=form-group><label for=contactByPost class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Contact By Post</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.student.contactByPost></div></div><div class=form-group><label for=contactByPhone class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Contact By Phone</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.student.contactByPhone></div></div><div class=form-group><label for=contactByEmail class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Contact By Email</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.student.contactByEmail></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=submit class=\"btn btn-primary\" ng-disabled=\"studentContactPreferenceEditForm.$invalid || studentSummaryEditForm.$submitted\"><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/student-contact-preferences-editor/views/student-contact-preferences-editor.html",
    "<button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editStudentContactPreference(ctrl.studentId)><span class=\"glyphicon glyphicon-pencil\"></span> Edit Student Contact Preference</button>");
  $templateCache.put("js/directives/student-details/student-details.html",
    "<div class=\"student-details container-fluid\"><div class=row><div class=\"col-md-4 col-sm-4 col-xs-4\">Reference:</div><div class=\"col-md-8 col-sm-8 col-xs-8\">{{ student.referenceNo }}</div></div><person-details person=student.person show-dob=\"showAll || showDob\" show-gender=\"showAll || showGender\"></person-details><person-contact-details person=student.person></person-contact-details><div class=row><div class=\"col-md-5 col-sm-5 col-xs-5\">Student Email:</div><div class=\"col-md-7 col-sm-7 col-xs-7\">{{ student._studentEmail }}</div></div><div class=row><div class=\"col-md-4 col-sm-4 col-xs-4\">ULN:</div><div class=\"col-md-8 col-sm-8 col-xs-8\">{{ student.uln | notSet }}</div></div><div class=row><div class=\"col-md-4 col-sm-4 col-xs-4\">UCI:</div><div class=\"col-md-8 col-sm-8 col-xs-8\">{{ student.uci | notSet }}</div></div><div class=row><div class=\"col-md-4 col-sm-4 col-xs-4\">Ethnicity:</div><div class=\"col-md-8 col-sm-8 col-xs-8\">{{ student._ethnicityDescription }}</div></div><div class=row ng-show=\"student.llddHealthProblemCategories.length !== 0\"><div class=\"col-md-4 col-sm-4 col-xs-4\">LLDD and Health Problems:</div><div class=\"col-md-8 col-sm-8 col-xs-8\"><ul><li ng-repeat=\"prob in student.llddHealthProblemCategories\">{{ prob.code }} - {{ prob.description }}</li></ul></div></div><div class=\"row error\" ng-hide=hasData()>Student Details: No Data Provided</div></div>");
  $templateCache.put("js/directives/student-entry-qualifications-table/student-entry-qualifications-table.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-show=\"showAll || showStudent\">Student</th><th>Entry Qualification Type</th><th>Entry Qualification Title</th><th>Grade</th><th>Date</th><th>Checked</th></thead><tbody><tr ng-repeat=\"studentEntryQualification in studentEntryQualifications\"><td ng-show=\"showAll || showStudent\">{{ studentEntryQualification.studentId }}</td><td>{{ studentEntryQualification._entryQualification._entryQualificationTypeDescription }}</td><td>{{ studentEntryQualification._entryQualification.title }}</td><td>{{ studentEntryQualification.grade }}</td><td>{{ studentEntryQualification.date | date:'dd/MM/yyyy' }}</td><td>{{ studentEntryQualification.checked | yesNo }}</td></tr></tbody></table>");
  $templateCache.put("js/directives/student-image/student-image.html",
    "<img class=student-image ng-src=\"{{ loadImageUrl() }}\" alt=\"Student Image\">");
  $templateCache.put("js/directives/student-interim-reports-table/student-interim-reports-table.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-show=\"showAll || showStudent\">Student</th><th ng-show=\"showAll || showIRInfo\">Interim Report Code</th><th>Interim Report</th><th>Year</th><th>Course</th><th class=text-center><span uib-tooltip=Motivation>M</span></th><th class=text-center><span uib-tooltip=\"Class Ethic\">CE</span></th><th class=text-center><span uib-tooltip=\"Time Management\">TM</span></th><th class=text-center><span uib-tooltip=\"Average Effort\">Avg</span></th><th class=text-center ng-show=\"showAll || showAttendanceFigures\">Total Possible</th><th class=text-center ng-show=\"showAll || showAttendanceFigures\">Absence</th><th class=text-center ng-show=\"showAll || showAttendanceFigures\">Authorised Absence</th><th class=text-center ng-show=\"showAll || showAttendanceFigures\">Late</th><th class=text-center>Attendance %</th><th class=text-center>Adjusted %</th><th class=text-center><span uib-tooltip=\"Current Predicted Grade\">CG</span></th><th class=text-center ng-show=\"showAll || showKeyAssessments\"><span uib-tooltip=\"Key Assessment 1 Grade\">KA1</span></th><th class=text-center ng-show=\"showAll || showKeyAssessments\"><span uib-tooltip=\"Key Assessment 2 Grade\">KA2</span></th></thead><tbody><tr ng-repeat=\"studentInterimReport in studentInterimReports\"><td ng-show=\"showAll || showStudent\">{{ studentInterimReport.studentId }}</td><td ng-show=\"showAll || showIRInfo\">{{ studentInterimReport._interimReportCode }}</td><td>{{ studentInterimReport._interimReportDescription }}</td><td>{{ studentInterimReport._interimReportYear }}</td><td>{{ studentInterimReport._courseDescription }}</td><td class=text-center>{{ studentInterimReport.motivation }}</td><td class=text-center>{{ studentInterimReport.classEthic }}</td><td class=text-center>{{ studentInterimReport.timeManagement }}</td><td class=text-center>{{ studentInterimReport._averageEffort | number:3 }}</td><td class=text-center ng-show=\"showAll || showAttendanceFigures\">{{ studentInterimReport.totalPossible }}</td><td class=text-center ng-show=\"showAll || showAttendanceFigures\">{{ studentInterimReport.absence }}</td><td class=text-center ng-show=\"showAll || showAttendanceFigures\">{{ studentInterimReport.authorisedAbsence }}</td><td class=text-center ng-show=\"showAll || showAttendanceFigures\">{{ studentInterimReport.late }}</td><td class=text-center>{{ studentInterimReport._attendancePercentage | percent:2 }}</td><td class=text-center>{{ studentInterimReport._adjustedAttendancePercentage | percent:2 }}</td><td class=text-center>{{ studentInterimReport._currentPredictedGrade }}</td><td class=text-center ng-show=\"showAll || showKeyAssessments\">{{ studentInterimReport._keyAssessment1Grade }}</td><td class=text-center ng-show=\"showAll || showKeyAssessments\">{{ studentInterimReport._keyAssessment2Grade }}</td></tr></tbody></table>");
  $templateCache.put("js/directives/student-learning-support-costs-editor/views/student-learning-support-costs-editor.html",
    "<div class=\"form-group col-md-12 col-sm-12\"><table class=\"table table-hover\"><thead><th ng-show=\"showAll || showStudent\">Student</th><th>Start Date</th><th>End Date</th><th>Hours Per Week</th><th>Weeks</th><th>Rate</th><th>Description</th><th>Period</th><th>Actions</th></thead><tbody><tr ng-repeat=\"studentLearningSupportCost in ctrl.studentLearningSupportCosts\"><td ng-show=\"showAll || showStudent\">{{ studentLearningSupportCost.studentId }}</td><td>{{ studentLearningSupportCost.startDate | date:'dd/MM/yyyy' }}</td><td>{{ studentLearningSupportCost.endDate | date:'dd/MM/yyyy' }}</td><td>{{ studentLearningSupportCost.hoursPerWeek }}</td><td>{{ studentLearningSupportCost.weeks }}</td><td>{{ studentLearningSupportCost.rate }}</td><td>{{ studentLearningSupportCost.description }}</td><td>{{ studentLearningSupportCost.periodDescription }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editStudentLearningSupportCost(studentLearningSupportCost.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary\" ng-click=ctrl.addStudentLearningSupportCost(ctrl.studentId)>Add</button></div>");
  $templateCache.put("js/directives/student-learning-support-costs-editor/views/student-learning-support-costs-editorDialog.html",
    "<form name=studentLearningSupportCostEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title>Create or edit a Student Learning Support Costs</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=false><label for=studentId>Student ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=form-control name=studentId readonly ng-model=ctrl.studentLearningSupportCost.studentId></div></div><div class=form-group><label for=qualificationData class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Start Date</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div class=input-group><input class=form-control ng-init=\"studentLearningSupportCostStartDatePicker = false\" uib-datepicker-popup=dd/MM/yyyy is-open=studentLearningSupportCostStartDatePicker ng-model=ctrl.studentLearningSupportCost.startDate> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"studentLearningSupportCostStartDatePicker = !studentLearningSupportCostStartDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div><div class=form-group><label for=qualificationData class=\"col-xs-4 col-sm-4 col-md-4 control-label\">End Date</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div class=input-group><input class=form-control ng-init=\"studentLearningSupportCostEndDatePicker = false\" uib-datepicker-popup=dd/MM/yyyy is-open=studentLearningSupportCostEndDatePicker ng-model=ctrl.studentLearningSupportCost.endDate> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"studentLearningSupportCostEndDatePicker = !studentLearningSupportCostEndDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div><div class=form-group><label for=grade class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Hours Per week</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=grade class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.studentLearningSupportCost.hoursPerWeek></div></div><div class=form-group><label for=grade class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Weeks</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=grade class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.studentLearningSupportCost.weeks></div></div><div class=form-group><label for=field_title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Rate</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.studentLearningSupportCost.rate></div></div><div class=form-group><label for=grade class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=grade class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.studentLearningSupportCost.description></div></div><div class=form-group><label for=grade class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Period</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=grade class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.studentLearningSupportCost.periodDescription></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-disabled=\"studentLearningSupportCostEditForm.$invalid || studentLearningSupportCostEditForm.$submitted\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/student-learning-support-details/student-learning-support-details.html",
    "<div class=\"student-learning-support-details container-fluid\"><div class=row><div class=col-xs-6><div class=col-xs-5>Reading Level:</div><div class=col-xs-7>{{ studentLearningSupport._readingInitialAssessmentDescirption }}</div><div class=col-xs-5>Writing Level:</div><div class=col-xs-7>{{ studentLearningSupport._writingInitialAssessmentDescirption }}</div><div class=col-xs-5>Spelling Level:</div><div class=col-xs-7>{{ studentLearningSupport._spellingInitialAssessmentDescirption }}</div></div><div class=col-xs-6><div class=col-xs-5>Referral Notes:</div><div class=col-xs-7>{{ studentLearningSupport.referralNotes }}</div></div></div><div class=row><div class=\"col-sm-12 col-md-5\"><h3>Referral Reasons</h3><table class=\"table table-responsive table-hover\"><thead><th ng-show=\"showAll || showStudent\">StudentId</th><th>Referral Reason</th><th>Primary</th></thead><tbody><tr ng-repeat=\"referralReason in studentLearningSupport.referralReasons\"><td ng-show=\"showAll || showStudent\">{{ referralReason.studentId }}</td><td>{{ referralReason._referralReasonDescription }}</td><td>{{ referralReason.primary | yesNo }}</td></tr><tr ng-show=\"studentLearningSupport.referralReasons.length == 0\"><td colspan=2>No Referral Resaons</td></tr></tbody></table></div><div class=\"col-sm-12 col-md-7\"><h3>Concessions</h3><table class=\"table table-responsive table-hover\"><thead><th ng-show=\"showAll || showStudent\">StudentId</th><th>Concession Code</th><th>Concession Description</th><th>Extra Time Percentage</th></thead><tbody><tr ng-repeat=\"concession in studentLearningSupport.concessions\"><td ng-show=\"showAll || showStudent\">{{ concession.studentId }}</td><td>{{ concession._concessionCode }}</td><td>{{ concession._concessionDescription }}</td><td>{{ concession.extraTimePercentage }}</td></tr><tr ng-show=\"studentLearningSupport.concessions.length == 0\"><td colspan=3>No Concessions</td></tr></tbody></table></div></div></div>");
  $templateCache.put("js/directives/student-learning-support-editor/views/student-learning-support-editor-dialog.html",
    "<form name=studentLearningSupportEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title>Edit Student Learning Support</h4></div><div class=modal-body><div class=row><div class=\"form-group col-sm-12\"><label for=field_plh class=\"col-xs-4 control-label\">Referral Notes:</label><div class=col-xs-8><textarea type=text name=plh class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.studentLearningSupport.referralNotes></textarea></div></div><div class=\"form-group col-sm-12\"><label for=field_plh class=\"col-xs-4 control-label\">Support Notes:</label><div class=col-xs-8><textarea type=text name=plh class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.studentLearningSupport.supportNotes></textarea></div></div><div class=\"form-group col-sm-6\"><label for=title class=\"col-xs-4 control-label\">Support Type:</label><div class=col-xs-8><support-type-selection class=form-control include-blank=true ng-model=ctrl.studentLearningSupport.supportTypeId></support-type-selection></div></div><div class=\"form-group col-sm-6\"><label for=assessmentDate class=\"col-xs-4 control-label\">Date of Assessment:</label><div class=col-xs-8><div class=input-group><input class=form-control ng-init=\"assessmentDateDatePicker = false\" uib-datepicker-popup=dd/MM/yyyy is-open=assessmentDateDatePicker ng-model=ctrl.studentLearningSupport.assessmentDate> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"assessmentDateDatePicker = !assessmentDateDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div><div class=\"form-group col-sm-6\"><label for=field_onContract class=\"col-xs-4 control-label\">Concession Application:</label><div class=col-xs-8><input type=checkbox name=onContract ng-model=ctrl.studentLearningSupport.concessionApplication class=\"form-control text ui-widget-content ui-corner-all\"></div></div><div class=\"form-group col-sm-6\"><label for=field_onContract class=\"col-xs-4 control-label\">Exam Concession Approved:</label><div class=col-xs-8><input type=checkbox name=onContract ng-model=ctrl.studentLearningSupport.examConcessionApproved class=\"form-control text ui-widget-content ui-corner-all\"></div></div><div class=\"form-group col-sm-6\"><label for=field_onContract class=\"col-xs-4 control-label\">BTEC Concessions Approved:</label><div class=col-xs-8><input type=checkbox name=onContract ng-model=ctrl.studentLearningSupport.btecConcessionApproved class=\"form-control text ui-widget-content ui-corner-all\"></div></div><div class=\"form-group col-sm-6\"><label for=field_onContract class=\"col-xs-4 control-label\">Functional Skills Approved:</label><div class=col-xs-8><input type=checkbox name=onContract ng-model=ctrl.studentLearningSupport.fsConcessionApproved class=\"form-control text ui-widget-content ui-corner-all\"></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=submit class=\"btn btn-primary\" ng-disabled=\"studentLearningSupportEditForm.$invalid || studentLearningSupportEditForm.$submitted\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/student-learning-support-editor/views/student-learning-support-editor.html",
    "<button type=button ng-click=ctrl.editStudentLearningSupport(ctrl.studentId) class=\"btn btn-sm btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> Edit Student Learning Support</button>");
  $templateCache.put("js/directives/student-learning-support-visits-editor/views/student-learning-support-visits-editor.html",
    "<div class=\"form-group col-md-12 col-sm-12\"><table class=\"table table-hover\"><thead><th ng-show=\"showAll || showStudent\">Student</th><th>Date</th><th>Time</th><th>Duration</th><th>Details</th><th>Actions</th></thead><tbody><tr ng-repeat=\"studentLearningSupportVisit in ctrl.studentLearningSupportVisits\"><td ng-show=\"showAll || showStudent\">{{ studentLearningSupportVisit.studentId }}</td><td>{{ studentLearningSupportVisit.date | date:'dd/MM/yyyy' }}</td><td>{{ studentLearningSupportVisit.time | date: \"HH:mm:ss\" }}</td><td>{{ studentLearningSupportVisit.duration }}</td><td>{{ studentLearningSupportVisit.details }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editStudentLearningSupportVisit(studentLearningSupportVisit.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary\" ng-click=ctrl.addStudentLearningSupportVisit(ctrl.studentId)>Add</button></div>");
  $templateCache.put("js/directives/student-learning-support-visits-editor/views/student-learning-support-visits-editorDialog.html",
    "<form name=studentLearningSupportVisitEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title>Create or edit a Student Learning Support Visit</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=false><label for=studentId>Student ID</label><div class=col-xs-8><input class=form-control name=studentId readonly ng-model=ctrl.studentLearningSupportVisit.studentId></div></div><div class=form-group><label for=duration class=\"col-xs-4 control-label\">Duration</label><div class=col-xs-8><input name=duration class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.studentLearningSupportVisit.duration></div></div><div class=form-group><label for=details class=\"col-xs-4 control-label\">Details</label><div class=col-xs-8><input name=details class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.studentLearningSupportVisit.details></div></div><div class=form-group><label for=date class=\"col-xs-4 control-label\">Date</label><div class=col-xs-8><div class=input-group><input name=date class=form-control ng-init=\"studentLearningSupportVisitStartDatePicker = false\" uib-datepicker-popup=dd/MM/yyyy is-open=studentLearningSupportVisitStartDatePicker ng-model=ctrl.studentLearningSupportVisit.date> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"studentLearningSupportVisitStartDatePicker = !studentLearningSupportVisitStartDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div><div class=form-group><label for=details class=\"col-xs-4 control-label\">Time</label><div class=col-xs-8><input name=details type=time class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.studentLearningSupportVisit.time placeholder=HH:mm:ss min=08:00:00 max=17:00:00 required></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-disabled=\"studentLearningSupportVisitEditForm.$invalid || studentLearningSupportVisitEditForm.$submitted\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/student-option-editor-table/views/student-option-editor-add-dialog.html",
    "<form id=studentOptionEditForm name=studentOptionEntryAddEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Search Entry Code</h4></div><div class=modal-body><div class=row><div class=form-group><label for=studentId class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Student Id:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=studentId class=\"form-control text ui-widget-content ui-corner-all\" readonly ng-model=ctrl.studentId></div></div><div class=form-group><label for=resit class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Resit:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=resit type=checkbox class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.resit></div></div><div class=form-group><label for=privateStudent class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Private Student:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=privateStudent type=checkbox class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.privateStudent></div></div></div><div class=row><h5 class=col-md-12>Add Entry Code</h5><div class=\"search-box EntryCode-search col-md-12\"><div class=\"search-form col-md-8\"><form class=form-inline><div class=form-group><label for=name class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Entry Code Search:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=name class=\"form-control input-sm\" ng-model=ctrl.optionEntryCode></div></div></form></div><div class=col-md-4><button name=search class=\"btn btn-sm btn-primary\" ng-click=ctrl.search()>Search</button> <button name=clear class=\"btn btn-sm btn-default\" ng-click=ctrl.clear()>Clear</button> <button id=toggle-interview-results class=\"btn btn-sm btn-info\" type=button ng-click=ctrl.toggleResults() ng-disabled=!ctrl.hasResults()>Show/Hide Results</button></div></div><div class=\"message col-md-12\">{{ ctrl.message }}</div><div class=col-md-12><div class=\"search-results col-md-12\" ng-show=ctrl.hasResults()><div class=collapsable ng-show=ctrl.resultsVisible()><h4>Search Results</h4><table class=\"table table-responsive table-bordered table-hover table-condensed\"><thead><th>Option Entry code</th><th>Option Title</th><th>Exam Board</th><th>Exam Series</th><th>Exam Year</th><th>Action</th></thead><tbody><tr ng-repeat=\"result in ctrl.results | orderBy:['+optionEntryCode']\"><td>{{ result.optionEntryCode }}</td><td>{{ result.optionTitle }}</td><td>{{ result.syllabusDto.examSeries.examBoard.description }}</td><td>{{ result.syllabusDto.examSeries.examSeries }}</td><td>{{ result.syllabusDto.examSeries.examYear }}</td><td><button type=button class=\"btn btn-primary\" ng-click=\"ctrl.addOptionEntryCode(ctrl.studentId, result.examOptionId)\">Add</button></td></tr><tr ng-show=!ctrl.hasResults()><td colspan=3>No Results</td></tr></tbody></table></div></div></div></div></div></form>");
  $templateCache.put("js/directives/student-option-editor-table/views/student-option-editor-edit-dialog.html",
    "<form id=studentOptionEntryEditForm name=studentOptionEntryEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add / Edit Student Option Entry: {{ctrl.studentOptionEntry._optionEntryCode}}</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=false><label for=id>Student ID:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=field_id class=form-control name=id readonly ng-model=ctrl.studentOptionEntry.studentId></div></div><div class=form-group ng-show=false><label for=examOption class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Exam Option ID:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=examOption class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.studentOptionEntry.examOptionId></div></div><div class=form-group><label for=statusType class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Status:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><status-type-selection id=statusType class=form-control ng-model=ctrl.studentOptionEntry.statusTypeId></status-type-selection></div></div><div class=form-group><label for=ediStatusType class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Edi Status:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><edi-status-type-selection id=ediStatusType class=form-control ng-model=ctrl.studentOptionEntry.ediStatusTypeId></edi-status-type-selection></div></div><div class=form-group><label for=resit class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Resit:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=resit type=checkbox class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.studentOptionEntry.resit></div></div><div class=form-group><label for=private class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Private:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=private type=checkbox class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.studentOptionEntry.privateStudent></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-disabled=\"studentOptionEntryEditForm.$invalid || studentOptionEntryEditForm.$submitted\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/student-option-editor-table/views/student-option-editor-table.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-show=showStudent>Student ID</th><th ng-show=showOption>Option</th><th>Exam Board</th><th>Exam</th><th>Exam Series</th><th>Status</th><th>Edi Status</th><th>Resit</th><th>Private</th><th permission=\"'ROLE_Exams Officer'\">Actions</th></thead><tbody><tr ng-repeat=\"studentOptionEntry in ctrl.studentOptionEntries\"><td ng-show=showStudent>{{ studentOptionEntry.studentId }}</td><td ng-show=showOption>{{ studentOptionEntry.examOptionId }}</td><td>{{ studentOptionEntry._examBoard.boardIdentifier }} - {{ studentOptionEntry._examBoard.description }}</td><td>{{ studentOptionEntry._optionEntryCode }} - {{ studentOptionEntry._optionTitle }}</td><td>{{ studentOptionEntry._examSeries.examYear }} - {{ studentOptionEntry._examSeries.examSeries }}</td><td>{{ studentOptionEntry._statusTypeDescription }}</td><td>{{ studentOptionEntry._ediStatusTypeDescription }}</td><td>{{ studentOptionEntry.resit | yesNo }}</td><td>{{ studentOptionEntry.privateStudent | yesNo }}</td><td permission=\"'ROLE_Exams Officer'\"><button type=button class=\"btn btn-primary btn-sm\" ng-click=\"ctrl.editStudentOptionEntry(studentOptionEntry.studentId, studentOptionEntry.examOptionId)\"><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button> <button type=button class=\"btn btn-danger btn-sm\" ng-click=\"ctrl.deleteStudentOptionEntry(studentOptionEntry.studentId, studentOptionEntry.examOptionId)\"><span class=\"glyphicon glyphicon-pencil\"></span> Delete</button></td></tr></tbody></table><button type=button class=\"btn btn-primary\" permission=\"'ROLE_Exams Officer'\" ng-click=ctrl.addStudentOptionEntry(ctrl.studentId)>Add</button> <button type=button class=\"btn btn-default\" permission=\"'ROLE_Exams Officer'\" ng-click=ctrl.markAmendment(ctrl.studentId)>Mark For Amendment</button>");
  $templateCache.put("js/directives/student-overall-attendance-details/student-overall-attendance-details.html",
    "<div class=student-overall-attendance-details><div class=row><div class=\"col-xs-5 col-md-4\">Attendance:</div><div class=\"col-xs-7 col-md-2\">{{ studentOverallAttendance.attendance | percent:2 }}</div><div class=\"col-xs-5 col-md-4\">Adjusted Attendance:</div><div class=\"col-xs-7 col-md-2\">{{ studentOverallAttendance.adjustedAttendance | percent:2 }}</div><div class=\"col-xs-5 col-md-4\">Punctuality:</div><div class=\"col-xs-7 col-md-2\">{{ studentOverallAttendance.punctuality | percent:2 }}</div><div class=\"col-xs-5 col-md-4\">Adjusted Punctuality:</div><div class=\"col-xs-7 col-md-2\">{{ studentOverallAttendance.adjustedPunctuality | percent:2 }}</div></div><div class=row ng-show=showAll><div class=\"col-xs-5 col-md-4\">Total Absence:</div><div class=\"col-xs-7 col-md-2\">{{ studentOverallAttendance.totalAbsence | blank }}</div><div class=\"col-xs-5 col-md-4\">Total Authorised:</div><div class=\"col-xs-7 col-md-2\">{{ studentOverallAttendance.totalAuthorisedAbsence | blank }}</div><div class=\"col-xs-5 col-md-4\">Total Late:</div><div class=\"col-xs-7 col-md-2\">{{ studentOverallAttendance.totalLate | blank }}</div><div class=\"col-xs-5 col-md-4\">Total Authorised Late:</div><div class=\"col-xs-7 col-md-2\">{{ studentOverallAttendance.totalAuthorisedLate | blank }}</div><div class=\"col-xs-5 col-md-4\">Total Sessions:</div><div class=\"col-xs-7 col-md-2\">{{ studentOverallAttendance.totalSessions | blank }}</div></div></div>");
  $templateCache.put("js/directives/student-summary-editor/views/student-summary-editor-dialog.html",
    "<form id=studentSummaryEditForm name=studentSummaryEditForm role=form novalidate ng-submit=ctrl.save() show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title>Edit Student Details</h4></div><div class=modal-body><div class=row><div class=form-group><label for=uln class=\"col-xs-4 col-sm-4 col-md-4 control-label\">ULN</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=uln name=uln class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.student.uln></div></div><div class=form-group><label for=uci class=\"col-xs-4 col-sm-4 col-md-4 control-label\">UCI</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=uci name=uci class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.student.uci></div></div><div class=form-group><label for=ethnicity class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Ethnicity:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><ethnicity-selection class=form-control include-blank=true ng-model=ctrl.student.ethnicityId></ethnicity-selection></div></div><div class=form-group><label for=nationality class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Nationality:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><nationality-selection class=form-control include-blank=true ng-model=ctrl.student.nationalityId></nationality-selection></div></div><div class=form-group><label for=school class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Previous School:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><school-selection class=form-control include-blank=true ng-model=ctrl.student.previousSchoolId></school-selection></div></div><div class=form-group><label for=LLDDHealthProblem class=\"col-xs-4 col-sm-4 col-md-4 control-label\">LLDD Health Problem:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><lldd-health-problem-selection class=form-control include-blank=true ng-model=ctrl.student.llddHealthProblemId></lldd-health-problem-selection></div></div><div class=form-group><label for=medicalNote class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Medical Notes</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=medicalNote name=medicalNote class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.student.medicalNote></div></div><div class=form-group><label for=monitorable class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Monitorable</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.student.monitorable></div></div><div class=form-group><label for=resident class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Resident</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.student.resident></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=submit class=\"btn btn-primary\" ng-disabled=\"studentSummaryEditForm.$invalid || studentSummaryEditForm.$submitted\"><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/student-summary-editor/views/student-summary-editor.html",
    "<button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editStudent(ctrl.studentId)><span class=\"glyphicon glyphicon-pencil\"></span> Edit Student Details</button>");
  $templateCache.put("js/directives/student-summary/student-summary.html",
    "<div class=student-details><div class=row><div class=\"col-md-5 col-sm-5 col-xs-5\">Reference:</div><div class=\"col-md-7 col-sm-7 col-xs-7\">{{ student.referenceNo }}</div></div><div class=row><div class=\"col-md-5 col-sm-5 col-xs-5\">Surname:</div><div class=\"col-md-7 col-sm-7 col-xs-7\">{{ student.person.surname }}</div></div><div class=row><div class=\"col-md-5 col-sm-5 col-xs-5\">First Name:</div><div class=\"col-md-7 col-sm-7 col-xs-7\">{{ student.person.firstName }}</div></div><div class=row ng-show=\"{{ student.person.preferredName }}\"><div class=\"col-md-5 col-sm-5 col-xs-5\">Preferred Name:</div><div class=\"col-md-7 col-sm-7 col-xs-7\">{{ student.person.preferredName }}</div></div><div class=row><div class=\"col-md-5 col-sm-5 col-xs-5\">Student Email:</div><div class=\"col-md-7 col-sm-7 col-xs-7\">{{ student._studentEmail }}</div></div><div class=row><div class=\"col-md-5 col-sm-5 col-xs-5\">ULN:</div><div class=\"col-md-7 col-sm-7 col-xs-7\">{{ student.uln | notSet }}</div></div><div class=row><div class=\"col-md-5 col-sm-5 col-xs-5\">UCI:</div><div class=\"col-md-7 col-sm-7 col-xs-7\">{{ student.uci | notSet }}</div></div><div class=row><div class=\"col-md-5 col-sm-5 col-xs-5\">Ethnicity:</div><div class=\"col-md-7 col-sm-7 col-xs-7\">{{ student._ethnicityDescription }}</div></div><div class=row><div class=\"col-md-5 col-sm-5 col-xs-5\">LLDD and Health Problems:</div><div class=\"col-md-7 col-sm-7 col-xs-7\"><ul ng-show=\"student.llddHealthProblemCategories.length !== 0\"><li ng-repeat=\"prob in student.llddHealthProblemCategories\">{{ prob.code }} - {{ prob.shortDescription }}</li></ul><span ng-show=\"student.llddHealthProblemCategories.length === 0\">No LLDD Health Problems</span></div></div><div class=row><div class=\"col-md-5 col-sm-5 col-xs-5\">Special Category:</div><div class=\"col-md-7 col-sm-7 col-xs-7\">{{ student._specialCategoryCode }} - {{ student._specialCategoryDescription }} <span ng-show=\"{{ student.specialConfirmed }}\">(Confirmed)</span> <span ng-show=\"{{ !student.monitorable }}\">(Not Monitored)</span></div></div><div class=row><div class=\"col-md-5 col-sm-5 col-xs-5\">Average GCSE Score:</div><div class=\"col-md-7 col-sm-7 col-xs-7\">{{ student.gcseScore.average | number:3 | notSet }}</div></div></div>");
  $templateCache.put("js/directives/student-timetable/views/student-timetable-dialog.html",
    "<iframe ng-src=\"{{ ctrl.reportUrl() }}\"></iframe>");
  $templateCache.put("js/directives/student-timetable/views/student-timetable.html",
    "<a class=\"btn btn-sm btn-default\" target=_blank ng-href=\"{{ ctrl.studentTimetableUrl() }}\">Student Timetable</a>");
  $templateCache.put("js/directives/student-withdrawal/views/student-withdrawal-dialog.html",
    "<form id=studentWithdrawalForm name=studentWithdrawalForm role=form novalidate ng-submit=ctrl.save() show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title>Withdraw Student</h4></div><div class=modal-body><div class=row><div class=form-group><label for=dateOfWithdrawal class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Date of Withdrawal:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div class=input-group><input class=form-control ng-init=\"withdrawalDatePicker = false\" uib-datepicker-popup=dd/MM/yyyy is-open=withdrawalDatePicker ng-model=ctrl.withdrawalRequest.withdrawalDate> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"withdrawalDatePicker = !withdrawalDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div><div class=form-group><label for=destination class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Destination:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><destination-selection id=destination class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.withdrawalRequest.destinationId></destination-selection><span class=error ng-show=\"ctrl.withdrawalRequest.withdrawalDate !== null && ctrl.withdrawalRequest.destinationId == 95\">A destination is required when a Date of Withdrawal is supplied.</span></div></div><div class=form-group><label for=collegeEmployer class=\"col-xs-4 col-sm-4 col-md-4 control-label\">College or Employer:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=collegeEmployer class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.withdrawalRequest.collegeEmployer></div></div><div class=form-group><label for=courseCareer class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Course or Career:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=courseCareer class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.withdrawalRequest.courseCareer></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.withdraw() ng-disabled=!ctrl.formValidation()>Withdraw</button></div></form>");
  $templateCache.put("js/directives/student-withdrawal/views/student-withdrawal.html",
    "<button class=\"btn btn-sm btn-primary\" ng-click=ctrl.withdrawStudent()>Withdraw Student</button>");
  $templateCache.put("js/directives/student-year-details/student-year-details.html",
    "<div class=student-year-details ng-show=ctrl.hasData()><div class=row><div class=col-xs-5>Academic Year:</div><div class=col-xs-7>{{ ctrl.studentYear._yearCode }}</div></div><div class=row><div class=col-xs-5>Year Applied:</div><div class=col-xs-7>{{ ctrl.studentYear._yearApplied }}</div></div><div class=row><div class=col-xs-5>Student Type:</div><div class=col-xs-7>{{ ctrl.studentYear._studentTypeCode | notSet }}</div></div><div class=row><div class=col-xs-5>Tutor Group:</div><div class=col-xs-7>{{ ctrl.studentYear._tutorGroupCode | notSet }}</div></div><div class=row><div class=col-xs-5>Tutor:</div><div class=col-xs-7>{{ ctrl.studentYear._tutorInitials | notSet }} - {{ ctrl.studentYear._tutorName | notSet }}</div></div><div class=row><div class=col-xs-5>Senior Tutor Initial:</div><div class=col-xs-7>{{ ctrl.studentYear._seniorTutorInitials | notSet }}</div></div><div class=row><div class=col-xs-5>PD Initial:</div><div class=col-xs-7>{{ ctrl.studentYear._pastoralDirectorInitials | notSet }}</div></div><div class=row><div class=col-xs-5>APD Initial:</div><div class=col-xs-7>{{ ctrl.studentYear._associatePastoralDirectorInitials | notSet }}</div></div><div class=row><div class=col-xs-5>Start Date:</div><div class=col-xs-7>{{ ctrl.studentYear.startDate | date:'dd/MM/yyyy' }}</div></div><div class=row><div class=col-xs-5>End Date:</div><div class=col-xs-7>{{ ctrl.studentYear.endDate | date:'dd/MM/yyyy' }} <span class=error ng-show=ctrl.hasLeft()>LEFT</span></div></div><div class=row><div class=col-xs-5>PLH/PEEPH:</div><div class=col-xs-7>{{ ctrl.studentYear.plh | notSet }} / {{ ctrl.studentYear.peeph | notSet }}</div></div><div class=row><div class=col-xs-5>Candidate No:</div><div class=col-xs-7>{{ ctrl.studentYear.candidateNo | notSet }} <span ng-show=ctrl.studentYear.externalCandidate>(External)</span></div></div><div class=row><div class=col-xs-5>On Contract:</div><div class=col-xs-7>{{ ctrl.studentYear.onContract | yesNo }}</div></div><div class=row><div class=col-xs-5>On Break In Learning:</div><div class=col-xs-7>{{ ctrl.studentYear.breakInLearning | yesNo }}</div></div></div><div class=error ng-hide=ctrl.hasData()>Student Details: No Data Provided</div>");
  $templateCache.put("js/directives/student-year-editor/views/student-year-editor-dialog.html",
    "<form id=studentYearEditForm name=studentYearEditForm role=form novalidate ng-submit=ctrl.save() show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title>Edit Student Year Information</h4></div><div class=modal-body><div class=row><div class=\"form-group col-sm-12 col-md-6 row\"><label for=studentType class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Student Type:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><student-type-selection class=form-control include-blank=true ng-model=ctrl.studentYear.typeId></student-type-selection></div></div><div class=\"form-group col-sm-12 col-md-6 row\"><label for=tutorGroup class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Tutor Group:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><tutor-group-selection class=form-control include-blank=true ng-model=ctrl.studentYear.tutorGroupId></tutor-group-selection></div></div></div><div class=row><div class=\"form-group col-sm-12 col-md-6 row\"><label for=startDate class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Start Date:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div class=input-group><input class=form-control ng-init=\"startDateDatePicker = false\" uib-datepicker-popup=dd/MM/yyyy is-open=startDateDatePicker ng-model=ctrl.studentYear.startDate> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"startDateDatePicker = !startDateDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div><div class=\"form-group col-sm-12 col-md-6 row\"><label for=endDate class=\"col-xs-4 col-sm-4 col-md-4 control-label\">End Date:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div class=input-group><input class=form-control ng-init=\"endDateDatePicker = false\" uib-datepicker-popup=dd/MM/yyyy is-open=endDateDatePicker ng-model=ctrl.studentYear.endDate> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"endDateDatePicker = !endDateDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div></div><div class=row><div class=\"form-group col-sm-12 col-md-6 row\"><label for=field_onContract class=\"col-xs-4 col-sm-4 col-md-4 control-label\">On Contract:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox name=onContract id=onContract ng-model=ctrl.studentYear.onContract class=\"form-control text ui-widget-content ui-corner-all\"></div></div><div class=\"form-group col-sm-12 col-md-6 row\"><label for=field_onBreakInLearning class=\"col-xs-4 col-sm-4 col-md-4 control-label\">On Break In Learning:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox name=onBreakInLearning id=onBreakInLearning ng-model=ctrl.studentYear.breakInLearning class=\"form-control text ui-widget-content ui-corner-all\"></div></div></div><div class=row><hr></div><h4 class=\"row modal-title\">ILR Fields</h4><div class=row><div class=\"form-group col-sm-12 col-md-6 row\"><label for=field_ilr class=\"col-xs-4 col-sm-4 col-md-4 control-label\">ILR Returned:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox name=ilr id=ilr ng-model=ctrl.studentYear.ilr class=\"form-control text ui-widget-content ui-corner-all\"></div></div></div><div class=row><div class=\"form-group col-sm-12 col-md-6 row\"><label for=field_plh class=\"col-xs-4 col-sm-4 col-md-4 control-label\">PLH:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=plh id=plh ng-model=ctrl.studentYear.plh class=\"form-control text ui-widget-content ui-corner-all\"></div></div><div class=\"form-group col-sm-12 col-md-6 row\"><label for=field_peeph class=\"col-xs-4 col-sm-4 col-md-4 control-label\">PEEPH:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=peeph id=peeph ng-model=ctrl.studentYear.peeph class=\"form-control text ui-widget-content ui-corner-all\"></div></div></div><div class=row><div class=\"form-group col-sm-12 col-md-6 row\"><label for=field_lda class=\"col-xs-4 col-sm-4 col-md-4 control-label\" uib-tooltip=\"Learning Difficulty Assessment\">LDA:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox name=lda id=lda ng-model=ctrl.studentYear.lda class=\"form-control text ui-widget-content ui-corner-all\"></div></div><div class=\"form-group col-sm-12 col-md-6 row\"><label for=field_ehc class=\"col-xs-4 col-sm-4 col-md-4 control-label\" uib-tooltip=\"Education Health Care\">EHC:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox name=ehc id=ehc ng-model=ctrl.studentYear.ehc class=\"form-control text ui-widget-content ui-corner-all\"></div></div><div class=\"form-group col-sm-12 col-md-6 row\"><label for=field_hns class=\"col-xs-4 col-sm-4 col-md-4 control-label\" uib-tooltip=\"High Needs Student\">HNS:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox name=hns id=hns ng-model=ctrl.studentYear.hns class=\"form-control text ui-widget-content ui-corner-all\"></div></div><div class=\"form-group col-sm-12 col-md-6 row\"><label for=field_sen class=\"col-xs-4 col-sm-4 col-md-4 control-label\" uib-tooltip=\"Special Educational Needs\">SEN:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox name=sen id=sen ng-model=ctrl.studentYear.sen class=\"form-control text ui-widget-content ui-corner-all\"></div></div></div><div class=row><div class=\"form-group col-sm-12 col-md-6 row\"><label for=field_gcseEnglishGrade class=\"col-xs-4 col-sm-4 col-md-4 control-label\">GCSE English Grade (highest):</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=gcseEnglishGrade id=gcseEnglishGrade ng-model=ctrl.studentYear.gcseEnglishGrade class=\"form-control text ui-widget-content ui-corner-all\"></div></div><div class=\"form-group col-sm-12 col-md-6 row\"><label for=field_gcseMathsGrade class=\"col-xs-4 col-sm-4 col-md-4 control-label\">GCSE Maths Grade (highest):</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=gcseMathsGrade id=gcseMathsGrade ng-model=ctrl.studentYear.gcseMathsGrade class=\"form-control text ui-widget-content ui-corner-all\"></div></div></div><div class=row><div class=\"form-group col-sm-12 col-md-6 row\"><label for=llddHealthProblem class=\"col-xs-4 col-sm-4 col-md-4 control-label\">LLDD Health Problem:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><lldd-health-problem-selection class=form-control include-blank=true ng-model=ctrl.studentYear.llddHealthProblemId></lldd-health-problem-selection></div></div><div class=\"form-group col-sm-12 col-md-6 row\"><label for=field_learningSupportCost class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Learning Support Cost:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=learningSupportCost id=learningSupportCost ng-model=ctrl.studentYear.learningSupportCost class=\"form-control text ui-widget-content ui-corner-all\"></div></div></div><div class=row><div class=\"form-group col-sm-12 col-md-6 row\"><label for=englishConditionOfFunding class=\"col-xs-4 col-sm-4 col-md-4 control-label\" uib-tooltip=\"English Condition Of Funding\">English CoF:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><english-condition-of-funding-selection class=form-control include-blank=true ng-model=ctrl.studentYear.englishConditionOfFundingId></english-condition-of-funding-selection></div></div><div class=\"form-group col-sm-12 col-md-6 row\"><label for=mathsConditionOfFunding class=\"col-xs-4 col-sm-4 col-md-4 control-label\" uib-tooltip=\"Maths Condition Of Funding\">Maths CoF:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><maths-condition-of-funding-selection class=form-control include-blank=true ng-model=ctrl.studentYear.mathsConditionOfFundingId></maths-condition-of-funding-selection></div></div></div><div class=row><div class=\"form-group col-sm-12 col-md-6 row\"><label for=field_initialPostcode class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Initial Postcode:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=initialPostcode id=initialPostcode ng-model=ctrl.studentYear.initialPostcode class=\"form-control text ui-widget-content ui-corner-all\"></div></div><div class=\"form-group col-sm-12 col-md-6 row\"><label for=candidateNo class=\"col-xs-4 col-sm-4 col-md-4 control-label\" uib-tooltip=candidateNo>Candidate No:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input name=candidateNo id=candidateNo ng-model=ctrl.studentYear.candidateNo class=\"form-control text ui-widget-content ui-corner-all\"></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=submit class=\"btn btn-primary\" ng-disabled=\"studentYearEditForm.$invalid || studentYearEditForm.$submitted\"><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/student-year-editor/views/student-year-editor.html",
    "<button type=button class=\"btn btn-primary btn-sm\" ng-click=\"ctrl.editStudentYear(ctrl.studentId, ctrl.yearId)\"><span class=\"glyphicon glyphicon-pencil\"></span> Edit Student Year</button>");
  $templateCache.put("js/directives/studentBursaryDetails/studentBursaryDetails.html",
    "<div class=row><div class=col-xs-8>Bursary(GB):</div><div class=col-xs-4>{{ ctrl.studentBursary.gb | yesNo }}</div></div><div class=row><div class=col-xs-8>Discretionary Bursary(DB):</div><div class=col-xs-4>{{ ctrl.studentBursary.db | yesNo }}</div></div><div class=row><div class=col-xs-8>Free Meals Eligibility:</div><div class=col-xs-4>{{ ctrl.studentBursary.freeMealsEligibility | yesNo }}</div></div><div class=row><div class=col-xs-8>Receiving Free Meals:</div><div class=col-xs-4>{{ ctrl.studentBursary.receivingFreeMeals | yesNo }}</div></div>");
  $templateCache.put("js/directives/studentBursaryEditor/views/studentBursaryEditor.html",
    "<button type=button ng-click=ctrl.editStudentBursary(ctrl.studentBursary.studentId) class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> Edit Student Bursary</button>");
  $templateCache.put("js/directives/studentBursaryEditor/views/studentBursaryEditorDialog.html",
    "<form id=studentBursaryEditForm name=studentBursaryEditForm role=form novalidate ng-submit=ctrl.save() show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title>Edit StudentBursary</h4></div><div class=modal-body><div class=row><div class=\"form-group col-sm-12 col-md-6\"><label for=field_gb class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Guaranteed Bursary:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox name=middleNames id=field_gb ng-model=ctrl.studentBursary.gb class=\"form-control text ui-widget-content ui-corner-all\"></div></div><div class=\"form-group col-sm-12 col-md-6\"><label for=field_db class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Discretionary Bursary:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox name=db id=field_db ng-model=ctrl.studentBursary.db class=\"form-control text ui-widget-content ui-corner-all\"></div></div><div class=\"form-group col-sm-12 col-md-6\"><label for=field_freeMealsEligibility class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Free Meals Eligibility:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox name=freeMealsEligibility id=field_freeMealsEligibility ng-model=ctrl.studentBursary.freeMealsEligibility class=\"form-control text ui-widget-content ui-corner-all\"></div></div><div class=\"form-group col-sm-12 col-md-6\"><label for=field_receivingFreeMeals class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Receiving Free Meals:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox name=receivingFreeMeals id=field_receivingFreeMeals ng-model=ctrl.studentBursary.receivingFreeMeals class=\"form-control text ui-widget-content ui-corner-all\"></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=submit class=\"btn btn-primary\" ng-disabled=\"studentBursaryEditForm.$invalid || studentBursaryEditForm.$submitted\"><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/studentDetailsLookup/studentDetailsLookup.html",
    "<student-details student=ctrl.student show-dob=showDob show-gender=showGender show-all=showAll></student-details>");
  $templateCache.put("js/directives/studentEntryQualificationsEditor/views/studentEntryQualificationsEditor.html",
    "<div class=\"form-group col-md-12 col-sm-12\"><table class=\"table table-hover\"><thead><th ng-show=\"showAll || showStudent\">Student</th><th>Level</th><th>Qualification Title</th><th>Exam Board</th><th>Grade</th><th>Date</th><th>Checked</th><th permission=\"['ROLE_Quals on Entry']\">Actions</th></thead><tbody><tr ng-repeat=\"studentEntryQualification in ctrl.studentEntryQualifications\"><td ng-show=\"showAll || showStudent\">{{ studentEntryQualification.studentId }}</td><td>{{ studentEntryQualification._entryQualification._entryQualificationTypeDescription }}</td><td>{{ studentEntryQualification._entryQualification.title }}</td><td>{{ studentEntryQualification._examBoardName }}</td><td>{{ studentEntryQualification.grade }}</td><td>{{ studentEntryQualification.date | date:'dd/MM/yyyy' }}</td><td>{{ studentEntryQualification.checked | yesNo }}</td><td><button type=button class=\"btn btn-primary btn-sm\" permission=\"['ROLE_Quals on Entry']\" ng-click=ctrl.editStudentEntryQualification(studentEntryQualification.studentEntryQualificationId)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button> <button type=button class=\"btn btn-danger btn-sm\" permission=\"['ROLE_Quals on Entry']\" ng-click=ctrl.deleteStudentEntryQualification(studentEntryQualification.studentEntryQualificationId)><span class=\"glyphicon glyphicon-pencil\"></span> Delete</button></td></tr></tbody></table><button type=button class=\"btn btn-primary\" permission=\"['ROLE_Quals on Entry']\" ng-click=ctrl.addStudentEntryQualification(ctrl.studentId)>Add Entry Qualification</button></div>");
  $templateCache.put("js/directives/studentEntryQualificationsEditor/views/studentEntryQualificationsEditorDialog.html",
    "<form id=studentEntryQualificationEditForm name=studentEntryQualificationEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Create or edit a Entry Qualification</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=false><label for=studentId>Student ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=studentId class=form-control name=studentId readonly ng-model=ctrl.studentEntryQualification.studentId></div></div><div class=form-group><label for=studentEntryQualification class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Entry Qualification:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><entry-qualification-selection id=studentEntryQualification class=form-control ng-model=ctrl.studentEntryQualification.entryQualificationId></entry-qualification-selection></div></div><div class=form-group><label for=studentEntryQualification class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Exam Board:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><exam-board-selection id=studentEntryQualification class=form-control ng-model=ctrl.studentEntryQualification.examBoardId></exam-board-selection></div></div><div class=form-group><label for=grade class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Grade</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=grade name=grade class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.studentEntryQualification.grade></div></div><div class=form-group><label for=qualificationData class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Date</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><div class=input-group><input class=form-control ng-init=\"studentEntryQualificationDatePicker = false\" uib-datepicker-popup=dd/MM/yyyy is-open=studentEntryQualificationDatePicker ng-model=ctrl.studentEntryQualification.date> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"studentEntryQualificationDatePicker = !studentEntryQualificationDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div><div class=form-group><label for=field_title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Checked</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.studentEntryQualification.checked></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-disabled=\"contactEditForm.$invalid || contactEditForm.$submitted\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/studentSearch/studentSearch.html",
    "<div class=\"search-box student-search\"><div class=search-form><form class=form-inline><div class=form-group><label for=name>Surname:</label><input id=name class=\"form-control input-sm\" ng-model=ctrl.surname></div><div class=form-group><label for=name>First Name:</label><input id=name class=\"form-control input-sm\" ng-model=ctrl.firstName></div><div class=form-group><label for=reference>Reference:</label><input id=reference class=\"form-control input-sm\" ng-model=ctrl.reference></div><div class=form-group ng-show=ctrl.showCandidateNo><label for=reference>Candidate No:</label><input id=candidateNo class=\"form-control input-sm\" ng-model=ctrl.candidateNo></div><div class=form-group><button name=search class=\"btn btn-sm btn-primary\" ng-click=ctrl.search()>Search</button> <button name=clear class=\"btn btn-sm btn-default\" ng-click=ctrl.clear()>Clear</button> <button id=toggle-interview-results class=\"btn btn-sm btn-info\" type=button ng-click=ctrl.toggleResults() ng-disabled=!ctrl.hasResults()>Show/Hide Results</button></div></form></div><div class=message>{{ ctrl.message }}</div><div class=search-results ng-show=ctrl.hasResults()><div id=interview-results class=collapsable ng-show=ctrl.resultsVisible()><h4>Search Results</h4><table class=\"table table-responsive table-bordered table-hover table-condensed\"><thead><th>Ref</th><th>Student</th><th>Type</th><th>Status</th><th ng-show=ctrl.showCandidateNo>Candidate No</th></thead><tbody><tr ng-repeat=\"result in ctrl.results | orderBy:'+studentName' track by $index\"><td><a ng-click=\"ctrl.executeCallback({id: result.studentId})\">{{ result.studentId }}</a></td><td>{{ result.studentName }}</td><td>{{ result.studentType }}</td><td><span class=error ng-show=result.endDate>LEFT</span> <span ng-show=!result.endDate>Current</span></td><td ng-show=ctrl.showCandidateNo>{{ result.candidateNo }}</td></tr><tr ng-show=!ctrl.hasResults()><td colspan=4>No Results</td></tr></tbody></table></div></div><div ng-transclude></div></div>");
  $templateCache.put("js/directives/studentSpecialCategoryDetails/studentSpecialCategoryDetails.html",
    "<div class=student-special-categories-details><uib-tabset active=active ng-show=hasData()><uib-tab index=-1 heading=\"Special Categories\"><div class=\"special-category-tab container-fluid\"><div class=row><div class=col-md-12>The special categories for this student are separated into tabs. There will be a tab for each special category that the student has for further details about each special category please click on the tab to see the information.</div></div><div class=row><div class=col-md-12 ng-hide=hasSpecialCategories()>This student current has no special categories defined.</div></div></div></uib-tab><uib-tab index=$index heading=\"{{ $index + 1 }}\" ng-repeat=\"specialCategory in specialCategories track by $index\"><div class=\"special-category-tab container-fluid\"><div class=\"row hidden\"><div class=col-md-4>StudentId:</div><div class=col-md-8 ng-bind=specialCategory.studentId>{{ specialCategory.studentId }}</div></div><div class=row><div class=col-md-4>SpecialCategory:</div><div class=col-md-8 ng-bind=specialCategory._specialCategoryDto.code>{{ specialCategory._specialCategoryDto.code }}</div></div><div class=row><div class=col-md-4>SpecialConfirmed:</div><div class=col-md-8 ng-bind=specialCategory.specialConfirmed>{{ specialCategory.specialConfirmed | yesNo }}</div></div><div class=row><div class=col-md-4>ClassificationDate:</div><div class=col-md-8 ng-bind=\"specialCategory.classificationDate | date:'dd/MM/yyyy'\">{{ specialCategory.classificationDate | date:'dd/MM/yyyy' }}</div></div><div class=row><div class=col-md-4>ClosedDate:</div><div class=col-md-8 ng-bind=\"specialCategory.closedDate | date:'dd/MM/yyyy'\">{{ specialCategory.closedDate | date:'dd/MM/yyyy' }}</div></div><div class=row><div class=col-md-4>MonitoringNotes:</div><div class=col-md-8 ng-bind=specialCategory.monitoringNotes>{{ specialCategory.monitoringNotes }}</div></div></div></uib-tab></uib-tabset><div class=error ng-hide=hasData()>Error: No Data Provided</div></div>");
  $templateCache.put("js/directives/studentSpecialCategoryEditor/views/studentSpecialCategoryEditor.html",
    "<div class=studentSpecialCategoryEditor><uib-tabset active=0><uib-tab index=-1 heading=Error ng-hide=ctrl.hasData()><div class=error>StudentSpecialCategory Details: No Data Provided</div></uib-tab><uib-tab index=0 heading=Guide><div class=special-category-tab>To complete a new special category form click the \"+\" tab.</div></uib-tab><uib-tab ng-class=\"\" index=\"$index + 1\" heading=\"{{ $index + 1 }}\" ng-repeat=\"specialCategory in ctrl.specialCategories track by $index\"><div class=\"special-category-tab container-fluid\"><div class=row ng-show=false><div class=col-md-4>Student Id:</div><div class=col-md-8 ng-bind=specialCategory.studentId>{{ specialCategory.studentId }}</div></div><div class=row><div class=col-md-4>Special Category:</div><div class=col-md-8>{{ specialCategory._specialCategoryCode }}</div></div><div class=row><div class=col-md-4>Special Confirmed:</div><div class=col-md-8>{{ specialCategory.specialConfirmed | yesNo }}</div></div><div class=row><div class=col-md-4>Classification Date:</div><div class=col-md-8>{{ specialCategory.classificationDate | date:'dd/MM/yyyy' }}</div></div><div class=row><div class=col-md-4>Closed Date:</div><div class=col-md-8>{{ specialCategory.closedDate | date:'dd/MM/yyyy' }}</div></div><div class=row><div class=col-md-4>Monitoring Notes:</div><div class=col-md-8>{{ specialCategory.monitoringNotes }}</div></div><div class=row><div class=col-md-12><button type=button ng-click=ctrl.editStudentSpecialCategory(specialCategory.id) class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button><report-link class=\"btn btn-default btn-sm\" report-path=\"'/CID/Students/Secure Reports/Student Special Category Form'\" report-params=\"'StudentList='+specialCategory.studentId+'&StudentSpecialCategoryID='+specialCategory.id\" include-year=true><span class=\"glyphicon glyphicon-print\"></span> Print</report-link></div></div></div></uib-tab><uib-tab index=99 heading=+ select=ctrl.addStudentSpecialCategory(ctrl.studentId) ng-show=ctrl.hasId()></uib-tab></uib-tabset></div>");
  $templateCache.put("js/directives/studentSpecialCategoryEditor/views/studentSpecialCategoryEditorDialog.html",
    "<div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Create or Edit Student Special Category</h4></div><div class=modal-body><form id=studentSpecialCategoryEditForm name=studentSpecialCategoryEditForm role=form novalidate show-validation><div class=row><div class=\"form-group col-sm-12 col-md-6\"><label for=field_staffConcerned class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Staff Concerned</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><staff-selection id=staff class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.specialCategory.staffConcernedId></staff-selection></div></div><div class=\"form-group col-sm-12 col-md-6\"><label for=field_staffRequesting class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Staff Requesting:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><staff-selection id=staff class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.specialCategory.staffRequestingId></staff-selection></div></div></div><div class=row><div class=\"form-group col-sm-12 col-md-6\"><label for=field_riskAssessmentCarriedOutBy class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Risk Assessment Carried Out By</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><staff-selection id=staff class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.specialCategory.riskAssessmentCarriedOutById></staff-selection></div></div><div class=\"form-group col-sm-12 col-md-6\"><label for=field_riskAssessmentToBeCompletedBy class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Risk Assessment To Be Completed By</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><staff-selection id=staff class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.specialCategory.riskAssessmentToBeCompletedById></staff-selection></div></div><div class=\"form-group col-sm-12 col-md-6\"><label for=field_riskAssessmentRequired class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Risk Assessment Required</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.specialCategory.riskAssessmentRequired></div></div><div class=\"form-group col-sm-12 col-md-6\"><label for=field_riskAssessmentRaisedBy class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Risk Assessment Raised By:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><staff-selection id=staff class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.specialCategory.riskAssessmentRaisedById></staff-selection></div></div></div><div class=row><div class=\"form-group col-sm-12 col-md-6\"><label for=field_specialCategory class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Special Category:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><special-category-selection id=specialCategory class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.specialCategory.specialCategoryId required></special-category-selection></div></div><div class=\"form-group col-sm-12 col-md-6\"><label for=field_specialConfirmed class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Special Confirmed</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.specialCategory.specialConfirmed></div></div><div class=\"form-group col-sm-12 col-md-6\"><label for=field_date class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Request Date</label><div class=\"input-group col-xs-8 col-sm-8 col-md-8\"><input class=form-control ng-init=\"requestDatePicker = false\" uib-datepicker-popup=dd/MM/yyyy is-open=requestDatePicker ng-model=ctrl.specialCategory.requestDate> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"requestDatePicker = !requestDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div><div class=\"form-group col-sm-12 col-md-6\"><label for=field_date class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Classification Date</label><div class=\"input-group col-xs-8 col-sm-8 col-md-8\"><input class=form-control ng-init=\"classificationDatePicker = false\" uib-datepicker-popup=dd/MM/yyyy is-open=classificationDatePicker ng-model=ctrl.specialCategory.classificationDate> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"classificationDatePicker = !classificationDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div><div class=\"form-group col-sm-12 col-md-6\"><label for=field_date class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Closed Date</label><div class=\"input-group col-xs-8 col-sm-8 col-md-8\"><input class=form-control ng-init=\"closedDatePicker = false\" uib-datepicker-popup=dd/MM/yyyy is-open=closedDatePicker ng-model=ctrl.specialCategory.closedDate> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"closedDatePicker = !closedDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div><div class=\"form-group col-sm-12 col-md-6\"><label for=field_informationConfidential class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Information Confidential</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.specialCategory.informationConfidential></div></div><div class=\"form-group col-sm-12 col-md-6\"><label for=field_writtenEvidence class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Written Evidence</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.specialCategory.writtenEvidence></div></div><div class=\"form-group col-sm-12 col-md-6\"><label for=field_passToStaffConcerned class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Pass To Staff Concerned</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input type=checkbox class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.specialCategory.passToStaffConcerned></div></div><div class=\"form-group col-sm-12 col-md-12\"><label for=field_monitoringNotes class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Monitoring Notes</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><textarea type=text name=monitoringNotes id=monitoringNotes ng-model=ctrl.specialCategory.monitoringNotes class=\"form-control text ui-widget-content ui-corner-all\" rows=1 cols=30></textarea></div></div><div class=\"form-group col-sm-12 col-md-12\"><label for=field_monitoringNotes class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Risk To Student Or Others</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><textarea type=text name=riskToStudentOrOthers id=riskToStudentOrOthers ng-model=ctrl.specialCategory.riskToStudentOrOthers class=\"form-control text ui-widget-content ui-corner-all\" rows=1 cols=30></textarea></div></div><div class=\"form-group col-sm-12 col-md-12\"><label for=field_emergencyContactNos class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Emergency Contact Nos</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><textarea type=text name=emergencyContactNos id=emergencyContactNos ng-model=ctrl.specialCategory.emergencyContactNos class=\"form-control text ui-widget-content ui-corner-all\" rows=1 cols=30></textarea></div></div><div class=\"form-group col-sm-12 col-md-12\"><label for=field_outsideAgenciesInvolved class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Outside Agencies Involved</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><textarea type=text name=outsideAgenciesInvolved id=outsideAgenciesInvolved ng-model=ctrl.specialCategory.outsideAgenciesInvolved class=\"form-control text ui-widget-content ui-corner-all\" rows=1 cols=30></textarea></div></div><div class=\"form-group col-sm-12 col-md-12\"><label for=field_toBeInformedPotentialRisks class=\"col-xs-4 col-sm-4 col-md-4 control-label\">To Be Informed Potential Risks</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><textarea type=text name=toBeInformedPotentialRisks id=toBeInformedPotentialRisks ng-model=ctrl.specialCategory.toBeInformedPotentialRisks class=\"form-control text ui-widget-content ui-corner-all\" rows=1 cols=30></textarea></div></div><div class=\"form-group col-sm-12 col-md-12\"><label for=field_toBeInformedPotentialRisks class=\"col-xs-4 col-sm-4 col-md-4 control-label\">In Event Emergency</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><textarea type=text name=inEventEmergency id=inEventEmergency ng-model=ctrl.specialCategory.inEventEmergency class=\"form-control text ui-widget-content ui-corner-all\" rows=2 cols=30></textarea></div></div></div></form></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-disabled=\"studentSpecialCategoryEditForm.$invalid || studentSpecialCategoryEditForm.$submitted\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div>");
  $templateCache.put("js/directives/studentWarningDetails/studentWarningDetails.html",
    "<div class=student-warning-details><div class=row><div class=col-xs-5>Attendance Warning:</div><div class=col-xs-7 ng-show=studentWarning.attendanceMonitoringId>{{ studentWarning._attendanceMonitoringCode }}</div><div class=col-xs-7 ng-hide=studentWarning.attendanceMonitoringId>No Warning</div></div><div class=row><div class=col-xs-5>Punctuality Warning:</div><div class=col-xs-7 ng-show=studentWarning.punctualityMonitoringId>{{ studentWarning._punctualityMonitoringCode }}</div><div class=col-xs-7 ng-hide=studentWarning.punctualityMonitoringId>No Warning</div></div></div>");
  $templateCache.put("js/directives/studentWarningEditor/views/studentWarningEditor.html",
    "<button type=button ng-click=ctrl.editStudentWarning(ctrl.studentId) class=\"btn btn-sm btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> Edit Student Warning</button>");
  $templateCache.put("js/directives/studentWarningEditor/views/studentWarningEditorDialog.html",
    "<form id=studentWarningEditForm name=studentWarningEditForm role=form novalidate ng-submit=ctrl.save() show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title>Edit StudentWarning</h4></div><div class=modal-body><div class=row><div class=form-group><label for=title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Attendance:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><attendance-monitoring-selection class=form-control include-blank=true ng-model=ctrl.studentWarning.attendanceMonitoringId></attendance-monitoring-selection></div></div><div class=form-group><label for=title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Punctuality:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><punctuality-monitoring-selection class=form-control include-blank=true ng-model=ctrl.studentWarning.punctualityMonitoringId></punctuality-monitoring-selection></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=submit class=\"btn btn-primary\" ng-disabled=\"studentWarningEditForm.$invalid || studentWarningEditForm.$submitted\"><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/subjects-editor/views/subjects-editor.html",
    "<div class=row><div class=\"col-md-2 col-md-offset-10\"><button type=button class=\"btn btn-sm btn-primary\" ng-click=ctrl.toggleVisibility()>Filters <span class=\"glyphicon glyphicon-chevron-right\" ng-hide=ctrl.visible></span> <span class=\"glyphicon glyphicon-chevron-down\" ng-show=ctrl.visible></span></button> <button ng-show=ctrl.visible class=\"btn btn-sm btn-info\" type=button ng-click=ctrl.resetFilters()>Reset Filters</button></div></div><div class=\"periods-filters row\" ng-show=ctrl.visible><div class=\"form-group col-sm-12 col-md-3 row\"><label for=code class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Code</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input ng-model=filter.code class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div><div class=\"form-group col-sm-12 col-md-3 row\"><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input ng-model=filter.description class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div></div><table class=\"table table-responsive table-hover\"><thead><th ng-click=\"ctrl.changeSort('code')\">Code <span ng-show=\"ctrl.isSortedAsc('code')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('code')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('description')\">Description <span ng-show=\"ctrl.isSortedAsc('description')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('description')\">&#x25B2;</span></th></thead><tbody><tr ng-repeat=\"subject in subjects | orderBy : ctrl.sortOrder | filter: ctrl.filterParams\"><td>{{ subject.code }}</td><td>{{ subject.description }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editSubjects(subject.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addSubjects()><span class=\"glyphicon glyphicon-pencil\"></span> Add</button>");
  $templateCache.put("js/directives/subjects-editor/views/subjects-editorDialog.html",
    "<form id=subjectsEditForm name=subjectsEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add/Edit Subject</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Subject ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=id class=form-control name=id readonly ng-model=ctrl.subjects.id></div></div><div class=form-group ng-show=true><label for=code class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Code</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=code class=form-control name=id ng-model=ctrl.subjects.code></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=description class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.subjects.description></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/support-types-editor/views/support-types-editor-addDialog.html",
    "<form id=supportTypesEditForm name=supportTypesEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add SupportType</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">SupportType ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=id class=form-control name=id ng-model=ctrl.supportTypes.id></div></div><div class=form-group ng-show=true><label for=support class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Support</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=support class=form-control name=id ng-model=ctrl.supportTypes.support></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.add()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/support-types-editor/views/support-types-editor.html",
    "<table class=\"table table-responsive table-hover\"><thead><th>Id</th><th ng-click=\"ctrl.changeSort('support')\">Support <span ng-show=\"ctrl.isSortedAsc('support')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('support')\">&#x25B2;</span></th></thead><tbody><tr ng-repeat=\"supportType in supportTypes |  orderBy:ctrl.sortOrder \"><td>{{ supportType.id}}</td><td>{{ supportType.support }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editSupportTypes(supportType.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addSupportTypes()><span class=\"glyphicon glyphicon-pencil\"></span> Add</button>");
  $templateCache.put("js/directives/support-types-editor/views/support-types-editorDialog.html",
    "<form id=supportTypesEditForm name=supportTypesEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add/Edit SupportType</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">SupportType ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=id class=form-control name=id readonly ng-model=ctrl.supportTypes.id></div></div><div class=form-group ng-show=true><label for=support class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Support</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=support class=form-control name=id ng-model=ctrl.supportTypes.support></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/text-lookup-editor/views/text-lookup-editor-dialog.html",
    "<form name=textLookupsEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title>Add/Edit TextLookUp</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=name class=\"col-xs-4 col-sm-4 col-md-2 control-label\">Name</label><div class=\"col-xs-8 col-sm-8 col-md-10\"><input class=form-control name=id ng-model=ctrl.textLookup.name></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-2 control-label\">Description:</label><div class=\"col-xs-8 col-sm-8 col-md-10\"><textarea type=text class=\"form-control text ui-widget-content ui-corner-all\" ng-readonly=true ng-model=ctrl.textLookup.description rows=4 cols=30></textarea></div></div><div class=form-group ng-show=true><label for=text class=\"col-xs-4 col-sm-4 col-md-2 control-label\">Text</label><div class=\"col-xs-8 col-sm-8 col-md-10\"><textarea type=text class=form-control name=id ui-tinymce=\"{menubar: false, toolbar: 'undo redo | bold italic underline'}\" ng-model=ctrl.textLookup.text rows=12 cols=30></textarea></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span>Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span>Save</button></div></form>");
  $templateCache.put("js/directives/text-lookup-editor/views/text-lookup-editor.html",
    "<div class=row><div class=\"col-md-2 col-md-offset-10\"><button type=button class=\"btn btn-sm btn-primary\" ng-click=ctrl.toggleVisibility()>Filters <span class=\"glyphicon glyphicon-chevron-right\" ng-hide=ctrl.visible></span> <span class=\"glyphicon glyphicon-chevron-down\" ng-show=ctrl.visible></span></button> <button ng-show=ctrl.visible class=\"btn btn-sm btn-info\" type=button ng-click=ctrl.resetFilters()>Reset Filters</button></div></div><div class=\"periods-filters row\" ng-show=ctrl.visible><div class=\"form-group col-sm-12 col-md-3 row\"><label for=name class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Name</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input ng-model=filter.name class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div><div class=\"form-group col-sm-12 col-md-3 row\"><label for=title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input ng-model=filter.description class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div></div><table class=\"table table-responsive table-hover\"><thead><th ng-click=\"ctrl.changeSort('name')\">Name <span ng-show=\"ctrl.isSortedAsc('name')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('name')\">&#x25B2;</span></th><th>Text</th><th>Description</th></thead><tbody><tr ng-repeat=\"textLookUp in textLookups | orderBy : ctrl.sortOrder | filter: ctrl.filterParams \"><td>{{ textLookUp.name}}</td><td>{{ textLookUp.text }}</td><td>{{ textLookUp.description }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editTextLookup(textLookUp.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table>");
  $templateCache.put("js/directives/tutor-group-remark-permission-table/tutor-group-remark-permission-table.html",
    "<div class=\"col-sm-12 col-md-12\"><table class=\"table table-responsive table-hover\"><thead><th>Candidate Number</th><th>First Name</th><th>Surname</th><th>Remark Permissions</th><th>TutorGroup</th></thead><tbody><tr ng-repeat=\"tutorGroupRemarkPermission in remarkPermission\"><td>{{ tutorGroupRemarkPermission.candidateNo | notSet }}</td><td>{{ tutorGroupRemarkPermission._firstName }}</td><td>{{ tutorGroupRemarkPermission._surname }}</td><td>{{ tutorGroupRemarkPermission._studentRemarkPermissionDecription | notSet }}</td><td>{{ tutorGroupRemarkPermission._tutotGroupCode }}</td></tr></tbody></table></div>");
  $templateCache.put("js/directives/tutor-groups-editor/views/tutor-groups-editor.html",
    "<div class=row><div class=\"col-md-2 col-md-offset-10\"><button type=button class=\"btn btn-sm btn-primary\" ng-click=ctrl.toggleVisibility()>Filters <span class=\"glyphicon glyphicon-chevron-right\" ng-hide=ctrl.visible></span> <span class=\"glyphicon glyphicon-chevron-down\" ng-show=ctrl.visible></span></button> <button ng-show=ctrl.visible class=\"btn btn-sm btn-info\" type=button ng-click=ctrl.resetFilters()>Reset Filters</button></div></div><div class=\"periods-filters row\" ng-show=ctrl.visible><div class=\"form-group col-sm-12 col-md-3 row\"><label for=period class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Code</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input ng-model=filter.code class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div><div class=\"form-group col-sm-12 col-md-3 row\"><label for=title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input ng-model=filter.description class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div></div><table class=\"table table-responsive table-hover\"><thead><th ng-click=\"ctrl.changeSort('code')\">Code <span ng-show=\"ctrl.isSortedAsc('code')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('code')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('description')\">Description <span ng-show=\"ctrl.isSortedAsc('description')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('description')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('_facultyDesc')\">Faculty <span ng-show=\"ctrl.isSortedAsc('_facultyDesc')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('_facultyDesc')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('_roomCode')\">Room <span ng-show=\"ctrl.isSortedAsc('_roomCode')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('_roomCode')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('_seniorTutorInitials')\">Senior Tutor <span ng-show=\"ctrl.isSortedAsc('_seniorTutorInitials')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('_seniorTutorInitials')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('_tutorInitials')\">Tutor <span ng-show=\"ctrl.isSortedAsc('_tutorInitials')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('_tutorInitials')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('inUse')\">In Use <span ng-show=\"ctrl.isSortedAsc('inUse')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('inUse')\">&#x25B2;</span></th></thead><tbody><tr ng-repeat=\"tutorGroup in tutorGroups | orderBy:ctrl.sortOrder | filter: ctrl.filterParams\"><td>{{tutorGroup.code}}</td><td>{{tutorGroup.description}}</td><td>{{tutorGroup._facultyDesc}}</td><td>{{tutorGroup._roomCode}}</td><td>{{tutorGroup._seniorTutorInitials}} - {{tutorGroup._seniorTutorName}}</td><td>{{tutorGroup._tutorInitials}} - {{tutorGroup._tutorName}}</td><td>{{tutorGroup.inUse| yesNo}}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editTutorGroups(tutorGroup.id)><span class=\"glyphicon glyphicon-pencil\"></span>Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addTutorGroups()><span class=\"glyphicon glyphicon-pencil\"></span>Add</button>");
  $templateCache.put("js/directives/tutor-groups-editor/views/tutor-groups-editorDialog.html",
    "<form id=tutorGroupsEdit name=tutorGroupsEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add/Edit TutorGroup</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Tutor Group ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=id class=form-control name=id readonly ng-model=ctrl.tutorGroups.id></div></div><div class=form-group ng-show=true><label for=code class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Code</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=code class=form-control name=id ng-model=ctrl.tutorGroups.code></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=description class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.tutorGroups.description></div></div><div class=form-group ng-show=true><label for=faculty class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Faculty</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><faculty-selection id=faculty class=form-control include-blank=true readonly ng-model=ctrl.tutorGroups.facultyId></faculty-selection></div></div><div class=form-group ng-show=true><label for=roomId class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Room</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><room-selection id=room readonly class=form-control include-blank=true ng-model=ctrl.tutorGroups.roomId></room-selection></div></div><div class=form-group ng-show=true><label for=tutorId class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Tutor</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><staff-selection id=staff readonly class=form-control include-blank=true ng-model=ctrl.tutorGroups.tutorId></staff-selection></div></div><div class=form-group ng-show=true><label for=seniorTutorId class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Senior Tutor</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><staff-selection id=staff readonly class=form-control include-blank=true ng-model=ctrl.tutorGroups.seniorTutorId></staff-selection></div></div><div class=form-group ng-show=true><label for=seniorTutorId class=\"col-xs-4 col-sm-4 col-md-4 control-label\">In Use</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=description type=checkbox class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.tutorGroups.inUse></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/directives/warning-code-change-details/warning-code-change-details.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-show=\"showAll || showStudent\">Student</th><th>Previous Attendance Monitoring</th><th>Current Attendance Monitoring</th><th>Previous Punctuality Monitoring</th><th>Current Punctuality Monitoring</th><th>Change Date</th></thead><tbody><tr ng-repeat=\"warningCodeChange in warningCodeChanges\"><td ng-show=\"showAll || showStudent\">{{ warningCodeChange.studentId }}</td><td>{{ warningCodeChange._previousAmDescription }}</td><td>{{ warningCodeChange._currentAmDescription }}</td><td>{{ warningCodeChange._previousPmDescription }}</td><td>{{ warningCodeChange._currentPmDescription }}</td><td>{{ warningCodeChange.changeDate | date: 'dd/MM/yyyy' }}</td></tr></tbody></table>");
  $templateCache.put("js/directives/wordGenerator/wordGenerator.html",
    "<button type=button class=\"btn btn-sm btn-default\" ng-click=ctrl.studentLetter(studentId)>Student Letter</button> <button type=button class=\"btn btn-sm btn-default\" ng-click=ctrl.parentLetter(studentId)>Parent Letter</button>");
  $templateCache.put("js/directives/year-groups-editor/views/year-groups-editor.html",
    "<table class=\"table table-responsive table-hover\"><thead><th ng-click=\"ctrl.changeSort('code')\">Code <span ng-show=\"ctrl.isSortedAsc('code')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('code')\">&#x25B2;</span></th><th ng-click=\"ctrl.changeSort('description')\">Description <span ng-show=\"ctrl.isSortedAsc('description')\">&#x25BC;</span> <span ng-show=\"ctrl.isSortedDesc('description')\">&#x25B2;</span></th></thead><tbody><tr ng-repeat=\"yearGroup in yearGroups |  orderBy:ctrl.sortOrder \"><td>{{ yearGroup.code }}</td><td>{{ yearGroup.description }}</td><td><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editYearGroups(yearGroup.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><button type=button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addYearGroups()><span class=\"glyphicon glyphicon-pencil\"></span> Add</button>");
  $templateCache.put("js/directives/year-groups-editor/views/year-groups-editorDialog.html",
    "<form id=yearGroupsEditForm name=yearGroupsEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add/Edit Year Group</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=id class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Year Group ID</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=id class=form-control name=id readonly ng-model=ctrl.yearGroups.id></div></div><div class=form-group ng-show=true><label for=code class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Code</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=code class=form-control name=id ng-model=ctrl.yearGroups.code></div></div><div class=form-group ng-show=true><label for=description class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Description:</label><div class=\"col-xs-8 col-sm-8 col-md-8\"><input id=description class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.yearGroups.description></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=button class=\"btn btn-primary\" ng-click=ctrl.save()><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/modules/admissions/views/application-form-edit.html",
    "<!DOCTYPE html><html xmlns:th=http://www.thymeleaf.org layout:decorator=layout/main><head><title>Application Form</title><link rel=stylesheet href=//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css><script th:inline=javascript th:src=@{/js/college-fund-payment.js}></script><script th:inline=javascript th:src=@{/js/contact-dialog.js}></script><script th:inline=javascript th:src=@{/js/application-requests.js}></script><script th:inline=javascript th:src=@{/js/lldd-health-prob-cat.js}></script><script th:inline=javascript th:src=@{/js/wordAddressGenerator.js}></script><script th:inline=javascript th:src=@{/js/postcode-lookup.js}></script><script th:inline=javascript th:src=@{/js/datepicker.js}></script></head><body><div layout:fragment=content><div><span th:text=${message}></span></div><form action=# name=application-form id=application-form class=form method=post th:action=@{/application/edit/__${app.id}__} th:object=${app}><div class=row><div class=\"form-group col-md-12 col-sm-12\"><fieldset><legend>Application Details</legend><div class=form-group><div th:replace=\"fragments/form :: hidden ('student-id', 'id')\"></div><div th:replace=\"fragments/form :: hidden ('person-id', 'personId')\"></div></div><div class=form-group><label for=surname class=\"col-xs-6 col-sm-4 col-md-2 control-label\">Reference No:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-4\"><input class=form-control name=reference-no minlength=2 id=reference-no readonly placeholder=\"Reference No\" th:field=*{referenceNo}></div></div><div class=form-group><label for=received class=\"col-xs-6 col-sm-4 col-md-2 control-label\">Date Received:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-4\"><input class=\"form-control date-picker\" name=received id=received placeholder=DD/MM/YYYY th:field=*{received} required><span th:if=\"${#fields.hasErrors('received')}\" th:errors=\"*{ received }\" th:class=\"${#fields.hasErrors('received')}? text-danger\">Field Invalid</span></div></div><div class=form-group><label for=endDate class=\"col-xs-6 col-sm-4 col-md-2 control-label\">Date withdrawal:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-4\"><input class=\"form-control date-picker\" name=endDate id=withdrawal placeholder=DD/MM/YYYY th:field=*{endDate}></div></div><div class=form-group><label for=application-status class=\"col-xs-6 col-sm-4 col-md-2 control-label\">Application Status:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-4\"><select class=form-control th:field=*{status.id}><option th:each=\"i : ${applicationStatusList}\" th:value=${i.id} th:text=${i}>Option...</option></select><span th:if=\"${#fields.hasErrors('status')}\" th:errors=*{status} th:class=\"${#fields.hasErrors('status')}? text-danger\">Field Invalid</span></div></div><div class=form-group><label for=year class=\"col-xs-6 col-sm-4 col-md-2 control-label\">Year of Application:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-4\"><select class=form-control th:field=*{year.id} readonly required th:disabled=disabled><option th:each=\"i : ${yearList}\" th:value=${i.id} th:text=${i.description}>Option...</option></select><span th:if=\"${#fields.hasErrors('year.id')}\" th:errors=*{year.id} th:class=\"${#fields.hasErrors('year.id')}? text-danger\">Field Invalid</span></div></div><div class=form-group><label for=academicYear class=\"col-xs-6 col-sm-4 col-md-2 control-label\">Year Applied:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-4\"><select class=form-control th:field=*{academicYear.id} readonly required th:disabled=disabled><option th:each=\"i : ${academicYearList}\" th:value=${i.id} th:text=${i.description}>Option...</option></select><span th:if=\"${#fields.hasErrors('academicYear.id')}\" th:errors=*{academicYear.id} th:class=\"${#fields.hasErrors('academicYear.id')}? text-danger\">Field Invalid</span></div></div></fieldset></div></div><div class=row><div class=\"form-group col-md-6 col-sm-12\"><fieldset><legend>Personal Details</legend><div class=form-group th:class=\"${#fields.hasErrors('firstName')}? has-error\"><label for=firstName class=\"col-xs-6 col-sm-4 col-md-4 control-label\">First Name:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control placeholder=\"First Name\" th:field=*{firstName} id=first-name name=firstName minlength=2></div></div><div class=form-group th:class=\"${#fields.hasErrors('middleNames')}? has-error\"><label for=middleNames class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Middle Name(s):</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control placeholder=\"Middle Name(s)\" th:field=*{middleNames} id=middle-names name=middleNames minlength=2></div></div><div class=form-group th:class=\"${#fields.hasErrors('surname')}? has-error\"><label for=surname class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Surname:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control name=surname minlength=2 id=surname placeholder=Surname th:field=*{surname}></div></div><div class=form-group th:class=\"${#fields.hasErrors('preferredName')}? has-error\"><label for=preferredName class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Preferred Name:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control name=preferredName id=preferred-name minlength=2 placeholder=\"Preferred Name\" th:field=*{preferredName}></div></div><div class=form-group th:class=\"${#fields.hasErrors('previousSurname')}? has-error\"><label for=previousSurname class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Previous Surname:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control name=previousSurname id=PreviousSurname minlength=2 placeholder=\"Previous Surname\" th:field=*{previousSurname}></div></div><div class=form-group th:class=\"${#fields.hasErrors('dob')}? has-error\"><label for=dob class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Date of Birth:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control name=dob id=dob placeholder=DD/MM/YYYY th:field=*{dob}></div></div><div class=form-group th:class=\"${#fields.hasErrors('gender.id')}? has-error\"><label for=gender class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Gender:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><select class=form-control th:field=*{gender.id}><option th:each=\"i : ${genderList}\" th:value=${i.id} th:text=${i.description}>Option...</option></select><span th:if=\"${#fields.hasErrors('gender.id')}\" th:errors=*{gender.id} th:class=\"${#fields.hasErrors('gender.id')}? text-danger\">Field Invalid</span></div></div><div class=form-group th:class=\"${#fields.hasErrors('home')}? has-error\"><label for=home class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Home Telephone:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=\"form-control left phone-group\" name=home id=home placeholder=\"Home Telephone\" th:field=*{home}></div></div><div class=form-group th:class=\"${#fields.hasErrors('mobile')}? has-error\"><label for=mobile class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Mobile Telephone:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=\"form-control left phone-group\" name=mobile id=mobile placeholder=\"Mobile Telephone\" th:field=*{mobile}></div></div><div class=form-group th:class=\"${#fields.hasErrors('email')}? has-error\"><label for=email class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Student Email:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control type=email name=email id=email placeholder=\"Student Email\" th:field=*{email}></div></div><div class=form-group th:class=\"${#fields.hasErrors('nationality')}? has-error\"><label for=nationality class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Nationality:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><select class=form-control th:field=*{nationality.id}><option value=\"\">-- Select Nationality --</option><option th:each=\"i : ${nationalityList}\" th:value=${i.id} th:text=${i.description}>Option...</option></select><span th:if=\"${#fields.hasErrors('nationality')}\" th:errors=*{nationality} th:class=\"${#fields.hasErrors('nationality')}? text-danger\">Field Invalid</span></div></div><div class=form-group th:class=\"${#fields.hasErrors('resident')}? has-error\"><label for=resident class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Resident:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control type=checkbox name=resident id=resident th:field=*{resident}></div></div><div class=form-group th:class=\"${#fields.hasErrors('countryOfResidence')}? has-error\"><label for=countryOfResidence class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Country Of Residence:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control name=countryOfResidence id=country-of-residence placeholder=\"Country Of Residence\" th:field=*{countryOfResidence}></div></div></fieldset></div><div id=main-address-form class=\"form-group col-md-6 col-sm-12 postcode-lookup-address\"><fieldset><legend>Address Details</legend><div class=form-group th:class=\"${#fields.hasErrors('line1')}? has-error\"><label for=line1 class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Address Line 1:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control id=line1 placeholder=\"Address Line 1\" th:field=*{line1} readonly required><span th:if=\"${#fields.hasErrors('line1')}\" th:errors=*{line1} th:class=\"${#fields.hasErrors('line1')}? text-danger\">Field Invalid</span></div></div><div class=form-group th:class=\"${#fields.hasErrors('line2')}? has-error\"><label for=line2 class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Address Line 2:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control id=line2 placeholder=\"Address Line 2\" th:field=*{line2} readonly><span th:if=\"${#fields.hasErrors('line2')}\" th:errors=*{line2} th:class=\"${#fields.hasErrors('line2')}? text-danger\">Field Invalid</span></div></div><div class=form-group th:class=\"${#fields.hasErrors('line3')}? has-error\"><label for=line3 class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Address Line 3:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control id=line3 placeholder=\"Address Line 3\" th:field=*{line3} readonly><span th:if=\"${#fields.hasErrors('line3')}\" th:errors=*{line3} th:class=\"${#fields.hasErrors('line3')}? text-danger\">Field Invalid</span></div></div><div class=form-group th:class=hidden><label for=line4 class=hidden>Address Line 4:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control type=hidden id=line4 placeholder=\"Address Line 4\" th:field=*{line4} readonly><span th:if=\"${#fields.hasErrors('line4')}\" th:errors=*{line4} th:class=\"${#fields.hasErrors('line4')}? text-danger\">Field Invalid</span></div></div><div class=form-group th:class=hidden><label for=line5 class=hidden>Address Line 5:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control type=hidden id=line5 placeholder=\"Address Line 5\" th:field=*{line5} readonly><span th:if=\"${#fields.hasErrors('line5')}\" th:errors=*{line5} th:class=\"${#fields.hasErrors('line5')}? text-danger\">Field Invalid</span></div></div><div class=form-group th:class=hidden><label for=line5 class=hidden>Building Name:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control type=hidden id=buildingName placeholder=\"Building Name\" th:field=*{buildingName} readonly><span th:if=\"${#fields.hasErrors('buildingName')}\" th:errors=*{buildingName} th:class=\"${#fields.hasErrors('buildingName')}? text-danger\">Field Invalid</span></div></div><div class=form-group th:class=hidden><label for=line5 class=hidden>SubBuilding:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control type=hidden id=subBuilding placeholder=SubBuilding th:field=*{subBuilding} readonly><span th:if=\"${#fields.hasErrors('subBuilding')}\" th:errors=*{subBuilding} th:class=\"${#fields.hasErrors('subBuilding')}? text-danger\">Field Invalid</span></div></div><div class=form-group th:class=\"${#fields.hasErrors('town')}? has-error\"><label for=town class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Town:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control id=town placeholder=Town th:field=*{town} readonly><span th:if=\"${#fields.hasErrors('town')}\" th:errors=*{town} th:class=\"${#fields.hasErrors('town')}? text-danger\">Field Invalid</span></div></div><div class=form-group th:class=\"${#fields.hasErrors('county')}? has-error\"><label for=county class=\"col-xs-6 col-sm-4 col-md-4 control-label\">County:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control id=county placeholder=County th:field=*{county} readonly><span th:if=\"${#fields.hasErrors('county')}\" th:errors=*{county} th:class=\"${#fields.hasErrors('county')}? text-danger\">Field Invalid</span></div></div><div class=\"container col-sx-12 col-sm-12 col-md-12 ${#fields.hasErrors('postcode')}? has-error\"><div class=row><label for=postcode class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Postcode</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=\"form-control postcode\" id=postcode placeholder=Postcode th:field=*{postcode} required></div></div><div class=row><div class=\"col-xs-3 col-sm-3 col-md-3 col-md-offset-4\"><button id=postcode-lookup type=button value=Button class=\"btn btn-primary postcode-lookup\">Lookup</button></div><div class=\"col-xs-3 col-sm-3 col-md-3\"><button id=manual-lookup type=button value=Button class=\"btn btn-primary\">Manual Entry</button></div></div></div></fieldset></div><div class=\"form-group col-md-6 col-sm-12\"><fieldset><legend>Sibling Details</legend><div class=form-group th:class=\"${#fields.hasErrors('sibling')}? has-error\"><label for=sibling class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Sibling at College:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control type=checkbox name=sibling id=sibling th:field=*{sibling}></div></div><div class=form-group th:class=\"${#fields.hasErrors('siblingName')}? has-error\"><label for=siblingName class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Sibling Name:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control placeholder=\"Sibling Name\" th:field=*{siblingName} id=sibling-name name=siblingName minlength=2></div></div><div class=form-group th:class=\"${#fields.hasErrors('siblingYear')}? has-error\"><label for=siblingYear class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Sibling Year:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control placeholder=\"Sibling Year\" th:field=*{siblingYear} id=sibling-year name=siblingYear minlength=4></div></div><div class=form-group th:class=\"${#fields.hasErrors('siblingAdmNo')}? has-error\"><label for=siblingAdmNo class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Sibling AdmNo:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control placeholder=\"Sibling AdmNo\" th:field=*{siblingYear} id=sibling-admNo name=siblingAdmNo minlength=4></div></div></fieldset></div></div><div class=row><div class=\"form-group col-md-12 col-sm-12\"><fieldset><legend>Correspondence Details</legend><table id=contact-table class=table><thead><th>Contact Type</th><th>Title</th><th>First Name</th><th>Surname</th><th>Home</th><th>Mobile</th><th>Email</th><th>Address</th><th>Contactable</th><th>Preferred</th><th>Actions</th></thead><tbody><tr th:each=\"c : *{contacts}\"><td th:text=${c.contactType}>Father</td><td th:text=${c.contact.title.description}>Mr</td><td th:text=${c.contact.firstName}>Joe</td><td th:text=${c.contact.surname}>Blogs</td><td th:text=${c.contact.home}>09423891748923</td><td th:text=${c.contact.mobile}>01283843432</td><td th:text=${c.contact.email}>noreply@reigate.ac.uk</td><td th:text=\"${c.contact.address} != null ? #{yes} : ''\">Yes</td><td th:text=\"${c.contactable}? #{yes} : #{no}\">Yes</td><td th:text=\"${c.preferred}? #{yes} : #{no}\">Yes</td><td><a class=edit-contact th:href=@{/contact/get/__${c.id}__} th:attr=\"id=${c.id},value=${c.id}\">Edit</a> <a class=delete-contact th:href=@{/contact/get/__${c.id}__} th:attr=\"id=${c.id},value=${c.id}\">Delete</a></td></tr></tbody></table><button id=create-contact class=\"btn btn-default\">Create new contact</button> <button id=reload-contact-table class=\"btn btn-default hidden\">Reload</button></fieldset></div></div><div class=row><div class=\"form-group col-md-6 col-sm-12\"><fieldset><legend>Previous School Information</legend><div class=form-group th:class=\"${#fields.hasErrors('school')}? has-error\"><label for=school class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Previous School:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><select class=form-control th:field=*{school}><option value=\"\">-- Select Previous School --</option><option th:each=\"i : ${schoolList}\" th:value=${i.id} th:text=${i}>Option...</option></select><span th:if=\"${#fields.hasErrors('school')}\" th:errors=*{school} th:class=\"${#fields.hasErrors('school')}? text-danger\">Field Invalid</span></div></div><div class=form-group th:class=\"${#fields.hasErrors('refRequested')}? has-error\"><label for=refRequested class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Reference Requested:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=\"form-control date-picker\" placeholder=\"Reference Requested\" th:field=*{refRequested} id=ref-requested name=refRequested></div></div><div class=form-group th:class=\"${#fields.hasErrors('refReceived')}? has-error\"><label for=refReceived class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Reference Received:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=\"form-control date-picker\" placeholder=\"Reference Received\" th:field=*{refReceived} id=ref-received name=refReceived></div></div><div class=form-group th:class=\"${#fields.hasErrors('reportRequested')}? has-error\"><label for=reportRequested class=\"col-xs-6 col-sm-4 col-md-4 control-label\">School Report Requested:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=\"form-control date-picker\" placeholder=\"School Report Requested\" th:field=*{reportRequested} id=reportRequested name=reportRequested></div></div><div class=form-group th:class=\"${#fields.hasErrors('reportReceived')}? has-error\"><label for=reportReceived class=\"col-xs-6 col-sm-4 col-md-4 control-label\">School Report Received:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=\"form-control date-picker\" placeholder=\"School Report Received\" th:field=*{reportReceived} id=reportReceived name=reportReceived></div></div><div class=form-group th:class=\"${#fields.hasErrors('schoolReportStatus')}? has-error\"><label for=schoolReportStatus class=\"col-xs-6 col-sm-4 col-md-4 control-label\">School Report Status:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><select class=form-control th:field=*{schoolReportStatus.id}><option value=\"\">-- Select School Report Status--</option><option th:each=\"i : ${schoolReportStatusList}\" th:value=${i.id} th:text=\"${i.code + ' - ' + i.description}\">Option...</option></select><span th:if=\"${#fields.hasErrors('schoolReportStatus')}\" th:errors=*{schoolReportStatus} th:class=\"${#fields.hasErrors('schoolReportStatus')}? text-danger\">Field Invalid</span></div></div><div class=form-group th:class=\"${#fields.hasErrors('blueCard')}? has-error\"><label for=blueCard class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Blue Card Date:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=\"form-control date-picker\" placeholder=\"Blue Card Date\" th:field=*{blueCard} id=blueCard name=blueCard></div></div></fieldset></div><div class=\"form-group col-md-6 col-sm-12\"><fieldset><legend>Student Details</legend><div class=form-group th:class=\"${#fields.hasErrors('studentType')}? has-error\"><label for=studentType class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Student Type:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><select class=form-control th:field=*{studentType.id}><option value=\"\">-- Select StudentType --</option><option th:each=\"i : ${studentTypeList}\" th:value=${i.id} th:text=${i.description}>Option...</option></select><span th:if=\"${#fields.hasErrors('studentType')}\" th:errors=*{studentType} th:class=\"${#fields.hasErrors('studentType')}? text-danger\">Field Invalid</span></div></div><div class=form-group th:class=\"${#fields.hasErrors('uln')}? has-error\"><label for=uln class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Unique Learner No:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control placeholder=\"Unique Learner No\" th:field=*{uln} id=uln name=uln></div></div><div class=form-group th:class=\"${#fields.hasErrors('uci')}? has-error\"><label for=uci class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Unique Candidate Identifier:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control placeholder=\"Unique Candidate Identifier\" th:field=*{uci} id=uci name=uci maxlength=13></div></div><div class=form-group th:class=\"${#fields.hasErrors('tutorGroup')}? has-error\"><label for=tutorGroup class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Tutor Group:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><select class=form-control th:field=*{tutorGroup.id}><option value=\"\">-- Select Tutor Group --</option><option th:each=\"i : ${tutorGroupList}\" th:value=${i.id} th:text=${i}>Option...</option></select><span th:if=\"${#fields.hasErrors('tutorGroup')}\" th:errors=*{tutorGroup} th:class=\"${#fields.hasErrors('tutorGroup')}? text-danger\">Field Invalid</span></div></div><div class=form-group th:class=\"${#fields.hasErrors('offerType')}? has-error\"><label for=offerType class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Offer Type:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><select class=form-control th:field=*{offerType.id}><option th:each=\"i : ${offerTypeList}\" th:value=${i.id} th:text=${i.description}>Option...</option></select><span th:if=\"${#fields.hasErrors('offerType')}\" th:errors=*{offerType} th:class=\"${#fields.hasErrors('offerType')}? text-danger\">Field Invalid</span></div></div><div class=form-group th:class=\"${#fields.hasErrors('offerSent')}? has-error\"><label for=offerSent class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Offer Sent:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=\"form-control date-picker\" placeholder=\"Offer Sent\" th:field=*{offerSent} id=offerSent name=offerSent></div></div></fieldset></div></div><div class=row><div class=\"form-group col-md-6 col-sm-12\"><fieldset><legend>Disability/Medical Information</legend><div class=form-group th:class=\"${#fields.hasErrors('llddHealthProblem')}? has-error\"><label for=llddHealthProblem class=\"col-xs-6 col-sm-4 col-md-4 control-label\">LLDD Health Problem:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><select id=llddHealthProblem class=form-control th:field=*{llddHealthProblem}><option th:each=\"i : ${llddHealthProblemList}\" th:value=${i.id} th:text=${i.shortDescription}>Option...</option></select><span th:if=\"${#fields.hasErrors('llddHealthProblem')}\" th:errors=*{llddHealthProblem} th:class=\"${#fields.hasErrors('llddHealthProblem')}? text-danger\">Field Invalid</span></div></div><div><div class=\"form-group form-inline\"><label class=\"col-xs-4 col-sm-4 col-md-4 control-label\" for=new-lldd-health-prob>Add LLDD Category:</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><select class=form-control id=new-lldd-health-prob><option value=-1>-- Select LLDD Health Cat to Add --</option><option th:each=\"i : ${llddHealthProblemCategoryList}\" th:value=${i.id} th:text=${i}></option></select><button id=add-lldd-health-prob type=submit class=\"btn btn-primary\">Add</button></div></div><table id=lldd-table class=\"table col-xs-12 col-sm-6 col-sm-6 col-md-6\"><thead><th>LLDD and Health Problem Category</th></thead><tbody id=tbl-llddhealth-prob-cat></tbody></table><button id=reload-lldd-table class=\"btn hidden\">Reload</button></div><div class=form-group th:class=\"${#fields.hasErrors('medicalNote')}? has-error\"><label for=medicalNote class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Medical Notes:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><textarea class=form-control placeholder=\"Medical Notes\" th:field=*{medicalNote} id=medicalNote name=medicalNote rows=5 cols=30 type=text></textarea></div></div><div class=form-group th:class=\"${#fields.hasErrors('ehcp')}? has-error\"><label for=ehcp class=\"col-xs-8 col-sm-4 col-md-4 control-label\">Education, Health and Care Plan:</label><div class=\"col-xs-4 col-sm-8 col-sm-8 col-md-8\"><input class=form-control type=checkbox id=ehcp th:field=*{ehcp}><span th:if=\"${#fields.hasErrors('ehcp')}\" th:errors=*{ehcp} th:class=\"${#fields.hasErrors('ehcp')}? text-danger\">Field Invalid</span></div></div><div class=form-group th:class=\"${#fields.hasErrors('specialCategory')}? has-error\"><label for=specialCategory class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Special Category:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><select class=form-control th:field=*{specialCategory.id}><option th:each=\"i : ${specialCategoryList}\" th:value=${i.id} th:text=\"${i.code == '' ? i.description : i.code + ' - ' + i.description}\">Option...</option></select><span th:if=\"${#fields.hasErrors('specialCategory')}\" th:errors=*{specialCategory} th:class=\"${#fields.hasErrors('specialCategory')}? text-danger\">Field Invalid</span></div></div></fieldset></div><div class=\"form-group col-md-6 col-sm-12\"><fieldset><legend>Interview Information</legend><div class=form-group th:class=\"${#fields.hasErrors('interviewer')}? has-error\"><label for=interviewer class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Interviewer:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><select class=form-control th:field=*{interviewer}><option value=\"\">-- Select Interviewer --</option><option th:each=\"i : ${staffList}\" th:value=${i.id} th:text=\"${i.initials + ' - ' + i.person.surname + ', ' + i.person.firstName}\">Option...</option></select><span th:if=\"${#fields.hasErrors('interviewer')}\" th:errors=*{interviewer} th:class=\"${#fields.hasErrors('interviewer')}? text-danger\">Field Invalid</span></div></div><div class=form-group th:class=\"${#fields.hasErrors('interviewDate')}? has-error\"><label for=interviewDate class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Interview Date:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=\"form-control date-picker\" placeholder=\"Interview Date\" th:field=*{interviewDate} id=interviewDate name=interviewDate></div></div></fieldset></div><div class=\"form-group col-md-6 col-sm-12\"><fieldset><legend>Admissions Notes</legend><div class=form-group th:class=\"${#fields.hasErrors('admissionsNotes')}? has-error\"><label for=admissionsNotes class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Admissions Notes:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><textarea class=form-control placeholder=\"Admissions Notes\" th:field=*{admissionsNotes} id=admissionsNotes name=admissionsNotes rows=5 cols=30 type=text></textarea></div></div></fieldset></div><div class=\"form-group col-md-6 col-sm-12\"><fieldset><legend>Acceptance Information</legend><div class=form-group th:class=\"${#fields.hasErrors('acceptanceReceived')}? has-error\"><label for=acceptanceReceived class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Acceptance Received:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=\"form-control date-picker\" placeholder=\"Acceptance Received\" th:field=*{acceptanceReceived} id=acceptanceReceived name=acceptanceReceived></div></div><div class=form-group th:class=\"${#fields.hasErrors('ethnicity')}? has-error\"><label for=ethnicity class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Ethnicity:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><select class=form-control th:field=*{ethnicity.id}><option value=\"\">-- Select Ethnicity --</option><option th:each=\"i : ${ethnicityList}\" th:value=${i.id} th:text=${i.description}>Option...</option></select><span th:if=\"${#fields.hasErrors('ethnicity')}\" th:errors=*{ethnicity} th:class=\"${#fields.hasErrors('ethnicity')}? text-danger\">Field Invalid</span></div></div></fieldset></div><div class=\"form-group col-md-6 col-sm-12\"><fieldset><legend>Data Sharing options</legend><div class=form-group th:class=\"${#fields.hasErrors('restrictedUseIndicator')}? has-error\"><label for=restrictedUseIndicator class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Restricted Use:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><select class=form-control th:field=*{restrictedUseIndicator.id}><option value=\"\">-- Select Restricted Use --</option><option th:each=\"i : ${restrictedUseIndicatorList}\" th:value=${i.id} th:text=${i.description}>Option...</option></select><span th:if=\"${#fields.hasErrors('restrictedUseIndicator')}\" th:errors=*{restrictedUseIndicator} th:class=\"${#fields.hasErrors('restrictedUseIndicator')}? text-danger\">Field Invalid</span></div></div><div class=form-group th:class=\"${#fields.hasErrors('contactByPost')}? has-error\"><label for=contact-by-post class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Contact By Post:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control type=checkbox name=contact-by-post id=contact-by-post th:field=*{contactByPost}></div></div><div class=form-group th:class=\"${#fields.hasErrors('contactByPhone')}? has-error\"><label for=contact-by-phone class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Contact By Phone:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control type=checkbox name=contact-by-phone id=contact-by-phone th:field=*{contactByPhone}></div></div><div class=form-group th:class=\"${#fields.hasErrors('contactByEmail')}? has-error\"><label for=contact-by-email class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Contact By Email:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control type=checkbox name=contact-by-email id=contact-by-email th:field=*{contactByEmail}></div></div><div class=form-group th:class=\"${#fields.hasErrors('lrsOptOut')}? has-error\"><label for=lrs-opt-out class=\"col-xs-6 col-sm-4 col-md-4 control-label\">LRS Opt Out:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control type=checkbox name=lrs-opt-out id=lrs-opt-out th:field=*{lrsOptOut}></div></div></fieldset></div><div class=\"form-group col-md-6 col-sm-12\"><fieldset><legend>College Fund Entry</legend><label for=college-fund-paid class=\"col-xs-6 col-sm-4 col-md-4 control-label\">College Fund Paid:</label><div class=\"col-xs-6 col-sm-6 col-sm-6 col-md-6\"><select class=form-control th:field=*{collegeFundPaid.id}><option value=\"\">-- Select College Fund Paid --</option><option th:each=\"i : ${collegeFundPaidList}\" th:value=${i.id} th:text=${i}></option></select></div><div class=form-group th:class=\"${#fields.hasErrors('collegeFundPaidYears')}? has-error\"><label for=collegeFundPaidYears class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Years Paid For:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control placeholder=\"Years Paid For\" th:field=*{collegeFundPaidYears} id=collegeFundPaidYears name=collegeFundPaidYears type=number min=0 max=3></div></div><table id=collegeFund-table class=table><thead><th>Payment Date</th><th>Amount</th><th>Cheque Date</th><th>Payee</th><th>Gift Aid</th><th>Cash</th><th>Actions</th></thead><tbody></tbody></table><button id=create-collegeFund class=\"btn btn-primary\">Add College Fund</button> <button id=reload-collegeFund-table class=\"btn bth-default hidden\">Reload</button></fieldset></div><div class=\"form-group col-md-6 col-sm-12\"><fieldset><legend>Introductory Day/Choices Day/Enrolment Interview Details</legend><div class=form-group th:class=\"${#fields.hasErrors('cannotAttendIntro')}? has-error\"><label for=cannot-attend-intro class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Cannot Attend Intro Day:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control type=checkbox id=cannot-attend-intro th:field=*{cannotAttendIntro}></div></div><div class=form-group th:class=\"${#fields.hasErrors('cannotAttendInduction')}? has-error\"><label for=cannot-attend-induction class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Cannot Attend Choices Day:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control type=checkbox id=cannot-attend-induction th:field=*{cannotAttendInduction}></div></div><div class=form-group th:class=\"${#fields.hasErrors('inductionDate')}? has-error\"><label for=inductionDate class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Date of Induction:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=\"form-control date-picker\" placeholder=\"Date of Induction\" th:field=*{inductionDate} id=inductionDate name=inductionDate></div></div><div class=form-group th:class=\"${#fields.hasErrors('enrolmentInterviewDate')}? has-error\"><label for=enrolmentInterviewDateTime class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Enrolment Interview Date/Time:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control placeholder=\"DD/MM/YYYY HH:MM\" th:field=*{enrolmentInterviewDateTime} id=enrolmentInterviewDateTime name=enrolmentInterviewDateTime></div></div></fieldset></div><div class=\"form-group col-md-6 col-sm-12\"><fieldset><legend>Course Requests</legend><div><div class=\"form-group form-inline\"><label class=\"col-xs-4 col-sm-4 col-md-4 control-label\" for=new-request>New Request:</label><div class=\"col-xs-6 col-sm-6 col-sm-6 col-md-6\"><input class=form-control id=new-request placeholder=\"New Request\" maxlength=5></div><div class=\"col-xs-2 col-sm-2 col-sm-2 col-md-2\"><button id=add-request type=submit class=\"btn btn-primary\">Add</button></div></div><table class=\"table table-responsive col-xs-12 col-sm-6 col-sm-6 col-md-6\" id=request-table><thead><th>Request Code</th><th>Description</th><th>Actions</th></thead><tbody></tbody></table><button id=reload-request-table class=\"btn bth-default hidden\">Reload</button></div></fieldset></div></div><div class=\"row fixed-bottom-right\"><a class=\"btn btn-info\" target=_blank th:href=@{/wordGenerator/studentLetter/__${app.id}__}>Student Letter</a> <a class=\"btn btn-info\" target=_blank th:href=@{/wordGenerator/parentLetter/__${app.id}__}>Parent Letter</a> <button type=submit class=\"btn btn-primary\">Save</button> <button type=submit class=\"btn btn-default\">Cancel</button></div></form><script>//         $('.timepicker').wickedpicker();\n" +
    "            $(\"#application-form\").validate();</script><div th:replace=\"fragments/dialogs/address-list :: address-list-dialog\"></div><div th:replace=\"fragments/dialogs/contact-form :: contact-dialog-form\"></div><div th:replace=\"fragments/dialogs/college-fund-payment :: college-fund-payment-dialog\"></div></div></body></html>");
  $templateCache.put("js/modules/admissions/views/application-form-new.html",
    "<div><form name=application-form class=form ng-action=createApplication()><div class=row><div class=col-xs-12><fieldset><legend>Application Details</legend></fieldset><div class=\"form-group col-sm-12 col-md-6\"><label for=received class=\"col-xs-6 col-sm-4 control-label\">Date Received:</label><div class=\"col-xs-6 col-sm-8\"><div class=input-group><input class=form-control ng-init=\"applicationReceived = false\" uib-datepicker-popup=dd/MM/yyyy is-open=applicationReceived ng-model=application.received> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"applicationReceived = !applicationReceived\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div><div class=\"form-group col-sm-12 col-md-6\"><label for=academicYear class=\"col-xs-6 col-sm-4 control-label\">Year Applied:</label><div class=\"col-xs-6 col-sm-8\"><academic-year-selection class=form-control ng-model=application.academicYearId></academic-year-selection></div></div></div></div><div class=row><div class=\"col-xs-12 col-md-6\"><fieldsset><legend>Personal Details</legend></fieldsset><div class=form-group><label for=firstName class=\"col-xs-6 col-sm-4 control-label\">First Name:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control placeholder=\"First Name\" ng-model=application.firstName id=first-name name=firstName minlength=2></div></div><div class=form-group><label for=middleNames class=\"col-xs-6 col-sm-4 control-label\">Middle Name(s):</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control placeholder=\"Middle Name(s)\" ng-model=application.middleNames id=middle-names name=middleNames minlength=2></div></div><div class=form-group><label for=surname class=\"col-xs-6 col-sm-4 control-label\">Surname:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control name=surname minlength=2 id=surname placeholder=Surname ng-model=application.surname></div></div><div class=form-group><label for=preferredName class=\"col-xs-6 col-sm-4 control-label\">Preferred Name:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control name=preferredName id=preferred-name minlength=2 placeholder=\"Preferred Name\" ng-model=application.preferredName></div></div><div class=form-group><label for=previousSurname class=\"col-xs-6 col-sm-4 control-label\">Previous Surname:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control name=previousSurname id=PreviousSurname minlength=2 placeholder=\"Previous Surname\" ng-model=application.previousSurname></div></div><div class=form-group><label for=dob class=\"col-xs-6 col-sm-4 control-label\">Date of Birth:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control name=dob id=dob placeholder=DD/MM/YYYY ng-model=application.dob></div></div><div class=form-group><label for=gender class=\"col-xs-6 col-sm-4 control-label\">Gender:</label><div class=\"col-xs-6 col-sm-8\"><gender-selection class=form-control ng-model=application.genderId></gender-selection></div></div><div class=form-group><label for=home class=\"col-xs-6 col-sm-4 control-label\">Home Telephone:</label><div class=\"col-xs-6 col-sm-8\"><input class=\"form-control left phone-group\" type=tel name=home id=home placeholder=\"Home Telephone\" ng-model=application.home></div></div><div class=form-group><label for=mobile class=\"col-xs-6 col-sm-4 control-label\">Mobile Telephone:</label><div class=\"col-xs-6 col-sm-8\"><input class=\"form-control left phone-group\" type=tel name=mobile id=mobile placeholder=\"Mobile Telephone\" ng-model=application.mobile></div></div><div class=form-group><label for=email class=\"col-xs-6 col-sm-4 control-label\">Student Email:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control type=email name=email id=email placeholder=\"Student Email\" ng-model=application.email></div></div><div class=form-group><label for=nationality class=\"col-xs-6 col-sm-4 control-label\">Nationality:</label><div class=\"col-xs-6 col-sm-8\"><nationality-selection class=form-control ng-model=application.nationality></nationality-selection></div></div><div class=form-group><label for=resident class=\"col-xs-6 col-sm-4 control-label\">Resident:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control type=checkbox name=resident id=resident ng-model=application.resident></div></div><div class=form-group><label for=countryOfResidence class=\"col-xs-6 col-sm-4 control-label\">Country Of Residence:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control name=countryOfResidence id=country-of-residence placeholder=\"Country Of Residence\" ng-model=application.countryOfResidence></div></div></div><div id=main-address-form class=\"col-xs-12 col-md-6 postcode-lookup-address\"><fieldset><legend>Address Details</legend></fieldset><input type=hidden id=addressId ng-model=application.addressId readonly tabindex=-1><div class=form-group><label for=line1 class=\"col-xs-6 col-sm-4 control-label\">Address Line 1:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control id=line1 placeholder=\"Address Line 1\" ng-model=application.line1 readonly tabindex=-1 required></div></div><div class=form-group><label for=line2 class=\"col-xs-6 col-sm-4 control-label\">Address Line 2:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control id=line2 placeholder=\"Address Line 2\" ng-model=application.line2 readonly tabindex=-1></div></div><div class=form-group><label for=line3 class=\"col-xs-6 col-sm-4 control-label\">Address Line 3:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control id=line3 placeholder=\"Address Line 3\" ng-model=application.line3 readonly tabindex=-1></div></div><div class=\"form-group hidden\"><label for=line4 class=hidden>Address Line 4:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control type=hidden id=line4 placeholder=\"Address Line 4\" ng-model=application.line4 readonly tabindex=-1></div></div><div class=\"form-group hidden\"><label for=line5 class=hidden>Address Line 5:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control type=hidden id=line5 placeholder=\"Address Line 5\" ng-model=application.line5 readonly tabindex=-1></div></div><div class=\"form-group hidden\"><label for=line5 class=hidden>Building Name:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control type=hidden id=buildingName placeholder=\"Building Name\" ng-model=application.buildingName readonly tabindex=-1></div></div><div class=\"form-group hidden\"><label for=line5 class=hidden>SubBuilding:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control type=hidden id=subBuilding placeholder=SubBuilding ng-model=application.subBuilding readonly tabindex=-1></div></div><div class=form-group><label for=town class=\"col-xs-6 col-sm-4 control-label\">Town:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control id=town placeholder=Town ng-model=application.town readonly tabindex=-1></div></div><div class=form-group><label for=county class=\"col-xs-6 col-sm-4 control-label\">County:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control id=county placeholder=County ng-model=application.county readonly tabindex=-1></div></div><div class=\"container col-sx-12 col-sm-12 col-md-12 ${#fields.hasErrors('postcode')}? has-error\"><div class=row><label for=postcode class=\"col-xs-6 col-sm-4 control-label\">Postcode</label><div class=\"col-xs-6 col-sm-8\"><input class=\"form-control postcode\" id=postcode placeholder=Postcode ng-model=application.postcode required></div></div><div class=row><div class=\"col-xs-3 col-sm-3 col-md-3 col-md-offset-4\"><button id=postcode-lookup type=button value=Button class=\"btn btn-primary postcode-lookup\">Lookup</button></div><div class=\"col-xs-3 col-sm-3 col-md-3\"><button id=manual-lookup type=button value=Button class=\"btn btn-primary\">Manual Entry</button></div></div></div></div><div class=\"form-group col-sm-12 col-md-6\"><fieldsset><legend>Sibling Details</legend></fieldsset><div class=form-group><label for=sibling class=\"col-xs-6 col-sm-4 control-label\">Sibling at College:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control type=checkbox name=sibling id=sibling ng-model=application.sibling></div></div><div class=form-group><label for=siblingName class=\"col-xs-6 col-sm-4 control-label\">Sibling Name:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control placeholder=\"Sibling Name\" ng-model=application.siblingName id=sibling-name name=siblingName minlength=2></div></div><div class=form-group><label for=siblingYear class=\"col-xs-6 col-sm-4 control-label\">Sibling Year:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control placeholder=\"Sibling Year\" ng-model=application.siblingYear id=sibling-year name=siblingYear minlength=4></div></div><div class=form-group><label for=siblingAdmNo class=\"col-xs-6 col-sm-4 control-label\">Sibling AdmNo:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control placeholder=\"Sibling AdmNo\" ng-model=application.siblingAdmNo id=sibling-admNo name=siblingAdmNo minlength=4></div></div></div></div><div class=\"hidden row\" id=twin-match><div class=\"col-xs-12 col-md-12\"><fieldset><legend>Duplicate Matches Found</legend></fieldset><table id=twin-table class=table><thead><th>Surname</th><th>First Name</th><th>Middle Name(s)</th><th>Date of Birth</th><th>Home Telephone</th><th>Mobile Telephone</th><th>Address</th><th>Actions</th></thead><tbody></tbody></table></div></div><div class=row><div class=\"col-xs-12 col-md-12\"><fieldsset><legend>Correspondence Details</legend></fieldsset><div class=\"contact col-xs-12 col-md-6\"><h4>Contact 1</h4><input type=hidden id=contact-0-id class=\"form-group col-md-12 col-sm-12\" ng-model=application.contacts[0].id><div class=form-group><label class=\"col-xs-4 col-sm-4 col-md-4 control-label\" for=contact-0-contactType>Contact Type:</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><contact-type-selection class=form-control ng-model=application.contacts[0].contactTypeId></contact-type-selection></div><div class=form-group><label class=\"col-xs-4 col-sm-4 col-md-4 control-label\" for=contact-0-title>Title:</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><title-selection class=form-control ng-model=application.contacts[0].contact.title.id></title-selection></div></div><div class=form-group><label for=contacts[0].contact.firstName class=\"col-xs-6 col-sm-4 control-label\">First Name:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control placeholder=\"First Name\" ng-model=application.contacts[0].contact.firstName id=contact-0-first-name name=contacts[0].contact.firstName minlength=2></div></div><div class=form-group><label for=contacts[0].contact.surname class=\"col-xs-6 col-sm-4 control-label\">Surname:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control placeholder=Surname ng-model=application.contacts[0].contact.surname id=contact-0-surname name=contacts[0].contact.surname minlength=2></div></div><div class=form-group><label for=contacts[0].contact.home class=\"col-xs-6 col-sm-4 control-label\">Home:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control placeholder=Home ng-model=application.contacts[0].contact.home id=contact-0-home name=contacts[0].contact.home></div></div><div class=form-group><label for=contacts[0].contact.mobile class=\"col-xs-6 col-sm-4 control-label\">Mobile:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control placeholder=Mobile ng-model=application.contacts[0].contact.mobile id=contact-0-mobile name=contacts[0].contact.mobile></div></div><div class=form-group><label for=contacts[0].contact.work class=\"col-xs-6 col-sm-4 control-label\">Work:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control placeholder=Work ng-model=application.contacts[0].contact.work id=contact-0-work name=contacts[0].contact.work></div></div><div class=form-group><label for=contacts[0].contact.email class=\"col-xs-6 col-sm-4 control-label\">Email:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control placeholder=Email ng-model=application.contacts[0].contact.email id=contact-0-email name=contacts[0].contact.email type=email></div></div><div class=form-group><label for=contact-0-contactable class=\"col-xs-6 col-sm-4 control-label\">Contactable:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control type=checkbox name=contact-0-contactable id=contact-0-contactable ng-model=application.contacts[0].contactable></div></div><div class=form-group><label for=contact-0-preferred class=\"col-xs-6 col-sm-4 control-label\">Preferred:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control type=checkbox name=contact-0-preferred id=contact-0-preferred ng-model=application.contacts[0].preferred></div></div><div class=contact-dialog-container><div id=contact0-address-form class=\"col-xs-12 col-md-12 contact-address-dialog postcode-lookup-address\"><fieldset><legend>Contact 1 Address</legend></fieldset><div class=form-group><label for=contacts[0].contact.address.line1 class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Address Line1</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input class=form-control name=line1 id=contact0-line1 placeholder=\"Address Line1\" readonly tabindex=-1 ng-model=application.contacts[0].contact.address.line1></div></div><div class=form-group><label for=contacts[0].contact.address.line2 class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Address Line2</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input class=form-control name=line2 id=contact0-line2 placeholder=\"Address Line2\" readonly tabindex=-1 ng-model=application.contacts[0].contact.address.line2></div></div><div class=form-group><label for=contacts[0].contact.address.line3 class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Address Line3</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input class=form-control name=line3 id=contact0-line3 placeholder=\"Address Line3\" readonly tabindex=-1 ng-model=application.contacts[0].contact.address.line3></div></div><div class=\"form-group hidden\"><label class=\"col-xs-4 col-sm-4 col-md-4 control-label\" for=contacts[0].contact.address.line4>Address Line4</label><div class=hidden><input class=hidden name=line4 id=contact0-line4 placeholder=\"Address Line4\" readonly tabindex=-1 ng-model=application.contacts[0].contact.address.line4></div></div><div class=\"form-group hidden\"><label class=\"col-xs-4 col-sm-4 col-md-4 control-label\" for=contacts[0].contact.address.line5>Address Line5</label><div class=hidden><input class=hidden name=line5 id=contact0-line5 placeholder=\"Address Line5\" readonly tabindex=-1 ng-model=application.contacts[0].contact.address.line5></div></div><div class=\"form-group hidden\"><label class=\"col-xs-4 col-sm-4 col-md-4 control-label\" for=contacts[0].contact.address.buildingName>Building Name</label><div class=hidden><input class=hidden name=buildingName id=contact0-buildingName placeholder=\"Building Name\" readonly tabindex=-1 ng-model=application.contacts[0].contact.address.buildingName></div></div><div class=\"form-group hidden\"><label class=\"col-xs-4 col-sm-4 col-md-4 control-label\" for=contacts[0].contact.address.subBuilding>SubBuilding</label><div class=hidden><input class=hidden name=subBuilding id=contact0-subBuilding placeholder=SubBuilding readonly tabindex=-1 ng-model=application.contacts[0].contact.address.subBuilding></div></div><div class=\"form-group hidden\"><label class=\"col-xs-4 col-sm-4 col-md-4 control-label\" for=contacts[0].contact.address.udprn>UDP Reference Number</label><div class=hidden><input class=hidden name=udprn id=contact0-udprn placeholder=UDPRN readonly tabindex=-1 ng-model=application.contacts[0].contact.address.udprn></div></div><div class=form-group><label class=\"col-xs-4 col-sm-4 col-md-4 control-label\" for=contacts[0].contact.address.town>Post Town</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input class=form-control name=town id=contact0-town placeholder=\"Post Town\" readonly tabindex=-1 ng-model=application.contacts[0].contact.address.town></div></div><div class=form-group><label class=\"col-xs-4 col-sm-4 col-md-4 control-label\" for=contacts[0].contact.address.county>County</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input class=form-control name=town id=contact0-county placeholder=County readonly tabindex=-1 ng-model=application.contacts[0].contact.address.county></div></div><div class=\"form-group col-sx-12 col-sm-12 col-md-12\"><div class=row><label class=\"col-xs-4 col-sm-4 col-md-4 control-label\" for=contacts[0].contact.address.postcode>Postcode</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input class=\"form-control postcode\" name=postcode id=contact0-postcode placeholder=Postcode ng-model=application.contacts[0].contact.address.postcode></div></div><div class=row><div class=\"col-xs-3 col-sm-3 col-sm-3 col-md-3 col-md-offset-4\"><button id=contact0-postcode-lookup type=button class=\"btn btn-primary postcode-lookup\">Lookup</button></div><div class=\"col-xs-3 col-sm-3 col-sm-3 col-md-3\"><button id=contact0-manual-lookup type=button value=Button class=\"btn btn-primary\">Manual Entry</button></div></div></div><button id=contact0-address-present type=button class=\"form-group col-md-6 col-sm-12 btn btn-primary dialog-button postcode-lookup-address\">Add Address</button></div></div></div></div><div class=\"contact col-xs-12 col-md-6\"><h4>Contact 2</h4><input type=hidden id=contact-1-id class=\"form-group col-md-12 col-sm-12\" ng-model=application.contacts[1].id><div class=form-group><label class=\"col-xs-4 col-sm-4 col-md-4 control-label\" for=contact-1-contactType>Contact Type:</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><contact-type-selection class=form-control ng-model=application.contacts[1].contactTypeId></contact-type-selection></div><div class=form-group><label class=\"col-xs-4 col-sm-4 col-md-4 control-label\" for=contact-1-title>Title:</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><title-selection class=form-control ng-model=application.contacts[1].contact.title.id></title-selection></div></div><div class=form-group><label for=contacts[1].contact.firstName class=\"col-xs-6 col-sm-4 control-label\">First Name:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control placeholder=\"First Name\" ng-model=application.contacts[1].contact.firstName id=contact-1-first-name name=contacts[1].contact.firstName minlength=2></div></div><div class=form-group><label for=contacts[1].contact.surname class=\"col-xs-6 col-sm-4 control-label\">Surname:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control placeholder=Surname ng-model=application.contacts[1].contact.surname id=contact-1-surname name=contacts[1].contact.surname minlength=2></div></div><div class=form-group><label for=contacts[1].contact.home class=\"col-xs-6 col-sm-4 control-label\">Home:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control placeholder=Home ng-model=application.contacts[1].contact.home id=contact-1-home name=contacts[1].contact.home></div></div><div class=form-group><label for=contacts[1].contact.mobile class=\"col-xs-6 col-sm-4 control-label\">Mobile:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control placeholder=Mobile ng-model=application.contacts[1].contact.mobile id=contact-1-mobile name=contacts[1].contact.mobile></div></div><div class=form-group><label for=contacts[1].contact.work class=\"col-xs-6 col-sm-4 control-label\">Work:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control placeholder=Work ng-model=application.contacts[1].contact.work id=contact-1-work name=contacts[1].contact.work></div></div><div class=form-group><label for=contacts[1].contact.email class=\"col-xs-6 col-sm-4 control-label\">Email:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control placeholder=Email ng-model=application.contacts[1].contact.email id=contact-1-email name=contacts[1].contact.email type=email></div></div><div class=form-group><label for=contact-1-contactable class=\"col-xs-6 col-sm-4 control-label\">Contactable:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control type=checkbox name=contact-1-contactable id=contact-1-contactable ng-model=application.contacts[1].contactable></div></div><div class=form-group><label for=contact-1-preferred class=\"col-xs-6 col-sm-4 control-label\">Preferred:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control type=checkbox name=contact-1-preferred id=contact-1-preferred ng-model=application.contacts[1].preferred></div></div><div class=contact-dialog-container><div id=contact1-address-form class=\"col-xs-12 col-md-12 contact-address-dialog postcode-lookup-address\"><fieldset><legend>Contact 2 Address</legend></fieldset><div class=form-group><label for=contacts[1].contact.address.line1 class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Address Line1</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input class=form-control name=line1 id=contact1-line1 placeholder=\"Address Line1\" readonly tabindex=-1 ng-model=application.contacts[1].contact.address.line1></div></div><div class=form-group><label for=contacts[1].contact.address.line2 class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Address Line2</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input class=form-control name=line2 id=contact1-line2 placeholder=\"Address Line2\" readonly tabindex=-1 ng-model=application.contacts[1].contact.address.line2></div></div><div class=form-group><label for=contacts[1].contact.address.line3 class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Address Line3</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input class=form-control name=line3 id=contact1-line3 placeholder=\"Address Line3\" readonly tabindex=-1 ng-model=application.contacts[1].contact.address.line3></div></div><div class=\"form-group hidden\"><label class=\"col-xs-4 col-sm-4 col-md-4 control-label\" for=contacts[1].contact.address.line4>Address Line4</label><div class=hidden><input class=hidden name=line4 id=contact1-line4 placeholder=\"Address Line4\" readonly tabindex=-1 ng-model=application.contacts[1].contact.address.line4></div></div><div class=\"form-group hidden\"><label class=\"col-xs-4 col-sm-4 col-md-4 control-label\" for=contacts[1].contact.address.line5>Address Line5</label><div class=hidden><input class=hidden name=line5 id=contact1-line5 placeholder=\"Address Line5\" readonly tabindex=-1 ng-model=application.contacts[1].contact.address.line5></div></div><div class=\"form-group hidden\"><label class=\"col-xs-4 col-sm-4 col-md-4 control-label\" for=contacts[1].contact.address.buildingName>Building Name</label><div class=hidden><input class=hidden name=buildingName id=contact1-buildingName placeholder=\"Building Name\" readonly tabindex=-1 ng-model=application.contacts[1].contact.address.buildingName></div></div><div class=\"form-group hidden\"><label class=\"col-xs-4 col-sm-4 col-md-4 control-label\" for=contacts[1].contact.address.subBuilding>SubBuilding</label><div class=hidden><input class=hidden name=subBuilding id=contact1-subBuilding placeholder=SubBuilding readonly tabindex=-1 ng-model=application.contacts[1].contact.address.subBuilding></div></div><div class=\"form-group hidden\"><label class=\"col-xs-4 col-sm-4 col-md-4 control-label\" for=contacts[1].contact.address.udprn>UDP Reference Number</label><div class=hidden><input class=hidden name=udprn id=contact1-udprn placeholder=UDPRN readonly tabindex=-1 ng-model=application.contacts[1].contact.address.udprn></div></div><div class=form-group><label class=\"col-xs-4 col-sm-4 col-md-4 control-label\" for=contacts[1].contact.address.town>Post Town</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input class=form-control name=town id=contact1-town placeholder=\"Post Town\" readonly tabindex=-1 ng-model=application.contacts[1].contact.address.town></div></div><div class=form-group><label class=\"col-xs-4 col-sm-4 col-md-4 control-label\" for=contacts[1].contact.address.county>County</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input class=form-control name=town id=contact1-county placeholder=County readonly tabindex=-1 ng-model=application.contacts[1].contact.address.county></div></div><div class=\"form-group col-sx-12 col-sm-12 col-md-12\"><div class=row><label class=\"col-xs-4 col-sm-4 col-md-4 control-label\" for=contacts[1].contact.address.postcode>Postcode</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input class=\"form-control postcode\" name=postcode id=contact1-postcode placeholder=Postcode ng-model=application.contacts[1].contact.address.postcode></div></div><div class=row><div class=\"col-xs-3 col-sm-3 col-sm-3 col-md-3 col-md-offset-4\"><button id=contact1-postcode-lookup type=button class=\"btn btn-primary postcode-lookup\">Lookup</button></div><div class=\"col-xs-3 col-sm-3 col-sm-3 col-md-3\"><button id=contact1-manual-lookup type=button value=Button class=\"btn btn-primary\">Manual Entry</button></div></div></div><button id=contact1-address-present type=button class=\"form-group col-md-6 col-sm-12 btn btn-primary dialog-button postcode-lookup-address\">Add Address</button></div></div></div></div></div></div><div class=row><div class=\"col-xs-12 col-md-6\"><fieldsset><legend>Previous School</legend></fieldsset><div class=form-group><label for=school class=\"col-xs-6 col-sm-4 control-label\">Previous School:</label><div class=\"col-xs-6 col-sm-8\"><school-selection class=form-control ng-model=application.school></school-selection></div></div></div><div class=\"col-xs-12 col-md-6\"><fieldset><legend>Student Details</legend></fieldset><div class=form-group><label for=uln class=\"col-xs-6 col-sm-4 control-label\">Unique Learner No:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control placeholder=\"Unique Learner No\" ng-model=application.uln id=uln name=uln></div></div><div class=form-group><label for=uci class=\"col-xs-6 col-sm-4 control-label\">Unique Candidate Identifier:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control placeholder=\"Unique Candidate Identifier\" ng-model=application.uci id=uci name=uci maxlength=13></div></div></div><div class=\"col-xs-12 col-md-6\"><fieldset><legend>Admissions Notes</legend></fieldset><div class=form-group><label for=admissionsNotes class=\"col-xs-6 col-sm-4 control-label\">Admissions Notes:</label><div class=\"col-xs-6 col-sm-8\"><textarea class=form-control placeholder=\"Admissions Notes\" ng-model=application.admissionsNotes id=admissionsNotes name=admissionsNotes rows=5 cols=30 type=text></textarea></div></div></div></div><div class=row><div class=\"col-xs-12 col-md-6\"><fieldsset><legend>Course Requests</legend></fieldsset><div><div class=form-group><label for=requests[0].request class=\"col-xs-6 col-sm-4 control-label\">1:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control placeholder=1 ng-model=application.requests[0].request id=request-1 name=requests[0].request></div></div><div class=form-group><label for=requests[1].request class=\"col-xs-6 col-sm-4 control-label\">2:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control placeholder=2 ng-model=application.requests[1].request id=request-2 name=requests[1].request></div></div><div class=form-group><label for=requests[2].request class=\"col-xs-6 col-sm-4 control-label\">3:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control placeholder=3 ng-model=application.requests[2].request id=request-3 name=requests[2].request></div></div><div class=form-group><label for=requests[3].request class=\"col-xs-6 col-sm-4 control-label\">4:</label><div class=\"col-xs-6 col-sm-8\"><input class=form-control placeholder=4 ng-model=application.requests[3].request id=request-4 name=requests[3].request></div></div></div></div></div><div class=\"row fixed-bottom-right\"><button type=submit class=\"btn btn-primary\" value=Submit>Save</button> <button type=submit class=\"btn btn-default\" value=Submit>Cancel</button></div><div class=row>{{ application | json }}</div></form></div>");
  $templateCache.put("js/modules/admissions/views/layout.html",
    "<div ui-view=admissions></div>");
  $templateCache.put("js/modules/admissions/views/search.html",
    "<div><div><legend>Applicant Search</legend><form class=\"search-form form-inline\"><label for=search>Name:</label><input id=search name=search class=\"form-control input-sm\" ng-model=searchTerm> <button type=submit class=\"btn btn-sm btn-primary\" ng-click=ctrl.search(searchTerm)>Search</button></form></div><div class=message>{{ ctrl.message }}</div><table class=\"table table-responsive table-bordered table-hover table-condensed\"><thead><th>Ref</th><th>Person</th><th>School</th><th>Status</th></thead><tbody><tr ng-repeat=\"a in ctrl.applicationList | orderBy : '+personName' \" class=ng-cloak><td><a ui-sref=\"admissions.edit({ studentId:a.studentId })\">{{ a.referenceNo }}</a></td><td>{{ a.personName }}</td><td>{{ a.schoolName }}</td><td>{{ a.status }}</td></tr><tr ng-show=ctrl.noResults><td colspan=4>No Results</td></tr></tbody></table></div>");
  $templateCache.put("js/modules/admissions/views/welcome.html",
    "<h1>Admissions</h1><p>Welcome to the Admissions module of CID</p>");
  $templateCache.put("js/modules/courseRecordViewer/views/course-group-list.html",
    "<div class=row><div class=col-md-12><h1>Course Group List</h1></div></div><div class=row><div class=\"col-md-2 col-md-offset-10\"><button type=button class=\"btn btn-sm btn-default\" ng-click=ctrl.toggleVisibility()>Filters <span class=\"glyphicon glyphicon-chevron-right\" ng-hide=ctrl.visible></span> <span class=\"glyphicon glyphicon-chevron-down\" ng-show=ctrl.visible></span></button> <button ng-show=ctrl.visible class=\"btn btn-sm btn-info\" type=button ng-click=ctrl.resetFilters()>Reset Filters</button></div></div><div class=\"course-list-filters row\" ng-show=ctrl.visible><div class=\"form-group col-sm-12 col-md-3 row\"><label for=title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Year Group:</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input ng-model=filter._yearGroupDescription class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div><div class=\"form-group col-sm-12 col-md-3 row\"><label for=title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Class Code:</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input ng-model=filter.spec class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div><div class=\"form-group col-sm-12 col-md-3 row\"><label for=title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Department:</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input ng-model=filter._departmentDescription class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div></div><course-groups-table course-groups=ctrl.courseGroups filter-params=ctrl.filterParams show-year-group=true show-year=true show-student=true include-reports=true></course-groups-table>");
  $templateCache.put("js/modules/courseRecordViewer/views/course-list.html",
    "<div class=row><div class=col-md-12><h1>Course List</h1></div></div><div class=row><div class=\"col-md-2 col-md-offset-10\"><button type=button class=\"btn btn-sm btn-primary\" ng-click=ctrl.toggleVisibility()>Filters <span class=\"glyphicon glyphicon-chevron-right\" ng-hide=ctrl.visible></span> <span class=\"glyphicon glyphicon-chevron-down\" ng-show=ctrl.visible></span></button> <button ng-show=ctrl.visible class=\"btn btn-sm btn-info\" type=button ng-click=ctrl.resetFilters()>Reset Filters</button></div></div><div class=\"course-list-filters row\" ng-show=ctrl.visible><div class=\"form-group col-sm-12 col-md-3 row\"><label for=title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Course Spec</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input ng-model=filter.spec class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div><div class=\"form-group col-sm-12 col-md-3 row\"><label for=title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Level</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input ng-model=filter._levelDescription class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div><div class=\"form-group col-sm-12 col-md-3 row\"><label for=title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Subject</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input ng-model=filter._subjectDescription class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div><div class=\"form-group col-sm-12 col-md-3 row\"><label for=title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Exam Board</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input ng-model=filter._examBoardDescription class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div><div class=\"form-group col-sm-12 col-md-3 row\"><label for=title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">QAN</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input ng-model=filter.learningAimReference class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div></div><courses-table courses=ctrl.courses filter-params=ctrl.filterParams show-reports=true show-year=true show-exam-board=true></courses-table>");
  $templateCache.put("js/modules/courseRecordViewer/views/course-viewer.html",
    "<h3>Course Details: {{ ctrl.course._levelDescription }} {{ ctrl.course._subjectDescription}}</h3><course-details course=ctrl.course></course-details><table><tr><h4>Reports</h4></tr><tr><td><report-link class=\"btn btn-default\" report-path=\"'/CID/Courses/Student Course List with Various Information'\" report-format=MHTML report-params=\"'CourseMask=' + ctrl.course.spec\" include-year=true>Student Course List With Various Information</report-link></td><td class=dropdown><button class=\"btn btn-sm btn-default dropdown-toggle\" type=button id=reports-menu data-toggle=dropdown aria-haspopup=true aria-expanded=true>Course Reports <span class=caret></span></button><ul class=dropdown-menu aria-labelledby=reports-menu><li><report-link report-path=\"'/CID/TimeTabling/Timetable Course - Column'\" include-year=true report-params=\"'CourseGroupMask=%'+ctrl.course.spec +'%'\">Timetables Course Column</report-link></li><li><report-link report-path=\"'/CID/TimeTabling/Timetable Course - Square'\" report-params=\"'CourseSpec='+ctrl.course.spec\">Timetables Course - Square</report-link></li></ul></td></tr></table><uib-tabset active=activeTab><uib-tab classes=tab-sm index=\"'course'\" heading=\"Course Groups\"><h4>Course Groups</h4><course-groups-table course-groups=ctrl.courseGroups show-year=true include-reports=true></course-groups-table></uib-tab><uib-tab classes=tab-sm index=\"'enrolments'\" heading=Enrolments><h4>Enrolments</h4><enrolments-table enrolments=ctrl.enrolments show-student=true show-course=false show-status=true show-monitoring=true></enrolments-table></uib-tab></uib-tabset>");
  $templateCache.put("js/modules/courseRecordViewer/views/layout.html",
    "<div ui-view=search></div><div ui-view=viewer></div>");
  $templateCache.put("js/modules/courseRecordViewer/views/search.html",
    "<course-search on-select=ctrl.loadCourse(id)></course-search>");
  $templateCache.put("js/modules/courseRecordViewer/views/side-bar.html",
    "<h3>Course Viewer</h3><ul class=side-bar><li><a ui-sref=course-record.course-list>Course List</a></li><li><a ui-sref=course-record.course-group-list>Course Group List</a></li></ul>");
  $templateCache.put("js/modules/data/views/academic-years.html",
    "<h1>AcademicYear Editor</h1><academic-years-editor academic-years=ctrl.data></academic-years-editor>");
  $templateCache.put("js/modules/data/views/application-statuses.html",
    "<h1>Application Status Editor</h1><application-statuses-editor application-statuses=ctrl.data></application-statuses-editor>");
  $templateCache.put("js/modules/data/views/attendance-monitorings.html",
    "<h1>Attendance Monitorings Editor</h1><attendance-monitorings-editor attendance-monitorings=ctrl.data></attendance-monitorings-editor>");
  $templateCache.put("js/modules/data/views/blocks.html",
    "<h1>Blocks Editor</h1><blocks-editor blocks=ctrl.data></blocks-editor>");
  $templateCache.put("js/modules/data/views/central-monitorings.html",
    "<h1>Central Monitorings Editor</h1><central-monitorings-editor central-monitorings=ctrl.data></central-monitorings-editor>");
  $templateCache.put("js/modules/data/views/concession-types.html",
    "<h1>Concession Types Editor</h1><concession-types-editor concession-types=ctrl.data></concession-types-editor>");
  $templateCache.put("js/modules/data/views/departments.html",
    "<h1>Departments Editor</h1><departments-editor departments=ctrl.data></departments-editor>");
  $templateCache.put("js/modules/data/views/entry-qualification-types.html",
    "<h1>Entry Qualification Types Editor</h1><entry-qualification-types-editor entry-qualification-types=ctrl.data></entry-qualification-types-editor>");
  $templateCache.put("js/modules/data/views/entry-qualifications.html",
    "<h1>Entry Qualifications Editor</h1><entry-qualifications-editor entry-qualifications=ctrl.data></entry-qualifications-editor>");
  $templateCache.put("js/modules/data/views/faculties.html",
    "<h1>Faculties Editor</h1><faculties-editor faculties=ctrl.data></faculties-editor>");
  $templateCache.put("js/modules/data/views/holidays.html",
    "<h1>Holidays Editor</h1><holidays-editor holidays=ctrl.data></holidays-editor>");
  $templateCache.put("js/modules/data/views/letter-template.html",
    "<h1>Letter Template Editor</h1><letter-template-editor letter-templates=ctrl.data></letter-template-editor>");
  $templateCache.put("js/modules/data/views/levels.html",
    "<h1>Levels Editor</h1><levels-editor levels=ctrl.data></levels-editor>");
  $templateCache.put("js/modules/data/views/offer-types.html",
    "<h1>Offer Types Editor</h1><offer-types-editor offer-types=ctrl.data></offer-types-editor>");
  $templateCache.put("js/modules/data/views/periods.html",
    "<h1>Periods Editor</h1><periods-editor periods=ctrl.data></periods-editor>");
  $templateCache.put("js/modules/data/views/possible-grade-sets.html",
    "<h1>Possible Grade set Editor</h1><possible-grade-sets-editor possible-grade-sets=ctrl.data></possible-grade-sets-editor>");
  $templateCache.put("js/modules/data/views/possible-grades.html",
    "<h1>Possible Grades Editor</h1><possible-grades-editor possible-grades=ctrl.data></possible-grades-editor>");
  $templateCache.put("js/modules/data/views/punctuality-monitorings.html",
    "<h1>Punctuality Monitorings Editor</h1><punctuality-monitorings-editor punctuality-monitorings=ctrl.data></punctuality-monitorings-editor>");
  $templateCache.put("js/modules/data/views/referral-reasons.html",
    "<h1>ReferralReason Editor</h1><referral-reasons-editor referral-reasons=ctrl.data></referral-reasons-editor>");
  $templateCache.put("js/modules/data/views/reporting-periods.html",
    "<h1>Reporting Periods Editor</h1><reporting-periods-editor reporting-periods=ctrl.data></reporting-periods-editor>");
  $templateCache.put("js/modules/data/views/roles.html",
    "<h1>Roles Editor</h1><roles-editor roles=ctrl.data></roles-editor>");
  $templateCache.put("js/modules/data/views/rooms.html",
    "<h1>Rooms Editor</h1><rooms-editor rooms=ctrl.data></rooms-editor>");
  $templateCache.put("js/modules/data/views/schools.html",
    "<h1>Schools Editor</h1><school-editor schools=ctrl.data></school-editor>");
  $templateCache.put("js/modules/data/views/settings.html",
    "<h1>Settings Editor</h1><settings-editor settings=ctrl.data></settings-editor>");
  $templateCache.put("js/modules/data/views/special-categories.html",
    "<h1>Special Category Editor</h1><special-categories-editor special-categories=ctrl.data></special-categories-editor>");
  $templateCache.put("js/modules/data/views/staff.html",
    "<h1>Staff Editor</h1><staffs-editor staffs=ctrl.data></staffs-editor>");
  $templateCache.put("js/modules/data/views/staffs.html",
    "<h1>Staff Editor</h1><staffs-editor staffs=ctrl.data></staffs-editor>");
  $templateCache.put("js/modules/data/views/subjects.html",
    "<h1>Subjects Editor</h1><subjects-editor subjects=ctrl.data></subjects-editor>");
  $templateCache.put("js/modules/data/views/support-types.html",
    "<h1>Support Types Editor</h1><support-types-editor support-types=ctrl.data></support-types-editor>");
  $templateCache.put("js/modules/data/views/text-lookup.html",
    "<h1>Text Lookup Editor</h1><text-lookup-editor text-lookups=ctrl.data></text-lookup-editor>");
  $templateCache.put("js/modules/data/views/tutor-groups.html",
    "<h1>Tutor Groups Editor</h1><tutor-groups-editor tutor-groups=ctrl.data></tutor-groups-editor>");
  $templateCache.put("js/modules/data/views/year-groups.html",
    "<h1>Year Groups Editor</h1><year-groups-editor year-groups=ctrl.data></year-groups-editor>");
  $templateCache.put("js/modules/exams/course-exam-details/views/course-exam-detail-edit.html",
    "<div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=cancel()>&times;</button><h3 class=modal-title>Edit Course Exam details</h3></div><div class=modal-body><form><div class=message>{{ msg }}</div><fieldset><legend>Course Details</legend><div class=form-group><label for=spec class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Course Spec:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control placeholder=\"Course Spec\" ng-model=currentCourse.spec ng-readonly=true></div></div><div class=form-group><label for=_levelDescription class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Course Level:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control placeholder=\"Course Level\" ng-model=currentCourse._levelDescription ng-readonly=true></div></div><div class=form-group><label for=_subjectDescription class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Subject Description:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control placeholder=\"Subject Description\" ng-model=currentCourse._subjectDescription ng-readonly=true></div></div><legend>Course Exam Details</legend><div class=form-group><label for=spec class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Exam Board:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><exam-board-selection id=examBoard class=form-control placeholder=\"Exam Board\" ng-model=currentCourse.examBoardId></exam-board-selection></div></div><div class=form-group><label for=spec class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Syllabus Code:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8 input-group\"><input class=form-control placeholder=\"Syllabus Code\" ng-model=currentCourse.syllabusCode><div class=\"input-group-addon glyphicon glyphicon-refresh\" ng-click=refresh()></div></div></div><div class=form-group ng-if=\"currentCourse.syllabusCode.length>0\"><syllabus-table syllabus-code=syllabusCode expandable=true><course-exam></course-exam></syllabus-table></div></fieldset></form></div><div class=modal-footer><button class=\"btn btn-primary\" type=button ng-click=save()>Save</button> <button class=\"btn btn-warning\" type=button ng-click=cancel()>Cancel</button></div>");
  $templateCache.put("js/modules/exams/course-exam-details/views/course-list.html",
    "<h1>Course List</h1><div class=\"course-list-filters row\"><h4 class=col-md-12>Filters</h4><div class=\"form-group col-sm-12 col-md-3 row\"><label for=title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Course Spec</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input ng-model=filter.courseSpec class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div><div class=\"form-group col-sm-12 col-md-3 row\"><label for=title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Level</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input ng-model=filter.level class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div><div class=\"form-group col-sm-12 col-md-3 row\"><label for=title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Subject</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input ng-model=filter.subject class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div><div class=\"form-group col-sm-12 col-md-3 row\"><label for=title class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Exam Board</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input ng-model=filter.examBoard class=\"form-control text ui-widget-content ui-corner-all\" ng-change=ctrl.applyFilter()></div></div></div><div class=course-list><table class=\"table table-responsive table-stripped\"><thead><th>Course Spec</th><th>Level</th><th>Subject</th><th>Exam board</th><th>Syllabus code</th><th>Valid From</th><th>Valid To</th><th></th></thead><tbody><tr ng-repeat=\"course in ctrl.courses | filter:filterParams | orderBy:'spec'\"><td>{{ course.spec }}</td><td>{{ course._levelDescription }}</td><td>{{ course._subjectDescription }}</td><td>{{ course._examBoardDescription }}</td><td>{{ course.syllabusCode }}</td><td>{{ course._validFromCode | notSet }}</td><td>{{ course._validToCode | notSet }}</td><td><button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editExamDetails(course.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table></div>");
  $templateCache.put("js/modules/exams/exam-base-data-viewer/views/exam-base-data-component-editDialog.html",
    "<div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h3 class=modal-title ng-if=ctrl.component.id>Edit Component details</h3><h3 class=modal-title ng-if=!ctrl.component.id>Add Component details</h3></div><div class=modal-body><form><fieldset><div class=\"form-group row\"><label for=code class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Code:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input id=code class=form-control placeholder=Code ng-model=ctrl.component.code></div></div><div class=\"form-group row\"><label for=title class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Title:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input id=title class=form-control placeholder=Title ng-model=ctrl.component.title></div></div><div class=\"form-group row\"><label for=examDate class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Exam Date:</label><div class=\"col-xs-6 col-sm-8 col-md-8\"><div class=input-group><input id=examDate class=form-control ng-init=\"examDateDatePicker=false\" ng-model=ctrl.component.timetableDate uib-datepicker-popup=dd/MM/yyyy is-open=examDateDatePicker><div class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"examDateDatePicker=!examDateDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></div></div></div></div><div class=\"form-group row\"><label for=session class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Session:</label><div class=\"col-xs-6 col-md-8 col-sm-8\"><div id=session class=input-group><input type=radio class=radio-inline ng-model=ctrl.component.timetableSession value=A>AM<input type=radio class=radio-inline ng-model=ctrl.component.timetableSession value=P>PM</div></div></div><div class=\"form-group row\"><label for=timeAllowed class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Time Allowed:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input id=timeAllowed class=form-control placeholder=\"Time Allowed\" ng-model=ctrl.component.timeAllowed></div></div><div class=\"form-group row\"><label for=maximumMark class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Maximum Marks:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input id=maximumMark class=form-control placeholder=\"Maximum Marks\" ng-model=ctrl.component.maximumMark></div></div></fieldset><div class=\"panel panel-default\" ng-init=\"collapseAdditional=true\" ng-model=collapseAdditional ng-click=\"collapseAdditional=!collapseAdditional\"><div class=panel-heading data-toggle=collapse><h3 class=panel-title><div ng-if=collapseAdditional><span class=\"glyphicon glyphicon-plus-sign\"></span> Show Additional Component Details</div><div ng-if=!collapseAdditional><span class=\"glyphicon glyphicon-minus-sign\"></span> Hide Additional Component Details</div></h3></div></div><fieldset><div uib-collapse=collapseAdditional><div class=\"form-group row\"><label for=timetabled class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Timetabled:</label><div class=\"col-xs-6 col-md-8 col-sm-8\"><select id=timetabled class=form-control ng-model=ctrl.component.timetabled><option type=radio class=radio-inline value=T>T - Timetabled</option><option type=radio class=radio-inline value=C>C - Centre-specified timetable</option><option type=radio class=radio-inline value=N>N - Not timetabled</option></select></div></div><div class=\"form-group row\"><label for=teacherMarks class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Teacher Marks:</label><div class=\"col-xs-6 col-md-8 col-sm-8\"><select id=teacherMarks class=form-control ng-model=ctrl.component.teacherMarks><option type=radio class=radio-inline value=Y>Y - Teacher marks are required</option><option type=radio class=radio-inline value=N>N - Teacher marks not required</option><option type=radio class=radio-inline value=G>G - Teacher submits grade</option><option type=radio class=radio-inline value=E>E - Teacher submits coursework</option></select></div></div><div class=\"form-group row\"><label for=dueDate class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Due Date:</label><div class=\"col-xs-6 col-sm-8 col-md-8\"><div class=input-group><input id=dueDate class=form-control ng-init=\"dueDateDatePicker=false\" ng-model=ctrl.component.dueDate uib-datepicker-popup=dd/MM/yyyy is-open=dueDateDatePicker> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"dueDateDatePicker=!dueDateDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div></div></fieldset></form></div><div class=modal-footer><button class=\"btn btn-primary\" type=button ng-click=ctrl.save()>Save</button> <button class=\"btn btn-warning\" type=button ng-click=ctrl.cancel()>Cancel</button></div>");
  $templateCache.put("js/modules/exams/exam-base-data-viewer/views/exam-base-data-option-editDialog.html",
    "<div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h3 class=modal-title ng-if=ctrl.option.examOptionId>Edit Option details</h3><h3 class=modal-title ng-if=!ctrl.option.examOptionId>Add Option details</h3></div><div class=modal-body><form><fieldset><div class=\"form-group row\"><label for=syllabus class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Syllabus</label><div class=\"col-xs-2 col-sm-3 col-md-3\"><input class=form-control placeholder=syllabus.code ng-model=ctrl.option.syllabusDto.code ng-readonly=true></div><div class=\"col-xs-4 col-sm-5 col-md-5\"><input class=form-control placeholder=syllabus.title ng-model=ctrl.option.syllabusDto.title ng-readonly=true></div></div><div class=\"form-group row\"><label for=code class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Code:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input id=code class=form-control placeholder=Code ng-model=ctrl.option.optionEntryCode></div></div><div class=\"form-group row\"><label for=title class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Title:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input id=title class=form-control placeholder=Title ng-model=ctrl.option.optionTitle></div></div></fieldset><div class=\"panel panel-default\" ng-init=\"collapseAdditional=true\" ng-model=collapseAdditional ng-click=\"collapseAdditional=!collapseAdditional\"><div class=panel-heading data-toggle=collapse><h3 class=panel-title><div ng-if=collapseAdditional><span class=\"glyphicon glyphicon-plus-sign\"></span> Show Additional Option Details</div><div ng-if=!collapseAdditional><span class=\"glyphicon glyphicon-minus-sign\"></span> Hide Additional Option Details</div></h3></div></div><fieldset><div uib-collapse=collapseAdditional><div class=\"form-group row\"><label for=maxMarkUMS class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Max Mark UM:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input id=maxMarkUMS class=form-control placeholder=\"Max Mark UMS\" ng-model=ctrl.option.maxMarkUms></div></div><div class=\"form-group row\"><label for=resultType class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Result Type:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input id=resultType class=form-control placeholder=\"Result Type\" ng-model=ctrl.option.resultType></div></div><div class=\"form-group row\"><label for=qcaAccreditationNo class=\"col-xs-6 col-sm-4 col-md-4 control-label\">QAN Number:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input id=qcaAccreditationNo class=form-control placeholder=\"QAN Number\" ng-model=ctrl.option.qcaAccreditationNo></div></div><div class=\"form-group row\"><label for=qcaClassificationCode class=\"col-xs-6 col-sm-4 col-md-4 control-label\">QCA Classification Code:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input id=qcaClassificationCode class=form-control placeholder=\"QCA Classification Code\" ng-model=ctrl.option.qcaClassificationCode></div></div><div class=\"form-group row\"><label for=examinationFee class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Examination Fee:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input id=examinationFee class=form-control placeholder=\"Examination Fee\" ng-model=ctrl.option.examinationFee></div></div><div class=\"form-group row\"><label for=process class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Process:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input id=process class=form-control placeholder=Process ng-model=ctrl.option.process></div></div></div></fieldset></form></div><div class=modal-footer><button class=\"btn btn-primary\" type=button ng-click=ctrl.save()>Save</button> <button class=\"btn btn-warning\" type=button ng-click=ctrl.cancel()>Cancel</button></div>");
  $templateCache.put("js/modules/exams/exam-base-data-viewer/views/exam-base-data-student-viewer.html",
    "<student-exam-table student-list=ctrl.studentList></student-exam-table>");
  $templateCache.put("js/modules/exams/exam-base-data-viewer/views/exam-base-data-syllabus-editDialog.html",
    "<div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h3 class=modal-title ng-if=ctrl.syllabus.id>Edit Syllabus details</h3><h3 class=modal-title ng-if=!ctrl.syllabus.id>Add Syllabus details</h3></div><div class=modal-body><form><fieldset><div class=\"form-group row\"><label for=code class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Code:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input id=code class=form-control placeholder=\"Syllabus Code\" ng-model=ctrl.syllabus.code></div></div><div class=\"form-group row\"><label for=title class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Title:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input id=title class=form-control placeholder=\"Syllabus Title\" ng-model=ctrl.syllabus.title></div></div><div class=\"form-group row\"><label for=examSeries class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Exam Series:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><exam-series-selection id=examSeries class=form-control ng-model=ctrl.syllabus.examSeries.id></exam-series-selection></div></div></fieldset></form></div><div class=modal-footer><button class=\"btn btn-primary\" type=button ng-click=ctrl.save()>Save</button> <button class=\"btn btn-warning\" type=button ng-click=ctrl.cancel()>Cancel</button></div>");
  $templateCache.put("js/modules/exams/exam-base-data-viewer/views/exam-base-data-viewer-form.html",
    "<h1>Exam Basedata</h1><div class=\"search-box search-form\"><form class=form-inline><div class=form-group><label for=series>Exam Year:</label><input id=exam-year class=\"form-control input-sm\" ng-model=ctrl.filterParams.examSeries.examYear></div><div class=form-group><label for=year>Series:</label><input id=exam-series class=\"form-control input-sm\" ng-model=ctrl.filterParams.examSeries.examSeries></div><div class=form-group><label for=code>Exam Board:</label><exam-board-selection class=form-control include-blank=true ng-model=ctrl.filterParams.examSeries.examBoard></exam-board-selection></div><div class=form-group><label for=code>Exam Code:</label><input id=code class=\"form-control input-sm\" ng-model=ctrl.filterParams.code></div><div class=form-group><label for=description>Description:</label><input id=description class=\"form-control input-sm\" ng-model=ctrl.filterParams.title></div></form></div><syllabus-table cur-exam-board=ctrl.curExamBoard expandable=true filter-params=ctrl.filterParams><base-data-edit-buttons add-callback=\"ctrl.add(syllabusData, optionData, componentData)\" edit-callback=\"ctrl.edit(syllabusData, optionData, componentData)\" view-students-callback=\"ctrl.viewStudents(syllabusData, optionData, componentData)\"></base-data-edit-buttons></syllabus-table><div class=modal-footer><button class=\"btn btn-primary\" type=button ng-click=ctrl.add() uib-tooltip=\"Add Syllabus\">Add</button></div>");
  $templateCache.put("js/modules/exams/exam-board/views/exam-board-edit-form.html",
    "<form><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=cancel()>&times;</button><h3 class=modal-title>Edit exam board</h3></div><div class=modal-body><div class=row><div class=message>{{ msg }}</div><div class=form-group><label for=id class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Exam Board ID</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control ng-model=currentExamBoard.id required disabled></div></div><div class=form-group><label for=boardIdentifier class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Board Identifier</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control ng-model=currentExamBoard.boardIdentifier required></div></div><div class=form-group><label for=boardCode class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Board Code:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control placeholder=\"Exam Board Code\" ng-model=currentExamBoard.boardCode minlength=2 maxlength=2 required></div></div><div class=form-group><label for=boardName class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Board Name:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control ng-model=currentExamBoard.name></div></div><div class=form-group><label for=description class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Description:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control ng-model=currentExamBoard.description required></div></div><div class=form-group><label for=boardCentreNumber class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Centre Number:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control ng-model=currentExamBoard.boardCentreNumber required text></div></div><div class=form-group><label for=telephoneNo class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Telephone No:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input class=form-control ng-model=currentExamBoard.telephoneNo required></div></div></div></div><div class=modal-footer><button class=\"btn btn-primary\" type=button ng-click=save()>Save</button> <button class=\"btn btn-warning\" type=button ng-click=cancel()>Cancel</button></div></form>");
  $templateCache.put("js/modules/exams/exam-board/views/exam-board-form.html",
    "<form><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=cancel()>&times;</button><h3 class=modal-title>Add exam board</h3></div><div class=modal-body><div class=row><div class=message>{{ msg }}</div><div class=form-group><label for=id class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Exam Board ID</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input name=id class=form-control placeholder=ID ng-model=currentExamBoard.id required></div></div><div class=form-group><label for=boardIdentifier class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Board Identifier</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input name=boardIdentifier class=form-control placeholder=\"Board Identifier\" ng-model=currentExamBoard.boardIdentifier minlength=2 maxlength=2 required ng-keyup=change($event)></div></div><div class=form-group><label for=boardCode class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Board Code:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input name=boardCode class=form-control placeholder=\"Exam Board Code\" ng-model=currentExamBoard.boardCode required></div></div><div class=form-group><label for=boardName class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Board Name:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input name=boardName class=form-control placeholder=\"Board Name\" ng-model=currentExamBoard.name></div></div><div class=form-group><label for=description class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Description:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input name=description class=form-control placeholder=Description ng-model=currentExamBoard.description required></div></div><div class=form-group><label for=boardCentreNumber class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Centre Number:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input name=boardCentreNumber class=form-control placeholder=\"Board Centre Number\" ng-model=currentExamBoard.boardCentreNumber required text></div></div><div class=form-group><label for=telephoneNo class=\"col-xs-6 col-sm-4 col-md-4 control-label\">Telephone No:</label><div class=\"col-xs-6 col-sm-8 col-sm-8 col-md-8\"><input name=telephoneNo class=form-control placeholder=\"Telephone No\" ng-model=currentExamBoard.telephoneNo required></div></div></div></div><div class=modal-footer><button class=\"btn btn-primary\" type=button ng-click=create()>Save</button> <button class=\"btn btn-warning\" type=button ng-click=cancel()>Cancel</button></div></form>");
  $templateCache.put("js/modules/exams/exam-board/views/exam-board-list.html",
    "<div class=examBoard-list><h1>Exam Board List</h1><table id=schoolTable class=table><thead class=table-header><tr><th>Board Identifier</th><th>Board Code</th><th>Board Name</th><th>Description</th><th>Telephone No</th><th>Actions</th></tr></thead><tbody><tr ng-repeat=\"examBoard in ctrl.examBoardList\" class=ng-cloak><td>{{ examBoard.boardIdentifier }}</td><td>{{ examBoard.boardCode }}</td><td>{{ examBoard.name }}</td><td>{{ examBoard.description }}</td><td>{{ examBoard.telephoneNo }}</td><td><button class=\"btn btn-primary btn-sm\" ng-click=ctrl.editExamBoard(examBoard.id)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></td></tr></tbody></table><div><button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addExamBoard()>Add Exam Board</button></div></div>");
  $templateCache.put("js/modules/exams/exam-series/views/exam-series-editorDialog.html",
    "<form id=ExamSeriesEditForm name=examSeriesEditForm role=form novalidate show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title id=myToDoLabel>Add/Edit Exam Series</h4></div><div class=modal-body><div class=row><div class=form-group ng-show=true><label for=examBoard class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Exam Board</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><exam-board-selection id=code class=form-control ng-model=ctrl.examSeries.examBoard></exam-board-selection></div></div><div class=form-group ng-show=true><label for=academicYear class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Academic Year</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><academic-year-selection id=description class=\"form-control text ui-widget-content ui-corner-all\" ng-model=ctrl.examSeries.academicYearId></academic-year-selection></div></div><div class=form-group ng-show=true><label for=examSeries class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Exam Series</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input id=code class=form-control placeholder=\"Exam Series (e.g. 6X)\" minlength=2 maxlength=2 ng-model=ctrl.examSeries.examSeries></div></div><div class=form-group ng-show=true><label for=examYear class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Exam Year</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input id=code class=form-control placeholder=\"Exam Year (e.g. 2018)\" minlength=4 maxlength=4 ng-model=ctrl.examSeries.examYear></div></div><div class=form-group ng-show=true><label for=nextSequenceNo class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Next Sequence No</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input id=code class=form-control placeholder=\"Next Sequence No\" ng-model=ctrl.examSeries.nextSequenceNo></div></div></div></div><div class=modal-footer><button type=\"button \" class=\"btn btn-default\" data-dismiss=\"modal \" ng-click=\"ctrl.cancel() \"><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=\"button \" class=\"btn btn-primary\" ng-click=\"ctrl.save() \"><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/modules/exams/exam-series/views/exam-series.html",
    "<h1>Exam Series Editor</h1><exam-series-table exam-series-list=ctrl.examSeriesList get-index=ctrl.getIndex(examSeriesId)><button id=edit-button class=\"btn btn-primary btn-sm\" ng-init=ctrl.initRow(ctrl.examSeriesId) ng-click=ctrl.editExamSeries($event)><span class=\"glyphicon glyphicon-pencil\"></span> Edit</button></exam-series-table><button class=\"btn btn-primary btn-sm\" ng-click=ctrl.addExamSeries()><span class=\"glyphicon glyphicon-pencil\"></span> Add</button>");
  $templateCache.put("js/modules/exams/generate-edi/views/generate-edi-dialog.html",
    "<md-dialog><md-dialog-content><div class=md-dialog-content><p ng-repeat=\"msg in generatedMessage\">{{msg}}</p><p></p><p><strong>Make sure A2C migration application is running for EDI files to be transmitted to exam boards.</strong></p></div></md-dialog-content><md-dialog-actions><md-button ng-click=cancel() class=md-primary>OK</md-button></md-dialog-actions></md-dialog>");
  $templateCache.put("js/modules/exams/generate-edi/views/generate-edi-form.html",
    "<div class=modal-body data-role=page><div data-role=header><h3>Edi File Generator - Exam Series Selector</h3></div><div><exam-series-table exam-series-list=ctrl.examSeriesList><exam-series-check-box change-selected=\"ctrl.changeSelected(examSeriesListIndex, selected)\"></exam-series-check-box></exam-series-table><button class=\"btn btn-primary btn-sm\" ng-click=ctrl.generateEdiFiles()>Generate Edi Files</button></div></div>");
  $templateCache.put("js/modules/exams/generate-entries/views/generateStudentOptionEntries.html",
    "<md-dialog><md-dialog-content><div class=md-dialog-content><p><strong>This will create any missing entry code for students based on their current enrolments, this operation cannot be undone.</strong></p><p></p><p><strong>Are you sure that you want to continue?</strong></p></div></md-dialog-content><md-dialog-actions><md-button ng-click=cancel() class=md-primary><report-link report-path=\"'/CID/Exams/Student Option Entry Confirmation'\" report-format=PDF include-year=true>OK</report-link></md-button><md-button ng-click=cancel() class=md-primary>Cancel</md-button></md-dialog-actions></md-dialog>");
  $templateCache.put("js/modules/exams/generate-entries/views/student-option-entries-creation.html",
    "<div><p>The following button is used to generate the student option entries for any course that the student's are currently enrolled on. The entries that are created are based on the data that is set in the Course List. Before you proceed ensure that all the correct links have been made within the Course List.</p><p>Please note:<ul><li>This operation <b>cannot be undone</b>.</li><li>This operation <b>cannot be repeated</b>.</li></ul>It is recommended that when the report has loaded that it is saved to an area for the exam officers future used.</p></div><div class=text-center><report-link class=\"btn btn-lg btn-danger\" report-path=\"'/CID/Exams/Student Option Entry Confirmation'\" include-year=true>Generate Student Option Entries</report-link></div>");
  $templateCache.put("js/modules/exams/genericViewer/genericViewer.html",
    "<div class=modal-header><button type=button class=close ng-click=cancel()>&times;</button><h3 class=modal-title>Details for {{headerVal}}</h3></div><div class=modal-body><table class=\"table table-responsive-condensed\"><tbody><tr ng-repeat-start=\"(key, value) in dataSet\" ng-if=\"checkNotHidden(key, value)\" class=ng-cloak><td>{{key}}</td><td>{{value}}</td></tr><tr ng-if=checkObject(value) ng-repeat-end=\"\"><td colspan=2></td></tr></tbody></table></div>");
  $templateCache.put("js/modules/exams/import-base-data/views/import-base-data-form.html",
    "<div class=modal-body data-role=page><div class=row><h1>Welcome to the Exams Import</h1></div><div class=row>Information here...</div><div class=row>Select all exam basedata files to import.</div><div class=row><input type=file id=files name=files[] multiple></div><div id=overall_progress></div><div class=progress><div id=progress_bar class=progress-bar role=progressbar aria-valuenow=0 aria-valuemin=0 aria-valuemax=100 style=\"width: 0%\">0%</div></div><div id=progress_messages></div></div>");
  $templateCache.put("js/modules/exams/seating-plan/views/seating-plan-auto-generate-settings.html",
    "<div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=cancel()>&times;</button><h3 class=modal-title>Seating Plan Student Settings</h3></div><div class=modal-body><form><fieldset><div class=\"col-sm-6 col-md-6 col-lg-6\"><div class=form-group><label for=fillDirection class=control-label>Primary Fill direction:</label><div class=input-group ng-init=\"assign.fillDirection='down'\"><label class=radio-inline><div uib-tooltip=\"Start at row 1, and fill towards lastrow.\"><input type=radio ng-model=assign.fillDirection value=down> <span class=\"glyphicon glyphicon-arrow-down\"></span></div></label><label class=radio-inline><div uib-tooltip=\"Start at last row, and fill towards row 1.\"><input type=radio ng-model=assign.fillDirection value=up> <span class=\"glyphicon glyphicon-arrow-up\"></span></div></label><label class=radio-inline><div uib-tooltip=\"Start at rightmost column, and fill towards column A\"><input type=radio ng-model=assign.fillDirection value=left> <span class=\"glyphicon glyphicon-arrow-left\"></span></div></label><label class=radio-inline><div uib-tooltip=\"Start at column A, and fill towards rightmost column.\"><input type=radio ng-model=assign.fillDirection value=right> <span class=\"glyphicon glyphicon-arrow-right\"></span></div></label></div></div><div class=form-group><label for=secondaryFillDirection class=control-label>Secondary Fill Direction:</label><div class=input-group ng-init=\"assign.secondaryFillDirection='asc'\"><label class=radio-inline><input type=radio ng-model=assign.secondaryFillDirection value=asc><div ng-if=\"assign.fillDirection=='down' || assign.fillDirection=='up'\" uib-tooltip=\"Start at row 1\"><span class=\"glyphicon glyphicon-arrow-right\"></span></div><div ng-if=\"assign.fillDirection=='left' || assign.fillDirection=='right'\" uib-tooltip=\"Start at column A\"><span class=\"glyphicon glyphicon-arrow-down\"></span></div></label><label class=radio-inline><input type=radio ng-model=assign.secondaryFillDirection value=desc><div ng-if=\"assign.fillDirection=='down' || assign.fillDirection=='up'\" uib-tooltip=\"Start at last row\"><span class=\"glyphicon glyphicon-arrow-left\"></span></div><div ng-if=\"assign.fillDirection=='left' || assign.fillDirection=='right'\" uib-tooltip=\"Start at rightmost column\"><span class=\"glyphicon glyphicon-arrow-up\"></span></div></label></div></div><div class=form-group><label for=snake class=control-label>Snake:</label><div class=input-group ng-init=\"assign.snake=true\"><label class=radio-inline><input type=radio ng-model=assign.snake ng-value=true><div ng-if=\"assign.fillDirection=='down'\" uib-tooltip=\"Snake students. First column fills down from row 1, next column fills up from bottom.\"><span class=\"glyphicon glyphicon-arrow-down\"></span> <span class=\"glyphicon glyphicon-arrow-up\"></span></div><div ng-if=\"assign.fillDirection=='up'\" uib-tooltip=\"Snake students. First column fills up from bottom, next column fills down from row 1.\"><span class=\"glyphicon glyphicon-arrow-up\"></span> <span class=\"glyphicon glyphicon-arrow-down\"></span></div><div ng-if=\"assign.fillDirection=='left'\" class=\"col-sm-12 col-md-12 col-lg-12\" uib-tooltip=\"Snake students. First row fills left from column Z to column A, next row fills right from column A to column Z.\"><div class=row><span class=\"glyphicon glyphicon-arrow-left\"></span></div><div class=row><span class=\"glyphicon glyphicon-arrow-right\"></span></div></div><div ng-if=\"assign.fillDirection=='right'\" class=\"col-sm-12 col-md-12 col-lg-12\" uib-tooltip=\"Snake students. First row fills right from column A to column Z, next row fills left from column Z to column A.\"><div class=row><span class=\"glyphicon glyphicon-arrow-right\"></span></div><div class=row><span class=\"glyphicon glyphicon-arrow-left\"></span></div></div></label><label class=radio-inline><input type=radio ng-model=assign.snake ng-value=false><div ng-if=\"assign.fillDirection=='down'\" uib-tooltip=\"Normal fill. All columns fill down starting at row 1.\"><span class=\"glyphicon glyphicon-arrow-down\"></span> <span class=\"glyphicon glyphicon-arrow-down\"></span></div><div ng-if=\"assign.fillDirection=='up'\" uib-tooltip=\"Normal fill. All columns fill up, starting at the back, towards row 1.\"><span class=\"glyphicon glyphicon-arrow-up\"></span> <span class=\"glyphicon glyphicon-arrow-up\"></span></div><div ng-if=\"assign.fillDirection=='left'\" class=\"col-sm-12 col-md-12 col-lg-12\" uib-tooltip=\"Normal fill. All rows fill left from column Z to column A.\"><div class=row><span class=\"glyphicon glyphicon-arrow-left\"></span></div><div class=row><span class=\"glyphicon glyphicon-arrow-left\"></span></div></div><div ng-if=\"assign.fillDirection=='right'\" class=\"col-sm-12 col-md-12 col-lg-12\" uib-tooltip=\"Normal fill. All rows fill right from column A to column Z.\"><div class=row><span class=\"glyphicon glyphicon-arrow-right\"></span></div><div class=row><span class=\"glyphicon glyphicon-arrow-right\"></span></div></div></label></div></div><div class=form-group><label for=fillRowsNotColumns class=control-label>Fill Rows Or Column:</label><div class=input-group ng-init=\"assign.fillRowsNotColumns=true\"><label class=radio-inline><div uib-tooltip=\"Fills rows. Columns might be empty.\"><input type=radio ng-model=assign.fillRowsNotColumns ng-value=true> <span class=\"glyphicon glyphicon-resize-vertical\"></span></div></label><label class=radio-inline><div uib-tooltip=\"Use all columns. Rows might not be full.\"><input type=radio ng-model=assign.fillRowsNotColumns ng-value=false> <span class=\"glyphicon glyphicon-resize-horizontal\"></span></div></label></div></div></div><div class=\"col-sm-6 col-md-6 col-lg-6\"><div class=\"form-group col-sm-12 col-md-12 row\"><label for=startRow class=\"control-label col-xs-6 col-sm-6 col-md-6\">Limit Row from:</label><div class=\"input-group col-xs-2 col-sm-2 col-md-2\"><input type=number class=form-control ng-model=assign.startRow ng-init=\"assign.startRow=1\"></div><label for=endRow class=\"control-label col-xs-2 col-sm-2 col-md-2\">to:</label><div class=\"input-group col-xs-2 col-sm-2 col-md-2\"><input type=number class=form-control ng-model=assign.endRow ng-init=\"assign.endRow=numRows\"></div></div><div class=\"form-group col-sm-12 col-md-12 row\"><label for=startCol class=\"control-label col-xs-6 col-sm-6 col-md-6\">Limit Column from:</label><div class=\"input-group col-xs-2 col-sm-2 col-md-2\"><select class=form-control ng-model=assign.startCol ng-init=\"assign.startCol=columns[0]\" ng-options=\"x.column for x in columns\"></select></div><label for=endCol class=\"control-label col-xs-2 col-sm-2 col-md-2\">to:</label><div class=\"input-group col-xs-2 col-sm-2 col-md-2\"><select class=form-control ng-model=assign.endCol ng-init=\"assign.endCol=columns[numCols-1]\" ng-options=\"x.column for x in columns\"></select></div></div><div class=\"form-group col-sm-12 col-md-12 row\"><label for=newRowColExam class=\"control-label col-xs-11 col-sm-11 col-md-11\">Start new row/column for each exam:</label><div class=\"input-group col-xs-1 col-sm-1 col-md-1\"><input type=checkbox class=form-control ng-model=assign.newRowColExam ng-init=\"assign.newRowColExam=false\"></div></div></div></fieldset></form></div><div class=modal-footer><button class=\"btn btn-primary\" type=button ng-click=autoGenerateSeatingPlans()>Auto Generate Seating Plan</button> <button class=\"btn btn-warning\" type=button ng-click=cancel()>Cancel</button></div>");
  $templateCache.put("js/modules/exams/seating-plan/views/seating-plan-bulk-clear-seats-settings.html",
    "<div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=cancel()>&times;</button><h3 class=modal-title>Bulk Clear Seats Settings</h3></div><div class=modal-body><form><fieldset><div class=col-sm-12><div class=\"form-group col-sm-6\"><label for=startRow class=\"control-label col-xs-6 col-sm-6 col-md-6\">Limit Row from:</label><div class=\"input-group col-xs-2 col-sm-2 col-md-2\"><input type=number class=form-control ng-model=assign.startRow ng-init=\"assign.startRow=1\"></div></div><div class=\"form-group col-sm-6\"><label for=endRow class=\"control-label col-xs-2 col-sm-2 col-md-2\">to:</label><div class=\"input-group col-xs-2 col-sm-2 col-md-2\"><input type=number class=form-control ng-model=assign.endRow ng-init=\"assign.endRow=numRows\"></div></div><div class=\"form-group col-sm-6\"><label for=startCol class=\"control-label col-xs-6 col-sm-6 col-md-6\">Limit Column from:</label><div class=\"input-group col-xs-2 col-sm-2 col-md-2\"><select class=form-control ng-model=assign.startCol ng-init=\"assign.startCol=columns[0]\" ng-options=\"x.column for x in columns\"></select></div></div><div class=\"form-group col-sm-6\"><label for=endCol class=\"control-label col-xs-2 col-sm-2 col-md-2\">to:</label><div class=\"input-group col-xs-2 col-sm-2 col-md-2\"><select class=form-control ng-model=assign.endCol ng-init=\"assign.endCol=columns[numCols-1]\" ng-options=\"x.column for x in columns\"></select></div></div></div></fieldset></form></div><div class=modal-footer><button class=\"btn btn-primary\" type=button ng-click=bulkClearSeats()>Bulk Clear Seats</button> <button class=\"btn btn-warning\" type=button ng-click=cancel()>Cancel</button></div>");
  $templateCache.put("js/modules/exams/seating-plan/views/seating-plan-custom-exam-component.html",
    "<div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h3 class=modal-title>Add Custom/Internal Exam</h3></div><div class=modal-body><form><fieldset><div class=col-xs-12><div class=\"form-group row\"><label for=examSeries class=\"control-label col-xs-4\">Exam Series:</label><div class=\"col-xs-3 input-group\"><exam-series-selection id=examSeries class=form-control ng-model=ctrl.customExam.examSeriesId></exam-series-selection></div></div></div></fieldset><fieldset><div class=col-xs-12 uib-collapse=!ctrl.collapseAdditional><div class=\"form-group row\"><label for=standardSyllabusCode class=\"control-label col-xs-4\">Use {{ ctrl.customExam.syllabusCode }} for Syllabus Code:</label><div class=\"col-xs-3 input-group\"><input id=examCode type=checkbox class=form-control ng-model=ctrl.customExam.standardSyllabusCode></div></div><div class=\"form-group row\"><label for=examCode class=\"control-label col-xs-4\">Exam Code:</label><div class=\"col-xs-3 input-group\"><input id=examCode class=form-control ng-model=ctrl.customExam.examCode maxlength=12></div></div><div class=\"form-group row\"><label for=examTitle class=\"control-label col-xs-4\">Exam Title:</label><div class=\"col-xs-6 input-group\"><input id=examTitle class=form-control ng-model=ctrl.customExam.examTitle maxlength=35></div></div></div></fieldset><div class=\"panel panel-default\" ng-init=\"ctrl.collapseAdditional=true\" ng-model=ctrl.collapseAdditional ng-click=\"ctrl.collapseAdditional=!ctrl.collapseAdditional\"><div class=panel-heading data-toggle=collapse><h3 class=panel-title><div ng-if=ctrl.collapseAdditional><span class=\"glyphicon glyphicon-plus-sign\"></span> Enter individual Syllabus/Option/Component Details</div><div ng-if=!ctrl.collapseAdditional><span class=\"glyphicon glyphicon-minus-sign\"></span> Enter simple Details</div></h3></div></div><fieldset><div class=col-xs-12 uib-collapse=ctrl.collapseAdditional><div class=\"form-group row\"><label for=syllabusCode class=\"control-label col-xs-4\">Syllabus Code:</label><div class=\"col-xs-3 input-group\"><input id=syllabusCode class=form-control ng-model=ctrl.customExam.syllabusCode maxlength=12></div></div><div class=\"form-group row\"><label for=syllabusTitle class=\"control-label col-xs-4\">Syllabus Title:</label><div class=\"col-xs-6 input-group\"><input id=syllabusTitle class=form-control ng-model=ctrl.customExam.syllabusTitle maxlength=35></div></div><div class=\"form-group row\"><label for=optionCode class=\"control-label col-xs-4\">Option Code:</label><div class=\"col-xs-3 input-group\"><input id=optionCode class=form-control ng-model=ctrl.customExam.optionCode maxlength=12></div></div><div class=\"form-group row\"><label for=optionTitle class=\"control-label col-xs-4\">Option Title:</label><div class=\"col-xs-6 input-group\"><input id=optionTitle class=form-control ng-model=ctrl.customExam.optionTitle maxlength=35></div></div><div class=\"form-group row\"><label for=componentCode class=\"control-label col-xs-4\">Component Code:</label><div class=\"col-xs-3 input-group\"><input id=componentCode class=form-control ng-model=ctrl.customExam.componentCode maxlength=12></div></div><div class=\"form-group row\"><label for=componentTitle class=\"control-label col-xs-4\">Component Title:</label><div class=\"col-xs-6 input-group\"><input id=componentTitle class=form-control ng-model=ctrl.customExam.componentTitle maxlength=35></div></div></div></fieldset><fieldset><div class=col-sm-12><div class=\"form-group row\"><label for=timeAllowed class=\"control-label col-xs-4\">Time Allowed:</label><div class=\"col-xs-3 input-group\"><input id=timeAllowed type=number class=form-control ng-model=ctrl.customExam.timeAllowed></div></div><div><course-search on-select=ctrl.loadCourse(id)></course-search></div><div class=\"form-group row\"><label for=courseTitle class=\"control-label col-xs-4\">Course Title:</label><div class=col-xs-8><input id=courseTitle ng-readonly=true ng-model=ctrl.customExam.courseTitle></div></div></div></fieldset></form></div><div class=modal-footer><button class=\"btn btn-primary\" type=button ng-click=ctrl.save()>Next</button> <button class=\"btn btn-warning\" type=button ng-click=ctrl.cancel()>Cancel</button></div>");
  $templateCache.put("js/modules/exams/seating-plan/views/seating-plan-custom-exam-students-component.html",
    "<div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=cancel()>&times;</button><h3 class=modal-title>Select Custom/Internal Exam Students</h3></div><div class=modal-body><div ng-if=\"groups.groupList.length === 0\" class=spinner></div><table ng-if=\"groups.groupList.length > 0\" class=table><tbody><tr><td colspan=4>Select All</td><td><input type=checkbox ng-model=groups._selected indeterminate-checkbox child-list=groups.groupList property=_selected></td></tr><tr ng-repeat-start=\"group in groups.groupList\" class=ng-cloak><td><div ng-init=\"group._expanded=false\"><expand visible expandable=true expanded=group._expanded></expand></div></td><td>{{ group._courseGroupReference }}</td><td>{{ group._levelDescription }}</td><td>{{ group._subjectDescription }}</td><td></td><td><input type=checkbox ng-model=group._selected indeterminate-checkbox child-list=group.studentList property=_selected></td></tr><tr ng-if=group._expanded ng-repeat-end><td colspan=5><course-enrolment-table group=group></course-enrolment-table></td></tr></tbody></table></div><div class=modal-footer><button class=\"btn btn-primary\" type=button ng-click=save()>Save</button> <button class=\"btn btn-warning\" type=button ng-click=cancel()>Cancel</button></div>");
  $templateCache.put("js/modules/exams/seating-plan/views/seating-plan-delete-room-confirm.html",
    "<md-dialog><md-dialog-content><div class=md-dialog-content><p><strong>This will delete the exam room from this session,</strong></p><p><strong>and de-assign any students that were seated in the room.</strong></p><p><strong>This operation cannot be undone.</strong></p><p></p><p><strong>Are you sure that you want to continue?</strong></p></div></md-dialog-content><md-dialog-actions><md-button ng-click=ok() class=md-primary>OK</md-button><md-button ng-click=cancel() class=md-primary>Cancel</md-button></md-dialog-actions></md-dialog>");
  $templateCache.put("js/modules/exams/seating-plan/views/seating-plan-generator-grid.html",
    "<tr ng-repeat=\"row in lists.rows\"><td ng-repeat=\"std in row.columns\"><div class=list-group dnd-list=std.student dnd-effect-allowed=moveLink dnd-external-sources=true dnd-disable-if=\"std.blocked == true || std.student[0].studentId != null\" dnd-drop=\"planDrop(std, $index, item)\"><div dnd-draggable=std.student data-container=body ng-class=\"(std.blocked == true) ? ['list-group-item', 'disabled'] : ['list-group-item', 'list-group-item-info']\"><seating-plan-seat student=std uib-tooltip-template=\"'/js/modules/exams/seating-plan/views/seating-plan-seat-tooltip.html'\" ng-attr-tooltip-placement=\"{{(std.col == 0) ? 'right' : 'left'}}\" tooltip-enable=\"(std.student[0].studentId !== null)\" callback=clearSeat(std)></seating-plan-seat></div></div></td><div class=clearfix></div></tr>");
  $templateCache.put("js/modules/exams/seating-plan/views/seating-plan-generator-student-list.html",
    "<select class=form-control ng-model=listFilter.examComponentId><option value=\"\">-- All Exam Components --</option><option value=\"{{ component.id }}\" ng-repeat=\"component in examComponents | orderBy:['+code']\">{{ component.code }} - {{ component.title }}</option></select><input class=form-control place-holder=\"Cand No\" ng-model=listFilter._candidateNo><ul class=\"list-group seating-plan-student-list\" dnd-list=students dnd-effect-allowed=move dnd-external-sources=true dnd-drop=\"listDrop(students, $index, item)\"><li ng-repeat=\"student in students | orderBy:sortOrder | filter:listFilter | filter:advancedFilter\" dnd-draggable=student dnd-disable-if=\"(student.col !== null || student.row !== null)\" dnd-dragstart=\"listDragStart(students, student, student.listIndex)\" dnd-dragend=\"listDragEnd(students, student.listIndex)\" dnd-moved=\"listMoveTo(students, student.listIndex)\" dnd-canceled=\"listCanceled(students, student.listIndex, item)\" ng-class=\"['list-group-item', (student.col !== null || student.row !== null) ? 'list-group-item-success' : ((student._clash === true) ? 'list-group-item-danger' : 'list-group-item-info')]\"><seating-plan-student student=student display-options=displayOptions></seating-plan-student></li><div class=clearfix></div></ul>");
  $templateCache.put("js/modules/exams/seating-plan/views/seating-plan-generator.html",
    "<div class=row><div class=col-sm-12><h3>Seating Plan for Room {{examRoom.room.code}} - {{examRoom.room.description}} on {{examRoom.examSession.date | date}} {{examRoom.examSession.session}}</h3></div></div><div class=\"row seating-plan-row\"><div class=\"panel panel-info\" ng-class=\"{'col-sm-3': globals.sideBar || globals.sideBar === undefined, 'col-md-2': globals.sideBar !== true}\"><div class=panel-heading><div class=panel-title><span>Students {{(students | filter:listFilter | filter:advancedFilter).length}} / {{studentsLoaded ? students.length : \"Loading\"}}</span> <button type=button class=close aria-hidden=true aria-label=Settings ng-click=changeStudentSettings()><span class=\"glyphicon glyphicon-option-vertical\"></span></button></div></div><div class=panel-body ng-include=\"'js/modules/exams/seating-plan/views/seating-plan-generator-student-list.html'\"></div></div><div ng-class=\"{'col-sm-9': globals.sideBar || globals.sideBar === undefined, 'col-md-10': globals.sideBar !== true}\"><table ng-table=lists class=seating-plan-grid><tbody class=panel-body ng-include=\"'js/modules/exams/seating-plan/views/seating-plan-generator-grid.html'\"></tbody></table></div></div><div class=\"row text-right\"><div class=col-sm-12><button class=\"btn btn-default\" type=button ng-click=addCustomExamComponent()>Add Custom Exam</button> <button class=\"btn btn-default\" type=button ng-disabled=!studentsLoaded ng-click=autoPopulateSeatingPlan()>Auto Populate</button> <button class=\"btn btn-default\" type=button ng-click=bulkClearSeatsSettings()>Bulk Clear Seats</button> <button class=\"btn btn-primary\" type=button ng-click=saveExamRoom()>Save</button> <button class=\"btn btn-primary\" type=button ng-click=saveAndCloseExamRoom()>Save &amp; Close</button> <button class=\"btn btn-warning\" type=button ng-click=cancel()>Cancel</button></div></div>");
  $templateCache.put("js/modules/exams/seating-plan/views/seating-plan-rooms-form.html",
    "<div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=concel()>&times;</button><h3 class=modal-title>Add/edit seating plan room</h3></div><div class=modal-body><div class=row><div class=\"form-group col-sm-12 col-md-12\"><label for=room class=\"control-label col-sm-3 col-md-3\">Room:</label><div class=\"input-group col-sm-9 col-md-9\"><room-selection class=form-control include-blank=true ng-model=examRoom.room.id ng-change=setRowColValues()></room-selection></div></div></div><div class=row><div class=\"form-group col-sm-12 col-md-6\"><label for=rows class=\"col-xs-6 col-sm-6 col-md-6 control-label\">Rows:</label><div class=\"input-group col-xs-2 col-sm-2 col-md-2\"><input type=number class=form-control ng-model=examRoom.rows ng-disabled=\"(examRoom.room.id === undefined)\" min=1></div><div class=\"message col-xs-4 col-sm-4 col-md-4\">{{ rowsMsg }}</div></div><div class=\"form-group col-sm-12 col-md-6\"><label for=cols class=\"col-xs-6 col-sm-6 col-md-6 control-label\">Columns:</label><div class=\"input-group col-xs-2 col-sm-2 col-md-2\"><input type=number class=form-control ng-model=examRoom.cols ng-disabled=\"(examRoom.room.id === undefined)\" min=1></div><div class=\"message col-xs-4 col-sm-4 col-md-4\">{{ colsMsg }}</div></div></div></div><div class=modal-footer><button class=btn type=button ng-click=setDefaults() ng-disabled=rowsAndColsSet()>Save Defaults</button> <button class=\"btn btn-primary\" type=button ng-click=save() ng-disabled=rowsAndColsSet()>Save Room</button> <button class=\"btn btn-warning\" type=button ng-click=cancel()>Cancel</button></div>");
  $templateCache.put("js/modules/exams/seating-plan/views/seating-plan-seat-tooltip.html",
    "<div><p>Seat: {{std.label}}</p><p>Candidate: {{std.student[0]._candidateNo}}</p><p>Name: {{std.student[0]._surname}}, {{std.student[0]._firstName}}</p><div ng-if=\"std.student[0]._concessions.length > 0\"><p>Exam concessions</p><div ng-repeat=\"concession in std.student[0]._concessions\"><p>{{concession._concessionDescription}}</p></div></div></div>");
  $templateCache.put("js/modules/exams/seating-plan/views/seating-plan-student-settings.html",
    "<div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=cancel()>&times;</button><h3 class=modal-title>Seating Plan Student Settings</h3></div><div class=modal-body><form><fieldset><div class=\"col-sm-6 col-md-6 col-lg-6\"><div class=\"form-group row\"><label for=hideAssigned class=\"control-label col-xs-10 col-sm-10 col-md-10\">Hide Students Assigned a Seat:</label><div class=\"col-xs-2 col-sm-2 col-md-2\"><input type=checkbox class=form-control ng-model=filterOptions.hideAssigned></div></div><div class=\"form-group row\"><label for=showOnlyConcessions class=\"control-label col-xs-10 col-sm-10 col-md-10\">Show only Students with Concessions:</label><div class=\"col-xs-2 col-sm-2 col-md-2\"><input type=checkbox class=form-control ng-model=filterOptions.showOnlyConcessions></div></div><div class=\"form-group row\"><label for=showOnlyClashes class=\"control-label col-xs-10 col-sm-10 col-md-10\">Show Only Students with Clashes:</label><div class=\"col-xs-2 col-sm-2 col-md-2\"><input type=checkbox class=form-control ng-model=filterOptions.showOnlyClashes></div></div></div><div class=\"col-sm-6 col-md-6 col-lg-6\"><div class=\"form-group row\"><label for=displayRoomDescription class=\"control-label col-xs-10 col-sm-10 col-md-10\">Display Room Description:</label><div class=\"col-xs-2 col-sm-2 col-md-2\"><input type=checkbox class=form-control ng-model=displayOptions.roomDescription></div></div><div class=\"form-group row\"><label for=displayConcessions class=\"control-label col-xs-10 col-sm-10 col-md-10\">Display Student Concessions:</label><div class=\"col-xs-2 col-sm-2 col-md-2\"><input type=checkbox class=form-control ng-model=displayOptions.studentConcessions></div></div></div></fieldset></form></div><div class=modal-footer><button class=\"btn btn-primary\" type=button ng-click=save()>OK</button></div>");
  $templateCache.put("js/modules/exams/seating-plan/views/seating-plan.html",
    "<div class=container-fluid><h1>Seating Plan Generator</h1><form id=seatingPlanGeneratorForm name=seatingPlanGeneratorForm role=form novalidate><div class=modal-header></div><div class=modal-body><div class=row><div class=\"form-group col-sm-12 col-md-6 row\"><label for=examDate class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Exam Date:</label><div class=\"col-xs-8 col-sm-8 col-md-8 input-group\"><input class=form-control ng-init=\"examDateDatePicker=false\" ng-model=examDate ng-change=onChange() uib-datepicker-popup=dd/MM/yyyy is-open=examDateDatePicker> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"examDateDatePicker=!examDateDatePicker\"><span class=\"glyphicon glyphicon-calendar\"></span></button></span></div></div></div><div class=row><div class=\"form-group col-sm-12 col-md-6 row\"><label for=session class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Session:</label><div class=\"col-xs-8 col-md-8 col-sm-8 input-group\"><input type=radio class=radio-inline ng-model=session ng-change=onChange() value=A>AM<input type=radio class=radio-inline ng-model=session ng-change=onChange() value=P>PM</div></div></div><div ng-if=showExamRooms><div class=row><div class=\"col-sm-12 col-md-12 col-lg-12\"><div flex style=\"overflow: scroll\"><table id=examRoomTable class=table><thead class=table-header><tr><th>Room</th><th>Description</th><th class=text-center>Rows</th><th class=text-center>Columns</th><th class=text-center>Capacity</th><th class=text-center>Actions</th></tr></thead><tr ng-repeat=\"examRoom in examRoomList\" class=ng-cloak><td>{{examRoom.room.code}}</td><td>{{examRoom.room.description}}</td><td class=text-center>{{examRoom.rows}}</td><td class=text-center>{{examRoom.cols}}</td><td class=text-center>{{examRoom.rows * examRoom.cols}}</td><td class=text-center><button class=\"btn btn-primary btn-sm\" ui-sref=\"exams.seating-plan.generator({examSessionId: examSession.id, examRoomId: examRoom.id, examDate: examDate, session: session })\">Edit Seating Plan</button> <button class=\"btn btn-primary btn-sm\" ng-click=\"addEditRoomEntry(examSession, examRoom)\">Edit Room</button> <button class=\"btn btn-danger btn-sm\" ng-click=\"deleteRoomEntry(examSession, examRoom)\"><span class=\"glyphicon glyphicon-trash\" aria-hidden=true></span> Delete</button><report-link class=\"btn btn-primary btn-sm\" report-path=\"'/CID/Exams/Exam Seating Plan'\" report-format=\"'EXCEL'\" report-params=\"'ExamSeatingPlan='+examRoom.id\" include-year=true><span class=\"glyphicon glyphicon-save\" aria-hidden=true></span> Excel Download</report-link></td></tr><tbody></tbody></table><div><button class=\"btn btn-primary btn-sm\" ng-click=addEditRoomEntry(examSession)>Add Exam Room</button></div></div></div></div></div></div></form></div>");
  $templateCache.put("js/modules/site/views/debug-info.html",
    "<div permission=\"'ROLE_Developer'\"><h4>Debug Info <span style=\"font-size: small\">(<label for=debug-info.show-hide>Show</label><input id=debug-info.show-hide type=checkbox ng-model=ctrl.show ng-click=ctrl.toggleShow()> )</span></h4><div style=\"font-size: x-small\" ng-show=ctrl.show><div>URL: {{ ctrl.url }}</div><div>Current User:<pre class=\"text-smaller debug-json\">{{ ctrl.currentUser | json }}</pre></div><div>Current Year:<pre class=\"text-smaller debug-json\">{{ ctrl.currentYear | json }}</pre></div><div>User Settings:<pre class=\"text-smaller debug-json\">{{ ctrl.userGlobals | json }}</pre></div><div>Global Settings:<pre class=\"text-smaller debug-json\">{{ ctrl.globals | json }}</pre></div><div>State information:<pre class=\"text-smaller debug-json\">{{ ctrl.state | json }}</pre></div></div></div>");
  $templateCache.put("js/modules/site/views/home.html",
    "<h1>Welcome to the College Information Database</h1><div><p>Use the top menu to navigate to the different section of the system.</p></div>");
  $templateCache.put("js/modules/site/views/login.html",
    "<h1>Welcome to CID the College Information Database</h1><div class=\"alert alert-danger\" ng-show=ctrl.error>{{ ctrl.message }}</div><form role=form ng-submit=ctrl.login()><div class=form-group><label for=username>Username:</label><input class=form-control id=username name=username ng-model=ctrl.credentials.username autofocus></div><div class=form-group><label for=password>Password:</label><input type=password class=form-control id=password name=password ng-model=ctrl.credentials.password></div><button type=submit class=\"btn btn-primary\">Login</button></form>");
  $templateCache.put("js/modules/site/views/navigation.html",
    "<ul class=\"nav navbar-nav\" role=tablist><li class=dropdown permission=\"['ROLE_Developer']\" ui-sref-active=\"{'active': 'admissions.**'}\"><a class=dropdown-toggle data-toggle=dropdown role=button aria-haspopup=true aria-expanded=false>Admissions <span class=caret></span></a><ul class=dropdown-menu><li ui-sref-active=active><a ui-sref=admissions.new>New Application</a></li><li ui-sref-active=active><a ui-sref=admissions.search>Search Application</a></li><li ui-sref-active=active><a ui-sref=admissions.interview>Interview</a></li></ul></li><li permission=\"['ROLE_Developer', 'ROLE_Staff']\" ui-sref-active=active><a href=# ui-sref=student-editor>Student Record</a></li><li class=dropdown permission=\"['ROLE_Developer', 'ROLE_Staff']\" ui-sref-active=\"{'active': 'course-record.**'}\"><a class=dropdown-toggle data-toggle=dropdown role=button aria-haspopup=true aria-expanded=false>Course Records <span class=caret></span></a><ul class=dropdown-menu><li ui-sref-active=active><a ui-sref=course-record>Search</a></li><li ui-sref-active=active><a ui-sref=course-record.course-list>Course List</a></li><li ui-sref-active=active><a ui-sref=course-record.course-group-list>Course Group List</a></li></ul></li><li class=dropdown permission=\"['ROLE_Exams Officer']\" ui-sref-active=\"{'active': 'exams.**'}\"><a class=dropdown-toggle data-toggle=dropdown role=button aria-haspopup=true aria-expanded=false>Exams <span class=caret></span></a><ul class=dropdown-menu><li permission=\"['ROLE_Developer', 'ROLE_Exams Officer']\" ui-sref-active=active><a ui-sref=exams.import-base-data>Import Base Data</a></li><li permission=\"['ROLE_Developer', 'ROLE_Exams Officer']\" ui-sref-active=active><a ui-sref=exams.exam-base-data-viewer>Basedata Viewer</a></li><li permission=\"['ROLE_Developer', 'ROLE_Exams Officer']\" ui-sref-active=active><a ui-sref=exams.course-details>Course Exam Details</a></li><li permission=\"['ROLE_Developer', 'ROLE_Exams Officer']\" ui-sref-active=active><a ui-sref=exams.generate-entries>Generate Entries</a></li><li permission=\"['ROLE_Developer', 'ROLE_Exams Officer']\" ui-sref-active=active><a ui-sref=exams.generate-edi>Generate EDI File</a></li><li permission=\"['ROLE_Developer', 'ROLE_Exams Officer']\" ui-sref-active=active><a ui-sref=exams.seating-plan>Exam Seating Plans</a></li></ul></li><li permission=\"'ROLE_Staff'\" ui-sref-active=active><a href=# ui-sref=site.reports>Reports</a></li><li permission=\"'ROLE_Developer'\" ui-sref-active=active><a href=# ui-sref=test>Tests</a></li><li class=dropdown permission=\"['ROLE_Developer', 'ROLE_System Admin', 'ROLE_Timetabling', 'ROLE_Exams Officer', 'ROLE_Admissions']\" ui-sref-active=\"{'active': 'data.**'}\"><a class=dropdown-toggle data-toggle=dropdown role=button aria-haspopup=true aria-expanded=false>Data <span class=caret></span></a><ul class=dropdown-menu><li class=dropdown-submenu permission=\"['ROLE_Developer', 'ROLE_System Admin', 'ROLE_Timetabling']\" ui-sref-active=\"{'active': 'data.core.**'}\"><a tabindex=-1 href=#>Core Data</a><ul class=dropdown-menu><li permission=\"['ROLE_Developer', 'ROLE_System Admin', 'ROLE_Timetabling']\" ui-sref-active=active><a href=# ui-sref=data.core.academic-years>Academic Year</a></li><li permission=\"['ROLE_Developer', 'ROLE_System Admin', 'ROLE_Timetabling']\" ui-sref-active=active><a href=# ui-sref=data.core.holidays>Holidays</a></li><li role=separator class=divider></li><li permission=\"['ROLE_Developer', 'ROLE_System Admin', 'ROLE_Timetabling']\" ui-sref-active=active><a href=# ui-sref=data.core.year-groups>Year Groups</a></li><li permission=\"['ROLE_Developer', 'ROLE_System Admin', 'ROLE_Timetabling']\" ui-sref-active=active><a href=# ui-sref=data.core.levels>Levels</a></li><li permission=\"['ROLE_Developer', 'ROLE_System Admin', 'ROLE_Timetabling']\" ui-sref-active=active><a href=# ui-sref=data.core.subjects>Subjects</a></li><li role=separator class=divider></li><li permission=\"['ROLE_Developer', 'ROLE_System Admin', 'ROLE_Timetabling']\" ui-sref-active=active><a href=# ui-sref=data.core.departments>Departments</a></li><li permission=\"['ROLE_Developer', 'ROLE_System Admin', 'ROLE_Timetabling']\" ui-sref-active=active><a href=# ui-sref=data.core.faculties>Faculties</a></li><li permission=\"['ROLE_Developer', 'ROLE_System Admin', 'ROLE_Timetabling']\" ui-sref-active=active><a href=# ui-sref=data.core.tutor-groups>Tutor Groups</a></li></ul></li><li class=dropdown-submenu permission=\"['ROLE_Developer', 'ROLE_System Admin']\" ui-sref-active=\"{'active': 'data.monitoring.**'}\"><a tabindex=-1 href=#>Monitoring Data</a><ul class=dropdown-menu><li permission=\"['ROLE_Developer', 'ROLE_System Admin']\" ui-sref-active=active><a href=# ui-sref=data.monitoring.attendance-monitorings>Attendance Monitoring</a></li><li permission=\"['ROLE_Developer', 'ROLE_System Admin']\" ui-sref-active=active><a href=# ui-sref=data.monitoring.central-monitorings>Central Monitoring</a></li><li permission=\"['ROLE_Developer', 'ROLE_System Admin']\" ui-sref-active=active><a href=# ui-sref=data.monitoring.punctuality-monitorings>Punctuality Monitoring</a></li></ul></li><li class=dropdown-submenu permission=\"['ROLE_Developer', 'ROLE_System Admin', 'ROLE_Timetabling']\" ui-sref-active=\"{'active': 'data.timetabling.**'}\"><a tabindex=-1 href=#>Timetabling Data</a><ul class=dropdown-menu><li permission=\"['ROLE_Developer', 'ROLE_System Admin', 'ROLE_Timetabling']\" ui-sref-active=active><a href=# ui-sref=data.timetabling.blocks>Blocks</a></li><li permission=\"['ROLE_Developer', 'ROLE_System Admin', 'ROLE_Timetabling']\" ui-sref-active=active><a href=# ui-sref=data.timetabling.periods>Periods</a></li><li permission=\"['ROLE_Developer', 'ROLE_System Admin', 'ROLE_Timetabling']\" ui-sref-active=active><a href=# ui-sref=data.timetabling.rooms>Rooms</a></li></ul></li><li class=dropdown-submenu permission=\"['ROLE_Developer', 'ROLE_System Admin']\" ui-sref-active=\"{'active': 'data.learning-support.**'}\"><a tabindex=-1 href=#>Learning Support Data</a><ul class=dropdown-menu><li permission=\"['ROLE_Developer', 'ROLE_System Admin']\" ui-sref-active=active><a href=# ui-sref=data.learning-support.concession-types>Concession Types</a></li><li permission=\"['ROLE_Developer', 'ROLE_System Admin']\" ui-sref-active=active><a href=# ui-sref=data.learning-support.referral-reasons>Referral Reason</a></li><li permission=\"['ROLE_Developer', 'ROLE_System Admin']\" ui-sref-active=active><a href=# ui-sref=data.learning-support.special-categories>Special Category</a></li><li permission=\"['ROLE_Developer', 'ROLE_System Admin']\" ui-sref-active=active><a href=# ui-sref=data.learning-support.support-types>Support Types</a></li></ul></li><li class=dropdown-submenu permission=\"['ROLE_Developer', 'ROLE_System Admin', 'ROLE_Admissions']\" ui-sref-active=\"{'active': 'data.admissions.**'}\"><a tabindex=-1 href=#>Admissions Data</a><ul class=dropdown-menu><li permission=\"['ROLE_Developer', 'ROLE_System Admin', 'ROLE_Admissions']\" ui-sref-active=active><a href=# ui-sref=data.admissions.schools>Schools</a></li><li permission=\"['ROLE_Developer', 'ROLE_System Admin', 'ROLE_Admissions']\" ui-sref-active=active><a href=# ui-sref=data.admissions.application-statuses>Application Status</a></li><li permission=\"['ROLE_Developer', 'ROLE_System Admin', 'ROLE_Admissions']\" ui-sref-active=active><a href=# ui-sref=data.admissions.offer-types>Offer Types</a></li><li role=separator class=divider permission=\"['ROLE_Developer', 'ROLE_System Admin']\"></li><li permission=\"['ROLE_Developer', 'ROLE_System Admin']\" ui-sref-active=active><a href=# ui-sref=data.admissions.entry-qualifications>Entry Quaifications</a></li><li permission=\"['ROLE_Developer', 'ROLE_System Admin']\" ui-sref-active=active><a href=# ui-sref=data.admissions.entry-qualification-types>Entry Quaification Types</a></li></ul></li><li class=dropdown-submenu permission=\"['ROLE_Developer', 'ROLE_System Admin']\" ui-sref-active=\"{'active': 'data.system.**'}\"><a tabindex=-1 href=#>System Data</a><ul class=dropdown-menu><li permission=\"['ROLE_Developer', 'ROLE_System Admin']\" ui-sref-active=active><a href=# ui-sref=data.system.settings>Settings</a></li><li permission=\"['ROLE_Developer', 'ROLE_System Admin']\" ui-sref-active=active><a href=# ui-sref=data.system.text-lookups>Text Lookup</a></li><li permission=\"['ROLE_Developer', 'ROLE_System Admin']\" ui-sref-active=active><a href=# ui-sref=data.system.letter-templates>Letter Template</a></li><li role=separator class=divider></li><li permission=\"['ROLE_Developer', 'ROLE_System Admin']\" ui-sref-active=active><a href=# ui-sref=data.system.reporting-periods>Reporting Period</a></li><li permission=\"['ROLE_Developer', 'ROLE_System Admin']\" ui-sref-active=active><a href=# ui-sref=data.system.possible-grade-sets>Possible Grade Set</a></li></ul></li><li class=dropdown-submenu permission=\"['ROLE_Developer', 'ROLE_System Admin']\" ui-sref-active=\"{'active': 'data.security.**'}\"><a tabindex=-1 href=#>Security Data</a><ul class=dropdown-menu><li permission=\"['ROLE_Developer', 'ROLE_System Admin']\" ui-sref-active=active><a href=# ui-sref=data.security.roles>Database Roles</a></li><li permission=\"['ROLE_Developer', 'ROLE_System Admin']\" ui-sref-active=active><a href=# ui-sref=data.security.staffs>Staff</a></li></ul></li><li class=dropdown-submenu permission=\"['ROLE_Developer', 'ROLE_System Admin', 'ROLE_Exams Officer']\" ui-sref-active=\"{'active': 'data.exams.**'}\"><a tabindex=-1 href=#>Exams Data</a><ul class=dropdown-menu><li permission=\"['ROLE_Developer', 'ROLE_System Admin', 'ROLE_Exams Officer']\" ui-sref-active=active><a href=# ui-sref=data.exam-boards>Exam Boards</a></li><li permission=\"['ROLE_Developer', 'ROLE_System Admin', 'ROLE_Exams Officer']\" ui-sref-active=active><a href=# ui-sref=data.exam-series>Exam Series</a></li></ul></li></ul></li></ul><ul class=\"nav navbar-nav navbar-right\"><li class=dropdown permission=\"['ROLE_Developer', 'ROLE_Exams Officer']\" ui-sref-active=active><a class=dropdown-toggle data-toggle=dropdown role=button aria-haspopup=true aria-expanded=false>Settings <span class=caret></span></a><ul class=dropdown-menu><li class=form-inline role=settings><div class=form-group><label for=sideBar class=col-md-8>Show Side Bar:</label><div class=col-md-4><input type=checkbox name=sideBar class=form-control ng-model=globals.sideBar></div></div></li></ul></li><li><form class=\"navbar-form navbar-right\" role=settings><current-year-selector readonly></current-year-selector></form></li><li><a href=# ng-click=ctrl.logout()>Logout</a></li></ul>");
  $templateCache.put("js/modules/site/views/reports.html",
    "<h1>College Information Database Reports</h1><div class=report-list><div class=col-md-6><h4>Timetable Reports</h4><ul><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Timetabling/Timetable Staff - Square'\" report-params=\"'Teacher=0'\">Timetables Staff - Square</report-link></li><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Timetabling/Timetable Staff - Column'\" report-params=\"'Staff=0'\" include-year=true>Timetables Staff - Column</report-link></li><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Timetabling/Timetable Room - Square'\" report-params=\"'Room=0'\">Timetables Room - Square</report-link></li><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Timetabling/Timetable Room - Column'\" include-year=true>Timetables Room - Column</report-link></li><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Timetabling/Timetable Student - Square by Student List'\" include-year=true>Timetable Student - Square by Student List</report-link></li><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Timetabling/Timetable Student - Column by Student List'\" include-year=true>Timetable Student - Column by Student List</report-link></li><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Timetabling/Free Rooms and Staff for Period'\" include-year=true>Free Rooms and Staff for Period</report-link></li></ul></div><div class=col-md-6><h4>Tutor Group Lists</h4><ul><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Students/Tutor Group Lists/Tutor Group List - With Various Data'\" include-year=true>Tutor Group List - With Various Data</report-link></li><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Students/Tutor Group Lists/Tutor Group List - With 1 to 3 Columns'\" include-year=true>Tutor Group List - With 1 to 3 Columns</report-link></li><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Students/Tutor Group Lists/Tutor Group List - With 1 to 3 Columns - Large'\" include-year=true>Tutor Group List - With 1 to 3 Columns - Large</report-link></li></ul></div><div class=col-md-6><h4>Course Lists</h4><ul><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Courses/Course Sizes'\" include-year=true>Course Sizes</report-link></li><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Courses/Course Group Sizes'\" report-toolbar=false include-year=true>Course Group Sizes</report-link></li><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Courses/Current Support Groups'\" report-toolbar=false include-year=true>Current Support Groups</report-link></li></ul></div><div class=col-md-6><h4>Overall Attendance Monitoring</h4><ul><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Attendance Monitoring/Overall Attendance Figures'\" report-toolbar=false>Overall Attendance Figures</report-link></li><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Attendance Monitoring/Overall Attendance Figures Detailed'\" report-toolbar=false>Overall Attendance Figures Detailed</report-link></li><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Attendance Monitoring/Overall Attendance Figures For Specified Dates'\" report-toolbar=true>Overall Attendance Figures For Specified Dates</report-link></li></ul></div><div class=col-md-6><h4>Attendance Monitoring</h4><ul><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Attendance Monitoring/Attendance Figures By Course'\" report-toolbar=false>Attendance Figures by Course</report-link></li><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Attendance Monitoring/Attendance Figures For Specified Dates'\" report-toolbar=true>Attendance Figures For Specified Dates</report-link></li><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Attendance Monitoring/Student Attendance By Class'\" report-toolbar=true>Student Attendance By Class</report-link></li><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Attendance Monitoring/Student Attendance By Class For Specified Dates'\" report-toolbar=true>Student Attendance By Class For Specified Dates</report-link></li></ul></div><div class=col-md-6><h4>Interim Reports</h4><ul><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Interim Reports/Interim Report Data By Course'\" report-toolbar=true>Interim Report Data by Course</report-link></li><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Interim Reports/Interim Report Analysis By Student'\" report-toolbar=true>Interim Report Analysis By Student</report-link></li><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Interim Reports/Interim Report Data By Course'\" report-toolbar=true>Interim Report Data By Course (Complete)</report-link></li><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Interim Reports/Interim Report Data By Tutor Group'\" report-toolbar=true>Interim Report Data By Tutor Group</report-link></li><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Interim Reports/Student Interim Report By Department'\" report-toolbar=true>Student Interim Report By Department</report-link></li></ul></div><div class=col-md-6><h4>Other Reports</h4><ul><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Students/Class Lists/Quick Class List'\">Quick Class List</report-link></li><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Students/Student Address Information by Student List'\" include-year=true>Student Address Information by Student List</report-link></li><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Students/Alphabetic Lists/Student List - Name and TG (3 Columns)'\" include-year=true>Student List - Name and TG (3 Columns)</report-link></li><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Students/Student List with Photos'\" report-format=PDF include-year=true>Student List with Photos</report-link></li></ul></div><div class=col-md-6><h4>Exam Results Reports</h4><ul><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Exams/Results/Exam Results Residuals By Department'\">Exam Results Residuals By Department</report-link></li><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Exams/Results/All Student Exam Results By Student'\">All Student Exam Results By Student</report-link></li><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Exams/Results/All Student Exam Results By TG'\">All Student Exam Results By TG</report-link></li><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Exams/Results/Exam Results By Course Spec Level 3'\">Exam Results By Course Spec Level 3</report-link></li><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Exams/Results/Exam Results By Course Spec Level 2'\">Exam Results By Course Spec Level 2</report-link></li></ul></div><div class=col-md-6 permission=\"['ROLE_Office Administration', 'ROLE_Careers']\"><h4>Careers Reports</h4><ul><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Careers/Students Destination Details'\" include-year=true>Students Destination Details</report-link></li></ul></div><div class=col-md-6 permission=\"['ROLE_Office Administration', 'ROLE_First Aid Coordinator']\"><h4>First Aid Reports</h4><ul><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Students/Student Medical Notes'\" include-year=true>Student Medical Notes</report-link></li></ul></div><div class=col-md-6 permission=\"['ROLE_ID Violation']\"><h4>ID Violation Reports</h4><ul><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Administration/ID Violation/Students With Lost IDs To Print'\" show-params=false include-year=true>Students with Lost IDs to Print</report-link></li><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Administration/ID Violation/Students With Unreturned IDs'\" show-params=false include-year=true>Students with Unreturned IDs</report-link></li><li><report-link class=\"btn btn-default\" report-path=\"'/CID/Administration/ID Violation/Tutor Groups With Unreturned IDs'\" show-params=false include-year=true>Tutor Groups with Unreturned IDs</report-link></li></ul></div></div>");
  $templateCache.put("js/modules/site/views/side-bar-global.html",
    "<h3>Main Menu</h3><ul class=\"side-bar side-bar-global\"><li permission=\"'ROLE_Staff'\" permission-not=\"['ROLE_Office Administration', 'ROLE_Developer']\"><a href=# ui-sref=student-editor>Student Viewer</a></li><li permission=\"['ROLE_Office Administration', 'ROLE_Developer']\"><a href=# ui-sref=student-editor>Student Editor</a></li><li permission=\"'ROLE_Staff'\"><a href=# ui-sref=course-record>Course Records</a></li><li permission=\"'ROLE_Staff'\"><a href=# ui-sref=site.reports>Reports</a></li><li permission=\"'ROLE_Developer'\"><a href=# ui-sref=test>Tests</a></li></ul>");
  $templateCache.put("js/modules/studentEditor/views/dialogs/studentBursaryEditorDialog.html",
    "<form id=studentBursaryEditForm name=studentBursaryEditForm role=form novalidate ng-submit=ctrl.save() show-validation><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true ng-click=ctrl.cancel()>&times;</button><h4 class=modal-title>Edit StudentBursary</h4></div><div class=modal-body><div class=row><div class=\"form-group col-sm-12 col-md-6\"><label for=field_gb class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Guaranteed Bursary:</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input type=checkbox name=middleNames id=field_gb ng-model=ctrl.studentBursary.gb class=\"form-control text ui-widget-content ui-corner-all\"></div></div><div class=\"form-group col-sm-12 col-md-6\"><label for=field_db class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Discretionary Bursary:</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input type=checkbox name=db id=field_db ng-model=ctrl.studentBursary.db class=\"form-control text ui-widget-content ui-corner-all\"></div></div><div class=\"form-group col-sm-12 col-md-6\"><label for=field_freeMealsEligibility class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Free Meals Eligibility:</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input type=checkbox name=freeMealsEligibility id=field_freeMealsEligibility ng-model=ctrl.studentBursary.freeMealsEligibility class=\"form-control text ui-widget-content ui-corner-all\"></div></div><div class=\"form-group col-sm-12 col-md-6\"><label for=field_receivingFreeMeals class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Receiving Free Meals:</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input type=checkbox name=receivingFreeMeals id=field_receivingFreeMeals ng-model=ctrl.studentBursary.receivingFreeMeals class=\"form-control text ui-widget-content ui-corner-all\"></div></div></div></div><div class=modal-footer><button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=ctrl.cancel()><span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel</button> <button type=submit class=\"btn btn-primary\" ng-disabled=\"studentBursaryEditForm.$invalid || studentBursaryEditForm.$submitted\"><span class=\"glyphicon glyphicon-save\"></span> Save</button></div></form>");
  $templateCache.put("js/modules/studentEditor/views/home.html",
    "<h1>Student Record Editor</h1><div ng-show=ctrl.loaded><h3>Student Details:</h3><student-details student=ctrl.student></student-details><uib-tabset active=active><uib-tab index=0 heading=\"Personal Details\"><h3>Student Person Details</h3><div>Address:</div><div><address-editor address=ctrl.studentAddress></address-editor></div><div><person-editor person=ctrl.studentPerson></person-editor></div><div>Person Details:</div><div><person-details person=ctrl.student.person></person-details></div><h3>Corresponding Contact Details:</h3><div><contacts-table contacts=ctrl.contacts></contacts-table></div></uib-tab><uib-tab index=2 heading=\"Entry Qualifications Editor\"><h3>Student Entry Qualification Editor</h3><student-entry-qualifications-editor student-entry-qualifications=ctrl.studentEntryQualifications></student-entry-qualifications-editor></uib-tab><uib-tab index=2 heading=Enrolments><h3>Enrolment Details</h3><enrolments-table enrolments=ctrl.student.enrolments show-all=true></enrolments-table></uib-tab><uib-tab heading=\"Student Entry Qualifications\"><h3>Student Entry Qualification Details</h3><student-entry-qualifications-table student-entry-qualifications=ctrl.studentEntryQualifications></student-entry-qualifications-table></uib-tab><uib-tab index=3 heading=\"Contacts Editor\"><h3>Corresponding Contact Details</h3><contacts-editor person-id=ctrl.student.person.id></contacts-editor></uib-tab><uib-tab index=4 heading=\"Enrolment Editor\"><h3>Enrolments Editor</h3><enrolments-editor enrolments=ctrl.student.enrolments></enrolments-editor></uib-tab><uib-tab index=2 heading=\"Entry Qualifications Editor\"><h3>Entry Qualification Editor</h3><entry-qualifications-editor entry-qualifications=ctrl.entryQualifications></entry-qualifications-editor></uib-tab></uib-tabset></div>");
  $templateCache.put("js/modules/studentEditor/views/layout.html",
    "<div ui-view=search></div><div ui-view=student-editor></div>");
  $templateCache.put("js/modules/studentEditor/views/search.html",
    "<student-search on-select=ctrl.loadStudent(id) show-candidate-no=true></student-search>");
  $templateCache.put("js/modules/studentEditor/views/side-bar.html",
    "<h3>Some Menu</h3><ul><li>Search</li><li>Reports</li></ul>");
  $templateCache.put("js/modules/studentEditor/views/studentRecord.html",
    "<h3>Student Details:</h3><div class=row><div class=\"col-sm-12 col-md-6 col-lg-5\"><student-summary student=ctrl.student></student-summary><student-warning-details student-warning=ctrl.warnings></student-warning-details></div><div class=\"col-sm-12 col-md-6 col-lg-5\"><student-year-details student-year=ctrl.studentYear></student-year-details></div><div class=\"col-sm-12 col-md-12 col-lg-2\"><div class=row><student-image class=\"col-xs-6 col-sm-6 col-md-6 col-lg-12\" student-id=ctrl.student.id></student-image><div class=\"special-category-banner col-xs-4 col-sm-6 col-md-6 col-lg-12\">{{ ctrl.student._specialCategoryCode }}</div></div></div></div><div class=row><div class=\"student-reports col-sm-12 col-md-6 col-lg-5\"><report-link class=\"btn btn-sm btn-default\" report-path=\"'/CID/Timetabling/Timetable Student - Square'\" report-toolbar=true report-params=\"'StudentList='+ctrl.student.id\" include-year=true>Student Timetable</report-link><report-link class=\"btn btn-sm btn-default\" report-path=\"'/CID/Attendance Monitoring/Student Overall Attendance By Course'\" report-toolbar=false report-params=\"'AdmNo='+ctrl.student.id\">Attendance by Course</report-link><report-link class=\"btn btn-sm btn-default\" report-path=\"'/CID/Interim Reports/Interim Report'\" report-toolbar=true report-params=\"'Students='+ctrl.student.id\">Interim Report Viewer</report-link><word-generator permission=\"'ROLE_Office Administration'\" student-id=ctrl.student.id></word-generator><report-link class=\"btn btn-sm btn-default\" report-path=\"'/CID/Exams/Student Exam Timetables'\" report-format=\"'PDF'\" report-params=\"'Students='+ctrl.student.id+'&ExamSeriesCharacter=B'\" include-year=true>November Exam Timetable</report-link><report-link class=\"btn btn-sm btn-default\" report-path=\"'/CID/Exams/Student Exam Timetables'\" report-format=\"'PDF'\" report-params=\"'Students='+ctrl.student.id+'&ExamSeriesCharacter=6'\" include-year=true>Summer Exam Timetable</report-link><div class=btn-group><button class=\"btn btn-sm btn-default dropdown-toggle\" type=button data-toggle=dropdown aria-haspopup=true aria-expanded=true><span class=\"glyphicon glyphicon-print\"></span> Print Forms <span class=caret></span></button><ul class=dropdown-menu aria-labelledby=dropdownMenuDivider><li><report-link report-path=\"'/CID/Students/Course Change Form'\" report-format=\"'PDF'\" report-params=\"'StudentList='+ctrl.student.id\" include-year=true>Course Change Form</report-link></li><li role=separator class=divider></li><li class=dropdown-header>Change of Status Forms</li><li><report-link report-path=\"'/CID/Attendance Monitoring/Change Of Status Form'\" report-format=\"'PDF'\" report-params=\"'Students='+ctrl.student.id + '&ChangeType=AM/PM'\" include-year=false>NP/NE For Attendance/Punctuality</report-link></li><li><report-link report-path=\"'/CID/Attendance Monitoring/Change Of Status Form'\" report-format=\"'PDF'\" report-params=\"'Students='+ctrl.student.id + '&ChangeType=CM'\" include-year=false>NP/NE For Subject</report-link></li><li><report-link report-path=\"'/CID/Attendance Monitoring/Change Of Status Form'\" report-format=\"'PDF'\" report-params=\"'Students='+ctrl.student.id + '&ChangeType=RDA/RDP'\" include-year=false>RISK OF DISCONTINUATION Attendance/Punctuality</report-link></li><li><report-link report-path=\"'/CID/Attendance Monitoring/Change Of Status Form'\" report-format=\"'PDF'\" report-params=\"'Students='+ctrl.student.id + '&ChangeType=RDC'\" include-year=false>RISK OF DISCONTINUATION For Subject</report-link></li><li role=separator class=divider></li><li><report-link report-path=\"'/CID/Students/Early Leavers Form'\" report-format=\"'PDF'\" report-params=\"'student='+ctrl.student.id\" include-year=false>Early Leavers Form</report-link></li></ul></div></div><div class=\"student-actions col-sm-12 col-md-6 col-lg-7\" permission=\"'ROLE_Office Administration'\"><student-summary-editor student-id=ctrl.student.id student=ctrl.student></student-summary-editor><student-year-editor student-id=ctrl.student.id year-id=ctrl.year.id student-year=ctrl.studentYear></student-year-editor><student-warning-editor student-id=ctrl.student.id student-warning=ctrl.warnings></student-warning-editor><student-bursary-editor student-bursary=ctrl.studentBursary></student-bursary-editor><student-learning-support-editor student-id=ctrl.student.id student-learning-support=ctrl.learning-supports></student-learning-support-editor><student-withdrawal student-id=ctrl.studentYear.studentId year-id=ctrl.studentYear.yearId></student-withdrawal></div><div class=\"student-actions col-sm-12 col-md-7 col-lg-8\" permission=\"'ROLE_Careers'\"><student-withdrawal student-id=ctrl.studentYear.studentId year-id=ctrl.studentYear.yearId></student-withdrawal></div></div><div class=row><div class=\"col-sm-12 col-md-12\"><p>&nbsp;</p></div></div><uib-tabset active=activeTab><uib-tab classes=tab-sm index=\"'personal'\" heading=\"Personal Details\"><div class=container-fluid><div class=row><h3 class=\"col-xs-12 col-md-12\">Student Person Details</h3></div><div class=row><person-details class=\"col-xs-12 col-md-6\" person=ctrl.student.person show-all=true></person-details><div class=\"col-xs-12 col-md-6\"><div class=row><div class=col-xs-4>Address:</div><div class=col-xs-8><address-details permission permission-not=\"'ROLE_Office Administration'\" address=ctrl.studentAddress></address-details><address-editor permission=\"'ROLE_Office Administration'\" address-id=ctrl.studentAddress.id address=ctrl.studentAddress></address-editor></div></div><div class=row><div class=col-xs-4>Previous School:</div><div class=col-xs-8>{{ ctrl.student._previousSchoolName }}</div></div></div></div><div class=row permission=\"'ROLE_Office Administration'\"><person-editor class=\"col-xs-12 col-md-6\" person=ctrl.student.person></person-editor></div><div class=row><div class=col-md-12><h3>Contact Details</h3><contacts-table permission permission-not=\"'ROLE_Office Administration'\" contacts=ctrl.contacts></contacts-table><contacts-editor permission=\"'ROLE_Office Administration'\" person-id=ctrl.student.person.id contacts=ctrl.contacts></contacts-editor></div></div><div class=row><div class=col-md-6 permission=\"['ROLE_Office Administration', 'ROLE_First Aid Coordinator', 'ROLE_Pastoral']\"><h3>Special Categories</h3><student-special-category-editor permission=\"'ROLE_Office Administration'\" student-id=ctrl.student.id special-categories=ctrl.specialCategories></student-special-category-editor><student-special-category-details permission permission-not=\"'ROLE_Office Administration'\" special-categories=ctrl.specialCategories></student-special-category-details></div><div class=col-md-6 permission=\"['ROLE_Office Administration', 'ROLE_First Aid Coordinator', 'ROLE_Pastoral']\"><h3>Medical Notes</h3><medical-notes-details permission permission-not=\"['ROLE_Office Administration', 'ROLE_First Aid Coordinator']\" student=ctrl.student></medical-notes-details><medical-notes-editor permission=\"['ROLE_Office Administration', 'ROLE_First Aid Coordinator']\" student-id=ctrl.student.id student=ctrl.student></medical-notes-editor></div><div class=\"student-busary-info col-md-6\"><div><h3>Student Bursary</h3></div><student-bursary-details student-bursary=ctrl.studentBursary></student-bursary-details></div></div><div class=row><div class=\"college-fund-payments col-md-12\"><h3>College Fund Payments</h3><student-college-fund-paid student-college-fund-paid=ctrl.studentCollegeFundPaid></student-college-fund-paid><college-fund-payment-details permission permission-not=\"['ROLE_Office Administration']\" college-fund-payment=ctrl.collegeFundPayments></college-fund-payment-details><college-fund-payment-editor permission=\"['ROLE_Office Administration']\" student-id=ctrl.student.id college-fund-payment=ctrl.collegeFundPayments></college-fund-payment-editor></div></div></div></uib-tab><uib-tab classes=tab-sm index=\"'enrolments'\" heading=Enrolments><div class=container-fluid><div class=row><div class=col-md-12 permission=\"['ROLE_Office Administration','ROLE_Exams Officer']\"><h3>Enrolments Editor</h3><enrolments-editor student-id=ctrl.student.id enrolments=ctrl.enrolments show-year=true show-status=true show-monitoring=true></enrolments-editor><enrolment-manager student=ctrl.student enrolments=ctrl.enrolments permission=\"'ROLE_Office Administration'\"></enrolment-manager><report-link class=\"btn btn-sm btn-default\" report-path=\"'/CID/Students/Course Change Form'\" report-format=\"'PDF'\" report-params=\"'StudentId='+ctrl.student.id\" permission=\"'ROLE_Office Administration'\">Course Change Form</report-link></div><div class=col-md-12 permission permission-not=\"['ROLE_Office Administration','ROLE_Exams Officer']\"><h3>Enrolment Details</h3><enrolments-table enrolments=ctrl.enrolments show-year=true show-status=true show-monitoring=true></enrolments-table><enrolment-manager student=ctrl.student enrolments=ctrl.enrolments permission=\"'ROLE_Enrolment Manager'\"></enrolment-manager></div></div></div></uib-tab><uib-tab classes=tab-sm index=\"'qoe'\" heading=\"Entry Qualifications\"><div class=container-fluid><h3>Student Entry Qualifications</h3><student-entry-qualifications-editor permission=\"'ROLE_Office Administration'\" student-id=ctrl.student.id student-entry-qualifications=ctrl.studentEntryQualifications></student-entry-qualifications-editor><student-entry-qualifications-table permission permission-not=\"'ROLE_Office Administration'\" student-entry-qualifications=ctrl.studentEntryQualifications></student-entry-qualifications-table></div></uib-tab><uib-tab classes=tab-sm index=\"'exam-entry'\" heading=\"Exam Entry Details\" permission=\"'ROLE_Exams Officer'\"><student-option-editor-table student-option-entries=ctrl.studentOptionEntries student-id=ctrl.student.id></student-option-editor-table></uib-tab><uib-tab classes=tab-sm index=\"'exam-results'\" heading=\"Exam Results\"><div class=col-md-12 permission=\"'ROLE_Exams Officer'\"><h3>Exam Results - Editor</h3><exam-results-editor results=ctrl.examResults show-all=true></exam-results-editor></div><div class=col-md-12 permission permission-not=\"'ROLE_Exams Officer'\"><h3>Exam Results</h3><exam-results-table results=ctrl.examResults show-year=true show-board=true></exam-results-table></div><div class=col-md-12><h3>Exam Results - Archive</h3><external-results-archive-table external-results-archive=ctrl.externalResultsArchive></external-results-archive-table></div></uib-tab><uib-tab classes=tab-sm index=\"'register'\" heading=Register><div class=container-fluid><h3>Student's Register</h3><div class=row><div class=col-sm-10><fieldset>Display options:</fieldset><ul class=list-inline><li><input type=checkbox ng-model=showFullAttendanceData> Show All Attendance Data</li></ul></div><div class=col-md-12><student-overall-attendance-details student-overall-attendance=ctrl.studentOverallAttendance show-all=showFullAttendanceData></student-overall-attendance-details></div></div><div class=row><div class=col-md-12><registers-editor permission=\"'ROLE_Office Administration'\" registers=ctrl.registers></registers-editor><registers-table permission permission-not=\"'ROLE_Office Administration'\" registers=ctrl.registers></registers-table></div></div></div></uib-tab><uib-tab classes=tab-sm index=\"'ilp'\" heading=\"ILP Interviews\"><div class=container-fluid><h3>ILP Interviews</h3><div class=row><div class=col-sm-10><fieldset>Display options:</fieldset><ul class=list-inline><li><input type=checkbox ng-model=showCourse ng-init=\"showCourse = true\"> Show Course</li><li><input type=checkbox ng-model=showCourseGroup> Show Course Group</li><li><input type=checkbox ng-model=showILPTargets> Show Targets</li></ul></div><div class=col-sm-2><button type=button class=\"btn btn-sm btn-primary\" ng-click=\"showILPFilters = !showILPFilters\">Filters <span class=\"glyphicon glyphicon-chevron-right\" ng-hide=showILPFilters></span> <span class=\"glyphicon glyphicon-chevron-down\" ng-show=showILPFilters></span></button></div></div><div class=\"filter-box ilp-interview-filters row\" ng-show=showILPFilters><fieldset>Filters:</fieldset><div class=\"form-group col-xs-12 col-sm-6 col-md-3\"><label for=title class=\"col-xs-4 control-label\">Interview Type</label><div class=col-xs-8><ilp-interview-type-selection class=form-control ng-model=ctrl.ilpFilter.typeId></ilp-interview-type-selection></div></div><div class=\"form-group col-xs-12 col-sm-6 col-md-3\"><label for=title class=\"col-xs-4 control-label\">Course Spec</label><div class=col-xs-8><input class=form-control ng-model=ctrl.ilpFilter._courseSpec></div></div><div class=\"form-group col-xs-12 col-sm-6 col-md-3\"><label for=title class=\"col-xs-4 control-label\">Course Description</label><div class=col-xs-8><input class=form-control ng-model=ctrl.ilpFilter._courseDescription></div></div><div class=\"form-group col-xs-12 col-sm-6 col-md-3\"><label for=title class=\"col-xs-4 control-label\">Staff</label><div class=col-xs-8><input class=form-control ng-model=ctrl.ilpFilter._staffName></div></div></div><div class=row><ilp-interviews-table ilp-interviews=ctrl.ilpInterviews filter=ctrl.ilpFilter show-course=showCourse show-course-group=showCourseGroup show-staff=true show-targets=showILPTargets></ilp-interviews-table></div></div></uib-tab><uib-tab classes=tab-sm index=\"'learning-support'\" heading=\"Learning Support\"><div class=container-fluid><h3>Learning Support</h3><student-learning-support-details student-learning-support=ctrl.learningSupport></student-learning-support-details></div><div class=container-fluid><h3>Learning Support ILP</h3><ilp-interviews-table ilp-interviews=ctrl.ilpInterviews filter=\"'Learning Support'\" show-staff=true show-letter-home=false></ilp-interviews-table></div></uib-tab><uib-tab classes=tab-sm index=\"'ir'\" heading=\"Interim Reports\"><div class=container-fluid><h3>Interim Reports</h3><div class=row><div class=col-md-8><fieldset>Display options:</fieldset><ul class=list-inline><li><input type=checkbox ng-model=showIRAttendanceFigures> Show Attendance Figures</li><li><input type=checkbox ng-model=showKeyAssessments> Show Key Assessments</li></ul></div><div class=col-md-4><report-link class=\"btn btn-sm btn-default\" report-path=\"'/CID/Interim Reports/Student Interim Report Summary for Student List'\" report-toolbar=false report-params=\"'Student='+ctrl.student.id\" include-year=true>Interim Report Summary</report-link></div></div><div class=row><student-interim-reports-table student-interim-reports=ctrl.interimReports show-attendance-figures=showIRAttendanceFigures show-key-assessments=showKeyAssessments></student-interim-reports-table></div></div></uib-tab><uib-tab classes=tab-sm index=\"'concessions'\" heading=\"Concession Details\" permission=\"['ROLE_Exams Officer']\"><student-concession-type-table student-id=ctrl.student.id show-status=true></student-concession-type-table></uib-tab><uib-tab classes=tab-sm index=\"'alternative-uci'\" heading=\"Alternative UCIs\" permission=\"'ROLE_Exams Officer'\"><student-alternative-uci-table student-id=ctrl.student.id student-alternative-ucis=ctrl.studentAlternativeUcis show-status=true></student-alternative-uci-table></uib-tab><uib-tab classes=tab-sm index=\"'admissions'\" heading=\"Admissions Details\" permission=\"'ROLE_Office Administration'\"><div class=container-fluid><student-admissions-details student-admissions=ctrl.studentAdmissions></student-admissions-details></div></uib-tab><uib-tab classes=tab-sm index=\"'warning-code-change'\" heading=\"Warning Code Change\" permission=\"'ROLE_Office Administration'\"><div class=container-fluid><warning-code-change-details student-id=ctrl.student.id warning-code-changes=ctrl.warningCodeChanges></warning-code-change-details></div></uib-tab><uib-tab classes=tab-sm index=\"'id-violations'\" heading=\"ID Violations\" permission=\"['ROLE_Developer','ROLE_ID Violation']\"><div class=container-fluid><div class=row><h3>ID Violation Information</h3></div><div class=row><ilp-interviews-table ilp-interviews=ctrl.ilpInterviews filter=\"'ID Violation'\" show-staff=false show-course=false show-letter-home=false></ilp-interviews-table></div><div class=row><identification-violations-editor student-id=ctrl.student.id identification-violations=ctrl.identificationViolations></identification-violations-editor></div></div></uib-tab><uib-tab classes=tab-sm index=\"'learning-support-costs'\" heading=\"Learning Support Costs\" permission=\"['ROLE_Developer','ROLE_Learning Support']\"><div class=container-fluid><div class=row><h3>Student Learning Support Costs</h3><student-learning-support-costs-editor student-id=ctrl.student.id student-learning-support-costs=ctrl.studentLearningSupportCosts></student-learning-support-costs-editor></div></div></uib-tab><uib-tab classes=tab-sm index=\"'learning-support-visits'\" heading=\"Learning Support Visits\"><div class=container-fluid><div class=row><h3>Student Learning Support Visits</h3><student-learning-support-visits-editor permission=\"'ROLE_Office Administration'\" student-id=ctrl.student.id student-learning-support-visits=ctrl.studentLearningSupportVisits></student-learning-support-visits-editor></div></div></uib-tab></uib-tabset>");
  $templateCache.put("js/modules/studentEmailer/views/emailer.html",
    "<uib-tabset active=active><uib-tab index=0 heading=\"Student Selection\"><div class=student-emailer-selection><div class=row><div class=col-md-12><h1>Filters</h1><div class=\"form-group col-xs-12 col-md-6\"><label class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Class Mask:</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input class=form-control ng-model=ctrl.filters.courseGroupMask></div></div><div class=\"form-group col-xs-12 col-md-6\"><label class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Student Type Mask:</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input class=form-control ng-model=ctrl.filters.studentTypeMask></div></div><div class=\"form-group col-xs-12 col-md-6\"><label class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Tutor Group Mask:</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input class=form-control ng-model=ctrl.filters.tutorGroupMask></div></div><div class=\"form-group col-xs-12 col-md-6\"><label class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Include Withdrawn:</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input type=checkbox class=form-control ng-model=ctrl.filters.includeWithdrawn></div></div><button class=\"btn btn-sm btn-default\" ng-click=ctrl.applyFilter()>Apply Filter</button></div></div><div class=row><div class=col-md-12><select id=student-email-list-duallist name=student-selector multiple ng-model=ctrl.selected ng-options=\"student.studentId as student.displayText for student in ctrl.studentList | orderBy : 'displayText'\" bs-duallistbox filter=true select-min-height=200></select><div permission=\"'ROLE_Developer'\">{{ ctrl.selected }}</div></div></div><div class=row><div class=col-md-12><h4>Email Options:</h4><div class=\"form-group col-xs-12 col-md-6\"><label class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Email Students:</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input type=checkbox ng-model=ctrl.includeStudents></div></div><div class=\"form-group col-xs-12 col-md-6\"><label class=\"col-xs-4 col-sm-4 col-md-4 control-label\">Email Parents:</label><div class=\"col-xs-8 col-sm-8 col-sm-8 col-md-8\"><input type=checkbox ng-model=ctrl.includeParents></div></div></div></div></div></uib-tab><uib-tab index=1 heading=\"Email Details\"><div class=student-emailer-compose><textarea ckeditor=ctrl.editorOptions ng-model=ctrl.emailMessage></textarea><br><br><textarea class=form-control ng-model=ctrl.emailMessage></textarea></div></uib-tab></uib-tabset><button class=\"btn btn-primary\" ng-click=ctrl.sendEmail()>Send Email</button>");
  $templateCache.put("js/modules/studentEmailer/views/menu.html",
    "");
  $templateCache.put("js/modules/tests/views/address.html",
    "<h3>Address Editor</h3><input ng-model=ctrl.addressId><button class=\"btn btn-sm\" ng-click=ctrl.getAddress()>Get Address</button><br><h1>Address Details</h1><address-details address=ctrl.address></address-details><h1>Address Editor</h1><address-editor address-id=ctrl.addressId address=ctrl.address></address-editor>");
  $templateCache.put("js/modules/tests/views/admissions.html",
    "<h4>Admissions TEST</h4><student-college-fund-paid student-college-fund-paid=ctrl.studentCollegeFundPaid></student-college-fund-paid>");
  $templateCache.put("js/modules/tests/views/contacts.html",
    "<h1>Test Contact Details</h1><input ng-model=ctrl.personId><button class=\"btn btn-sm\" ng-click=ctrl.getContacts()>Get Contacts</button><br><h3>Corresponding Contact Details (with personId and contacts)</h3><contacts-editor person-id=ctrl.personId contacts=ctrl.contacts></contacts-editor><h3>Corresponding Contact Details (with just contacts)</h3><contacts-editor contacts=ctrl.contacts></contacts-editor>");
  $templateCache.put("js/modules/tests/views/correspondences.html",
    "<h1>Correspondence Table</h1><input ng-model=ctrl.studentId><button class=\"btn btn-sm\" ng-click=ctrl.getCorrespondences()>Get Correspondence</button><br><correspondences-table correspondences=ctrl.correspondences></correspondences-table>");
  $templateCache.put("js/modules/tests/views/details.html",
    "<h1>Test Page</h1><div class=row><div class=col-md-6><h2>Person Details Tests</h2><h3>Person Details (from person object)</h3><person-details person=ctrl.person></person-details><h3>Person Details (with dob)</h3><person-details person=ctrl.person show-dob=true></person-details><h3>Person Details (with gender)</h3><person-details person=ctrl.person show-gender=true></person-details><h3>Person Details (with all)</h3><person-details person=ctrl.person show-all=true></person-details><h3>Person Details (with no data)</h3><person-details></person-details><h3>Person Details (transclude)</h3><person-details person=ctrl.person>Testing transclude settings</person-details></div><div class=col-md-6><h2>Student Details Tests</h2><h3>Student Details (from student object)</h3><student-details student=ctrl.student></student-details><h3>Student Details (from student object with all)</h3><student-details student=ctrl.student show-all=true></student-details><h3>Student Details (from student object with dob)</h3><student-details student=ctrl.student show-dob=true></student-details><h3>Student Details (from student object with gender)</h3><student-details student=ctrl.student show-gender=true></student-details></div></div>");
  $templateCache.put("js/modules/tests/views/enrolmentChecker.html",
    "<ul><li ng-repeat=\"(i, spec) in ctrl.ttCheck.specs track by $index\"><input ng-model=ctrl.ttCheck.specs[i]> <button class=\"btn btn-sm\" ng-click=ctrl.removeRequest(spec)>X</button></li></ul>New Request: <input ng-model=ctrl.newRequest> <button class=\"btn btn-sm\" ng-click=ctrl.addRequest(ctrl.newRequest)>Add Request</button> Programme Size: {{ ctrl.requestCount() }}<br><button class=\"btn btn-sm\" ng-click=ctrl.check()>Check</button><br><div><uib-pagination ng-show=\"ctrl.totalItems > 0\" total-items=ctrl.totalItems items-per-page=ctrl.size ng-model=ctrl.page max-size=8 boundary-links=true class=pagination-sm></uib-pagination><table class=\"table table-responsive table-stripped\"><thead><th ng-repeat=\"request in ctrl.ttCheck.specs track by $index\">Option {{ $index + 1 }}</th><th>Actions</th></thead><tbody><tr ng-repeat=\"option in ctrl.ttCheck.options | paginate:ctrl.page:ctrl.size\"><td ng-repeat=\"wc in option.courseGroups\">{{ wc.spec }} ({{ wc.currentStudents }})</td><td><button class=\"btn btn-sm\" ng-click=ctrl.selectOption(option)>Select</button></td></tr></tbody></table></div>");
  $templateCache.put("js/modules/tests/views/externalResultsArchive.html",
    "<h1>External Results Archive Details</h1><external-results-archive-table external-results-archive=ctrl.externalResultsArchive></external-results-archive-table>");
  $templateCache.put("js/modules/tests/views/iLPInterviews.html",
    "<h1>ILPInterview Table</h1><input ng-model=ctrl.studentId><button class=\"btn btn-sm\" ng-click=ctrl.getILPInterviews()>Get ILPInterview</button><br><ilp-interviews-table ilp-interviews=ctrl.ilpInterviews show-all=true></ilp-interviews-table>");
  $templateCache.put("js/modules/tests/views/lookups.html",
    "<h1>Test Page</h1><h2>Searches</h2><h4>Title</h4>Title 1:<title-lookup title-id=1></title-lookup><br>Title 2:<title-lookup title-id=2></title-lookup><br>Title 3:<title-lookup title-id=3></title-lookup><br>Title 4:<title-lookup title-id=4></title-lookup><br>Title 5555:<title-lookup title-id=5555></title-lookup><br><h4>Address</h4>Address 1:<address-lookup address-id=1></address-lookup><br>Address 2:<address-lookup address-id=2></address-lookup><br><h4>Attendance Code</h4>AttendanceCode 1:<attendance-code-lookup attendance-code-id=1></attendance-code-lookup><br>AttendanceCode 2:<attendance-code-lookup attendance-code-id=2></attendance-code-lookup><br><h4>ContactType</h4>ContactType 1:<contact-type-lookup contact-type-id=1></contact-type-lookup><br>ContactType 2:<contact-type-lookup contact-type-id=2></contact-type-lookup><br>ContactType 3:<contact-type-lookup contact-type-id=3></contact-type-lookup><br><h4>AcademicYear</h4>AcademicYear 1:<academic-year-lookup academic-year-id=15></academic-year-lookup><br>AcademicYear 2:<academic-year-lookup academic-year-id=16></academic-year-lookup><br><h4>ApplicationStatus</h4>ApplicationStatus 1:<application-status-lookup application-status-id=1></application-status-lookup><br>ApplicationStatus 2:<application-status-lookup application-status-id=2></application-status-lookup><br><h4>CollegeFundPaid</h4>CollegeFundPaid 1:<college-fund-paid-lookup college-fund-paid-id=1></college-fund-paid-lookup><br>CollegeFundPaid 2:<college-fund-paid-lookup college-fund-paid-id=2></college-fund-paid-lookup><br><h4>Ethnicity</h4>Ethnicity 1:<ethnicity-lookup ethnicity-id=31></ethnicity-lookup><br>Ethnicity 2:<ethnicity-lookup ethnicity-id=32></ethnicity-lookup><br><h4>Gender</h4>Gender 1:<gender-lookup gender-id=1></gender-lookup><br>Gender 2:<gender-lookup gender-id=2></gender-lookup><br><h4>Level</h4>Level 1:<level-lookup level-id=1></level-lookup><br>Level 2:<level-lookup level-id=2></level-lookup><br><h4>Nationality</h4>Nationality 1:<nationality-lookup nationality-id=1></nationality-lookup><br>Nationality 2:<nationality-lookup nationality-id=2></nationality-lookup><br><h4>OfferType</h4>OfferType 1:<offer-type-lookup offer-type-id=1></offer-type-lookup><br>OfferType 2:<offer-type-lookup offer-type-id=2></offer-type-lookup><br><h4>SchoolType</h4>SchoolType 1:<school-type-lookup school-type-id=1></school-type-lookup><br>SchoolType 2:<school-type-lookup school-type-id=2></school-type-lookup><br><h4>StudentType</h4>StudentType 1:<student-type-lookup student-type-id=1></student-type-lookup><br>StudentType 2:<student-type-lookup student-type-id=2></student-type-lookup><br><h4>EntryQualificationType</h4>EntryQualificationType 1:<entry-qualification-type-lookup entry-qualification-type-id=1></entry-qualification-type-lookup><br>EntryQualificationType 2:<entry-qualification-type-lookup entry-qualification-type-id=2></entry-qualification-type-lookup><br><h4>EntryQualification</h4>EntryQualification 1:<entry-qualification-lookup entry-qualification-id=1></entry-qualification-lookup><br>EntryQualification 2:<entry-qualification-lookup entry-qualification-id=2></entry-qualification-lookup><br><h4>AimType</h4>AimType 1:<aim-type-lookup aim-type-id=1></aim-type-lookup><br>AimType 2:<aim-type-lookup aim-type-id=3></aim-type-lookup><br><h4>NoteType</h4>NoteType 1:<note-type-lookup note-type-id=1></note-type-lookup><br>NoteType 2:<note-type-lookup note-type-id=2></note-type-lookup><br><h4>ProgrammeType</h4>ProgrammeType 1:<programme-type-lookup programme-type-id=1></programme-type-lookup><br>ProgrammeType 2:<programme-type-lookup programme-type-id=2></programme-type-lookup><br><h4>StaffType</h4>StaffType 1:<staff-type-lookup staff-type-id=1></staff-type-lookup><br>StaffType 2:<staff-type-lookup staff-type-id=2></staff-type-lookup><br><h4>PossibleGrade</h4>PossibleGrade 1:<possible-grade-lookup possible-grade-id=1></possible-grade-lookup><br>PossibleGrade 2:<possible-grade-lookup possible-grade-id=2></possible-grade-lookup><br><h4>RestrictedUseIndicator</h4>RestrictedUseIndicator 1:<restricted-use-indicator-lookup restricted-use-indicator-id=1></restricted-use-indicator-lookup><br>RestrictedUseIndicator 2:<restricted-use-indicator-lookup restricted-use-indicator-id=2></restricted-use-indicator-lookup><br><h4>SchoolPriority</h4>SchoolPriority 1:<school-priority-lookup school-priority-id=1></school-priority-lookup><br>SchoolPriority 2:<school-priority-lookup school-priority-id=2></school-priority-lookup><br><h4>SpecialCategory</h4>SpecialCategory 1:<special-category-lookup special-category-id=1></special-category-lookup><br>SpecialCategory 2:<special-category-lookup special-category-id=2></special-category-lookup><br><h4>CompletionStatus</h4>CompletionStatus 1:<completion-status-lookup completion-status-id=1></completion-status-lookup><br>CompletionStatus 2:<completion-status-lookup completion-status-id=2></completion-status-lookup><br><h4>Department</h4>Department 1:<department-lookup department-id=1></department-lookup><br>Department 2:<department-lookup department-id=2></department-lookup><br><h4>ExamBoard</h4>ExamBoard 1:<exam-board-lookup exam-board-id=1></exam-board-lookup><br>ExamBoard 2:<exam-board-lookup exam-board-id=10></exam-board-lookup><br><h4>FundingModel</h4>FundingModel 1:<funding-model-lookup funding-model-id=1></funding-model-lookup><br>FundingModel 2:<funding-model-lookup funding-model-id=2></funding-model-lookup><br><h4>Outcome</h4>Outcome 1:<outcome-lookup outcome-id=1></outcome-lookup><br>Outcome 2:<outcome-lookup outcome-id=2></outcome-lookup><br><h4>Period</h4>Period 1:<period-lookup period-id=1></period-lookup><br>Period 2:<period-lookup period-id=2></period-lookup><br><h4>PriorAttainment</h4>PriorAttainment 1:<prior-attainment-lookup prior-attainment-id=1></prior-attainment-lookup><br>PriorAttainment 2:<prior-attainment-lookup prior-attainment-id=2></prior-attainment-lookup><br><h4>Room</h4>Room 1:<room-lookup room-id=1></room-lookup><br>Room 2:<room-lookup room-id=2></room-lookup><br><h4>School</h4>School 1:<school-lookup school-id=1></school-lookup><br>School 2:<school-lookup school-id=2></school-lookup><br><h4>Subject</h4>Subject 1:<subject-lookup subject-id=1></subject-lookup><br>Subject 2:<subject-lookup subject-id=2></subject-lookup><br><h4>TutorGroup</h4>TutorGroup 1:<tutor-group-lookup tutor-group-id=1></tutor-group-lookup><br>TutorGroup 2:<tutor-group-lookup tutor-group-id=2></tutor-group-lookup><br><h4>WithdrawalReason</h4>WithdrawalReason 1:<withdrawal-reason-lookup withdrawal-reason-id=1></withdrawal-reason-lookup><br>WithdrawalReason 2:<withdrawal-reason-lookup withdrawal-reason-id=2></withdrawal-reason-lookup><br><h4>YearGroup</h4>YearGroup 1:<year-group-lookup year-group-id=1></year-group-lookup><br>YearGroup 2:<year-group-lookup year-group-id=2></year-group-lookup><br><h4>Correspondence Type</h4>CorrespondenceType 1:<correspondence-type-lookup correspondence-type-id=1></correspondence-type-lookup><br>CorrespondenceType 2:<correspondence-type-lookup correspondence-type-id=2></correspondence-type-lookup><br><h4>Letter Type</h4>LetterType 1:<letter-type-lookup letter-type-id=1></letter-type-lookup><br>LetterType 2:<letter-type-lookup letter-type-id=2></letter-type-lookup><br>");
  $templateCache.put("js/modules/tests/views/menu.html",
    "<h3>Test Menu</h3><ul class=side-bar><li><a ui-sref=test.admissions>Admissions</a></li><li><a ui-sref=test.selections>Selections</a></li><li><a ui-sref=test.lookups>Lookups</a></li><li><a ui-sref=test.searches>Searches</a></li><li><a ui-sref=test.details>Details Tests</a></li><li><a ui-sref=test.tables>Tables Tests</a></li><li><a ui-sref=test.other>Other Tests</a></li><li><a ui-sref=test.contacts>Contacts Tests</a></li><li><a ui-sref=test.address>Address Tests</a></li><li><a ui-sref=test.studentEntryQualification>StudentEntryQualification Test</a></li><li><a ui-sref=test.registers>Register Tests</a></li><li><a ui-sref=test.correspondences>Correspondence Tests</a></li><li><a ui-sref=test.iLPInterviews>ILPInterview Tests</a></li><li><a ui-sref=test.studentSpecialCategory>StudentSpecialCategory Tests</a></li><li><a ui-sref=test.studentWarning>Student Warning Test</a></li><li><a ui-sref=test.studentBursary>Student Bursary Test</a></li><li><a ui-sref=test.studentYear>Student Year Test</a></li><li><a ui-sref=test.studentAdmissions>Student Admissions Test</a></li><li><a ui-sref=test.externalResultsArchive>ExternalResultsArchive Test</a></li><li><a ui-sref=test.studentInterimReport>StudentInterimReportTest</a></li><li><a ui-sref=test.studentLearningSupport>StudentLearningSupportTest</a></li><li><a ui-sref=test.studentCollegeFundPayment>CollegeFundPaymentTest</a></li><li><a ui-sref=test.person>Person Tests</a></li><li><a ui-sref=test.wordGenerator>WordGeneratorTests</a></li><li><a ui-sref=test.studentSummary>Student Summary Test</a></li><li><a ui-sref=test.studentContactPreferences>Student Contact Preferences Test</a></li><li><a ui-sref=test.studentOverallAttendance>Student OverallAttendance Test</a></li><li><a ui-sref=test.studentMedicalNotes>MedicalNotes Test</a></li><li><a ui-sref=test.tutorGroupRemarkPermissions>Student Remark Permission Test</a></li><hr><li><a ui-sref=test.enrolmentChecker>Enrolment Checker</a></li><li><a ui-sref=emailer>Emailer</a></li></ul>");
  $templateCache.put("js/modules/tests/views/other.html",
    "<h1>Test Page</h1><div ng-init=\"studentId = 160002; personId = 10002\"><h2>Other Tests</h2>Student Id: <input ng-model=studentId>Person Id: <input ng-model=personId><student-withdrawal student=ctrl.student></student-withdrawal><button ng-click=ctrl.gotoStudent(studentId)>Go To Student ng-click</button> <button ui-sref=\"student-viewer.view({studentId: studentId})\">Go To Student ui-sref</button><h3 data-toggle=collapse data-target=#test-1>Person Details</h3><person-details person=ctrl.person id=test-1 class=collapse></person-details><h3 data-toggle=collapse data-target=#test-2>Student Details (from student object)</h3><student-details student=ctrl.student show-all=true id=test-2 class=collapse></student-details><h3 data-toggle=collapse data-target=#test-3>Student Details Lookup - show-all (from student-id)</h3><student-details-lookup student-id=studentId show-all=true id=test-3 class=collapse></student-details-lookup><h3 data-toggle=collapse data-target=#test-4>Person Contact Details Lookup</h3><person-contact-details-lookup person-id=personId id=test-4 class=collapse></person-contact-details-lookup></div><div><report-link report-path=\"'/CID/Students/Course Change Form'\" report-params=\"'StudentId='+studentId\">Test Report (Report Params as String)</report-link><report-link report-path=\"'/CID/Students/Course Change Form'\" report-params=reportParamsObj>Test Report (Report Params as Object)</report-link></div>");
  $templateCache.put("js/modules/tests/views/person.html",
    "<h3>Person Editor</h3><input class=input-control ng-model=ctrl.personId><button class=\"btn btn-sm btn-default\" ng-click=ctrl.getPerson()>Get Person</button><br><person-details person=ctrl.person show-all=true></person-details><person-editor person-id=ctrl.personId person=ctrl.person></person-editor>");
  $templateCache.put("js/modules/tests/views/registers.html",
    "<h1>Register Table</h1><input ng-model=ctrl.studentId><button class=\"btn btn-sm\" ng-click=ctrl.getRegisters()>Get Register</button><br><registers-table registers=ctrl.registers></registers-table><h3>Register Editor</h3><registers-editor student-id=ctrl.studentId registers=ctrl.registers></registers-editor>");
  $templateCache.put("js/modules/tests/views/searches.html",
    "<h1>Test Page</h1><h2>Searches</h2><h3>Student Search</h3><student-search on-select=ctrl.loadStudent(id) student=ctrl.student></student-search><student-details student=ctrl.student ng-show=ctrl.student.referenceNo></student-details>");
  $templateCache.put("js/modules/tests/views/selections.html",
    "<h1>Test Page</h1><div ng-init=\"setReadonly = false\"><h2>Selection Boxes</h2>Read Only: <input type=checkbox ng-model=setReadonly> {{ setReadonly }}<br><br>Academic Year:<academic-year-selection id=academicYear readonly ng-model=academicYear></academic-year-selection><span>Data: {{ academicYear }}</span><br>Aim Type:<aim-type-selection id=aimType readonly ng-model=aimType></aim-type-selection><span>Data: {{ aimType }}</span><br>Destination:<destination-selection id=destination readonly ng-model=destination></destination-selection><span>Data: {{ destination }}</span><br>Attendance code:<attendance-code-selection id=attendanceCode readonly ng-model=attendanceCode></attendance-code-selection><span>Data: {{ attendanceCode }}</span><br>Application Status:<application-status-selection id=appStat readonly ng-model=appStat></application-status-selection><span>Data: {{ appStat }}</span><br>Block:<block-selection id=block readonly ng-model=block></block-selection><span>Data: {{ block }}</span><br>College Fund Paid:<college-fund-paid-selection id=cfp readonly ng-model=cfp></college-fund-paid-selection><span>Data: {{ cfp }}</span><br>Completion Status:<completion-status-selection id=completionStat readonly ng-model=completionStat></completion-status-selection><span>Data: {{ completionStat }}</span><br>Contact Type:<contact-type-selection id=contactType readonly ng-model=contactType></contact-type-selection><span>Data: {{ contactType }}</span><br>Department:<department-selection id=department readonly ng-model=department></department-selection><span>Data : {{ department }}</span><br>Ethnicity:<ethnicity-selection id=ethnicity readonly ng-model=ethnicity></ethnicity-selection><span>Data: {{ ethnicity }}</span><br>Exam Board:<exam-board-selection id=examBoard readonly ng-model=examBoard></exam-board-selection><span>Data: {{ examBoard }}</span><br>Faculty:<faculty-selection id=faculty readonly ng-model=faculty></faculty-selection><span>Data: {{ faculty }}</span><br>Funding Model:<funding-model-selection id=fundingModel readonly ng-model=fundingModel></funding-model-selection><span>Data: {{ fundingModel }}</span><br>Source of Funding:<source-of-funding-selection id=sourceOfFunding readonly ng-model=sourceOfFunding></source-of-funding-selection><span>Data: {{ fundingModel }}</span><br>Gender:<gender-selection id=gender readonly ng-model=gender></gender-selection><span>Data: {{ gender }}</span><br>Level:<level-selection id=level readonly ng-model=level></level-selection><span>Data: {{ level }}</span><br>LLDD Health Problem:<lldd-health-problem-selection id=LLDDHealthProblem readonly ng-model=LLDDHealthProblem></lldd-health-problem-selection><span>Data: {{ LLDDHealthProblem }}</span><br>LLDD Health Problem Category:<lldd-health-problem-category-selection id=LLDDHealthProblemCategory readonly ng-model=LLDDHealthProblemCategory></lldd-health-problem-category-selection><span>Data: {{ LLDDHealthProblemCategory }}</span><br>Nationality:<nationality-selection id=nationality readonly ng-model=nationality></nationality-selection><span>Data: {{ nationality }}</span><br>Note Type:<note-type-selection id=noteType readonly ng-model=noteType></note-type-selection><span>Data: {{ noteType }}</span><br>Offer Type:<offer-type-selection id=offerType readonly ng-model=offerType></offer-type-selection><span>Data: {{ offerType }}</span><br>Outcome:<outcome-selection id=outcome readonly ng-model=outcome></outcome-selection><span>Data: {{ outcome }}</span><br>Period:<period-selection id=period readonly ng-model=period></period-selection><span>Data: {{ period }}</span><br>Possible Grade:<possible-grade-selection id=possibleGrades readonly ng-model=possibleGrades></possible-grade-selection><span>Data: {{ possibleGrades }}</span><br>Prior Attainment:<prior-attainment-selection id=priorAttainment readonly ng-model=priorAttainment></prior-attainment-selection><span>Data: {{ priorAttainment }}</span><br>Programme Type:<programme-type-selection id=programmeType readonly ng-model=programmeType></programme-type-selection><span>Data: {{ programmeType }}</span><br>RoomType:<room-type-selection id=roomType readonly ng-model=roomType></room-type-selection><span>Data: {{ roomType }}</span><br>Room:<room-selection id=room readonly ng-model=room></room-selection><span>Data: {{ room }}</span><br>RUI:<restricted-use-indicator-selection id=rui readonly ng-model=rui></restricted-use-indicator-selection><span>Data: {{ rui }}</span><br>School:<school-selection id=school readonly ng-model=school></school-selection><span>Data: {{ school }}</span><br>School Type:<school-type-selection id=schooLType readonly ng-model=schoolType></school-type-selection><span>Data: {{ schoolType }}</span><br>School Priority:<school-priority-selection id=schoolPriority readonly ng-model=schoolPriority></school-priority-selection><span>Data: {{ schoolPriority }}</span><br>Special Category:<special-category-selection id=specialCategory readonly ng-model=specialCategory></special-category-selection><span>Data: {{ specialCategory }}</span><br>Staff:<staff-selection id=staff readonly ng-model=staff></staff-selection><span>Data: {{ staff }}</span><br>Staff Type:<staff-type-selection id=staffType readonly ng-model=staffType></staff-type-selection><span>Data: {{ staffType }}</span><br>Student Type:<student-type-selection id=studentType readonly ng-model=studentType></student-type-selection><span>Data: {{ studentType }}</span><br>Title:<title-selection id=title readonly ng-model=title></title-selection><span>Data: {{ title }}</span><br>Tutor Group:<tutor-group-selection id=tutorGroup readonly ng-model=tutorGroup></tutor-group-selection><span>Data: {{ tutorGroup }}</span><br>Valid Tutor Groups:<valid-tutor-groups-selection id=tutorGroup readonly ng-model=tutorGroup></valid-tutor-groups-selection><span>Data: {{ tutorGroup }}</span><br>Withdrawal Reason:<withdrawal-reason-selection id=withdrawalReason readonly ng-model=withdrawalReason></withdrawal-reason-selection><span>Data: {{ withdrawalReason }}</span><br>Year Group:<year-group-selection id=yearGroup readonly ng-model=yearGroup></year-group-selection><span>Data: {{ yearGroup }}</span><br>EntryQualification:<entry-qualification-selection id=entryQualification readonly ng-model=entryQualification></entry-qualification-selection><span>Data: {{ entryQualification }}</span><br>EntryQualificationType:<entry-qualification-type-selection id=entryQualificationType readonly ng-model=entryQualificationType></entry-qualification-type-selection><span>Data: {{ entryQualificationType }}</span><br>Correspondence Type:<correspondence-type-selection id=correspondenceType readonly ng-model=correspondenceType></correspondence-type-selection><span>Data: {{ correspondenceType }}</span><br>ILPInterview Type:<ilp-interview-type-selection id=iLPInterviewType readonly ng-model=iLPInterviewType></ilp-interview-type-selection><span>Data: {{ iLPInterviewType }}</span><br>LetterType:<letter-type-selection id=letterType readonly ng-model=letterType></letter-type-selection><span>Data: {{ letterType }}</span><br>Attendance Monitoring:<attendance-monitoring-selection id=attendanceMonitoring readonly ng-model=attendanceMonitoring></attendance-monitoring-selection><span>Data: {{ attendanceMonitoring }}</span><br>Punctuality Monitoring:<punctuality-monitoring-selection id=punctualityMonitoring readonly ng-model=punctualityMonitoring></punctuality-monitoring-selection><span>Data: {{ punctualityMonitoring }}</span><br>Central Monitoring:<central-monitoring-selection id=centralMonitoring readonly ng-model=centralMonitoring></central-monitoring-selection><span>Data: {{ centralMonitoring }}</span><br>Student Remark Permission:<student-remark-permission-selection id=studentRemarkPermission readonly ng-model=studentRemarkPermission></student-remark-permission-selection><span>Data: {{ studentRemarkPermission }}</span><br><role-selection id=role readonly ng-model=role></role-selection><span>Data: {{ roles }}</span><br>Roles:</div>");
  $templateCache.put("js/modules/tests/views/studentAdmissions.html",
    "<h1>Student Admissions Details</h1><input ng-model=ctrl.studentId><button class=\"btn btn-sm\" ng-click=ctrl.getStudentAdmissions()>Get StudentAdmissionsDetails</button><br><student-admissions-details student-admissions=ctrl.studentAdmissions></student-admissions-details>");
  $templateCache.put("js/modules/tests/views/studentBursary.html",
    "<h1>Student Bursary Details</h1><input ng-model=ctrl.studentId><button class=\"btn btn-sm\" ng-click=ctrl.getStudentBursary()>Get StudentBursaryDetails</button><br><student-bursary-details student-bursary=ctrl.studentBursary></student-bursary-details><h1>Student Bursary editor</h1><student-bursary-editor student-id=ctrl.studentId student-bursary=ctrl.studentBursary></student-bursary-editor>");
  $templateCache.put("js/modules/tests/views/studentCollegeFundPayment.html",
    "<h1>Student CollegeFundPayment Details</h1><college-fund-payment-details college-fund-payment=ctrl.collegeFundPayment></college-fund-payment-details><h1>Student CollegeFundPayment editor</h1><college-fund-payment-editor student-id=ctrl.studentId college-fund-payment=ctrl.collegeFundPayment></college-fund-payment-editor>");
  $templateCache.put("js/modules/tests/views/studentContactPreferences.html",
    "<h1>Student Contact Preference Details</h1><input ng-model=ctrl.studentId><button class=\"btn btn-sm\" ng-click=ctrl.getStudent()>Get StudentContactPreferenceDetails</button><br><h1>Student Contact Preference Editor</h1><student-contact-preferences-editor student-id=ctrl.studentId student=ctrl.student></student-contact-preferences-editor>");
  $templateCache.put("js/modules/tests/views/studentEntryQualification.html",
    "<h3>Student Entry Qualification Table(Readonly)</h3><entry-qualifications-table entry-qualifications=ctrl.entryQualifications></entry-qualifications-table><h3>Student Entry Qualification Editor</h3><entry-qualifications-editor student-id=ctrl.studentId entry-qualifications=ctrl.entryQualifications></entry-qualifications-editor>");
  $templateCache.put("js/modules/tests/views/studentInterimReport.html",
    "<h3>Student Interim Report Table(Readonly)</h3><student-interim-reports-table student-interim-reports=ctrl.studentInterimReports></student-interim-reports-table>");
  $templateCache.put("js/modules/tests/views/studentLearningSupport.html",
    "<h3>Student Learning Support(Readonly)</h3><student-learning-support-details student-learning-support=ctrl.studentLearningSupport></student-learning-support-details>");
  $templateCache.put("js/modules/tests/views/studentMedicalNotes.html",
    "<h1>Student Medical Notes</h1><input ng-model=ctrl.studentId><button class=\"btn btn-sm\" ng-click=ctrl.getStudent()>Get Student Medical Details</button><br><medical-notes-details student=ctrl.student></medical-notes-details><h1>Medical Notes Editor</h1><medical-notes-editor student-id=ctrl.studentId student=ctrl.student></medical-notes-editor>");
  $templateCache.put("js/modules/tests/views/studentOverallAttendance.html",
    "<h1>Student OverallAttendance Details</h1><input ng-model=ctrl.studentId><button class=\"btn btn-sm\" ng-click=ctrl.getStudentOverallAttendance()>Get StudentOverallAttendanceDetails</button><br><student-overall-attendance-details student-overall-attendance=ctrl.studentOverallAttendance></student-overall-attendance-details>");
  $templateCache.put("js/modules/tests/views/studentSpecialCategory.html",
    "<h3>StudentSpecialCategory Details</h3><input ng-model=ctrl.studentId><button class=\"btn btn-sm\" ng-click=ctrl.getStudentSpecialCategory()>StudentSpecialCategory()</button><br><student-special-category-details student-special-categories=ctrl.studentSpecialCategories></student-special-category-details><h3>StudentSpecialCategory Editor</h3><student-special-category-editor student-id=ctrl.studentId student-special-categories=ctrl.studentSpecialCategories></student-special-category-editor>");
  $templateCache.put("js/modules/tests/views/studentSummary.html",
    "<h1>Student Summary Details</h1><input ng-model=ctrl.studentId><button class=\"btn btn-sm\" ng-click=ctrl.getStudent()>Get StudentDetails</button><br><student-summary student=ctrl.student></student-summary><h1>Student Summary Editor</h1><student-summary-editor student-id=ctrl.studentId student=ctrl.student></student-summary-editor>");
  $templateCache.put("js/modules/tests/views/studentWarning.html",
    "<h1>Student Warning Details</h1><input ng-model=ctrl.studentId><button class=\"btn btn-sm\" ng-click=ctrl.getStudentWarning()>Get StudentWarningDetails</button><br><student-warning-details student-warning=ctrl.studentWarning></student-warning-details><h1>Student Warning editor</h1><student-warning-editor student-id=ctrl.studentId student-warning=ctrl.studentWarning></student-warning-editor>");
  $templateCache.put("js/modules/tests/views/studentYear.html",
    "<h1>StudentYear Details</h1><input ng-model=ctrl.studentId><button class=\"btn btn-sm\" ng-click=ctrl.getStudentYear()>Get StudentYearDetails</button><br><student-year-details student-year=ctrl.studentYear></student-year-details><h1>Student Year editor</h1><student-year-editor student-id=ctrl.studentId year-id=ctrl.yearId student-year=ctrl.studentYear></student-year-editor>");
  $templateCache.put("js/modules/tests/views/tables.html",
    "<h1>Tables Tests</h1><option-entries option-entries=ctrl.optionEntries show-all-entries=false show-board=false show-option=true></option-entries><option-entries option-entries=ctrl.optionEntries show-all-entries=true show-board=true></option-entries><option-entries option-entries=ctrl.optionEntries show-all-entries=true show-option=true show-board=true></option-entries><settings-editor settings=ctrl.data></settings-editor><text-look-up-editor text-look-ups=ctrl.textLookups></text-look-up-editor>");
  $templateCache.put("js/modules/tests/views/tutorGroupRemarkPermissions.html",
    "<h1>Student Remark Permission Table</h1><input ng-model=ctrl.tutorGroupId><button class=\"btn btn-sm\" ng-click=ctrl.getTutorGroupRemarkPermissions()>Get Student Remark Permission</button><br><tutor-group-remark-permission-table remark-permission=ctrl.remarkPermission></tutor-group-remark-permission-table>");
  $templateCache.put("js/modules/tests/views/wordGenerator.html",
    "<h1>WordGenerator</h1><word-generator word-generator=ctrl.wordGenerator></word-generator>");
}]);
